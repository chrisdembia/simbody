<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>Array.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Array_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="ExceptionMacros_8h" name="ExceptionMacros.h" local="yes" imported="no">SimTKcommon/internal/ExceptionMacros.h</includes>
    <includes id="Serialize_8h" name="Serialize.h" local="yes" imported="no">SimTKcommon/internal/Serialize.h</includes>
    <class kind="struct">SimTK::ArrayIndexTraits</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; int &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned long &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; long &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned short &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; short &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned char &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; signed char &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; char &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; bool &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned long long &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; long long &gt;</class>
    <class kind="class">SimTK::ArrayViewConst_</class>
    <class kind="class">SimTK::ArrayView_</class>
    <class kind="class">SimTK::Array_</class>
    <namespace>SimTK</namespace>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>readArrayFromStreamHelper</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a47ace16fb1192b2579d3b9bf9aaa8062</anchor>
      <arglist>(std::istream &amp;in, bool isFixedSize, Array_&lt; T, X &gt; &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Assembler.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Assembler_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="MultibodySystem_8h" name="MultibodySystem.h" local="yes" imported="no">simbody/internal/MultibodySystem.h</includes>
    <includes id="SimbodyMatterSubsystem_8h" name="SimbodyMatterSubsystem.h" local="yes" imported="no">simbody/internal/SimbodyMatterSubsystem.h</includes>
    <class kind="class">SimTK::Assembler</class>
    <class kind="class">SimTK::AssemblyCondition</class>
    <class kind="class">SimTK::QValue</class>
    <class kind="class">SimTK::Markers</class>
    <class kind="struct">SimTK::Markers::Marker</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad01a035528e0f8852bdf001912d4e7a2</anchor>
      <arglist>(AssemblyConditionIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AtomicInteger.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>AtomicInteger_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::AtomicInteger</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a291561380e9c21a878696591216b3bf6</anchor>
      <arglist>(std::ostream &amp;stream, const AtomicInteger &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>basics.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/</path>
    <filename>basics_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="Constants_8h" name="Constants.h" local="yes" imported="no">SimTKcommon/Constants.h</includes>
  </compound>
  <compound kind="file">
    <name>BicubicSurface.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>BicubicSurface_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <includes id="Geo__BicubicHermitePatch_8h" name="Geo_BicubicHermitePatch.h" local="yes" imported="no">simmath/internal/Geo_BicubicHermitePatch.h</includes>
    <includes id="Geo__BicubicBezierPatch_8h" name="Geo_BicubicBezierPatch.h" local="yes" imported="no">simmath/internal/Geo_BicubicBezierPatch.h</includes>
    <class kind="class">SimTK::BicubicSurface</class>
    <class kind="class">SimTK::BicubicSurface::PatchHint</class>
    <class kind="class">SimTK::BicubicFunction</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>BigMatrix.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/BigMatrix/include/SimTKcommon/internal/</path>
    <filename>BigMatrix_8h</filename>
    <includes id="Scalar_8h" name="Scalar.h" local="yes" imported="no">SimTKcommon/Scalar.h</includes>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="MatrixHelper_8h" name="MatrixHelper.h" local="yes" imported="no">SimTKcommon/internal/MatrixHelper.h</includes>
    <includes id="MatrixCharacteristics_8h" name="MatrixCharacteristics.h" local="yes" imported="no">SimTKcommon/internal/MatrixCharacteristics.h</includes>
    <class kind="class">SimTK::MatrixBase</class>
    <class kind="struct">SimTK::MatrixBase::EltResult</class>
    <class kind="class">SimTK::VectorBase</class>
    <class kind="struct">SimTK::VectorBase::EltResult</class>
    <class kind="class">SimTK::RowVectorBase</class>
    <class kind="struct">SimTK::RowVectorBase::EltResult</class>
    <class kind="class">SimTK::MatrixView_</class>
    <class kind="class">SimTK::DeadMatrixView_</class>
    <class kind="class">SimTK::Matrix_</class>
    <class kind="class">SimTK::VectorView_</class>
    <class kind="class">SimTK::Vector_</class>
    <class kind="class">SimTK::RowVectorView_</class>
    <class kind="class">SimTK::RowVector_</class>
    <class kind="class">SimTK::VectorIterator</class>
    <namespace>SimTK</namespace>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>readVectorFromStreamHelper</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a212b048ff8e66e44b617732b916e9cff</anchor>
      <arglist>(std::istream &amp;in, bool isFixedSize, Vector_&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a424ccc5c7500fa0548d766f8e04191d4</anchor>
      <arglist>(const MatrixBase&lt; E1 &gt; &amp;l, const MatrixBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4023efabadf84bb7dee8ed4b2d99e34</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9a5fe736515048f8dad49b69d840cb62</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const MatrixBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a195414de1c9364a719375c0f6f5900d7</anchor>
      <arglist>(const MatrixBase&lt; E1 &gt; &amp;l, const MatrixBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1551d9cbd51313d4ee58a6a64b29e644</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a88f8f9f66ddadda6750df0f79b2c2971</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const MatrixBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abeff0b397e256732a5de56eb20999afd</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8bbc0c80559fc15d0779d732f34fa01b</anchor>
      <arglist>(const typename CNT&lt; E &gt;::StdNumber &amp;l, const MatrixBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a289810e16cb099ab1e48a2ad94882077</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab9aded904b29fe257993fce1dbf07799</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a190412a7458fbffe6f6be9cbbd998862</anchor>
      <arglist>(int l, const MatrixBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a911291adf01e319e47e39bfc5cd3a010</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa72cd90e039e67ea84dd94b705e13f32</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;l, const VectorBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad6ec3d05326a377c3f412d05a0b39393</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5125c5118ab51cb7216c138c45b153c2</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const VectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab1391b89bc1e678bd3a3c44f47269659</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;l, const VectorBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4e5ca16602ab5f80fa95a759aa9e5311</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aecf912181a0bf1da6652eadaab7bf107</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const VectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a932398998e7753d96ef367d4396d3147</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5cf35788e7066974215026e0a087006c</anchor>
      <arglist>(const typename CNT&lt; E &gt;::StdNumber &amp;l, const VectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3a02087934aef01884a1e469836fd525</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aff769b119b5770a48b9da106131e4e75</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e1d3a844ed5120b8e2a15c130b10eaa</anchor>
      <arglist>(int l, const VectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6b140c1bec3abdfeee1437d579f140d</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Vec&lt; M, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a363e4a17944f5d3da4caefe981e570d4</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;v, const Vec&lt; M, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename Vec&lt; M, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa41af0bcb0b952f0921e5a914a31f730</anchor>
      <arglist>(const Vec&lt; M, E2, S &gt; &amp;s, const VectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Row&lt; N, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51727de4ff113ab21b1c2e1235073aab</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;v, const Row&lt; N, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename Row&lt; N, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a36096f5b271f9748f06407c03d1e1a17</anchor>
      <arglist>(const Row&lt; N, E2, S &gt; &amp;s, const VectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Mat&lt; M, N, E2, S1, S2 &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb9c78559638250dc81036cacf576487</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;v, const Mat&lt; M, N, E2, S1, S2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename Mat&lt; M, N, E2, S1, S2 &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a46434d0dbc38563d716c09baee89989a</anchor>
      <arglist>(const Mat&lt; M, N, E2, S1, S2 &gt; &amp;s, const VectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; SymMat&lt; M, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aac9993fe87e6ade910df29f52522cb49</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;v, const SymMat&lt; M, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename SymMat&lt; M, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a734a6b33c1d724767acf1dacc424e871</anchor>
      <arglist>(const SymMat&lt; M, E2, S &gt; &amp;s, const VectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad36aee4e52f2485774e9717829694f04</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;l, const RowVectorBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a07966cc586ef14f60b0f46505b898410</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9fad7d837633347cf13f05b6a647bcf2</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const RowVectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a85af56cdad9d60457b1e1109320d144e</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;l, const RowVectorBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9b385484631779dafe07ff11de9e9895</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a41a08390497cfcafe72a52340f42b3a8</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const RowVectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12f858b65031448faa2e7455429155e4</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a87b862f6d4af89dcbf8958ee5d028e46</anchor>
      <arglist>(const typename CNT&lt; E &gt;::StdNumber &amp;l, const RowVectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac636d4a75f2b56b58672cb84ae3044c2</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af88221d71c1925dedddb5fdd9105739c</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa47f86e9449a8a1990e185cdef9e11d5</anchor>
      <arglist>(int l, const RowVectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae533133c378e9c7b2c8e9157a32863e7</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Vec&lt; M, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aea2313f00d30b7b4a0ddd72c0f6e902d</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;v, const Vec&lt; M, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename Vec&lt; M, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9a08e0cf9ff85d92a07cc41e36a6b013</anchor>
      <arglist>(const Vec&lt; M, E2, S &gt; &amp;s, const RowVectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Row&lt; N, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a816f67b0fb94d176da9b940be021cc68</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;v, const Row&lt; N, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename Row&lt; N, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a64c70cff618e9b27926d4bc3c858914b</anchor>
      <arglist>(const Row&lt; N, E2, S &gt; &amp;s, const RowVectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Mat&lt; M, N, E2, S1, S2 &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a982878253ed29f1ec7274b3bbf0e1acd</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;v, const Mat&lt; M, N, E2, S1, S2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename Mat&lt; M, N, E2, S1, S2 &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6b1459d255f59563b7bb7e5e03468a04</anchor>
      <arglist>(const Mat&lt; M, N, E2, S1, S2 &gt; &amp;s, const RowVectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; SymMat&lt; M, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92ce6d3f70e342789d8bbffecb6992d8</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;v, const SymMat&lt; M, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename SymMat&lt; M, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aba3396b8cab38442ea690604cd5a5761</anchor>
      <arglist>(const SymMat&lt; M, E2, S &gt; &amp;s, const RowVectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8bfbda32246389aa290f1f01b55f46ca</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;r, const VectorBase&lt; E2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a59d0492bd6b062babc3dbb96a25ec0f5</anchor>
      <arglist>(const MatrixBase&lt; E1 &gt; &amp;m, const VectorBase&lt; E2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad6264834e01607912cf263956c16c1f0</anchor>
      <arglist>(const MatrixBase&lt; E1 &gt; &amp;m1, const MatrixBase&lt; E2 &gt; &amp;m2)</arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; Real &gt;</type>
      <name>Vector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acd32706a1c8d3ee7c84c56bf048e7f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; float &gt;</type>
      <name>fVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef18f21977ee9be83a38f30111bf3277</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; double &gt;</type>
      <name>dVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a729bced59a02be5c3b97561d4b8da486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; Complex &gt;</type>
      <name>ComplexVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af68b34cccce7b8913322671b9f65fbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; fComplex &gt;</type>
      <name>fComplexVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0aa72498634f64805b008e92bcd99e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; dComplex &gt;</type>
      <name>dComplexVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abdf1abb9eb717e56398d28ddb333f869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; Real &gt;</type>
      <name>VectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a81943f03ae52dedc5d9952d26e81a17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; float &gt;</type>
      <name>fVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a33dee6c36141c9b485e5b11f2dfb4cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; double &gt;</type>
      <name>dVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab73d4a4af66bba8219e7007444cfcbbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; Complex &gt;</type>
      <name>ComplexVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93b3f84573d5281d3d6a94b9941e7753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; fComplex &gt;</type>
      <name>fComplexVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1989b4fbd0ebb847b4b974fb19aaebc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; dComplex &gt;</type>
      <name>dComplexVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afc566a9c5cbaac8c53b5b11d704efaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; Real &gt;</type>
      <name>RowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a736e7a9151ea9c2d5fda5847f00d1b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; float &gt;</type>
      <name>fRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a784bf198e13d61fb90f1eeb62aaa90e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; double &gt;</type>
      <name>dRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9330b3edd4a61c7a23d64ac86da30354</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; Complex &gt;</type>
      <name>ComplexRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeb3e92c8fb03f0688e0395359017c146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; fComplex &gt;</type>
      <name>fComplexRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a927f3193f2d2c4a37fbf3df6795e2c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; dComplex &gt;</type>
      <name>dComplexRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a45a24504ea257045d2e1448b7a1ff4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; Real &gt;</type>
      <name>RowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad9f9b8fd90cf619ce8c1896792d964ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; float &gt;</type>
      <name>fRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aabea062aaf671e305e0e4c77a2d3bba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; double &gt;</type>
      <name>dRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a47b5ab997e5205b77f73cf2b5abaf95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; Complex &gt;</type>
      <name>ComplexRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9150e9f496423939de64f3cc741c002b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; fComplex &gt;</type>
      <name>fComplexRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af5c5cd651e82f8596d9d909fe0ae38ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; dComplex &gt;</type>
      <name>dComplexRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7fb95843f48a35d88412a3e96f4afb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; Real &gt;</type>
      <name>Matrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a68f30258553b9b50cb6aefa6d82e3e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; float &gt;</type>
      <name>fMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3fe24e5a6d2228a39594aebd739e8581</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; double &gt;</type>
      <name>dMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae648d5665c013c75b227c70212d61d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; Complex &gt;</type>
      <name>ComplexMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04b7d0f439927eba951b722bd27c6b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; fComplex &gt;</type>
      <name>fComplexMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5e22e0fb550e8558fcdc4d56df48e727</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; dComplex &gt;</type>
      <name>dComplexMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1aea5e95da4219a6b1b5eb66ded4a91d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; Real &gt;</type>
      <name>MatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aae0b3a98c7410467c52ed58ea48a676b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; float &gt;</type>
      <name>fMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6d0823e6c74c86a20c3ae794e1515f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; double &gt;</type>
      <name>dMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a485d29e208e9ce16cf90e27d545fae8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; Complex &gt;</type>
      <name>ComplexMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab4a34667dd2d79b39089b1b9468e093e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; fComplex &gt;</type>
      <name>fComplexMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2fdb010134303ad973b2c24525f457e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; dComplex &gt;</type>
      <name>dComplexMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a45da068c6e5c1ec984c631a8f87e3dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2b08d1545f0d1cd18dcfbd1f9e37468c</anchor>
      <arglist>(std::istream &amp;in, VectorView_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0b1e432c0891a7b1e6d17b40ad1ba9c5</anchor>
      <arglist>(std::istream &amp;in, Vector_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acc8a71303964ef58fda4d9029ca909aa</anchor>
      <arglist>(std::istream &amp;in, RowVectorView_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae81dc6f49097a495d8d60d7a97bb5b7c</anchor>
      <arglist>(std::istream &amp;in, RowVector_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5355c4484f91b7a50c68d1c7f48e595e</anchor>
      <arglist>(std::istream &amp;in, MatrixView_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae5a47c7697cda37c694c6dfeed7386c3</anchor>
      <arglist>(std::istream &amp;in, Matrix_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec2cd770dce0790e2a7730fa3bc6e032</anchor>
      <arglist>(std::istream &amp;in, Matrix_&lt; E &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Body.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Body_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="ContactSurface_8h" name="ContactSurface.h" local="yes" imported="no">simbody/internal/ContactSurface.h</includes>
    <class kind="class">SimTK::Body</class>
    <class kind="class">SimTK::Body::Rigid</class>
    <class kind="class">SimTK::Body::Linear</class>
    <class kind="class">SimTK::Body::Particle</class>
    <class kind="class">SimTK::Body::Massless</class>
    <class kind="class">SimTK::Body::Ground</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>CablePath.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>CablePath_8h</filename>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::CablePath</class>
    <class kind="class">SimTK::CableObstacle</class>
    <class kind="class">SimTK::CableObstacle::ViaPoint</class>
    <class kind="class">SimTK::CableObstacle::Surface</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af22926f727b68275e357eef1e5af82af</anchor>
      <arglist>(CableObstacleIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CableSpring.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>CableSpring_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <includes id="CablePath_8h" name="CablePath.h" local="yes" imported="no">simbody/internal/CablePath.h</includes>
    <class kind="class">SimTK::CableSpring</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>CableTrackerSubsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>CableTrackerSubsystem_8h</filename>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::CableTrackerSubsystem</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4ec111359d375e6e684896869ac2630e</anchor>
      <arglist>(CablePathIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ClonePtr.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>ClonePtr_8h</filename>
    <class kind="class">SimTK::ClonePtr</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>CMakeCCompilerId.c</name>
    <path>/home/travis/build/chrisdembia/simbody/CMakeFiles/CompilerIdC/</path>
    <filename>CMakeCCompilerId_8c</filename>
    <member kind="define">
      <type>#define</type>
      <name>COMPILER_ID</name>
      <anchorfile>CMakeCCompilerId_8c.html</anchorfile>
      <anchor>a81dee0709ded976b2e0319239f72d174</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLATFORM_ID</name>
      <anchorfile>CMakeCCompilerId_8c.html</anchorfile>
      <anchor>adbc5372f40838899018fadbc89bd588b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARCHITECTURE_ID</name>
      <anchorfile>CMakeCCompilerId_8c.html</anchorfile>
      <anchor>aba35d0d200deaeb06aee95ca297acb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>CMakeCCompilerId_8c.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>info_compiler</name>
      <anchorfile>CMakeCCompilerId_8c.html</anchorfile>
      <anchor>a4b0efeb7a5d59313986b3a0390f050f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>info_platform</name>
      <anchorfile>CMakeCCompilerId_8c.html</anchorfile>
      <anchor>a2321403dee54ee23f0c2fa849c60f7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>info_arch</name>
      <anchorfile>CMakeCCompilerId_8c.html</anchorfile>
      <anchor>a59647e99d304ed33b15cb284c27ed391</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CMakeCXXCompilerId.cpp</name>
    <path>/home/travis/build/chrisdembia/simbody/CMakeFiles/CompilerIdCXX/</path>
    <filename>CMakeCXXCompilerId_8cpp</filename>
    <member kind="define">
      <type>#define</type>
      <name>COMPILER_ID</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a81dee0709ded976b2e0319239f72d174</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PLATFORM_ID</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>adbc5372f40838899018fadbc89bd588b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARCHITECTURE_ID</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>aba35d0d200deaeb06aee95ca297acb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>info_compiler</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a4b0efeb7a5d59313986b3a0390f050f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>info_platform</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a2321403dee54ee23f0c2fa849c60f7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>info_arch</name>
      <anchorfile>CMakeCXXCompilerId_8cpp.html</anchorfile>
      <anchor>a59647e99d304ed33b15cb284c27ed391</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CollisionDetectionAlgorithm.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>CollisionDetectionAlgorithm_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="ContactGeometry_8h" name="ContactGeometry.h" local="yes" imported="no">simmath/internal/ContactGeometry.h</includes>
    <includes id="Contact_8h" name="Contact.h" local="yes" imported="no">simmath/internal/Contact.h</includes>
    <class kind="class">SimTK::CollisionDetectionAlgorithm</class>
    <class kind="struct">SimTK::CollisionDetectionAlgorithm::AlgorithmMap</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::HalfSpaceSphere</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::HalfSpaceEllipsoid</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::SphereSphere</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::HalfSpaceTriangleMesh</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::SphereTriangleMesh</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::TriangleMeshTriangleMesh</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::ConvexConvex</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Simbody/include/simbody/internal/common.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Simbody_2include_2simbody_2internal_2common_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <class kind="class">SimTK::Exception::APIMethodFailed</class>
    <class kind="class">SimTK::Exception::RepLevelException</class>
    <class kind="class">SimTK::Exception::MobilizerCantExactlyRepresentRequestedQuantity</class>
    <class kind="class">SimTK::Exception::NewtonRaphsonFailure</class>
    <class kind="class">SimTK::Exception::LoopConstraintConstructionFailure</class>
    <namespace>SimTK</namespace>
    <namespace>SimTK::Exception</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SIMBODY_EXPORT</name>
      <anchorfile>Simbody_2include_2simbody_2internal_2common_8h.html</anchorfile>
      <anchor>aa0f7284742cf4beb9809d72f02f470b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MobilizedBodyIndex</type>
      <name>MobodIndex</name>
      <anchorfile>group__UniqueIndexTypes.html</anchorfile>
      <anchor>gac0fa07a3fc0ba26ac3d9ffd3993b6713</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SimTK_version_simbody</name>
      <anchorfile>Simbody_2include_2simbody_2internal_2common_8h.html</anchorfile>
      <anchor>a8cd9594145e8da0979ced8758c7ef8f0</anchor>
      <arglist>(int *major, int *minor, int *build)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SimTK_about_simbody</name>
      <anchorfile>Simbody_2include_2simbody_2internal_2common_8h.html</anchorfile>
      <anchor>ad601da6e74269560c8369d46dd8a029e</anchor>
      <arglist>(const char *key, int maxlen, char *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abe510c16f52a2d389640dc83ce5e161e</anchor>
      <arglist>(MobilizedBodyIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MobilizedBodyIndex</type>
      <name>GroundIndex</name>
      <anchorfile>group__UniqueIndexTypes.html</anchorfile>
      <anchor>ga27dd884b9a84538ba38fa07c4d3bed84</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abd2fedaf8c807420289afb4200ba8c13</anchor>
      <arglist>(ConstraintIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76612fea435b3fbac4a66dae18097eba</anchor>
      <arglist>(ParticleIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aab6f0a444b8ee2eac6864f1eef35db5b</anchor>
      <arglist>(AncestorConstrainedBodyPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abfda3cbf4e3f6970d43da1e8a1048c41</anchor>
      <arglist>(USquaredIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad261700b5a60d35fee7e6ca49bfe718d</anchor>
      <arglist>(QuaternionPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa291718064638af503fc3082e02bd212</anchor>
      <arglist>(MobodQPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa662d29ffa8ccbf03413efe7b7f0636c</anchor>
      <arglist>(PresQPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab6fe6278416d4d238af6c72a5c287584</anchor>
      <arglist>(PresUPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a722c2bc5017d69aa5abcc126436610d8</anchor>
      <arglist>(PresUDotPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af7b4cddeaf2881feed40eb01ad1e0665</anchor>
      <arglist>(PresForcePoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a981a19affd3adc4ea7beb987e80ef59c</anchor>
      <arglist>(MobilizerQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acdf002912824171d4c6d8467a62d9434</anchor>
      <arglist>(MobilizerUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4a7da8510709639e7be839c38f35870</anchor>
      <arglist>(ConstrainedBodyIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab8997771a008f37f4d42f84fa55d5f84</anchor>
      <arglist>(ConstrainedMobilizerIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ef0c966172d07d27424ab57b308358d</anchor>
      <arglist>(ConstrainedQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5317d1e463ca45d8fbc00908b53aa518</anchor>
      <arglist>(ConstrainedUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90d69fa5e92061ab7001df04f42b1bfc</anchor>
      <arglist>(ParticipatingQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac07eedd349f1e3de1adfe15066a342c2</anchor>
      <arglist>(ParticipatingUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04996df0c9d3e3ad65a67aff43fb1793</anchor>
      <arglist>(SubtreeBodyIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SubtreeBodyIndex</type>
      <name>SubtreeAncestorIndex</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad2da02b7ad370dc7b2f39006a0bc5bd9</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a908a1a40f9f193731390fb20ff62ec7b</anchor>
      <arglist>(SubtreeQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a532f71b01d40a242d9b45a297902b4af</anchor>
      <arglist>(SubtreeUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3c635935dd952ec5a51f393f5881d446</anchor>
      <arglist>(ForceIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f8b4ac025a264b351fdef2b47a78471</anchor>
      <arglist>(ContactSetIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimTKcommon/include/SimTKcommon/internal/common.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h</filename>
    <namespace>SimTK</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEFAULT_PRECISION</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>ad1b7c549db323942591b6ca95158437b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEBUG</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>aa0d4f8de62a78d8a4a9a27893915ce29</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEBUG1</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>a05959b808cf4a656f6071644b3a883ee</anchor>
      <arglist>(s, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEBUG2</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>a1f51a75b6fa8550cc80878084e3859ff</anchor>
      <arglist>(s, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEBUG3</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>a0f865fbaed2bc16da59ff3a853637684</anchor>
      <arglist>(s, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEBUG4</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>a84b59e5d458cc116f65aa723ddddf285</anchor>
      <arglist>(s, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SimTKCOMMON_EXPORT</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>a0d6328a25a1642485423dcbe6d450a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>SimTK_Real</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>a609c1052c1f2ca0d1289affa6d54af4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SimTK_version_SimTKcommon</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>aa3b937f5d36adc0d575230ec1677be0f</anchor>
      <arglist>(int *major, int *minor, int *build)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SimTK_about_SimTKcommon</name>
      <anchorfile>SimTKcommon_2include_2SimTKcommon_2internal_2common_8h.html</anchorfile>
      <anchor>abfcf9088ea1bc8db75c6ad20ce887df8</anchor>
      <arglist>(const char *key, int maxlen, char *value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimTKmath/include/simmath/internal/common.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/include/simmath/internal/</path>
    <filename>SimTKmath_2include_2simmath_2internal_2common_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <class kind="class">SimTK::Exception::OptimizerFailed</class>
    <class kind="class">SimTK::Exception::UnrecognizedParameter</class>
    <class kind="class">SimTK::Exception::IllegalLapackArg</class>
    <class kind="class">SimTK::Exception::IncorrectArrayLength</class>
    <class kind="class">SimTK::Exception::SingularMatrix</class>
    <class kind="class">SimTK::Exception::ConvergedFailed</class>
    <class kind="class">SimTK::Exception::NotPositiveDefinite</class>
    <namespace>SimTK</namespace>
    <namespace>SimTK::Exception</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SIMMATH_EXPORT</name>
      <anchorfile>SimTKmath_2include_2simmath_2internal_2common_8h.html</anchorfile>
      <anchor>a5696280cbb2e30d11fd3755c78efc519</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SimTK_version_simmath</name>
      <anchorfile>SimTKmath_2include_2simmath_2internal_2common_8h.html</anchorfile>
      <anchor>aa442a42d9604e566cf8d74d6975affdf</anchor>
      <arglist>(int *major, int *minor, int *build)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SimTK_about_simmath</name>
      <anchorfile>SimTKmath_2include_2simmath_2internal_2common_8h.html</anchorfile>
      <anchor>a4dc3b105016c2938a7bc51cf214eeceb</anchor>
      <arglist>(const char *key, int maxlen, char *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>POSITIVE_INF</name>
      <anchorfile>SimTKmath_2include_2simmath_2internal_2common_8h.html</anchorfile>
      <anchor>a6a92dba8429c483090656f78daa2590e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>NEGATIVE_INF</name>
      <anchorfile>SimTKmath_2include_2simmath_2internal_2common_8h.html</anchorfile>
      <anchor>a10cc23b244d496fb2b631ba67d830422</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompliantContactSubsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>CompliantContactSubsystem_8h</filename>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="ForceSubsystem_8h" name="ForceSubsystem.h" local="yes" imported="no">simbody/internal/ForceSubsystem.h</includes>
    <class kind="class">SimTK::CompliantContactSubsystem</class>
    <class kind="class">SimTK::ContactForce</class>
    <class kind="class">SimTK::ContactDetail</class>
    <class kind="class">SimTK::ContactPatch</class>
    <class kind="class">SimTK::ContactForceGenerator</class>
    <class kind="class">SimTK::ContactForceGenerator::HertzCircular</class>
    <class kind="class">SimTK::ContactForceGenerator::HertzElliptical</class>
    <class kind="class">SimTK::ContactForceGenerator::ElasticFoundation</class>
    <class kind="class">SimTK::ContactForceGenerator::DoNothing</class>
    <class kind="class">SimTK::ContactForceGenerator::ThrowError</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a306139f1a6a0d5bf28030ca561aa0370</anchor>
      <arglist>(std::ostream &amp;o, const ContactForce &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae6dbccaa587ff7db32a3729dfc78397a</anchor>
      <arglist>(std::ostream &amp;o, const ContactDetail &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CompositeNumericalTypes.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Scalar/include/SimTKcommon/internal/</path>
    <filename>CompositeNumericalTypes_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::CNT</class>
    <class kind="struct">SimTK::CNT::Result</class>
    <class kind="struct">SimTK::CNT::Substitute</class>
    <namespace>SimTK</namespace>
    <member kind="enumvalue">
      <name>SCALAR_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46aab42171825d1c1087bdea2e0dde3d1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCALAR_COMPOSITE_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46ae6fc3303d3ca942a2cf25680b607f3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPOSITE_COMPOSITE_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46a3be7821f44ee95cd1896f09b7e5b4175</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPOSITE_3_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46a26c7854937dfaa25cc8b5aff5a6d367c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_RESOLVED_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46af1be5f4d29c00737dfc358cecd7fb6a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conjugate.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Scalar/include/SimTKcommon/internal/</path>
    <filename>conjugate_8h</filename>
    <class kind="struct">SimTK::Wider</class>
    <class kind="struct">SimTK::Wider&lt; float, float &gt;</class>
    <class kind="struct">SimTK::Wider&lt; float, double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; double, float &gt;</class>
    <class kind="struct">SimTK::Wider&lt; double, double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; float, long double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; double, long double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; long double, float &gt;</class>
    <class kind="struct">SimTK::Wider&lt; long double, double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; long double, long double &gt;</class>
    <class kind="class">SimTK::conjugate</class>
    <class kind="class">SimTK::conjugate&lt; float &gt;</class>
    <class kind="class">SimTK::conjugate&lt; double &gt;</class>
    <class kind="class">SimTK::conjugate&lt; long double &gt;</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae403ebce59ddb8964c46bde2bc67d06e</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad35701a88965345097a468543b876499</anchor>
      <arglist>(int r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae96925663019d5369f9872a071dcc8ac</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0f8ea407c8d6fa04198cc8dcf4d77ec0</anchor>
      <arglist>(const double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0fe0dbac87f2f2d94577c6aa95b840eb</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a87ad5e9505e6eafbdd25bccd939de9e8</anchor>
      <arglist>(const long double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1cbf94d8ce889b913bcb08d750a05ff4</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac46015e914c2e6eaa82bbbbe72e67a02</anchor>
      <arglist>(int r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae6554d577fa862ac378f2c7730094671</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab3ce79974e9225c9ce57fa91ed4f711e</anchor>
      <arglist>(const double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a055a300a5d7989aceb2ebbbf83d80d62</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac0d40faa40033fe738c54b2ff90fa2ea</anchor>
      <arglist>(const long double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae9a47d665d29e6499fd43108f66fbad7</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32313656bd4fe9d3eaf682b68f73ad5e</anchor>
      <arglist>(int r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a34c9f30468b4617439ed82fb3598af2d</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1c4686d965b4a722fb00d4acb1af98f7</anchor>
      <arglist>(const double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2090ece4bfb903441c56d5fa34279ff7</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab05ab8908ab319a1f44e5416da300cbe</anchor>
      <arglist>(const long double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2ea1cadeca7712adb52d2539f6d0bc26</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a61db4277ab8b2a092a8c7386c20678dc</anchor>
      <arglist>(int r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3f399ddde6146362bfb3ad1dd243a0ec</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3f104752b92791df752442fb4e1a3d60</anchor>
      <arglist>(const double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6e1812d101b98a39a3a5588e0a690dc2</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aaaaa0c06d020cf1be09d81004191a187</anchor>
      <arglist>(const long double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4ab41c3c59ae6a6cdf74dc589c4003f2</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acfa04eb6779b9a27e224b75dc7e1cfef</anchor>
      <arglist>(int r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2671ef95de763aab8b24662347eed261</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a952f2acc788f2c6cb3ada83bf3ccd9e5</anchor>
      <arglist>(const float &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa6243c2ddbdfbad20a7a960fcb464818</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac47797df86af0f10deed6903b3d7edf1</anchor>
      <arglist>(const long double &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac93a0c7c108172ef2608a8e06567e660</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a79b75e4a440032117720bf883185bad2</anchor>
      <arglist>(int r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae1aa31002ee03572e049aa0aab977956</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2301b76e00b34b599b8c3ec6ed27c2e1</anchor>
      <arglist>(const float &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6e14bf6a9a1ca0a9c2b3cf4203c5a32f</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8c27443897b982722625dfe6efa3ea4b</anchor>
      <arglist>(const long double &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1551b951ce7845c1cd9674f3fe3a66c4</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b735e97ba5bd0c146b8874a59f120e8</anchor>
      <arglist>(int r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec1ad0de1d81c3cb44112e42d82d7ca9</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a470da0e3e4a9c22fa062fb6525edba99</anchor>
      <arglist>(const float &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a03ffbcbcf6dd8a4f7fb41da61068710c</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a77417b9f31a81aad50d11e86861bef38</anchor>
      <arglist>(const long double &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7a3585def58aad7e920eb6a4b7a54e25</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab2326eaea77d18673cec1827214db0d6</anchor>
      <arglist>(int r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a60d8201666b2cb4c88cf9648b77fc2f5</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a60b69d1c47b03af44dd760310cd03506</anchor>
      <arglist>(const float &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>accba1f3df9e06775a101dd04936764ba</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a594db726bdd7b2f2da55b49186ec97b4</anchor>
      <arglist>(const long double &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af2424591263d9437fadfce898d49e0df</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa5a96047d8b08a1e9dd7de75346b95ba</anchor>
      <arglist>(int r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a612e0e77ff76ce23325a987ba1f2cf58</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a014725b593141c29312a6c99ed7398dc</anchor>
      <arglist>(const float &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a254fb13271cb6c15b3d75809c0b2aac6</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a94bb7c1718bd12284f019002ca5613ce</anchor>
      <arglist>(const double &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af32792db02db232911965ed4d5110717</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a205a218d35371da8c440a8a17d484ee4</anchor>
      <arglist>(int r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af9841e6268dc5f621abaa2f773f3ebd8</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a99b2828e8f6609860a5e5b04f759f5db</anchor>
      <arglist>(const float &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a180d8cf8174aa4bc52e6f7bb0046f47f</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a695b25ac72d77fcc08fb720f3949d1d7</anchor>
      <arglist>(const double &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a58a8135d6941dc0bdc6ee0f4fa1323ed</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e0c588a7b9740382cd4e679ebdca2e3</anchor>
      <arglist>(int r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5df623dd760bfc7a7b931323bfebc104</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af20e6657d1aeed90f699160cd0e7dd81</anchor>
      <arglist>(const float &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a585bb27997f28c81e16dd6ba707b4bad</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a988e983b2c2abd573bad6e4bdd48b71c</anchor>
      <arglist>(const double &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab4a245adc3a0af27cf310fa576e231bf</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1b5011b1053642d8190ec1088cc574bc</anchor>
      <arglist>(int r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f77306592b22ddc08d74f7092ffdf71</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8c45dda9cddd7f11f6526dbfb09c0af7</anchor>
      <arglist>(const float &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2cdc154c46905fe0c064378667c59345</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d566cee659f5e1411aef8a32720cc44</anchor>
      <arglist>(const double &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>real</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeaa827805a9e4e7ddace710ebf77c3f5</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; float &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abae53367383176b30112a7fcd41b1cc2</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; float &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a830713eb25553b6e4a1f16050c0cbbe1</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a43865b00e1b03f56c61ab68f32b31500</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>norm</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab0654ff12161f19d018318ead5863f27</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>real</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad19c48740701efef3a60e0edacc732f5</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; double &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5e34e1896f72abe39fbf0eabba2c1192</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; double &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a40a37a88c66a5e0d9d4e039c03cf6a80</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec2b96481356c51a5d1480c26ee48407</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5f1b9d331bc4fcf2eec08b835c56febd</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const long double &amp;</type>
      <name>real</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7542f9bfef835fc00cf8af328fda90fe</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; long double &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6043323a5a3feccb21fe22b346080f23</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; long double &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aca9495e6c1677c10c4fb1dd9d9365fa2</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a07509f129b53ad148912b5ce2eb9891e</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>norm</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9986a76a03867f061e020370865c6386</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32bc3311eb9591b84552fb442a6567c5</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, conjugate&lt; R &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a66d043045800c1ff87ccd02fef8abb</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;os, const conjugate&lt; R &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a61e08876bf80dead9bc068e292e59196</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ad37aec5c7e13678609087cc666e57c</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a80bae81abc432946731802056986a404</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1471a185ee2d70a29fd4e073a646690b</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9f832abc7f4f061c12b3a9d264f3407d</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6fa2dcbed1eaf72bea2fe558b9cef239</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad907518d2d35166afbd9689a56be845b</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a875a8257564cf6b2c95318febbbe8ca7</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a439f825077407feffbada04285e7bd1f</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6045474bb3b010c9687ee037d2a50f6d</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a28f37aae2e15e0c9b6342cacf5ac2e20</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2fa02d27d3c7b34b9a734c897c2eed04</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a05f4f7fda5027105993f07407cff7735</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8bfba1df7aee815490157bf87a8d9a14</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7efc1b8332639836016dfd677ada3f68</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a53de12d48b6838d0a14e89a255ed7acd</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a73c829b3bf361c758d4ef4cbc9cca31e</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0c3ec879a72a733746d7b7e0004f304b</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aac639daeeac2aca1f6b4e6d8da68488d</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6f91e1c52ac17dea0ef26766dac6bfe</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a18d4c7e4d8529cd7c09f879465c772a6</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b292b68b207e3bda860e2d3437048e7</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a414189caa6fe8f2fd561dcb969249ec0</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a584bf54f9a130523fb107edd97971bbb</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0962c982494918d8bd93b009ad20887c</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adca0db588bbf078d82fe01788e3bfcc1</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aed14ab20afe07442683fa032e912d801</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; R &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7cf7a5f0ab9fb0e6c0c4ab555c75aba1</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a67ef5a90d6c33b4d0f2907ce4410ca98</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WCplx</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5e9834353c7b2e367c62f343707a8a40</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad8d046164fab71c36a1cd483ddedf24c</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8521ebbae0782d58bc199cbea8a0dc14</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7853e5be9fe4dc0de8c2f6d0a5e19d8b</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; R &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a42ab4f91667b01eec66c8fc1bb9a5f6a</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac7fb0a05d6a11918ac43099bf48ed119</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WCplx</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac60a5a7c102f573b671a01cfbf8b28a5</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WConj</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac732aec82d65b17825dd97d315e68fbe</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acaf6e3debbfded7fc252418783912e93</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d15863376a7bf4a3e91631e90590b11</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abe94f27eccba973695b0e0b594c6043d</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; typename Wider&lt; R, S &gt;::WCplx &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aba4e950d5cf1c3b7f0bca89c9482f019</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa6a65e7e4b1a5bd5692f86454191e970</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; typename Wider&lt; R, S &gt;::WCplx &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4c1be8b57acabc0ddd38ba06ee4b307</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad72bb5bdc77c52384748c9851ada2b9f</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a088c8382b7d08b062979a387be3babf4</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aea23292d4a1250111eb5a17385b11f94</anchor>
      <arglist>(const negator&lt; complex&lt; R &gt; &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a044e65f0113bddccab35929794ee3833</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const negator&lt; complex&lt; S &gt; &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9282499e1394a0ebbafa864917e3c14b</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acafb736c213bdd6af245877f5218d06e</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7e74ab74bb57268d64176ea94f200d0d</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4f01243efd7a9239a53fb8253e6ad435</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a75169772fd944f95a8d974fd1f31eea4</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5253ad30c1b1bb1e1daffcecfe8c189a</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ceea55ab60bfd8024be1bef3f84a54c</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad27134aac049e658ae6ddd5fa9a1bce1</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0ffad78ef10b22ddcae1e3d21e203e6c</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Constants.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/</path>
    <filename>Constants_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PI</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga47877118bd7884b9302f31a8ec863e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_E</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga9ae5d15bf6007dc1d2a847eaa3da2cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LN2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga5f652b6a72ccfbebed2fb7df963a97bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LN10</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>gae5fd8faa06cc75fbd2e39ec0ec096cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LOG2E</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga60225913e0915a7e369a6010ed841484</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LOG10E</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga12adf3ce5300bd302d00135b1ef0da7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SQRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>gac937f8565a77a367726b62fdf6514fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_OOSQRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga96584e8e5c567acf1e25e903e76dd0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_CBRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga84f587e464a6ae5af7c29a14a8658eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_OOCBRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>gac653383156b86476633db19210360237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SIXRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga1c13fa2b6d3884c2728fef3ce1ad82e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_OOSIXRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga03bb95b3a83bf245113ee33827b447d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SQRT3</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga148884290a4a805803ae142fbbe76925</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_CBRT3</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga2466390ff678f01fef3330f5e12b2c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_AVOGADROS_NUMBER</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga789b3ea01bc4ba5f275991d7158c10d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MASS_OF_PROTON_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gacb96e8267f12d5cc6d5dcb745d74f801</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MASS_OF_NEUTRON_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga596767107bb2e9157b9964089cf7c501</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MASS_OF_ELECTRON_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gaaec541bd2d7bbb4e69361636a3962d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_CHARGE_OF_PROTON_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga9d24ad3ddda2d31c6efa397e93c2cdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_CHARGE_OF_PROTON_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga995867457971210c984a2b675ac0ab02</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_CHARGE_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga42b6ebdf4d892d181b37d1a32ae0cc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_CHARGE_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga45dc0156703c161724fbd0305bb9fa10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LIGHTSPEED_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga71a35764508d84484de68d69be634f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LIGHTSPEED_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gabb4b70d932b2dc6631a61479f47ddb7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_GRAVITATIONAL_CONSTANT_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga8daeca040fae0799ac3e02d25ac6f538</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_GRAVITATIONAL_CONSTANT_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga46b30cbd430150f2dbc0fb2a2d69aa6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MAGNETIC_PERMEABILITY_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga57afbf645fd9a9bae08dd697c36547bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MAGNETIC_PERMEABILITY_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gaebe5306727cfb4c0d48b0135cd7472ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ELECTRIC_PERMITTIVITY_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga14d142b4dd9126ae0a3a74aaab7ba9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ELECTRIC_PERMITTIVITY_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga0262923a25c10ce28aaae333b96b5eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_COULOMB_CONSTANT_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga4947df4db72cf6397a090dd936b3d0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_COULOMB_CONSTANT_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga86283ff62cb6c81f9a9a96b56dbeb7db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_COULOMB_CONSTANT_IN_KCAL_ANGSTROM</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gabf54205837d054a965337502f46e1d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_GAS_CONSTANT_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga9185a50ed28b82fe82d27638e5bc2b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_GAS_CONSTANT_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga7a2ad527bb838bb79be8a6904fc6220f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_GAS_CONSTANT_KCAL_ANGSTROM</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga99521b4c9aa9e3cd75511769e5f3c104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_BOLTZMANN_CONSTANT_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gadff5586ebdff39b006fb5cbf45531d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_BOLTZMANN_CONSTANT_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga12697cf60fc8ba6b82923dc2671bec91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_BOLTZMANN_CONSTANT_KCAL_ANGSTROM</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gab540302a2792f0850fa3ff8afb4359b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_RADIAN_TO_DEGREE</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>gaef67a2e5772571ddcd3d04c398732e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEGREE_TO_RADIAN</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga535eb2e1b3711d94cd95ba95253786a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_NS_TO_S</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>gadf1fa9495e5bb2c4982185fffa533ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_S_TO_NS</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga5503e295f567ca630f92c7c8a5de2421</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_KCAL_TO_KJOULE</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga92b714cb424568212858a96f72d8dadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_KJOULE_TO_KCAL</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga4974b8b4dce90087a44fd7d8d554021a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DALTON_TO_GRAM</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>gaf3ad09b894ea9b2072cea93fdb8fee91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_E_TO_COULOMB</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga236099a046183edea6c908347af17a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_EV_TO_JOULE</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga093652e443d7dc5da9182456180da9c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Constraint.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Constraint_8h</filename>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::Constraint</class>
    <class kind="class">SimTK::Constraint::Rod</class>
    <class kind="class">SimTK::Constraint::PointInPlane</class>
    <class kind="class">SimTK::Constraint::PointOnLine</class>
    <class kind="class">SimTK::Constraint::ConstantAngle</class>
    <class kind="class">SimTK::Constraint::Ball</class>
    <class kind="class">SimTK::Constraint::ConstantOrientation</class>
    <class kind="class">SimTK::Constraint::Weld</class>
    <class kind="class">SimTK::Constraint::NoSlip1D</class>
    <class kind="class">SimTK::Constraint::BallRollingOnPlane</class>
    <class kind="class">SimTK::Constraint::ConstantSpeed</class>
    <class kind="class">SimTK::Constraint::ConstantAcceleration</class>
    <class kind="class">SimTK::Constraint::Custom</class>
    <class kind="class">SimTK::Constraint::Custom::Implementation</class>
    <class kind="class">SimTK::Constraint::CoordinateCoupler</class>
    <class kind="class">SimTK::Constraint::SpeedCoupler</class>
    <class kind="class">SimTK::Constraint::PrescribedMotion</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Contact.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Contact_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::Contact</class>
    <class kind="class">SimTK::UntrackedContact</class>
    <class kind="class">SimTK::BrokenContact</class>
    <class kind="class">SimTK::CircularPointContact</class>
    <class kind="class">SimTK::EllipticalPointContact</class>
    <class kind="class">SimTK::TriangleMeshContact</class>
    <class kind="class">SimTK::PointContact</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a22d897fc7c71b3b776c098f9701872ed</anchor>
      <arglist>(ContactSurfaceIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4fdf4b7e0fa5eb25dcc3a3a920bbac01</anchor>
      <arglist>(ContactId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6beaa0bd9837c5dcb62f34065a5da3a2</anchor>
      <arglist>(ContactTypeId)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5be09b802b5785052f6ee506f6d5679f</anchor>
      <arglist>(std::ostream &amp;o, const Contact &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactGeometry.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>ContactGeometry_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="OrientedBoundingBox_8h" name="OrientedBoundingBox.h" local="yes" imported="no">simmath/internal/OrientedBoundingBox.h</includes>
    <includes id="Geodesic_8h" name="Geodesic.h" local="yes" imported="no">simmath/internal/Geodesic.h</includes>
    <includes id="BicubicSurface_8h" name="BicubicSurface.h" local="yes" imported="no">simmath/internal/BicubicSurface.h</includes>
    <class kind="class">SimTK::ContactGeometry</class>
    <class kind="class">SimTK::ContactGeometry::HalfSpace</class>
    <class kind="class">SimTK::ContactGeometry::Cylinder</class>
    <class kind="class">SimTK::ContactGeometry::Sphere</class>
    <class kind="class">SimTK::ContactGeometry::Ellipsoid</class>
    <class kind="class">SimTK::ContactGeometry::SmoothHeightMap</class>
    <class kind="class">SimTK::ContactGeometry::TriangleMesh</class>
    <class kind="class">SimTK::ContactGeometry::TriangleMesh::OBBTreeNode</class>
    <class kind="class">SimTK::ContactGeometry::Torus</class>
    <class kind="class">SimTK::Plane</class>
    <class kind="class">SimTK::GeodHitPlaneEvent</class>
    <class kind="class">SimTK::PathDecorator</class>
    <class kind="class">SimTK::PlaneDecorator</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae08e7551aea3a4a197a10730f692ac36</anchor>
      <arglist>(ContactGeometryTypeId)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactSurface.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>ContactSurface_8h</filename>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::ContactMaterial</class>
    <class kind="class">SimTK::ContactSurface</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb96f300b909985a8174b4e7c10ee561</anchor>
      <arglist>(ContactCliqueId)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ContactTracker.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>ContactTracker_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Contact_8h" name="Contact.h" local="yes" imported="no">simmath/internal/Contact.h</includes>
    <class kind="class">SimTK::ContactTracker</class>
    <class kind="class">SimTK::ContactTracker::HalfSpaceSphere</class>
    <class kind="class">SimTK::ContactTracker::HalfSpaceEllipsoid</class>
    <class kind="class">SimTK::ContactTracker::SphereSphere</class>
    <class kind="class">SimTK::ContactTracker::HalfSpaceTriangleMesh</class>
    <class kind="class">SimTK::ContactTracker::SphereTriangleMesh</class>
    <class kind="class">SimTK::ContactTracker::TriangleMeshTriangleMesh</class>
    <class kind="class">SimTK::ContactTracker::ConvexImplicitPair</class>
    <class kind="class">SimTK::ContactTracker::GeneralImplicitPair</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ContactTrackerSubsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>ContactTrackerSubsystem_8h</filename>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="ContactSurface_8h" name="ContactSurface.h" local="yes" imported="no">simbody/internal/ContactSurface.h</includes>
    <class kind="class">SimTK::ContactTrackerSubsystem</class>
    <class kind="class">SimTK::ContactSnapshot</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6835e9093ff4d91a687bc30f53cac09b</anchor>
      <arglist>(std::ostream &amp;o, const ContactSnapshot &amp;cs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoordinateAxis.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/internal/</path>
    <filename>CoordinateAxis_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::CoordinateAxis</class>
    <class kind="class">SimTK::CoordinateAxis::XCoordinateAxis</class>
    <class kind="class">SimTK::CoordinateAxis::YCoordinateAxis</class>
    <class kind="class">SimTK::CoordinateAxis::ZCoordinateAxis</class>
    <class kind="class">SimTK::CoordinateDirection</class>
    <class kind="class">SimTK::CoordinateDirection::Negative</class>
    <class kind="class">SimTK::CoordinateDirection::NegXDirection</class>
    <class kind="class">SimTK::CoordinateDirection::NegYDirection</class>
    <class kind="class">SimTK::CoordinateDirection::NegZDirection</class>
    <namespace>SimTK</namespace>
    <member kind="variable">
      <type>const CoordinateAxis::XCoordinateAxis</type>
      <name>XAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae7ef72313bd2927b2dac68bd8e80915c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateAxis::YCoordinateAxis</type>
      <name>YAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5bf507620ec3ac8aac653700d455ee81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateAxis::ZCoordinateAxis</type>
      <name>ZAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2e014e2731959bba79efa02e1d12e0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateDirection::NegXDirection</type>
      <name>NegXAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa71774d9492a13d0b97c665068f04139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateDirection::NegYDirection</type>
      <name>NegYAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abb248ecb66f5e6b7cb85d42933a3aeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateDirection::NegZDirection</type>
      <name>NegZAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0e7be08fa229d338b17abaa2fc1ba246</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CPodesIntegrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>CPodesIntegrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <includes id="SimTKcpodes_8h" name="SimTKcpodes.h" local="yes" imported="no">simmath/internal/SimTKcpodes.h</includes>
    <class kind="class">SimTK::CPodesIntegrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>DartConfiguration.tcl</name>
    <path>/home/travis/build/chrisdembia/simbody/</path>
    <filename>DartConfiguration_8tcl</filename>
  </compound>
  <compound kind="file">
    <name>DecorationGenerator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Geometry/include/SimTKcommon/internal/</path>
    <filename>DecorationGenerator_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <class kind="class">SimTK::DecorationGenerator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>DecorationSubsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>DecorationSubsystem_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::DecorationSubsystem</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>DecorativeGeometry.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Geometry/include/SimTKcommon/internal/</path>
    <filename>DecorativeGeometry_8h</filename>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="PolygonalMesh_8h" name="PolygonalMesh.h" local="yes" imported="no">SimTKcommon/internal/PolygonalMesh.h</includes>
    <class kind="class">SimTK::DecorativeGeometry</class>
    <class kind="class">SimTK::DecorativePoint</class>
    <class kind="class">SimTK::DecorativeLine</class>
    <class kind="class">SimTK::DecorativeCircle</class>
    <class kind="class">SimTK::DecorativeSphere</class>
    <class kind="class">SimTK::DecorativeEllipsoid</class>
    <class kind="class">SimTK::DecorativeBrick</class>
    <class kind="class">SimTK::DecorativeCylinder</class>
    <class kind="class">SimTK::DecorativeFrame</class>
    <class kind="class">SimTK::DecorativeText</class>
    <class kind="class">SimTK::DecorativeMesh</class>
    <class kind="class">SimTK::Decorations</class>
    <class kind="class">SimTK::DecorativeGeometryImplementation</class>
    <namespace>SimTK</namespace>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Black</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7eb05bba246a36f0c38f1103e71271d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Gray</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a65212921c988ed05db4238888b2c9211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Red</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa65237cfdb919189f099be1edfa64380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Green</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af85a41273df077dbfc9e7b6b9a1d468b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Blue</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b0c2aa41d7d89bb42b875c8b17b9269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Yellow</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac97c4e28d7ff9a0ad6cca191a65245cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Orange</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a215331212cc50a27bf7adc2e64f71bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Magenta</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ebc073e8e0b231823fb73c70ce3d907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Purple</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae1ef2f5b3baed6fbfaec04add6c7dcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Cyan</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adfe796a52cf587653789cefbb1dc7c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>White</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7909322e9f6cf4fcc6fdfa2a42e58d6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Differentiator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/include/simmath/</path>
    <filename>Differentiator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::Differentiator</class>
    <class kind="class">SimTK::Differentiator::Function</class>
    <class kind="class">SimTK::Differentiator::ScalarFunction</class>
    <class kind="class">SimTK::Differentiator::GradientFunction</class>
    <class kind="class">SimTK::Differentiator::JacobianFunction</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ElasticFoundationForce.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>ElasticFoundationForce_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::ElasticFoundationForce</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Event.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>Event_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <class kind="class">SimTK::Event</class>
    <class kind="class">SimTK::Event::Cause</class>
    <class kind="class">SimTK::EventTriggerInfo</class>
    <class kind="class">SimTK::HandleEventsOptions</class>
    <class kind="class">SimTK::HandleEventsResults</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a99b43b75cf283cbf54151e33ecd77bb6</anchor>
      <arglist>(EventId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3bb68c644ac71c61ea30609cad4adb98</anchor>
      <arglist>(SystemEventTriggerIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae0dbdb1f02717c1ea9c2bd2d41f88d47</anchor>
      <arglist>(SystemEventTriggerByStageIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afa825c4cd4b5441688a57913b9534467</anchor>
      <arglist>(EventTriggerByStageIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EventHandler.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>EventHandler_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <includes id="System_8h" name="System.h" local="yes" imported="no">SimTKcommon/internal/System.h</includes>
    <class kind="class">SimTK::EventHandler</class>
    <class kind="class">SimTK::ScheduledEventHandler</class>
    <class kind="class">SimTK::TriggeredEventHandler</class>
    <class kind="class">SimTK::PeriodicEventHandler</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>EventReporter.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>EventReporter_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <includes id="System_8h" name="System.h" local="yes" imported="no">SimTKcommon/internal/System.h</includes>
    <class kind="class">SimTK::EventReporter</class>
    <class kind="class">SimTK::ScheduledEventReporter</class>
    <class kind="class">SimTK::TriggeredEventReporter</class>
    <class kind="class">SimTK::PeriodicEventReporter</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Exception_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::Exception::Base</class>
    <class kind="class">SimTK::Exception::Assert</class>
    <class kind="class">SimTK::Exception::ErrorCheck</class>
    <class kind="class">SimTK::Exception::APIArgcheckFailed</class>
    <class kind="class">SimTK::Exception::IndexOutOfRange</class>
    <class kind="class">SimTK::Exception::SizeOutOfRange</class>
    <class kind="class">SimTK::Exception::SizeWasNegative</class>
    <class kind="class">SimTK::Exception::ValueOutOfRange</class>
    <class kind="class">SimTK::Exception::ValueWasNegative</class>
    <class kind="class">SimTK::Exception::UnimplementedMethod</class>
    <class kind="class">SimTK::Exception::UnimplementedVirtualMethod</class>
    <class kind="class">SimTK::Exception::IncompatibleValues</class>
    <class kind="class">SimTK::Exception::OperationNotAllowedOnView</class>
    <class kind="class">SimTK::Exception::OperationNotAllowedOnOwner</class>
    <class kind="class">SimTK::Exception::OperationNotAllowedOnNonconstReadOnlyView</class>
    <class kind="class">SimTK::Exception::Cant</class>
    <namespace>SimTK</namespace>
    <namespace>SimTK::Exception</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>a46cac7c32614484b14b16a04ec79787a</anchor>
      <arglist>(exc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW1</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>aea37126d8c3d25152ea1affa129ee955</anchor>
      <arglist>(exc, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW2</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>a21506b30fba5c286805b8ba4aa284b71</anchor>
      <arglist>(exc, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW3</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>a4af04338ac859d08b50b4f24152fd84d</anchor>
      <arglist>(exc, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW4</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>a55622adc17b7b4a0a738e548f6511337</anchor>
      <arglist>(exc, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW5</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>a38923865cc41b09217b4dac748f217aa</anchor>
      <arglist>(exc, a1, a2, a3, a4, a5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW6</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>a3982d8efca26cfcd28605744925192c5</anchor>
      <arglist>(exc, a1, a2, a3, a4, a5, a6)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW7</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>af5b1f9bf681742d40a566ee88b1f00d7</anchor>
      <arglist>(exc, a1, a2, a3, a4, a5, a6, a7)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW8</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>ac346f6fd046af8c2e917cf53520f4bc3</anchor>
      <arglist>(exc, a1, a2, a3, a4, a5, a6, a7, a8)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW9</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>acb05bc8f560052e4eb39338d7b8ac91d</anchor>
      <arglist>(exc, a1, a2, a3, a4, a5, a6, a7, a8, a9)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_THROW10</name>
      <anchorfile>Exception_8h.html</anchorfile>
      <anchor>aeda888a17a73afa31902d4d7031e770c</anchor>
      <arglist>(exc, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExceptionMacros.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>ExceptionMacros_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">SimTKcommon/internal/Exception.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_INDEXCHECK_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a3dd90b0a70e47be10dbe6b753615e658</anchor>
      <arglist>(ix, ub, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SIZECHECK_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ac7d016ea53a716288c5600ea20f68877</anchor>
      <arglist>(sz, maxsz, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SIZECHECK_NONNEG_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a4a1e9b0d531198457bebdf5d66160afc</anchor>
      <arglist>(sz, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_VALUECHECK_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a71308e15ada3492cf841094ce6073371</anchor>
      <arglist>(lb, val, ub, valName, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_VALUECHECK_NONNEG_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>af2358d698260799b1988bae5f1f7ff1f</anchor>
      <arglist>(val, valName, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_INDEXCHECK</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a08ad120f4789e305ecb734e01c0f66f5</anchor>
      <arglist>(ix, ub, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SIZECHECK</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>aec2d5db30b462322ef0013a50387ec96</anchor>
      <arglist>(sz, maxsz, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SIZECHECK_NONNEG</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ac9d2ca720c8175a47668f4c6dbe48771</anchor>
      <arglist>(sz, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_VALUECHECK</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>afa5f829126c13e6ea9fa06701c9ff992</anchor>
      <arglist>(lb, val, ub, valName, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_VALUECHECK_NONNEG</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ae3d741f1b828658e9559dd210f7c5326</anchor>
      <arglist>(val, valName, where)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_TOPOLOGY_REALIZED_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ae2e030c31dc948709c1279b9e1f26a0d</anchor>
      <arglist>(cond, objType, objName, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_TOPOLOGY_VERSION_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a7c388655fceaf1d9b88217d443ec8079</anchor>
      <arglist>(sysTopoVersion,stateTopoVersion, objType, objName, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_EQ_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a3a586e685bd6a346097b5704d63fdedf</anchor>
      <arglist>(currentStage, targetStage, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_GE_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a5a49a00de21eceffcedf8ab13b55478b</anchor>
      <arglist>(currentStage, targetStage, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_LT_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>adb4e2c92a184936e7f867d858dc3aa31</anchor>
      <arglist>(currentStage, targetStage, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_RANGE_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a40a7d7061846c6477727e04f46ffde07</anchor>
      <arglist>(lower, current, upper, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_TOPOLOGY_REALIZED</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a0095ba31edc34179f7f394632db94242</anchor>
      <arglist>(cond, objType, objName, methodName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_TOPOLOGY_VERSION</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a98a5ac61a0e935355808d30a7ec9f7de</anchor>
      <arglist>(sysTopoVersion, stateTopoVersion, objType, objName, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_EQ</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ae51b44c403c412f0b155468744219155</anchor>
      <arglist>(currentStage, targetStage, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_GE</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ab1222580679857e1b461cca5ca58e3f1</anchor>
      <arglist>(currentStage, targetStage, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_LT</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>addd29eadf1b0f295de9b6352180d46fb</anchor>
      <arglist>(currentStage, targetStage, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_STAGECHECK_RANGE</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a316936f40f714058a9f05c7404cb4a34</anchor>
      <arglist>(lower, current, upper, methodNm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a17bb7b757d7268d213a29e41a5588156</anchor>
      <arglist>(cond, className, methodName, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK1_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ad2f8f4b16f7ce3deca57f684d056e86d</anchor>
      <arglist>(cond, className, methodName, fmt, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK2_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>aaa19f65faf132a8d1635c7989c5611f7</anchor>
      <arglist>(cond, className, methodName, fmt, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK3_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a39e5ec8f3ece327ff927641ebcf3c7df</anchor>
      <arglist>(cond, className, methodName, fmt, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK4_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a9130d6f9e24aeccf92f4b751c647fc34</anchor>
      <arglist>(cond, className, methodName, fmt, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK5_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a101578eb2725d79065f23e16006e74d7</anchor>
      <arglist>(cond, className, methodName, fmt, a1, a2, a3, a4, a5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ad2480464d49da0a1bba771dc3697b7ff</anchor>
      <arglist>(cond, className, methodName, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK1</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a9c93a06fd35f1c4a66bfbef1b21dbbca</anchor>
      <arglist>(cond, className, methodName, fmt, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK2</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>accf574cc5c7ffd3a3b2207ebb6411b69</anchor>
      <arglist>(cond, className, methodName, fmt, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK3</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>acbcd9d2e61929d99a14cab7fcbf519be</anchor>
      <arglist>(cond, className, methodName, fmt, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK4</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ac3c02cd374b89237dc4e1017b4c47e22</anchor>
      <arglist>(cond, className, methodName, fmt, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_APIARGCHECK5</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ab7ea739e47f8dfd1d900b6cd9b3eb213</anchor>
      <arglist>(cond, className, methodName, fmt, a1, a2, a3, a4, a5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a1f664766e58e13ba0b71fc3fc46df3d5</anchor>
      <arglist>(cond, whereChecked, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK1_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a8db8890acc243640d3c7f1159959ad53</anchor>
      <arglist>(cond, whereChecked, fmt, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK2_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a1726730864a3e4319cdd1dab8f41786f</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK3_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a06b646bcfe15dfac013393d6b3c2ad64</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK4_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a67d67fc13fbe582a1f150b8ed5191048</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK5_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a2725ec7ecff690e1d1fc3db11470a49d</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3, a4, a5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK6_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a073b30337e26c36b897367a61da1fb4a</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3, a4, a5, a6)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK7_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a477d9f9b9c8fc8f07f61b981d92be35e</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3, a4, a5, a6, a7)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ab71559e3ecec1319c37bf36c9091f23a</anchor>
      <arglist>(cond, whereChecked, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK1</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>aecf81226de701d6eb7ab996358739d6a</anchor>
      <arglist>(cond, whereChecked, fmt, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK2</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a57ba111f3c249a666b141d802807daa1</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK3</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ab0e7127e868fb30c591df2e472bc64b2</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK4</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ab5347652b76bcf4cf7efefdae7c7adfc</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK5</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>af19147230fe39e44ff2d5cf49dc63616</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3, a4, a5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK6</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>aa1e40798132647c6137b2f3e9a4f8773</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3, a4, a5, a6)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ERRCHK7</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ad76a87896c7618d133ee006b3cb23bc1</anchor>
      <arglist>(cond, whereChecked, fmt, a1, a2, a3, a4, a5, a6, a7)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a4f4c3468a783300bbbab2bf58ececba7</anchor>
      <arglist>(cond, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT1_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a99780a41e64475ee9f34b59a81d499dc</anchor>
      <arglist>(cond, msg, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT2_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a62df03aaf9d9e0764f953c9b899e8a85</anchor>
      <arglist>(cond, msg, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT3_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>abf2e1de3a0f45a37d0d3d434a59d6477</anchor>
      <arglist>(cond, msg, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT4_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a5e7ca716e9f88056a905961129231d60</anchor>
      <arglist>(cond, msg, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT5_ALWAYS</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a681d98b7e60073b21db4fade0d4d6c68</anchor>
      <arglist>(cond, msg, a1, a2, a3, a4, a5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a58ccb1c936683d43f791f03b4f52845f</anchor>
      <arglist>(cond, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT1</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>afddf1597a2d2550041a0d43a5a5e6a2b</anchor>
      <arglist>(cond, msg, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT2</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a1b682330c154352ac14f4c111526da05</anchor>
      <arglist>(cond, msg, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT3</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>ab44056507bff16cb3d81086a1c11c746</anchor>
      <arglist>(cond, msg, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT4</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a04eb83a9ce0a0e2f2f4b04a650ab7765</anchor>
      <arglist>(cond, msg, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ASSERT5</name>
      <anchorfile>ExceptionMacros_8h.html</anchorfile>
      <anchor>a6892370d2c0df0fe04392195c777ac18</anchor>
      <arglist>(cond, msg, a1, a2, a3, a4, a5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExplicitEulerIntegrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>ExplicitEulerIntegrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::ExplicitEulerIntegrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="GeneralForceSubsystem_8h" name="GeneralForceSubsystem.h" local="yes" imported="no">simbody/internal/GeneralForceSubsystem.h</includes>
    <class kind="class">SimTK::Force</class>
    <class kind="class">SimTK::Force::TwoPointLinearSpring</class>
    <class kind="class">SimTK::Force::TwoPointLinearDamper</class>
    <class kind="class">SimTK::Force::TwoPointConstantForce</class>
    <class kind="class">SimTK::Force::ConstantForce</class>
    <class kind="class">SimTK::Force::ConstantTorque</class>
    <class kind="class">SimTK::Force::GlobalDamper</class>
    <class kind="class">SimTK::Force::UniformGravity</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_BuiltIns.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__BuiltIns_8h</filename>
    <includes id="Force__Custom_8h" name="Force_Custom.h" local="yes" imported="no">simbody/internal/Force_Custom.h</includes>
    <includes id="Force__DiscreteForces_8h" name="Force_DiscreteForces.h" local="yes" imported="no">simbody/internal/Force_DiscreteForces.h</includes>
    <includes id="Force__Gravity_8h" name="Force_Gravity.h" local="yes" imported="no">simbody/internal/Force_Gravity.h</includes>
    <includes id="Force__LinearBushing_8h" name="Force_LinearBushing.h" local="yes" imported="no">simbody/internal/Force_LinearBushing.h</includes>
    <includes id="Force__MobilityConstantForce_8h" name="Force_MobilityConstantForce.h" local="yes" imported="no">simbody/internal/Force_MobilityConstantForce.h</includes>
    <includes id="Force__MobilityDiscreteForce_8h" name="Force_MobilityDiscreteForce.h" local="yes" imported="no">simbody/internal/Force_MobilityDiscreteForce.h</includes>
    <includes id="Force__MobilityLinearDamper_8h" name="Force_MobilityLinearDamper.h" local="yes" imported="no">simbody/internal/Force_MobilityLinearDamper.h</includes>
    <includes id="Force__MobilityLinearSpring_8h" name="Force_MobilityLinearSpring.h" local="yes" imported="no">simbody/internal/Force_MobilityLinearSpring.h</includes>
    <includes id="Force__MobilityLinearStop_8h" name="Force_MobilityLinearStop.h" local="yes" imported="no">simbody/internal/Force_MobilityLinearStop.h</includes>
    <includes id="Force__Thermostat_8h" name="Force_Thermostat.h" local="yes" imported="no">simbody/internal/Force_Thermostat.h</includes>
  </compound>
  <compound kind="file">
    <name>Force_Custom.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__Custom_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::Custom</class>
    <class kind="class">SimTK::Force::Custom::Implementation</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_DiscreteForces.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__DiscreteForces_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::DiscreteForces</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_Gravity.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__Gravity_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::Gravity</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_LinearBushing.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__LinearBushing_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::LinearBushing</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_MobilityConstantForce.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__MobilityConstantForce_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::MobilityConstantForce</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_MobilityDiscreteForce.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__MobilityDiscreteForce_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::MobilityDiscreteForce</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_MobilityLinearDamper.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__MobilityLinearDamper_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::MobilityLinearDamper</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_MobilityLinearSpring.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__MobilityLinearSpring_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::MobilityLinearSpring</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_MobilityLinearStop.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__MobilityLinearStop_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::MobilityLinearStop</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Force_Thermostat.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Force__Thermostat_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::Force::Thermostat</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ForceSubsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>ForceSubsystem_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::ForceSubsystem</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>ForceSubsystem::Guts</type>
      <name>ForceSubsystemRep</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a381296ab138573d7192ed7a91c321037</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ForceSubsystemGuts.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>ForceSubsystemGuts_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="MultibodySystem_8h" name="MultibodySystem.h" local="yes" imported="no">simbody/internal/MultibodySystem.h</includes>
    <class kind="class">SimTK::ForceSubsystem::Guts</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Fortran.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Fortran_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_FORTRAN_STDCALL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a624a341c9a31dba754636870cc3e21f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_FORTRAN</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>aac867dc4839ce50900ed09431d64cdfe</anchor>
      <arglist>(x, X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_FORTRAN_STRLEN_FOLLOWS_DECL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a21e39a410bffdb5d23940b61e4118edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_FORTRAN_STRLEN_FOLLOWS_CALL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>ac554de8f91ceb2e9a25680448a8ba018</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_FORTRAN_STRLEN_ATEND_DECL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>aad6b895a8cb14c48deb5924ebb97c11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_FORTRAN_STRLEN_ATEND_CALL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a4802b23d2bde6ebeb22a1c8cbdb622fb</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LAPACK_STDCALL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a811bed9a3e79a8e216a12509ef818684</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LAPACK</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a5dd5c301dc97717cab7dd7636ee23709</anchor>
      <arglist>(x, X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LAPACK_STRLEN_FOLLOWS_DECL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a76cdba59e2a42065e5cce11e64d04bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LAPACK_STRLEN_FOLLOWS_CALL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a2eeac3f9b3968c7c379358f40297eeaa</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LAPACK_STRLEN_ATEND_DECL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a5ea99700041671a1985b7f978f41b99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LAPACK_STRLEN_ATEND_CALL</name>
      <anchorfile>Fortran_8h.html</anchorfile>
      <anchor>a843c6b4ed9394edafc78835931b5b240</anchor>
      <arglist>(n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Function.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Function_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <class kind="class">SimTK::Function_</class>
    <class kind="class">SimTK::Function_::Constant</class>
    <class kind="class">SimTK::Function_::Linear</class>
    <class kind="class">SimTK::Function_::Polynomial</class>
    <class kind="class">SimTK::Function_::Sinusoid</class>
    <class kind="class">SimTK::Function_::Step</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Function_&lt; Real &gt;</type>
      <name>Function</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0802d357d8b06888b8a1bc35a78c715c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GCVSPLUtil.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>GCVSPLUtil_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::GCVSPLUtil</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>int</type>
      <name>SimTK_gcvspl_</name>
      <anchorfile>GCVSPLUtil_8h.html</anchorfile>
      <anchor>a72d55bebbbc438e79df25565e52bed49</anchor>
      <arglist>(const SimTK::Real *, const SimTK::Real *, int *, const SimTK::Real *, const SimTK::Real *, int *, int *, int *, int *, SimTK::Real *, SimTK::Real *, int *, SimTK::Real *, int *)</arglist>
    </member>
    <member kind="function">
      <type>SimTK::Real</type>
      <name>SimTK_splder_</name>
      <anchorfile>GCVSPLUtil_8h.html</anchorfile>
      <anchor>a49c71f5b558fa6b97dc854f780208838</anchor>
      <arglist>(int *, int *, int *, SimTK::Real *, const SimTK::Real *, const SimTK::Real *, int *, SimTK::Real *, int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GeneralContactSubsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>GeneralContactSubsystem_8h</filename>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::GeneralContactSubsystem</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>GeneralForceSubsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>GeneralForceSubsystem_8h</filename>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="ForceSubsystem_8h" name="ForceSubsystem.h" local="yes" imported="no">simbody/internal/ForceSubsystem.h</includes>
    <class kind="class">SimTK::GeneralForceSubsystem</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::Geo</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_BicubicBezierPatch.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__BicubicBezierPatch_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <includes id="Geo__CubicBezierCurve_8h" name="Geo_CubicBezierCurve.h" local="yes" imported="no">simmath/internal/Geo_CubicBezierCurve.h</includes>
    <class kind="class">SimTK::Geo::BicubicBezierPatch_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_BicubicHermitePatch.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__BicubicHermitePatch_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <class kind="class">SimTK::Geo::BicubicHermitePatch_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_Box.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__Box_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <class kind="class">SimTK::Geo::Box_</class>
    <class kind="class">SimTK::Geo::AlignedBox_</class>
    <class kind="class">SimTK::Geo::OrientedBox_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_CubicBezierCurve.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__CubicBezierCurve_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <includes id="Geo__Point_8h" name="Geo_Point.h" local="yes" imported="no">simmath/internal/Geo_Point.h</includes>
    <includes id="Geo__Sphere_8h" name="Geo_Sphere.h" local="yes" imported="no">simmath/internal/Geo_Sphere.h</includes>
    <includes id="Geo__Box_8h" name="Geo_Box.h" local="yes" imported="no">simmath/internal/Geo_Box.h</includes>
    <class kind="class">SimTK::Geo::CubicBezierCurve_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_CubicHermiteCurve.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__CubicHermiteCurve_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <class kind="class">SimTK::Geo::CubicHermiteCurve_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_LineSeg.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__LineSeg_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <includes id="Geo__Sphere_8h" name="Geo_Sphere.h" local="yes" imported="no">simmath/internal/Geo_Sphere.h</includes>
    <class kind="class">SimTK::Geo::LineSeg_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_Point.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__Point_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <class kind="class">SimTK::Geo::Point_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_Sphere.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__Sphere_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <class kind="class">SimTK::Geo::Sphere_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geo_Triangle.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geo__Triangle_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <includes id="Geo__Point_8h" name="Geo_Point.h" local="yes" imported="no">simmath/internal/Geo_Point.h</includes>
    <includes id="Geo__LineSeg_8h" name="Geo_LineSeg.h" local="yes" imported="no">simmath/internal/Geo_LineSeg.h</includes>
    <class kind="class">SimTK::Geo::Triangle_</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Geodesic.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Geodesic_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::Geodesic</class>
    <class kind="class">SimTK::GeodesicDecorator</class>
    <class kind="class">SimTK::GeodesicOptions</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>GeodesicIntegrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>GeodesicIntegrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::GeodesicIntegrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>HuntCrossleyContact.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>HuntCrossleyContact_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="ForceSubsystem_8h" name="ForceSubsystem.h" local="yes" imported="no">simbody/internal/ForceSubsystem.h</includes>
    <class kind="class">SimTK::HuntCrossleyContact</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>HuntCrossleyForce.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>HuntCrossleyForce_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <class kind="class">SimTK::HuntCrossleyForce</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Integrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>Integrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::Integrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>LinearAlgebra.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/include/simmath/</path>
    <filename>LinearAlgebra_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::Factor</class>
    <class kind="class">SimTK::FactorLU</class>
    <class kind="class">SimTK::FactorQTZ</class>
    <class kind="class">SimTK::Eigen</class>
    <class kind="class">SimTK::FactorSVD</class>
    <namespace>SimTK</namespace>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DefaultRecpCondition</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa9971b0979514067c6edd5cf4e1a2935</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocalEnergyMinimizer.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>LocalEnergyMinimizer_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="MultibodySystem_8h" name="MultibodySystem.h" local="yes" imported="no">simbody/internal/MultibodySystem.h</includes>
    <class kind="class">SimTK::LocalEnergyMinimizer</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MassProperties.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/internal/</path>
    <filename>MassProperties_8h</filename>
    <includes id="Scalar_8h" name="Scalar.h" local="yes" imported="no">SimTKcommon/Scalar.h</includes>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="Orientation_8h" name="Orientation.h" local="yes" imported="no">SimTKcommon/Orientation.h</includes>
    <class kind="class">SimTK::Inertia_</class>
    <class kind="class">SimTK::UnitInertia_</class>
    <class kind="class">SimTK::SpatialInertia_</class>
    <class kind="class">SimTK::ArticulatedInertia_</class>
    <class kind="class">SimTK::MassProperties_</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Vec&lt; 2, Vec3 &gt;</type>
      <name>SpatialVec</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga09c3f8ce9203cc999a69e18bdfa299ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2, Vec&lt; 3, float &gt; &gt;</type>
      <name>fSpatialVec</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a89c7df8a7eb716f7b979a7b757d48889</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2, Vec&lt; 3, double &gt; &gt;</type>
      <name>dSpatialVec</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3244d1cd64cf9a226ff743e7eb4e264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, Row3 &gt;</type>
      <name>SpatialRow</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaa093939834c7a15587de84b8fa379572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, Row&lt; 3, float &gt; &gt;</type>
      <name>fSpatialRow</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae8002831e62016edb58c55ff7a94bfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, Row&lt; 3, double &gt; &gt;</type>
      <name>dSpatialRow</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2e8fff65912d6c87b0f6d2bd86218cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, Mat33 &gt;</type>
      <name>SpatialMat</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga62d661c98a4b9595b84102e835800511</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, Mat&lt; 3, 3, float &gt; &gt;</type>
      <name>fSpatialMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4cd6b4a19d429ce6c1e95ebb9013287e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, Mat&lt; 3, 3, double &gt; &gt;</type>
      <name>dSpatialMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acd8f897a91ee59725b172c0b859a5815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitInertia_&lt; Real &gt;</type>
      <name>UnitInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af4586b331c8fbbb1f3c18d2a1a03ce92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitInertia_&lt; float &gt;</type>
      <name>fUnitInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a477722ebc554f08856ea0f612b27b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitInertia_&lt; double &gt;</type>
      <name>dUnitInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adcce13c4ad58d5aee947072ef9cd3586</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inertia_&lt; Real &gt;</type>
      <name>Inertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a71d271165c00227f5ff5951f1218029b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inertia_&lt; float &gt;</type>
      <name>fInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac0bfa6ada6b7f313bca2c045b437a2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inertia_&lt; double &gt;</type>
      <name>dInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a84c419f8747bdcbeb1ef97d96343e01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MassProperties_&lt; Real &gt;</type>
      <name>MassProperties</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9d54d39dfaae29e62c7c1375620f1802</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MassProperties_&lt; float &gt;</type>
      <name>fMassProperties</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2dca158d2075cfe285fd5c5bb062c61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MassProperties_&lt; double &gt;</type>
      <name>dMassProperties</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae2fd881082f43b2cc419b79624aa6df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialInertia_&lt; Real &gt;</type>
      <name>SpatialInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a01fddf4cefc9b5c82cb55789127abe53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialInertia_&lt; float &gt;</type>
      <name>fSpatialInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9d341aa61d4a6e53db1e610ac22e39b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialInertia_&lt; double &gt;</type>
      <name>dSpatialInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a014e74e4b8e0c5775715942ad5086dea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArticulatedInertia_&lt; Real &gt;</type>
      <name>ArticulatedInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab1473db0cef6d6f29b827de9f1b3cb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArticulatedInertia_&lt; float &gt;</type>
      <name>fArticulatedInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5d2d90552acc185537775410bcbeed3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArticulatedInertia_&lt; double &gt;</type>
      <name>dArticulatedInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a836979f05f6f8ff960c2e6eef8d0e6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitInertia</type>
      <name>Gyration</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51507d2e5a82282fd8ec7ff82886d16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a08dcce968d051a9f6b06527e6620553e</anchor>
      <arglist>(std::ostream &amp;o, const MassProperties_&lt; P &gt; &amp;mp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Mat.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/SmallMatrix/include/SimTKcommon/internal/</path>
    <filename>Mat_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::Mat</class>
    <class kind="struct">SimTK::Mat::EltResult</class>
    <class kind="struct">SimTK::Mat::Result</class>
    <class kind="struct">SimTK::Mat::Substitute</class>
    <class kind="struct">SimTK::Mat::SubMat</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>Mat&lt; M, N, EL, CSL, RSL &gt;::template Result&lt; Mat&lt; M, N, ER, CSR, RSR &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab443405b060faa7b73fa04bf49fd085e</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; M, N, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, EL, CSL, RSL &gt;::template Result&lt; Mat&lt; M, N, ER, CSR, RSR &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a84c0554f218e063f87b3c5d1336dca08</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; M, N, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, EL, CSL, RSL &gt;::template Result&lt; Mat&lt; N, P, ER, CSR, RSR &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad6cef592972f44cd3ba801b5ff34c84a</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; N, P, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, EL, CSL, RSL &gt;::template Result&lt; Mat&lt; MM, NN, ER, CSR, RSR &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a94c2414499cd5e62bc586c8b00ef13c9</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; MM, NN, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a96088123fe12288813483dbdc94fa0c7</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; M, N, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeee470bb4b97b340d6379d6fe1750135</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; M, N, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a325ad807a2ead6ed2fac45e55e0d8fda</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a95ca052c62bcf97ed5f94654bd7a3fa2</anchor>
      <arglist>(const float &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a681073ab4d4b0c4c11a98be8512bc5f4</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b1aa81711108a0967a1b26d6591a197</anchor>
      <arglist>(const double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acee54da53f534c8c0f8de0c15796e229</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aee98849b6975d70b4a7713cbc8f42173</anchor>
      <arglist>(const long double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a16e9ba42908d1760d0ceee65104d31b8</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a17f449696aa7da8160fb00f1c6f8f540</anchor>
      <arglist>(int l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1e60a3838311003b3286625941a84133</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8fbf3414ad049b459b7ac649d417d64b</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9f56dc0553f5f8e385ce217a554cb27c</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4079d97c8eb529eb58dfda6c3fdbdfc5</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af15dd658d476089df53d3ccc79e8817a</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af853b071d98aab62edb892150a0d6b1c</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab3ca5badb6b70371af42636e91101f5a</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09524995acccb7a4377da57f551654ab</anchor>
      <arglist>(const float &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3c5164f668b8b984eb4f65976b3f04d9</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0c6e763348da08cbe959f91e7a767ea7</anchor>
      <arglist>(const double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4aa59686c694083bc6c6332e50e2c8e2</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afe0c5f8506d7673f0bab16264f20ddcf</anchor>
      <arglist>(const long double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a015b74f62071acf29c8728c4186c1658</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a809b91dad835da6af1ec1a14f9fa927b</anchor>
      <arglist>(int l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a28b2a4d7fe3ce9c697b05368e1f95d</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acc0c5c34278c4ddecb3c73e64ddc9416</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5ecb428cecf295283ca162800cd95c98</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f0cb64a86cac327874a49206b9265c3</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4e4a86aa66ef0d5230d0c05606ca6276</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeac059b03ece75b26ceeab71098cec48</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afd00ea93ee023d264e2f7f629d5e595a</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afa2a47a48dc9ea813e75f6a5d89cb456</anchor>
      <arglist>(const float &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8398371d7f2fe66a30ca579395e5d67f</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8141b913e6c729695f0a4d80ab80c80b</anchor>
      <arglist>(const double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7fe9dff365c3c72cfb8cfa07951c45ea</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2890157a34365fd26d40697cf6e48949</anchor>
      <arglist>(const long double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab1042e8ffc45d27e99456a9525f7fe03</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0967ebd638bfb26c015129fcf7ab3818</anchor>
      <arglist>(int l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93d3bfb445e9c6516b46a67443eeb6b4</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2ff024a4d1f094a32c186c9bb84a51a9</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4b1d811edbbfdf40b075273876ed7221</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b204f424d103ebee07b9fa0260f578d</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aae5c470f2079133c5ee2f0e6f0556dee</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa4fecac66786889ff3400fea48ae320f</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7beb5ce8f77613cb7c9fccf6300a9bab</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6b07d11e6f530bfe77928247a34ba88d</anchor>
      <arglist>(const float &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c7732ccc22449d0e7848c34acc26ee7</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad45cda2de54c04e5c736d1caa9582693</anchor>
      <arglist>(const double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a401e365520f22a3956dcf94926f6550c</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af300d5053654a8a44e9f78c428debc11</anchor>
      <arglist>(const long double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6e1f234d26d3ab910a5d5b6e3a99cd6b</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a415bcbc6ddf2b860375e468a1b418a7c</anchor>
      <arglist>(int l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aafe5a91f578297ba9711089a4719692f</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d7df9ade89e03b98d8e6c26462569a0</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac39d3d76e436846a558b3de2d7e1c38a</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09e695b34665dd29ff694b208b269fb9</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a85bd4aa2bd6bcb0593c6bf81035e0fa5</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ade566dd7aff6ed41f0a3692f64e1ff86</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abf8a923ce5ce85ac3fddbddd1c5df70d</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const Mat&lt; M, N, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aff8b18bcf3e60c2e030028faedc9c5b3</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, Mat&lt; M, N, E, CS, RS &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatrixCharacteristics.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/BigMatrix/include/SimTKcommon/internal/</path>
    <filename>MatrixCharacteristics_8h</filename>
    <includes id="Scalar_8h" name="Scalar.h" local="yes" imported="no">SimTKcommon/Scalar.h</includes>
    <class kind="class">SimTK::MatrixStructure</class>
    <class kind="struct">SimTK::MatrixStructure::Mask</class>
    <class kind="class">SimTK::MatrixStorage</class>
    <class kind="struct">SimTK::MatrixStorage::Mask</class>
    <class kind="class">SimTK::MatrixOutline</class>
    <class kind="struct">SimTK::MatrixOutline::Mask</class>
    <class kind="class">SimTK::MatrixCondition</class>
    <class kind="struct">SimTK::MatrixCondition::Mask</class>
    <class kind="class">SimTK::MatrixCharacter</class>
    <class kind="class">SimTK::MatrixCharacter::LapackFull</class>
    <class kind="class">SimTK::MatrixCharacter::Vector</class>
    <class kind="class">SimTK::MatrixCharacter::RowVector</class>
    <class kind="class">SimTK::MatrixCharacter::Mask</class>
    <class kind="class">SimTK::MatrixCommitment</class>
    <class kind="class">SimTK::MatrixCommitment::Vector</class>
    <class kind="class">SimTK::MatrixCommitment::RowVector</class>
    <class kind="class">SimTK::MatrixCommitment::Triangular</class>
    <class kind="class">SimTK::MatrixCommitment::Symmetric</class>
    <class kind="class">SimTK::MatrixCommitment::Hermitian</class>
    <class kind="class">SimTK::MatrixCommitment::SkewSymmetric</class>
    <class kind="class">SimTK::MatrixCommitment::SkewHermitian</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__MatrixCharacteristics.html</anchorfile>
      <anchor>ga20dee8a22d0b10e4887e6418446d01cd</anchor>
      <arglist>(std::ostream &amp;o, const MatrixCharacter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__MatrixCharacteristics.html</anchorfile>
      <anchor>ga8cc1d805e4bd200104dbe524d396ede8</anchor>
      <arglist>(std::ostream &amp;o, const MatrixCommitment &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatrixHelper.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/BigMatrix/include/SimTKcommon/internal/</path>
    <filename>MatrixHelper_8h</filename>
    <includes id="Scalar_8h" name="Scalar.h" local="yes" imported="no">SimTKcommon/Scalar.h</includes>
    <class kind="class">SimTK::MatrixHelper</class>
    <class kind="class">SimTK::MatrixHelper::ShallowCopy</class>
    <class kind="class">SimTK::MatrixHelper::DeepCopy</class>
    <class kind="class">SimTK::MatrixHelper::TransposeView</class>
    <class kind="class">SimTK::MatrixHelper::DiagonalView</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Measure.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>Measure_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <class kind="class">SimTK::AbstractMeasure</class>
    <class kind="class">SimTK::AbstractMeasure::SetHandle</class>
    <class kind="class">SimTK::Measure_</class>
    <class kind="class">SimTK::Measure_::Constant</class>
    <class kind="class">SimTK::Measure_::Zero</class>
    <class kind="class">SimTK::Measure_::Zero</class>
    <class kind="class">SimTK::Measure_::One</class>
    <class kind="class">SimTK::Measure_::One</class>
    <class kind="class">SimTK::Measure_::Time</class>
    <class kind="class">SimTK::Measure_::Variable</class>
    <class kind="class">SimTK::Measure_::Result</class>
    <class kind="class">SimTK::Measure_::Sinusoid</class>
    <class kind="class">SimTK::Measure_::Plus</class>
    <class kind="class">SimTK::Measure_::Minus</class>
    <class kind="class">SimTK::Measure_::Scale</class>
    <class kind="class">SimTK::Measure_::Integrate</class>
    <class kind="class">SimTK::Measure_::Differentiate</class>
    <class kind="class">SimTK::Measure_::Extreme</class>
    <class kind="class">SimTK::Measure_::Minimum</class>
    <class kind="class">SimTK::Measure_::Maximum</class>
    <class kind="class">SimTK::Measure_::MaxAbs</class>
    <class kind="class">SimTK::Measure_::MinAbs</class>
    <class kind="class">SimTK::Measure_::Delay</class>
    <class kind="class">SimTK::Measure_::SampleAndHold</class>
    <namespace>SimTK</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE_BASE</name>
      <anchorfile>Measure_8h.html</anchorfile>
      <anchor>a6a926fda7149b404a625c6ea39c1bd2f</anchor>
      <arglist>(MH, PH)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>Measure_8h.html</anchorfile>
      <anchor>a35882bcd6cb2b4ab9b74dac46be72155</anchor>
      <arglist>(MH, PH)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE_ABSTRACT</name>
      <anchorfile>Measure_8h.html</anchorfile>
      <anchor>a7edf55583b42ddcb190a33504c313a29</anchor>
      <arglist>(MH, PH)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>Measure_8h.html</anchorfile>
      <anchor>a3f712610cd5413bc3fc04980a38ff3f3</anchor>
      <arglist>(MH, PH)</arglist>
    </member>
    <member kind="typedef">
      <type>Measure_&lt; Real &gt;</type>
      <name>Measure</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af2db98c0c9ab926410ec5cc323ba877a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Operation</name>
      <anchorfile>Measure_8h.html</anchorfile>
      <anchor>aa8f137f19095e0bdcf4f521e901f88bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae3e71d3b697a3a643bc88762b200f0a5</anchor>
      <arglist>(MeasureIndex)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MeasureImplementation.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>MeasureImplementation_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <includes id="Measure_8h" name="Measure.h" local="yes" imported="no">SimTKcommon/internal/Measure.h</includes>
    <includes id="Subsystem_8h" name="Subsystem.h" local="yes" imported="no">SimTKcommon/internal/Subsystem.h</includes>
    <includes id="System_8h" name="System.h" local="yes" imported="no">SimTKcommon/internal/System.h</includes>
    <includes id="SubsystemGuts_8h" name="SubsystemGuts.h" local="yes" imported="no">SimTKcommon/internal/SubsystemGuts.h</includes>
    <class kind="class">SimTK::AbstractMeasure::Implementation</class>
    <class kind="class">SimTK::Measure_::Implementation</class>
    <class kind="class">SimTK::Measure_::Constant::Implementation</class>
    <class kind="class">SimTK::Measure_::Time::Implementation</class>
    <class kind="class">SimTK::Measure_::Time::Implementation</class>
    <class kind="class">SimTK::Measure_::Variable::Implementation</class>
    <class kind="class">SimTK::Measure_::Result::Implementation</class>
    <class kind="class">SimTK::Measure_::Sinusoid::Implementation</class>
    <class kind="class">SimTK::Measure_::Plus::Implementation</class>
    <class kind="class">SimTK::Measure_::Minus::Implementation</class>
    <class kind="class">SimTK::Measure_::Scale::Implementation</class>
    <class kind="class">SimTK::Measure_::Integrate::Implementation</class>
    <class kind="class">SimTK::Measure_::Differentiate::Implementation</class>
    <class kind="class">SimTK::Measure_::Extreme::Implementation</class>
    <class kind="class">SimTK::Measure_::Delay::Implementation</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Mechanics.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/</path>
    <filename>Mechanics_8h</filename>
    <includes id="Scalar_8h" name="Scalar.h" local="yes" imported="no">SimTKcommon/Scalar.h</includes>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="Orientation_8h" name="Orientation.h" local="yes" imported="no">SimTKcommon/Orientation.h</includes>
    <includes id="SpatialAlgebra_8h" name="SpatialAlgebra.h" local="yes" imported="no">SimTKcommon/internal/SpatialAlgebra.h</includes>
    <includes id="MassProperties_8h" name="MassProperties.h" local="yes" imported="no">SimTKcommon/internal/MassProperties.h</includes>
  </compound>
  <compound kind="file">
    <name>MobilizedBody.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody_8h</filename>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="Body_8h" name="Body.h" local="yes" imported="no">simbody/internal/Body.h</includes>
    <includes id="Motion_8h" name="Motion.h" local="yes" imported="no">simbody/internal/Motion.h</includes>
    <class kind="class">SimTK::MobilizedBody</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Ball.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Ball_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Ball</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_BendStretch.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__BendStretch_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::BendStretch</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_BuiltIns.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__BuiltIns_8h</filename>
    <includes id="MobilizedBody__Ball_8h" name="MobilizedBody_Ball.h" local="yes" imported="no">simbody/internal/MobilizedBody_Ball.h</includes>
    <includes id="MobilizedBody__BendStretch_8h" name="MobilizedBody_BendStretch.h" local="yes" imported="no">simbody/internal/MobilizedBody_BendStretch.h</includes>
    <includes id="MobilizedBody__Bushing_8h" name="MobilizedBody_Bushing.h" local="yes" imported="no">simbody/internal/MobilizedBody_Bushing.h</includes>
    <includes id="MobilizedBody__Custom_8h" name="MobilizedBody_Custom.h" local="yes" imported="no">simbody/internal/MobilizedBody_Custom.h</includes>
    <includes id="MobilizedBody__Cylinder_8h" name="MobilizedBody_Cylinder.h" local="yes" imported="no">simbody/internal/MobilizedBody_Cylinder.h</includes>
    <includes id="MobilizedBody__Ellipsoid_8h" name="MobilizedBody_Ellipsoid.h" local="yes" imported="no">simbody/internal/MobilizedBody_Ellipsoid.h</includes>
    <includes id="MobilizedBody__Free_8h" name="MobilizedBody_Free.h" local="yes" imported="no">simbody/internal/MobilizedBody_Free.h</includes>
    <includes id="MobilizedBody__FreeLine_8h" name="MobilizedBody_FreeLine.h" local="yes" imported="no">simbody/internal/MobilizedBody_FreeLine.h</includes>
    <includes id="MobilizedBody__FunctionBased_8h" name="MobilizedBody_FunctionBased.h" local="yes" imported="no">simbody/internal/MobilizedBody_FunctionBased.h</includes>
    <includes id="MobilizedBody__Gimbal_8h" name="MobilizedBody_Gimbal.h" local="yes" imported="no">simbody/internal/MobilizedBody_Gimbal.h</includes>
    <includes id="MobilizedBody__Ground_8h" name="MobilizedBody_Ground.h" local="yes" imported="no">simbody/internal/MobilizedBody_Ground.h</includes>
    <includes id="MobilizedBody__LineOrientation_8h" name="MobilizedBody_LineOrientation.h" local="yes" imported="no">simbody/internal/MobilizedBody_LineOrientation.h</includes>
    <includes id="MobilizedBody__Pin_8h" name="MobilizedBody_Pin.h" local="yes" imported="no">simbody/internal/MobilizedBody_Pin.h</includes>
    <includes id="MobilizedBody__Planar_8h" name="MobilizedBody_Planar.h" local="yes" imported="no">simbody/internal/MobilizedBody_Planar.h</includes>
    <includes id="MobilizedBody__Screw_8h" name="MobilizedBody_Screw.h" local="yes" imported="no">simbody/internal/MobilizedBody_Screw.h</includes>
    <includes id="MobilizedBody__Slider_8h" name="MobilizedBody_Slider.h" local="yes" imported="no">simbody/internal/MobilizedBody_Slider.h</includes>
    <includes id="MobilizedBody__SphericalCoords_8h" name="MobilizedBody_SphericalCoords.h" local="yes" imported="no">simbody/internal/MobilizedBody_SphericalCoords.h</includes>
    <includes id="MobilizedBody__Translation_8h" name="MobilizedBody_Translation.h" local="yes" imported="no">simbody/internal/MobilizedBody_Translation.h</includes>
    <includes id="MobilizedBody__Universal_8h" name="MobilizedBody_Universal.h" local="yes" imported="no">simbody/internal/MobilizedBody_Universal.h</includes>
    <includes id="MobilizedBody__Weld_8h" name="MobilizedBody_Weld.h" local="yes" imported="no">simbody/internal/MobilizedBody_Weld.h</includes>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Bushing.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Bushing_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Bushing</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Custom.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Custom_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Custom</class>
    <class kind="class">SimTK::MobilizedBody::Custom::Implementation</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Cylinder.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Cylinder_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Cylinder</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Ellipsoid.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Ellipsoid_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Ellipsoid</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Free.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Free_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Free</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_FreeLine.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__FreeLine_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::FreeLine</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_FunctionBased.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__FunctionBased_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <includes id="MobilizedBody__Custom_8h" name="MobilizedBody_Custom.h" local="yes" imported="no">simbody/internal/MobilizedBody_Custom.h</includes>
    <class kind="class">SimTK::MobilizedBody::FunctionBased</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Gimbal.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Gimbal_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Gimbal</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Ground.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Ground_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Ground</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_LineOrientation.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__LineOrientation_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::LineOrientation</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Pin.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Pin_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Pin</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Planar.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Planar_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Planar</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Screw.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Screw_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Screw</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Slider.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Slider_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Slider</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_SphericalCoords.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__SphericalCoords_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::SphericalCoords</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Translation.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Translation_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Translation</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Universal.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Universal_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Universal</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MobilizedBody_Weld.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MobilizedBody__Weld_8h</filename>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::MobilizedBody::Weld</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Motion.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>Motion_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::Motion</class>
    <class kind="class">SimTK::Motion::Sinusoid</class>
    <class kind="class">SimTK::Motion::Steady</class>
    <class kind="class">SimTK::Motion::Custom</class>
    <class kind="class">SimTK::Motion::Custom::Implementation</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MultibodyGraphMaker.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/include/simmath/</path>
    <filename>MultibodyGraphMaker_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::MultibodyGraphMaker</class>
    <class kind="class">SimTK::MultibodyGraphMaker::Body</class>
    <class kind="class">SimTK::MultibodyGraphMaker::Joint</class>
    <class kind="class">SimTK::MultibodyGraphMaker::JointType</class>
    <class kind="class">SimTK::MultibodyGraphMaker::Mobilizer</class>
    <class kind="class">SimTK::MultibodyGraphMaker::LoopConstraint</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>MultibodySystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>MultibodySystem_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::MultibodySystem</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>negator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Scalar/include/SimTKcommon/internal/</path>
    <filename>negator_8h</filename>
    <class kind="class">SimTK::negator</class>
    <class kind="struct">SimTK::negator::Result</class>
    <class kind="struct">SimTK::negator::Substitute</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga9da8ecd39778e545317bf7118e5715c8</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gae54451636826c4c92a008d5727f0259d</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga87a5ec9ee433db8ba2fc4f3cfc909612</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaef08e42c36138040a64b88f5124954bb</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga033b741d081dd96f0b70d15bc5579d9d</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gaaefb475975dd2a35bf2248e16aadaf8d</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga87069fe8c28a4fd0bbd59ae07f5f9159</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gabda0333b6af1ea4af9be0f99adc7b90c</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gac8242f7150cacc52df29a4fd8fe642fb</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga43656d634341750704899a08551b45ab</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga2de11c8889fc623d3b4067796d1b6e3f</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga40f9ebde86aabc78cbd0bb7d3dd2fd39</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga27ded82efd3d6f955ccc923a0768be65</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gadcf0f198bd95948c4bb44c0eddd5b158</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gafb71a728a956a7871751eea4a2e8cb12</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DEST &amp;</type>
      <name>negRecast</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4b4f4fb307bf3ffde32ddab417828718</anchor>
      <arglist>(const SRC &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; B &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b0392eefb745c342e813096a55fe0ab</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7e52f0cf775230463ee18e850c4b9718</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acb18989d17ca833382f5e51d7c883a1c</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; B &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a694f2c8fc55a2a3f0ab1eb7649c861ee</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abc30bfc71a1022b8df91f737432e79f8</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afe10bbf5c7ccb2b13a299c0a1c311b90</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; B &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a431553f1563af84a7893929db31dd4e4</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6bbcda20b106f558acf6a1ee47b30cac</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5121ed88c338589897d1aa24f956a224</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; B &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a182e03955e8dc0590e75a0f4f82502d3</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab65112f950374e70d21aaf4313524df0</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3bb4d8e1f3a5923313592a57579943d</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6005a63100dd03b82682ae07ed43731d</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a67183631697512343a3287a2cb7a3dda</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4a4e3007486f025b53615d528df0021c</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a380e3460c0ade23db383030551ef50e4</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2b04fd0c4e36edaec5c207f2865089a4</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa46c6b14fa8cbffe08d7a07ec0e0957b</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>add7f1358f7386e5d8581c1626fb1662c</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, negator&lt; NUM &gt; &amp;nn)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a99032b17cb08fb80ff6bebf982bca5be</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;os, const negator&lt; NUM &gt; &amp;nn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NTraits.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Scalar/include/SimTKcommon/internal/</path>
    <filename>NTraits_8h</filename>
    <includes id="Constants_8h" name="Constants.h" local="yes" imported="no">SimTKcommon/Constants.h</includes>
    <includes id="CompositeNumericalTypes_8h" name="CompositeNumericalTypes.h" local="yes" imported="no">SimTKcommon/internal/CompositeNumericalTypes.h</includes>
    <class kind="struct">SimTK::Widest</class>
    <class kind="struct">SimTK::Widest&lt; float, float &gt;</class>
    <class kind="struct">SimTK::Widest&lt; float, double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; float, long double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; double, float &gt;</class>
    <class kind="struct">SimTK::Widest&lt; double, double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; double, long double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; long double, float &gt;</class>
    <class kind="struct">SimTK::Widest&lt; long double, double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; long double, long double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; complex&lt; R1 &gt;, complex&lt; R2 &gt; &gt;</class>
    <class kind="struct">SimTK::Widest&lt; complex&lt; R1 &gt;, R2 &gt;</class>
    <class kind="struct">SimTK::Widest&lt; R1, complex&lt; R2 &gt; &gt;</class>
    <class kind="struct">SimTK::Narrowest</class>
    <class kind="struct">SimTK::Narrowest&lt; float, float &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; float, double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; float, long double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; double, float &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; double, double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; double, long double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; long double, float &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; long double, double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; long double, long double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; complex&lt; R1 &gt;, complex&lt; R2 &gt; &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; complex&lt; R1 &gt;, R2 &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; R1, complex&lt; R2 &gt; &gt;</class>
    <class kind="class">SimTK::RTraits</class>
    <class kind="class">SimTK::RTraits&lt; float &gt;</class>
    <class kind="class">SimTK::RTraits&lt; double &gt;</class>
    <class kind="class">SimTK::RTraits&lt; long double &gt;</class>
    <class kind="class">SimTK::NTraits</class>
    <class kind="class">SimTK::NTraits&lt; complex&lt; R &gt; &gt;</class>
    <class kind="struct">SimTK::NTraits&lt; complex&lt; R &gt; &gt;::Result</class>
    <class kind="struct">SimTK::NTraits&lt; complex&lt; R &gt; &gt;::Substitute</class>
    <class kind="class">SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;</class>
    <class kind="struct">SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;::Result</class>
    <class kind="struct">SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;::Substitute</class>
    <class kind="class">SimTK::CNT&lt; complex&lt; R &gt; &gt;</class>
    <class kind="class">SimTK::CNT&lt; conjugate&lt; R &gt; &gt;</class>
    <class kind="class">SimTK::CNT&lt; float &gt;</class>
    <class kind="class">SimTK::CNT&lt; double &gt;</class>
    <class kind="class">SimTK::CNT&lt; long double &gt;</class>
    <namespace>SimTK</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>NTraits_8h.html</anchorfile>
      <anchor>ab85f34fd1c616adb5427245ae0f021b0</anchor>
      <arglist>(T1, T2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>NTraits_8h.html</anchorfile>
      <anchor>adc490667f4def26ce99f3d94a7be3e90</anchor>
      <arglist>(T1, T2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEFINE_REAL_NTRAITS</name>
      <anchorfile>NTraits_8h.html</anchorfile>
      <anchor>af4b8a1e90a456bf68118e4e34dec8092</anchor>
      <arglist>(R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const complex&lt; long double &gt;</type>
      <name>zeroes</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a323b7fc26129703d1354cff7e689ae94</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaee1639f5a0a00bf2573d70004b67b7a2</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga8ad5cf5bb115ba42403bf0dc0b0d0f1c</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gac6f5da3ebcea806bf330d4fd9bc3a940</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gad7b0ce99500f5bd2a4453510fe9fca9a</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaf7373194d259de344e2309aae2a0bfbd</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gac0d324a6c102dda4b86fca1edebe3e7d</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga0ccfa30a271c9e4c5876adc2aa0c9de3</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gad9048d49aea0e1f9745a445d550cfade</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga48a7c459a95e7850cad08c0edb105014</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga302faee5c1612479474d814735a2665e</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gacabcb83214c0501194b31493b26bf432</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga9b8125eb797a7f9f2da008cf37cb5269</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga0ccb492c19672dc6d3d621a94b6691d2</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gaaf53a57b924c0459caa104f09aecef64</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga844fea956d0bb225b506d5cecb5d53f4</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga7c26dcc1bc5c5edf388e8bd1675cd884</anchor>
      <arglist>(const float &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gadf7bf88379c8b3ac8780331b48d7cace</anchor>
      <arglist>(const double &amp;a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaae66686c14ae9276cdae653e0a1ff244</anchor>
      <arglist>(const long double &amp;a, const long double &amp;b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga979e1667fe5c1c296dcfff1ee473d0fa</anchor>
      <arglist>(const float &amp;a, const double &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gadce454298bbd991dc74c94d05350bc5d</anchor>
      <arglist>(const double &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga020d71563b487697a44467e6ba2cc89c</anchor>
      <arglist>(const float &amp;a, const long double &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga9d71c5eb1f8341f2404d1e28c0fc2e4d</anchor>
      <arglist>(const long double &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga7d1ef1b4c1fc6f4486fb072abd93d3d9</anchor>
      <arglist>(const double &amp;a, const long double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga2704923e9cf1b7f90b35ccced37a145c</anchor>
      <arglist>(const long double &amp;a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga77f2fe3542e889a2fc4045628c443e48</anchor>
      <arglist>(const float &amp;a, int b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gad0ef618f27d2b892752f98a6166b8c3f</anchor>
      <arglist>(int a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gabca7abd19ebf26721920b754b4e4f1d1</anchor>
      <arglist>(const double &amp;a, int b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga1903229cea7b917668fef94fbdf0ebf5</anchor>
      <arglist>(int a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacc953060e19024c6f91f0e9486dd12c3</anchor>
      <arglist>(const long double &amp;a, int b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gad1ef80164aa8b2df22058523de38a59a</anchor>
      <arglist>(int a, const long double &amp;b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga967ff1bda7788433fbb928b7fa2f98de</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const std::complex&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga88a722b6efa5b7947b4a28f801335b3d</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const conjugate&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga96dd91aeefab0deedb9df8338a7bca91</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const conjugate&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga74909a013adb53c9d039cd565f4efcb9</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const std::complex&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacf5487884b6decf6bf6d248100d92545</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaa95b667ef0a8c5d0341e1470d82fc4a4</anchor>
      <arglist>(const float &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaeb1af6223f2c962fb567d715f71d8c4f</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const double &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga2677afff49bdde43b1234ff4641f26c5</anchor>
      <arglist>(const double &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga6f75d58a88cefe1dfdc7488035bec193</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const long double &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga0e638731c37e5850fb169e4ecc399bf2</anchor>
      <arglist>(const long double &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga63f1b5e10d3fa0891cd5f420180a66b5</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, int b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaf6b16f8b92fd3889f24cbdbcd66af433</anchor>
      <arglist>(int a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga5822d04dcdb3d7571a865732f3883017</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gabd5d29abf07dc71ad0b406edecd4b92e</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gafccdeaef060eff8ccfb90109a6426cb4</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const double &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga3c971c0c8af5f492a60f68c2675fb7be</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga05d21766eea507c94930163e9361a69b</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const long double &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacc690db2d428932aaa3210b5e34c1ca6</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaf43e5d7a4ed140c265ac088fd8711ba1</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, int b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga5639cdf06c68248ef08cedbe852525b5</anchor>
      <arglist>(int a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a234043183211cdef4c8030aa5cfe3c87</anchor>
      <arglist>(float, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4bc4e98e160a865873ceab3ed45abf6</anchor>
      <arglist>(float, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f8ccbc97ce5e50750c35e2af6f486f4</anchor>
      <arglist>(float, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a16bc3a4e24da22812260ca858088999a</anchor>
      <arglist>(double, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa291e5a4ca9269119354952aad3b8b8f</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad2f8f61f8e0c4452ec5a9c2f25940228</anchor>
      <arglist>(double, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4df3f14f25eea11e5967b3ba5a62ee70</anchor>
      <arglist>(long double, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab3c21698a68a1e1562d5670a3b66d11a</anchor>
      <arglist>(long double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a860031e8becaa517db1dd87fb59c8c8f</anchor>
      <arglist>(long double, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b4620a8439d1d3d1b90c0b2a9eb2b62</anchor>
      <arglist>(float, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0c229fb5fb0c8d9f7d4a0a5a291ecf39</anchor>
      <arglist>(float, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02c70fd054004224d904c1a49672b994</anchor>
      <arglist>(float, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aacd5aeafd14ecf677b03062f94ecbcf1</anchor>
      <arglist>(double, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5405ca9104f27ac5e77e5678d8f1233f</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2b0b0d9f91ac11f80529d3d7e3fa791c</anchor>
      <arglist>(double, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a665d3f4f29d5d7ecdfca5b8afb662550</anchor>
      <arglist>(long double, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92187ec6772803ed0690cac45567464c</anchor>
      <arglist>(long double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa5abefe4c250cfab450450cd4974651c</anchor>
      <arglist>(long double, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_REAL_NTRAITS</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a681f046ee7b18722d98f716e8097a9b4</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_REAL_NTRAITS</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aee777bc11b615a88a4d92b8cae638715</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_REAL_NTRAITS</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac5e22fe5ecab290e04ea349158ab3e37</anchor>
      <arglist>(long double)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OBBTree.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>OBBTree_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <includes id="Geo__Box_8h" name="Geo_Box.h" local="yes" imported="no">simmath/internal/Geo_Box.h</includes>
    <includes id="Geo__BicubicBezierPatch_8h" name="Geo_BicubicBezierPatch.h" local="yes" imported="no">simmath/internal/Geo_BicubicBezierPatch.h</includes>
    <class kind="class">SimTK::OBBLeaf</class>
    <class kind="class">SimTK::OBBNode</class>
    <class kind="class">SimTK::OBBTree</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ObservedPointFitter.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>ObservedPointFitter_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="MultibodySystem_8h" name="MultibodySystem.h" local="yes" imported="no">simbody/internal/MultibodySystem.h</includes>
    <class kind="class">SimTK::ObservedPointFitter</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Optimizer.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/include/simmath/</path>
    <filename>Optimizer_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Differentiator_8h" name="Differentiator.h" local="yes" imported="no">simmath/Differentiator.h</includes>
    <class kind="class">SimTK::OptimizerSystem</class>
    <class kind="class">SimTK::Optimizer</class>
    <namespace>SimTK</namespace>
    <member kind="enumeration">
      <name>OptimizerAlgorithm</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BestAvailable</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efba91b8ccf023855f6f6e5f4a35daf12031</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorPoint</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efba3e34c051a0fbdfd4a5a5c7ac50b8be45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LBFGS</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efbac5f8f853b0294d4822cb08e7b51ab9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LBFGSB</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efbad7432802d6aa3fb5f5aa02ce29e1e5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CFSQP</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efbae4dea09adae0360d42c7e9a8bda53edc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OptimizerRep.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/include/simmath/internal/</path>
    <filename>OptimizerRep_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="yes" imported="no">simmath/Optimizer.h</includes>
    <includes id="Differentiator_8h" name="Differentiator.h" local="yes" imported="no">simmath/Differentiator.h</includes>
    <class kind="class">SimTK::SysObjectiveFunc</class>
    <class kind="class">SimTK::SysConstraintFunc</class>
    <class kind="class">SimTK::Optimizer::OptimizerRep</class>
    <class kind="class">SimTK::DefaultOptimizer</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Orientation.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/</path>
    <filename>Orientation_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="UnitVec_8h" name="UnitVec.h" local="yes" imported="no">SimTKcommon/internal/UnitVec.h</includes>
    <includes id="Quaternion_8h" name="Quaternion.h" local="yes" imported="no">SimTKcommon/internal/Quaternion.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="yes" imported="no">SimTKcommon/internal/Rotation.h</includes>
    <includes id="Transform_8h" name="Transform.h" local="yes" imported="no">SimTKcommon/internal/Transform.h</includes>
    <namespace>SimTK</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_RTD</name>
      <anchorfile>Orientation_8h.html</anchorfile>
      <anchor>aa032f9b659714511a6255edfb7d7bd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DTR</name>
      <anchorfile>Orientation_8h.html</anchorfile>
      <anchor>a7c86a26e11731ac2d9f1c67fa3a0af74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>convertRadiansToDegrees</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad441f40120adc47892ddae78bddb33fb</anchor>
      <arglist>(const Real rad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>convertDegreesToRadians</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a024d2ab093463ed35bcb3346d17bc63c</anchor>
      <arglist>(const Real deg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OrientedBoundingBox.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>OrientedBoundingBox_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::OrientedBoundingBox</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>OrientedBoundingBox</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a410269bfaada2a1c4c4897655495c868</anchor>
      <arglist>(const Transform &amp;t, const OrientedBoundingBox &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parallel2DExecutor.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Parallel2DExecutor_8h</filename>
    <includes id="ParallelExecutor_8h" name="ParallelExecutor.h" local="yes" imported="no">ParallelExecutor.h</includes>
    <includes id="PrivateImplementation_8h" name="PrivateImplementation.h" local="yes" imported="no">PrivateImplementation.h</includes>
    <class kind="class">SimTK::Parallel2DExecutor</class>
    <class kind="class">SimTK::Parallel2DExecutor::Task</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ParallelExecutor.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>ParallelExecutor_8h</filename>
    <includes id="PrivateImplementation_8h" name="PrivateImplementation.h" local="yes" imported="no">PrivateImplementation.h</includes>
    <class kind="class">SimTK::ParallelExecutor</class>
    <class kind="class">SimTK::ParallelExecutor::Task</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ParallelWorkQueue.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>ParallelWorkQueue_8h</filename>
    <includes id="ParallelExecutor_8h" name="ParallelExecutor.h" local="yes" imported="no">ParallelExecutor.h</includes>
    <includes id="PrivateImplementation_8h" name="PrivateImplementation.h" local="yes" imported="no">PrivateImplementation.h</includes>
    <class kind="class">SimTK::ParallelWorkQueue</class>
    <class kind="class">SimTK::ParallelWorkQueue::Task</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleConSurfaceSystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>ParticleConSurfaceSystem_8h</filename>
    <includes id="BicubicSurface_8h" name="BicubicSurface.h" local="yes" imported="no">simmath/internal/BicubicSurface.h</includes>
    <includes id="ContactGeometry_8h" name="ContactGeometry.h" local="yes" imported="no">simmath/internal/ContactGeometry.h</includes>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SystemGuts_8h" name="SystemGuts.h" local="yes" imported="no">SimTKcommon/internal/SystemGuts.h</includes>
    <class kind="class">SimTK::ParticleConSurfaceSystemGuts</class>
    <class kind="class">SimTK::ParticleConSurfaceSystem</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Pathname.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Pathname_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="Array_8h" name="Array.h" local="yes" imported="no">SimTKcommon/internal/Array.h</includes>
    <class kind="class">SimTK::Pathname</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Plugin.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Plugin_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="Array_8h" name="Array.h" local="yes" imported="no">SimTKcommon/internal/Array.h</includes>
    <includes id="Pathname_8h" name="Pathname.h" local="yes" imported="no">SimTKcommon/internal/Pathname.h</includes>
    <class kind="class">SimTK::Plugin</class>
    <namespace>SimTK</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PLUGIN_XXX_MAKE_HOLDER</name>
      <anchorfile>Plugin_8h.html</anchorfile>
      <anchor>ac172341527a4e3d847dfbb7d8d4d20aa</anchor>
      <arglist>(FuncName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PLUGIN_XXX_MAKE_BODY</name>
      <anchorfile>Plugin_8h.html</anchorfile>
      <anchor>ad76891fab1443a6ac997bca31c9e9aa2</anchor>
      <arglist>(FuncName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PLUGIN_XXX_MAKE_SYMTEST</name>
      <anchorfile>Plugin_8h.html</anchorfile>
      <anchor>aeb27ad314901348ecdaa7009e17a3801</anchor>
      <arglist>(Symbol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PLUGIN_DEFINE_SYMBOL</name>
      <anchorfile>Plugin_8h.html</anchorfile>
      <anchor>a4f1c1b9f46ff0e92bd6ccfcbd0f1776f</anchor>
      <arglist>(Type, SymName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PLUGIN_DEFINE_FUNCTION</name>
      <anchorfile>Plugin_8h.html</anchorfile>
      <anchor>aba62241fe4114437bdb6a77607e26d7d</anchor>
      <arglist>(RetType, FuncName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PLUGIN_DEFINE_FUNCTION1</name>
      <anchorfile>Plugin_8h.html</anchorfile>
      <anchor>ad2fd601eb2ed8c50a931e0f4883b1ec6</anchor>
      <arglist>(RetType, FuncName, Arg1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PLUGIN_DEFINE_FUNCTION2</name>
      <anchorfile>Plugin_8h.html</anchorfile>
      <anchor>a069dba13037e9a8342e1966f72ad6a9e</anchor>
      <arglist>(RetType, FuncName, Arg1, Arg2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolygonalMesh.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Geometry/include/SimTKcommon/internal/</path>
    <filename>PolygonalMesh_8h</filename>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="PrivateImplementation_8h" name="PrivateImplementation.h" local="yes" imported="no">SimTKcommon/internal/PrivateImplementation.h</includes>
    <class kind="class">SimTK::PolygonalMesh</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>PolynomialRootFinder.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Polynomial/include/SimTKcommon/internal/</path>
    <filename>PolynomialRootFinder_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <class kind="class">SimTK::PolynomialRootFinder</class>
    <class kind="class">SimTK::PolynomialRootFinder::ZeroLeadingCoefficient</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>PrivateImplementation.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>PrivateImplementation_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="ExceptionMacros_8h" name="ExceptionMacros.h" local="yes" imported="no">SimTKcommon/internal/ExceptionMacros.h</includes>
    <class kind="class">SimTK::PIMPLHandle</class>
    <class kind="class">SimTK::PIMPLImplementation</class>
    <namespace>SimTK</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>PrivateImplementation_8h.html</anchorfile>
      <anchor>a6937eade0edd6f147332f43cab7c6c4d</anchor>
      <arglist>(DERIVED, DERIVED_IMPL, PARENT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DEFINITIONS</name>
      <anchorfile>PrivateImplementation_8h.html</anchorfile>
      <anchor>a880d99393e52fd155d2bc52043de8bc8</anchor>
      <arglist>(DERIVED, DERIVED_IMPL, PARENT)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a17c7c5828853a7172233560df69b2637</anchor>
      <arglist>(std::ostream &amp;o, const PIMPLHandle&lt; H, IMPL, PTR &gt; &amp;h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PrivateImplementation_Defs.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>PrivateImplementation__Defs_8h</filename>
    <includes id="PrivateImplementation_8h" name="PrivateImplementation.h" local="yes" imported="no">SimTKcommon/internal/PrivateImplementation.h</includes>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8780b2905403c31255dc4fe3480b2428</anchor>
      <arglist>(std::ostream &amp;o, const PIMPLHandle&lt; HANDLE, IMPL, PTR &gt; &amp;h)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Quaternion.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/internal/</path>
    <filename>Quaternion_8h</filename>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="UnitVec_8h" name="UnitVec.h" local="yes" imported="no">SimTKcommon/internal/UnitVec.h</includes>
    <class kind="class">SimTK::Quaternion_</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Quaternion_&lt; Real &gt;</type>
      <name>Quaternion</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a404fac7242c0f4f8b9f21759a2cf3852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion_&lt; float &gt;</type>
      <name>fQuaternion</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acdec23a5ef6b291761d970393a7b92b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion_&lt; double &gt;</type>
      <name>dQuaternion</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d8b3119f051865cf9297bc16c6098de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Random.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Random/include/SimTKcommon/internal/</path>
    <filename>Random_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <class kind="class">SimTK::Random</class>
    <class kind="class">SimTK::Random::Uniform</class>
    <class kind="class">SimTK::Random::Gaussian</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ReferencePtr.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>ReferencePtr_8h</filename>
    <class kind="class">SimTK::ReferencePtr</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Rotation.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/internal/</path>
    <filename>Rotation_8h</filename>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="CoordinateAxis_8h" name="CoordinateAxis.h" local="yes" imported="no">SimTKcommon/internal/CoordinateAxis.h</includes>
    <includes id="UnitVec_8h" name="UnitVec.h" local="yes" imported="no">SimTKcommon/internal/UnitVec.h</includes>
    <includes id="Quaternion_8h" name="Quaternion.h" local="yes" imported="no">SimTKcommon/internal/Quaternion.h</includes>
    <class kind="class">SimTK::Rotation_</class>
    <class kind="class">SimTK::InverseRotation_</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Rotation_&lt; Real &gt;</type>
      <name>Rotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a028f32537d08269e2de2f2f4aa99e5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation_&lt; float &gt;</type>
      <name>fRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0347954caa733a24cc44afa6ab7edae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation_&lt; double &gt;</type>
      <name>dRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9222b9287b42f088656459f937b4a39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseRotation_&lt; Real &gt;</type>
      <name>InverseRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9e62e9407d923c9d31e0dda0581449cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseRotation_&lt; float &gt;</type>
      <name>fInverseRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adfbacd30d9d3e5b501d79c1211a78417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseRotation_&lt; double &gt;</type>
      <name>dInverseRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7518b7a11a697122a13e4ffcc0b59988</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BodyOrSpaceType</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a187a6e6aa955d2c754226793d2056082</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BodyRotationSequence</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a187a6e6aa955d2c754226793d2056082a09b19887fda64e235788a45fad909651</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SpaceRotationSequence</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a187a6e6aa955d2c754226793d2056082aeb72c74f63529881130e798f144ad057</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9cdd6b5c2aab168f5306813b98b882bd</anchor>
      <arglist>(std::ostream &amp;, const Rotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afac79a76f355e3d6625cd2959832161e</anchor>
      <arglist>(std::ostream &amp;, const InverseRotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec&lt; P, 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a583d9ec25c572b240b0bb566ca701159</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R, const UnitVec&lt; P, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>UnitRow&lt; P, 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad35dfc094fc3550f3c72b76a2e02e874</anchor>
      <arglist>(const UnitRow&lt; P, S &gt; &amp;r, const Rotation_&lt; P &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec&lt; P, 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab7a7c6fc11de66a6a19d2a61336afeff</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R, const UnitVec&lt; P, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>UnitRow&lt; P, 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a95fa57d06ef4720fff781ad82ffd3f6a</anchor>
      <arglist>(const UnitRow&lt; P, S &gt; &amp;r, const InverseRotation_&lt; P &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90cc404afe6ff2c4926fd93d0454dfd7</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec4d2f4a828242204bfa78f0e3f75399</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const InverseRotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aaf8091d0c9ede8026aa6a282dd472e6f</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0f0440a8494866f40833fec49f4b2897</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R1, const InverseRotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2d961d548f1e122aabc19cb7a66aa3ca</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad250fb571f1a5878fe9005d79e7d18fe</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const InverseRotation &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4982667a60f9659bc8e8185e667b32f0</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0d1a8a958ad5807a933ddb3fa3c9bf30</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R1, const InverseRotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Row.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/SmallMatrix/include/SimTKcommon/internal/</path>
    <filename>Row_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::Row</class>
    <class kind="struct">SimTK::Row::EltResult</class>
    <class kind="struct">SimTK::Row::Result</class>
    <class kind="struct">SimTK::Row::Substitute</class>
    <namespace>SimTK</namespace>
    <namespace>SimTK::Impl</namespace>
    <member kind="function">
      <type>void</type>
      <name>conformingAdd</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a863cb805509416e0e564c532faf1cf03</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2, Row&lt; 1, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conformingAdd</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a43b36c44295959c17fa58b0758df6cf5</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2, Row&lt; N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conformingSubtract</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a4e8ea3dbdc2198b2f9f9c508077edd91</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2, Row&lt; 1, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conformingSubtract</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a38c70de1e254c0d608cf446c76b63dc6</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2, Row&lt; N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiply</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>ac4d35b8308f45851e1100c600ab94344</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2, Row&lt; 1, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiply</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a32cd95c189f6b8a7494cdb95bf44758c</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2, Row&lt; N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivide</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a2b8ba3dbd4c81b2d69e2ee9e640d3dc2</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2, Row&lt; 1, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Dvd &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivide</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>ad5438b135982e740122bbbb79caee553</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2, Row&lt; N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Dvd &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a0395ac7c179ad303ca72fc7626ff7a3e</anchor>
      <arglist>(Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a7898463bb3cc74612fa7d29e64413995</anchor>
      <arglist>(Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E1, S1 &gt;::template Result&lt; Row&lt; N, E2, S2 &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b8d70e3fd4dce576e27b084dadcac75</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E1, S1 &gt;::template Result&lt; Row&lt; N, E2, S2 &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a836ea4532666631d900934828257d929</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad82902fcb72a6d72cf360fccbc2fa856</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32aa8cbb38233718a76d6c1541fc70df</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a96e9ff9eafabbc9dce71d3965fb44a85</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad13f9ebbf2b7be19f7e2ab826c1ce758</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5ccd5a2794e529c57597ff59419e3b8d</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a150dbf19974be4334beda5574505adb3</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a34458ba652227f4e1c1f4d2d4cdfefe4</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7742b13e6140d0ceb5fce8cb3ae60208</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aaaa7f3ecb83f7d1b95d91ee8e34d8f9f</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04199e5b03042b6b332697aa5e3c860c</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af9b8113dcf8e4756451bc3b0d33c23de</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad78d87f2237de19d1685e729a98e5ddd</anchor>
      <arglist>(const float &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a80b4184bc7401ce4a5b202740d1bf860</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f8339d48b9818d94559c4cbb356c51c</anchor>
      <arglist>(const double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a861242e8ca7fcb64c7849bfa46648ec2</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad978ff747450f3c0695c6d96023f7d67</anchor>
      <arglist>(const long double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3ed619c454faa4f13e4a135aecffba7</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02bfbbcc7a312d26763bfc5cbf87d3d0</anchor>
      <arglist>(int l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a754ea9bc297db2fc62e74e29200718b4</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ade89aff78787f0d51edf4d78ec672716</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a78562c42712b1c2e942ca3f8c5bd14b0</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af143a050cd20b48bf6f243ffd194af4d</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad59e0788edb9919e556b5ff217462c5b</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae7ac41a3955533c21541dbe9f89e9a52</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09d7eed2497e53dbc4a52db2d4f8b05c</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae98d2bf5e9c822b28f94a553338e9406</anchor>
      <arglist>(const float &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51485f2d86fd12ce01f7993563d82178</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7e781fc2e094093e38956bfccf578c91</anchor>
      <arglist>(const double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4695993f2589e251cbe4f94343454023</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3be46003a22e45615bbf3cd99efafda2</anchor>
      <arglist>(const long double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4fe5693451f5a90d285f5db01f948a00</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aba7198f8ad4be387512286b6f282df96</anchor>
      <arglist>(int l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2c71a64a8e448541e2528436f76a439b</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a22ac0531922a53c3cd345e6d247a0eb6</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab8fec1dbf2cc174920ccc250c51d6a46</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a07b11417259d032dbac219088eaa1d15</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa395297d2e2a02ffbc42ab73695b82fb</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12b1a77eeb93f6a35d1e4b67c03d6575</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1dc420e8bfe8627acbc5f78913d5aedb</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec18564fcda86fed618473087c2e92d0</anchor>
      <arglist>(const float &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8fbbf7a462d2810846d34777a1788e93</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a587ffbc20d7cd589c428e119ff4d9d65</anchor>
      <arglist>(const double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa745ac182744fc8607b22acd528d2885</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afcdedd68a3e3417a61251df690823845</anchor>
      <arglist>(const long double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa06f7226673d6ce6583d351e4ccda591</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adea776d1367a244e0e50717529cbe987</anchor>
      <arglist>(int l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0bc1c0280a0f1868edde61dd86d5b480</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afc5b7ca1f02d05cf55353bcb7e632053</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0244d71291b85fdea239c7a73586fa88</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aaf9454b3e07a5741a6513fc7e90a8928</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92a0c5ceb10f9badda20bc5c82e534ee</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acb1573f7b7143f9b08dd87a27ff83b96</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad90376ffb4b2a46e3aaadd859a7aee49</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb4f16fa447341b48874ea215909a941</anchor>
      <arglist>(const float &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2d2b73fbcd077129eac3e06feaf9160a</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a229f61fc3c3400d76101c398cd94ad82</anchor>
      <arglist>(const double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7f8280a19de650584bed5cd3de9d51f1</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a573e640f8c0aef233f2f77f87c174e44</anchor>
      <arglist>(const long double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1704ad4b6d269a4ccf7cb192998cbd44</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a139709818ede6ba0f4c098f7aedfb6ca</anchor>
      <arglist>(int l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a38513830400aaa78a63cb3941e52c5b2</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acd5a8d5387d2e8aff403734e3f5d0faf</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae63c11a343d6632b56bfb4689ba1c71c</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e9be51ab3330a8324c00aba96052cbb</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4ff273f04372cef28aefb3f57d55cede</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7ec098096fe6adcffba09796b04ed259</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acbf4fb3509a0ed0d0d80829c413ace17</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a94ac775a450de4c8c2a5f4902bde8697</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RungeKutta2Integrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>RungeKutta2Integrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::RungeKutta2Integrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>RungeKutta3Integrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>RungeKutta3Integrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::RungeKutta3Integrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>RungeKuttaFeldbergIntegrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>RungeKuttaFeldbergIntegrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::RungeKuttaFeldbergIntegrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>RungeKuttaMersonIntegrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>RungeKuttaMersonIntegrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::RungeKuttaMersonIntegrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Scalar.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Scalar/include/SimTKcommon/</path>
    <filename>Scalar_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="Constants_8h" name="Constants.h" local="yes" imported="no">SimTKcommon/Constants.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">SimTKcommon/internal/Exception.h</includes>
    <includes id="ExceptionMacros_8h" name="ExceptionMacros.h" local="yes" imported="no">SimTKcommon/internal/ExceptionMacros.h</includes>
    <includes id="String_8h" name="String.h" local="yes" imported="no">SimTKcommon/internal/String.h</includes>
    <includes id="Array_8h" name="Array.h" local="yes" imported="no">SimTKcommon/internal/Array.h</includes>
    <includes id="conjugate_8h" name="conjugate.h" local="yes" imported="no">SimTKcommon/internal/conjugate.h</includes>
    <includes id="CompositeNumericalTypes_8h" name="CompositeNumericalTypes.h" local="yes" imported="no">SimTKcommon/internal/CompositeNumericalTypes.h</includes>
    <includes id="NTraits_8h" name="NTraits.h" local="yes" imported="no">SimTKcommon/internal/NTraits.h</includes>
    <includes id="negator_8h" name="negator.h" local="yes" imported="no">SimTKcommon/internal/negator.h</includes>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>conjugate&lt; Real &gt;</type>
      <name>Conjugate</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa4386955f62d021e42dd0c8d843ff594</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>gaab0e407d56a4bd1a5175de7d4c0a87e0</anchor>
      <arglist>(unsigned char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga62f4eea2278bf4e48973d475d1161964</anchor>
      <arglist>(unsigned short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga8c03f6de17db6a7190c1f6c618f4689b</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga484cd174243857a5c633304c78d031e0</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga07b5ee52eae77d64dc117f4959d1fc85</anchor>
      <arglist>(unsigned long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga4db180a4bf0bf8505c09500f4b184c9d</anchor>
      <arglist>(signed char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga563f8bd175f2bccb072aa050ad47d3c7</anchor>
      <arglist>(char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga61164b0e7ebc0a75062300e259f85313</anchor>
      <arglist>(short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga3d39edaff8ba7ae940f560907d9052bd</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga64d0b90c9dfb3cb5d2595a98231f3797</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>gaa7994e0e869072e2659b120c99dd09cd</anchor>
      <arglist>(long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gac76109f5344f0691b476efe3645523ab</anchor>
      <arglist>(unsigned char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gae0087ce107cb4028259b14091cec88f7</anchor>
      <arglist>(unsigned short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gaccd513f711e273c7e0be226318227329</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gadaa62947ec9a188bb0c9ec5aa08371b8</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga0f073d547b00f2d111c1b6332f7f3181</anchor>
      <arglist>(unsigned long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga8e0346679d22cf82aa17cc3a0014ebfa</anchor>
      <arglist>(signed char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga18fe61a58e874c63d83ce3c3f5076288</anchor>
      <arglist>(char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga2914211ecd30c8293155cd381d1019fa</anchor>
      <arglist>(short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gad6ee352772340f22238cc94599e84328</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gaa58b6930350ab34984459349bf61659f</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga717a63fd7fbb17b46824d0e2cb4ccfbc</anchor>
      <arglist>(long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaf0dfe08c6d691cc620c6df88c3a7e9a0</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gae73884823dfda8eb948890de1cc2655b</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaa32db09c5cf51fa910bb968c808984d8</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga555ecce97391793759a227861832e3cb</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gad85acf57b04b2e28367dd3a9bd7fe409</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga3d556ab4786ab31913f4a0abfa44b028</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga43db802dcdf3928727c270a9e6592dcd</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaddaa112934f351dd061b1a9bd7a1cc7d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaa44e576e3291255349c832663f2db90a</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gae43872b0ddafb57a97c84e7ac150e737</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga0034dfbc57b1e6f83da8d4295c1faa04</anchor>
      <arglist>(const float &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gada0a2c6ca0d3ff0d0f60b844bd5b34d5</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga4cfe5969509c55ef89a5adf1bf2cdd0e</anchor>
      <arglist>(const negator&lt; float &gt; &amp;nf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga467ec306ca041073f04ce50c08e99c53</anchor>
      <arglist>(const negator&lt; double &gt; &amp;nd)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga786583adbf125e25a5b0cf631c76fb0d</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaec46f5b92fa307789ada163451f81363</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga8fd13ddb466a566bfa70c65d4aa17b7f</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga0f2211d550c517a8887c7491e5bbeb63</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga4a2c3742f2cbc4966962e6ae60e2c2a1</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga973f8b9310bf02364e2a036d70dfdd5a</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaf206e1f8f0cddd75cb2d4220fc8d72ac</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga606c6a8ea497b867695c8776221cf20a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga1bfef2569ba98a05266c874c99c7bd18</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gac3ab8baef006c89b6f816b10409e40c0</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaace4a43ab242cdb0ac5e25f679868235</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga2c17a68e95cc56f311688a5a30bfcc8c</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga1fbd99a509775a30189aa07d032d4f31</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga845ffea71c0e22b4087b1f564147d47e</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga4a2cf9811e5daf2aef80e76218a8a4c4</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga751524e09aceed18d9cf5e24aa03a82d</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gac143407eb9f50070a3c4d5515eb5c965</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gad600a0339eadb00fe136ae2c37506c2f</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga49573a50afd1c2b199c29664a0596ec4</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga6c9fe7826b9dc8c192e8d7d70081bb6f</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga63e2ddff4824bdd6161734098b576d80</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga70395ffc98edaeed65ce37bf90960e7e</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaf09785ab09e7ebdd6db6db9633a00ce9</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga5be93f7c23e10c18a835b654d3d2c774</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga405566a25e69c550a410305afeda205a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga081d1813ae8cf8969987a9da343db000</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gac9658dc99d0099a67593464eab83d74a</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gab9a8435cce97be4c3bd36ba6b6f124f8</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gadaff15a8e575dcd4798f53f897910cda</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaf50e21dd134553b2accc2be42f3872d3</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga6619767dbef2cf8fb747b73bd23d9b7d</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga28fc1785b7244e9eba48848309dfe8af</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gacc693aa1293e11ae4576b1cb20401d09</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga47961dee5d4a488f776db1a09c6578eb</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga738eb9e1ee02f29b8605b5d066f66943</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaaf3a7082c137e5ce40e220c67d302b9a</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gafa8058475cb7b2be36d9beb406459ff8</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gafa5cf370fddde320439c9e579f2e69c0</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gae56f27a41f3834ba5059e780bd6129f6</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0b2aee7ba11e5b8b9fb283b60f4b843a</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga965fc0c5aaf300eb851ef4f96b6cc7d1</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gad70f58c4813eb8c01b731315aa0c24cb</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0ba5f2c7916164123f94e0d28bfa8e3d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaec29e36ee2beb451dee208eeff16e865</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga3ecd49be48551ac475ea05c61d2698d6</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga74d6f6909c8f66c4ef9db176c6dec71f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gac5208cf80778b15ed46a00cd6e3bdbb7</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga2a90acde51ec8be5e3f9a86c46577420</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gad0829b03a63357870489980e1d79637e</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga6b275a5c915bff6361c7db3707d64a38</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga847c9d1292b67f40a7140aa4a14705de</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; float &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga241f0e1c93a693e1f6bf2d61b0dae4ba</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; double &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf3e046c6392ce0e356b607114923c3c1</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; long double &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf459e091022bfbd9dd8a81ef0c18df70</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf79a6b9c41ca47d7773e5d649dedf4ea</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gac9eb65bcf008c30d5a8a467b31ec77fc</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0fd9376142ff7b7311894d4897dfb78a</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gae678ce7fdb8ca65fbb92ea91fcd77448</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga38acaf38212d4fb838326a2c4e69f97f</anchor>
      <arglist>(double low, double &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga32271fe67c0bf4f3d490a0d46a806adb</anchor>
      <arglist>(float low, float &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gae8f763d2bf781401574af0aed1bb2ce5</anchor>
      <arglist>(long double low, long double &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaed97ca53e54f65ab22e370ac74b51e9d</anchor>
      <arglist>(int low, double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6a99bd4d62584e04224666128232cadd</anchor>
      <arglist>(int low, float &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gab6a312a43690f2bb79c9b8468d719f63</anchor>
      <arglist>(int low, long double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga1505848f16f29e7d3e6449c1f39d0d98</anchor>
      <arglist>(int low, double &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga05c4d3d3d9c9fceb1d645932d8792dbc</anchor>
      <arglist>(int low, float &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaf5d01d5392488e9fe8285e59de05ae73</anchor>
      <arglist>(int low, long double &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaa7597fd5748c3e144dad166599d66ad8</anchor>
      <arglist>(double low, double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga7963d262e91121c1e171aa97b821fef7</anchor>
      <arglist>(float low, float &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga535d323f9e12510d90a06a01079a3efa</anchor>
      <arglist>(long double low, long double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga2e894f541bacd8638402cc232ba98d26</anchor>
      <arglist>(unsigned char low, unsigned char &amp;v, unsigned char high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga160e7d29a6348c0689aa9be35d693110</anchor>
      <arglist>(unsigned short low, unsigned short &amp;v, unsigned short high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaba7ec36b5447e5d925148796881b8398</anchor>
      <arglist>(unsigned int low, unsigned int &amp;v, unsigned int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gae2928da8bf9b2ea0003184bb5144d637</anchor>
      <arglist>(unsigned long low, unsigned long &amp;v, unsigned long high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga095f20cb4669015230bd2b02d2c7aab6</anchor>
      <arglist>(unsigned long long low, unsigned long long &amp;v, unsigned long long high)</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaa2d484f7b27def905846f14ff28145d2</anchor>
      <arglist>(char low, char &amp;v, char high)</arglist>
    </member>
    <member kind="function">
      <type>signed char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga0e862150746577f69e538855598dc17a</anchor>
      <arglist>(signed char low, signed char &amp;v, signed char high)</arglist>
    </member>
    <member kind="function">
      <type>short &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga11f19fe11fb1ced367d555549188e15d</anchor>
      <arglist>(short low, short &amp;v, short high)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga11a76b944d0652ded4f098311a1c2c66</anchor>
      <arglist>(int low, int &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga3281fb2a9738c44470ec47d5ae0b0e07</anchor>
      <arglist>(long low, long &amp;v, long high)</arglist>
    </member>
    <member kind="function">
      <type>long long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga27d8afe412c619ce300ae94d743f0ece</anchor>
      <arglist>(long long low, long long &amp;v, long long high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; float &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga756e5fea80a3ac704feac9936e84dbde</anchor>
      <arglist>(float low, negator&lt; float &gt; &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; double &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gacd8df713052ad4185be0490401f629ea</anchor>
      <arglist>(double low, negator&lt; double &gt; &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; long double &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gabb56b4e37d5a269cbc54dea6405da68d</anchor>
      <arglist>(long double low, negator&lt; long double &gt; &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad5b547e81ba85c63aa9c0553fbbf5335</anchor>
      <arglist>(double low, double v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga4ca449d5ed49355fabd28e80e3e25d41</anchor>
      <arglist>(float low, float v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga8b099a7c224220c04f872e04219c7960</anchor>
      <arglist>(long double low, long double v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga848bc31512347475fb342e9d5ac26890</anchor>
      <arglist>(int low, double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad91e612f3dcf013d5ca499ccd2deda90</anchor>
      <arglist>(int low, float v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gada23a7ca4a2e33bbb7f2d9cc13b5250e</anchor>
      <arglist>(int low, long double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga27505d0bc9a87fcde76fe18ae05dfb35</anchor>
      <arglist>(int low, double v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gadb5cbc68653901401f0de7511f591b32</anchor>
      <arglist>(int low, float v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga31e84eeefbf1d7f80de546a11e9c9720</anchor>
      <arglist>(int low, long double v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga4149a5c786becc7e8eec912a1c60b084</anchor>
      <arglist>(double low, double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga9ffc0523268d588d3792ca6fe9aa88a4</anchor>
      <arglist>(float low, float v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6720f04175e96eba698e1147a1092a7b</anchor>
      <arglist>(long double low, long double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga71e2dbdcd20e99bfb78dbd94b598a075</anchor>
      <arglist>(unsigned char low, unsigned char v, unsigned char high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga7cf3b76f17a9012188a63b75a2bdd4af</anchor>
      <arglist>(unsigned short low, unsigned short v, unsigned short high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad36b8843067397b5edc2f59cd4d18618</anchor>
      <arglist>(unsigned int low, unsigned int v, unsigned int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaefde149ba9a39405afe4222fd039d59d</anchor>
      <arglist>(unsigned long low, unsigned long v, unsigned long high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga28cd5fb2d6410807f583a1c28ed5ad01</anchor>
      <arglist>(unsigned long long low, unsigned long long v, unsigned long long high)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga28f89f549eb0f6575228cb79e6da8fec</anchor>
      <arglist>(char low, char v, char high)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga25d1257803a0544b7aa233ac0faa2d75</anchor>
      <arglist>(signed char low, signed char v, signed char high)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6d5ce438dae88203a4a4ca87c813ae13</anchor>
      <arglist>(short low, short v, short high)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga09ee0735f3bc52ba2b0a6982f137af4a</anchor>
      <arglist>(int low, int v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gac6010391fc613826bc9942f97e9cbfa0</anchor>
      <arglist>(long low, long v, long high)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga89c5c4b67fe2c880e885abb0da9d85ba</anchor>
      <arglist>(long long low, long long v, long long high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad94920536c62d103820648e3fdaa5283</anchor>
      <arglist>(float low, negator&lt; float &gt; v, float high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gac17d0411f41184d590c2bf46eebacd8a</anchor>
      <arglist>(double low, negator&lt; double &gt; v, double high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga5a4eee2e10d69a23c246c151649baf74</anchor>
      <arglist>(long double low, negator&lt; long double &gt; v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga14a6901ad8aad0dac8f03d70768abfb5</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga2c088639b4bf4910fd64849b4ce8d549</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gac48fb0eb6ecaea90f2a32686a1140063</anchor>
      <arglist>(double y0, double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga6694140703d29efd3912ab8e7ddf7b25</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga5ffb459aa21e5131d1c2f81e359dfe56</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga551e174b41808913f351de991c9a03e5</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga5fb901189730c407eb64402efed53275</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga53d2cf758da9d987869aa64134f26b88</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga74cdf7a402da5698b8fbeffb3d46fe13</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf05c46288d5dcb2db0fe22f816cbff2d</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga86266927fa9cebfc043954077237521a</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga329b7ee352b6ba21e80bff31c652e40c</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga69bf07fe0b7db1b05fa12d48adf2e513</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga1f730a1e82a7dfc5ad559dd76b6e1f14</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gadd405e8dc4f21e8ff88e4a43888313fe</anchor>
      <arglist>(float y0, float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaded4bce1c3073f50ed96835360d79a3a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf7706f10a835de34a3b2cccf4c190068</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf0568c0bbb40c9b7e0bb0d0996d714e9</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gafc1cbbea49839a2652059f245ea9d04a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0ec1ea01005696e81013c229ae50ef02</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gabb01c6e73f34e8a52f3c24b179833ee9</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga9a7f67772ae290241d80dcc809c66db0</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaaf7f6fbfbbc77e71d952e28cd01270f3</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gad078c8dbae339ddda704f2bf1bf31e82</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0583e311bbf92765c170802cfb34d017</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0b9eff2cde8c6bda47769b6766f07d16</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga91d776c0527661c940a4b618e292cafe</anchor>
      <arglist>(long double y0, long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaeb5be572b4463129cc6ecf8204dc7d7e</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gabc970e7fe869b7c5ad8eb5f4a4703165</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga34f9bebc6e1713116598a3b280a34de5</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga87a887b27493a49eca816aca3882940a</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gafe3f101eb9e9b0f3d2fb3ce03b4961ea</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga4c90dd31876e0bd340b3ca6fc3ea6961</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga98892af5388ae43bbfdacdac17e90aa6</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga4aa9e45c1570ad99b733fb25ac77266b</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gadc4e15fc875e1360d4e3d382e838c278</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga247753566adef0968093b7d5f8fdc719</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga684b164e95e7f86ba68907fe9df4afcf</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga246d464967507a1ba843c2d3bd0d4482</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; float, float &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gaa6033fa6333e444418ee159dffa39127</anchor>
      <arglist>(float m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gace92d2fd5a890de2aa211d589da1a5b7</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga7d13984ecd931506e33a8c935343b1c3</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; float, float &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gafa4381144fc4f46d28587628e845f44f</anchor>
      <arglist>(float m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga749807654459c2fac9a8f61bb679b2d5</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>NaN</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga5b3e8459e97fe52f06520c6462cecca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Infinity</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga1ce4d54f64bb7dfd1f763bc3c7192783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Eps</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gae52d8e90cb945806de17a8aa6d71581c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>SqrtEps</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga01191c1a2b9a6f9e0d6faa9472244731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>TinyReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaf8d717c96dc07c80d5f074185c5ab88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>SignificantReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga2026d7a87fa1a6a089bf866339521e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>LeastPositiveReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gafcd89352c6783472296ac9d0e6d75f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MostPositiveReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga949ec795ccd1618d3a19be058f5f69f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>LeastNegativeReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8a87e0f68fcb471515b0c7e9d11cfa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MostNegativeReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad6f718d1389c58d071e0da2bc97742c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NumDigitsReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad547cb849c6061b6c0f193d29b29bcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LosslessNumDigitsReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga5cf1b4daeeb7235604213ecd1cfecfdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Zero</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga27e042de142dc666f090af4659be93b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>One</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga6fd0f8c648f23391c6cad9addcdf686a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MinusOne</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga009370366f4bdfd95c2c860a354c9292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Two</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga4b5419b19811ee3f37c6dafdd33cf48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Three</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab2f29bcf7a9840206e331513a148bb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneHalf</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaa01ff2c544d7220dbfe9ec5d0f304b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneThird</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga52f7cf4cca5e9123daf28431b46dfc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneFourth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga2f1937badfad7e143ce88e57b59d215a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneFifth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8daa2faf617a43c9df00bff29bdc3970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneSixth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga221f99b97dcca0a29db23322a8c04ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneSeventh</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gabeac454933ee957f1a6768f8e02af20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneEighth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga79095ebd82f55410529bf0d480e8e025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneNinth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga310d0756d50906365bf75fa7941be8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Pi</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad71ae24820d06c99844f307ba4b31e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverPi</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga10f6903b9327f729f5fce2c28dda20d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga62e94c379e736581bd70ce4647168f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Log2E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga159b9314259d179521e9fb1a84d994e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Log10E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaf8cdbf3b0e779033853a4990ed0fd320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Sqrt2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga7c5dd94e4cc4496998fafa2c466a1e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverSqrt2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gae19f40ebebf2a68ec67b1145bc2fa6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Sqrt3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga09859b35562a7f4108af3dfb35bd5197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverSqrt3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab1197416c87ede92e08b30c0635dec61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>CubeRoot2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8b7122e07290dafdef3655bf94f7ef89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>CubeRoot3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga35a481fde6f6713b0e787f5592df4291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Ln2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaac81af38456470d7240c0428b3f40777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Ln10</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab873b75f254d6f2bf44347f868cddc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Complex</type>
      <name>I</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga89110fa308da931e7b5b69f62b143bd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SemiExplicitEuler2Integrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>SemiExplicitEuler2Integrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::SemiExplicitEuler2Integrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>SemiExplicitEulerIntegrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>SemiExplicitEulerIntegrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::SemiExplicitEulerIntegrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Serialize.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Serialize_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="ExceptionMacros_8h" name="ExceptionMacros.h" local="yes" imported="no">SimTKcommon/internal/ExceptionMacros.h</includes>
    <includes id="String_8h" name="String.h" local="yes" imported="no">SimTKcommon/internal/String.h</includes>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gaae02786573d73eb2fcdb5e552a6fa891</anchor>
      <arglist>(std::ostream &amp;o, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga994f8d89f2e202447823e24396f1e8bc</anchor>
      <arglist>(std::ostream &amp;o, const float &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga17a8672c706c5c04e107e61d261dcb18</anchor>
      <arglist>(std::ostream &amp;o, const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga58eebde32533dc80226e182f44b22f30</anchor>
      <arglist>(std::ostream &amp;o, const long double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga9ece572abb6a3e110d45c46830f05943</anchor>
      <arglist>(std::ostream &amp;o, const negator&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gaeac578dd8246d4a6914a80eeb95c245d</anchor>
      <arglist>(std::ostream &amp;o, const std::complex&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga73696848d567dcfc32ae4976af39194a</anchor>
      <arglist>(std::ostream &amp;o, const conjugate&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readOneTokenUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga8a680e6ad01873dd96f94bec96789506</anchor>
      <arglist>(std::istream &amp;in, String &amp;token)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga64e0c2535ba54f956b015cd371914e69</anchor>
      <arglist>(std::istream &amp;in, T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga780aae3c74feba345ffa3265f238a0fb</anchor>
      <arglist>(std::istream &amp;in, float &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga0d2353938f723372801aebd935eef8d3</anchor>
      <arglist>(std::istream &amp;in, double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga6f14b9155294cca7d382a354056877da</anchor>
      <arglist>(std::istream &amp;in, long double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gad1f2ca45282c306208dcd50748894a4d</anchor>
      <arglist>(std::istream &amp;in, negator&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gaf5e85081c35165308024a774475c17bb</anchor>
      <arglist>(std::istream &amp;in, std::complex&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gabc5553e096cb68fb840e301f75e38f29</anchor>
      <arglist>(std::istream &amp;in, conjugate&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted&lt; String &gt;</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga1202228eb72b7b27a0f1d9813a74ba77</anchor>
      <arglist>(std::istream &amp;in, String &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeFormatted</name>
      <anchorfile>group__writeFormatted.html</anchorfile>
      <anchor>gade1630adab11d517027b2971162f8a62</anchor>
      <arglist>(std::ostream &amp;o, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFormatted</name>
      <anchorfile>group__readFormatted.html</anchorfile>
      <anchor>ga3c3f575ce29e7c9a32ab5f89e9274223</anchor>
      <arglist>(std::istream &amp;in, T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Simbody.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/</path>
    <filename>Simbody_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="SimTKsimbody_8h" name="SimTKsimbody.h" local="yes" imported="no">SimTKsimbody.h</includes>
  </compound>
  <compound kind="file">
    <name>SimbodyMainpage.h</name>
    <path>/home/travis/build/chrisdembia/simbody/</path>
    <filename>SimbodyMainpage_8h</filename>
  </compound>
  <compound kind="file">
    <name>SimbodyMatterSubsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>SimbodyMatterSubsystem_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <class kind="class">SimTK::SimbodyMatterSubsystem</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>SimbodyMatterSubtree.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>SimbodyMatterSubtree_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::SimbodyMatterSubtree</class>
    <class kind="class">SimTK::SimbodyMatterSubtreeResults</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac35f888fc616cdc39bafeec6f3e4c982</anchor>
      <arglist>(std::ostream &amp;, const SimbodyMatterSubtree &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aabcbbda2db556a5b7cbca69b05fa87c2</anchor>
      <arglist>(std::ostream &amp;, const SimbodyMatterSubtreeResults &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Simmatrix.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/</path>
    <filename>Simmatrix_8h</filename>
    <includes id="Scalar_8h" name="Scalar.h" local="yes" imported="no">SimTKcommon/Scalar.h</includes>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="Orientation_8h" name="Orientation.h" local="yes" imported="no">SimTKcommon/Orientation.h</includes>
    <includes id="Mechanics_8h" name="Mechanics.h" local="yes" imported="no">SimTKcommon/Mechanics.h</includes>
    <includes id="BigMatrix_8h" name="BigMatrix.h" local="yes" imported="no">SimTKcommon/internal/BigMatrix.h</includes>
    <includes id="SmallDefsThatNeedBig_8h" name="SmallDefsThatNeedBig.h" local="yes" imported="no">SimTKcommon/internal/SmallDefsThatNeedBig.h</includes>
    <includes id="VectorMath_8h" name="VectorMath.h" local="yes" imported="no">SimTKcommon/internal/VectorMath.h</includes>
  </compound>
  <compound kind="file">
    <name>SimTKcommon.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/</path>
    <filename>SimTKcommon_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
  </compound>
  <compound kind="file">
    <name>SimTKcpodes.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/internal/</path>
    <filename>SimTKcpodes_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <class kind="class">SimTK::CPodesSystem</class>
    <class kind="class">SimTK::CPodes</class>
    <namespace>SimTK</namespace>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>explicitODE_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a03a744f79ed1b8eafc314bb73c1ee86b</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, Vector &amp;fout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>implicitODE_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a83c3bc1e9723bae2f75c643d789cac96</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, const Vector &amp;yp, Vector &amp;fout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>constraint_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a637ce3bfc1ffe924a7071927033bb363</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, Vector &amp;cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>project_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4b60261fe7cb14f844c3ba0950414b44</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;ycur, Vector &amp;corr, Real epsProj, Vector &amp;err)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>quadrature_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1d14c3decdbfd9b247463d4880739a34</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, Vector &amp;qout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>root_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a25d3170b1b969b3c14b2fe0b4b7690e3</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, const Vector &amp;yp, Vector &amp;gout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>weight_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a00576eff653847f4d19b4218e5955265</anchor>
      <arglist>(const CPodesSystem &amp;sys, const Vector &amp;y, Vector &amp;weights)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>errorHandler_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7bf734cd87406a40d4403b5f90763976</anchor>
      <arglist>(const CPodesSystem &amp;sys, int error_code, const char *module, const char *function, char *msg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimTKmath.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/include/</path>
    <filename>SimTKmath_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Geo_8h" name="Geo.h" local="yes" imported="no">simmath/internal/Geo.h</includes>
    <includes id="Geo__Point_8h" name="Geo_Point.h" local="yes" imported="no">simmath/internal/Geo_Point.h</includes>
    <includes id="Geo__Sphere_8h" name="Geo_Sphere.h" local="yes" imported="no">simmath/internal/Geo_Sphere.h</includes>
    <includes id="Geo__LineSeg_8h" name="Geo_LineSeg.h" local="yes" imported="no">simmath/internal/Geo_LineSeg.h</includes>
    <includes id="Geo__Box_8h" name="Geo_Box.h" local="yes" imported="no">simmath/internal/Geo_Box.h</includes>
    <includes id="Geo__Triangle_8h" name="Geo_Triangle.h" local="yes" imported="no">simmath/internal/Geo_Triangle.h</includes>
    <includes id="Geo__CubicHermiteCurve_8h" name="Geo_CubicHermiteCurve.h" local="yes" imported="no">simmath/internal/Geo_CubicHermiteCurve.h</includes>
    <includes id="Geo__BicubicHermitePatch_8h" name="Geo_BicubicHermitePatch.h" local="yes" imported="no">simmath/internal/Geo_BicubicHermitePatch.h</includes>
    <includes id="Geo__CubicBezierCurve_8h" name="Geo_CubicBezierCurve.h" local="yes" imported="no">simmath/internal/Geo_CubicBezierCurve.h</includes>
    <includes id="Geo__BicubicBezierPatch_8h" name="Geo_BicubicBezierPatch.h" local="yes" imported="no">simmath/internal/Geo_BicubicBezierPatch.h</includes>
    <includes id="Spline_8h" name="Spline.h" local="yes" imported="no">simmath/internal/Spline.h</includes>
    <includes id="SplineFitter_8h" name="SplineFitter.h" local="yes" imported="no">simmath/internal/SplineFitter.h</includes>
    <includes id="BicubicSurface_8h" name="BicubicSurface.h" local="yes" imported="no">simmath/internal/BicubicSurface.h</includes>
    <includes id="Geodesic_8h" name="Geodesic.h" local="yes" imported="no">simmath/internal/Geodesic.h</includes>
    <includes id="GeodesicIntegrator_8h" name="GeodesicIntegrator.h" local="yes" imported="no">simmath/internal/GeodesicIntegrator.h</includes>
    <includes id="ContactGeometry_8h" name="ContactGeometry.h" local="yes" imported="no">simmath/internal/ContactGeometry.h</includes>
    <includes id="OrientedBoundingBox_8h" name="OrientedBoundingBox.h" local="yes" imported="no">simmath/internal/OrientedBoundingBox.h</includes>
    <includes id="Contact_8h" name="Contact.h" local="yes" imported="no">simmath/internal/Contact.h</includes>
    <includes id="ContactTracker_8h" name="ContactTracker.h" local="yes" imported="no">simmath/internal/ContactTracker.h</includes>
    <includes id="CollisionDetectionAlgorithm_8h" name="CollisionDetectionAlgorithm.h" local="yes" imported="no">simmath/internal/CollisionDetectionAlgorithm.h</includes>
    <includes id="LinearAlgebra_8h" name="LinearAlgebra.h" local="yes" imported="no">simmath/LinearAlgebra.h</includes>
    <includes id="Differentiator_8h" name="Differentiator.h" local="yes" imported="no">simmath/Differentiator.h</includes>
    <includes id="Optimizer_8h" name="Optimizer.h" local="yes" imported="no">simmath/Optimizer.h</includes>
    <includes id="MultibodyGraphMaker_8h" name="MultibodyGraphMaker.h" local="yes" imported="no">simmath/MultibodyGraphMaker.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <includes id="TimeStepper_8h" name="TimeStepper.h" local="yes" imported="no">simmath/TimeStepper.h</includes>
    <includes id="CPodesIntegrator_8h" name="CPodesIntegrator.h" local="yes" imported="no">simmath/CPodesIntegrator.h</includes>
    <includes id="RungeKuttaMersonIntegrator_8h" name="RungeKuttaMersonIntegrator.h" local="yes" imported="no">simmath/RungeKuttaMersonIntegrator.h</includes>
    <includes id="RungeKuttaFeldbergIntegrator_8h" name="RungeKuttaFeldbergIntegrator.h" local="yes" imported="no">simmath/RungeKuttaFeldbergIntegrator.h</includes>
    <includes id="RungeKutta3Integrator_8h" name="RungeKutta3Integrator.h" local="yes" imported="no">simmath/RungeKutta3Integrator.h</includes>
    <includes id="RungeKutta2Integrator_8h" name="RungeKutta2Integrator.h" local="yes" imported="no">simmath/RungeKutta2Integrator.h</includes>
    <includes id="ExplicitEulerIntegrator_8h" name="ExplicitEulerIntegrator.h" local="yes" imported="no">simmath/ExplicitEulerIntegrator.h</includes>
    <includes id="VerletIntegrator_8h" name="VerletIntegrator.h" local="yes" imported="no">simmath/VerletIntegrator.h</includes>
    <includes id="SemiExplicitEulerIntegrator_8h" name="SemiExplicitEulerIntegrator.h" local="yes" imported="no">simmath/SemiExplicitEulerIntegrator.h</includes>
    <includes id="SemiExplicitEuler2Integrator_8h" name="SemiExplicitEuler2Integrator.h" local="yes" imported="no">simmath/SemiExplicitEuler2Integrator.h</includes>
  </compound>
  <compound kind="file">
    <name>SimTKsimbody.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/</path>
    <filename>SimTKsimbody_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_8h" name="SimTKmath.h" local="yes" imported="no">SimTKmath.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="MultibodySystem_8h" name="MultibodySystem.h" local="yes" imported="no">simbody/internal/MultibodySystem.h</includes>
    <includes id="Body_8h" name="Body.h" local="yes" imported="no">simbody/internal/Body.h</includes>
    <includes id="Motion_8h" name="Motion.h" local="yes" imported="no">simbody/internal/Motion.h</includes>
    <includes id="MobilizedBody_8h" name="MobilizedBody.h" local="yes" imported="no">simbody/internal/MobilizedBody.h</includes>
    <includes id="MobilizedBody__BuiltIns_8h" name="MobilizedBody_BuiltIns.h" local="yes" imported="no">simbody/internal/MobilizedBody_BuiltIns.h</includes>
    <includes id="Constraint_8h" name="Constraint.h" local="yes" imported="no">simbody/internal/Constraint.h</includes>
    <includes id="ElasticFoundationForce_8h" name="ElasticFoundationForce.h" local="yes" imported="no">simbody/internal/ElasticFoundationForce.h</includes>
    <includes id="Force_8h" name="Force.h" local="yes" imported="no">simbody/internal/Force.h</includes>
    <includes id="Force__BuiltIns_8h" name="Force_BuiltIns.h" local="yes" imported="no">simbody/internal/Force_BuiltIns.h</includes>
    <includes id="ForceSubsystem_8h" name="ForceSubsystem.h" local="yes" imported="no">simbody/internal/ForceSubsystem.h</includes>
    <includes id="ForceSubsystemGuts_8h" name="ForceSubsystemGuts.h" local="yes" imported="no">simbody/internal/ForceSubsystemGuts.h</includes>
    <includes id="SimbodyMatterSubsystem_8h" name="SimbodyMatterSubsystem.h" local="yes" imported="no">simbody/internal/SimbodyMatterSubsystem.h</includes>
    <includes id="SimbodyMatterSubtree_8h" name="SimbodyMatterSubtree.h" local="yes" imported="no">simbody/internal/SimbodyMatterSubtree.h</includes>
    <includes id="GeneralContactSubsystem_8h" name="GeneralContactSubsystem.h" local="yes" imported="no">simbody/internal/GeneralContactSubsystem.h</includes>
    <includes id="GeneralForceSubsystem_8h" name="GeneralForceSubsystem.h" local="yes" imported="no">simbody/internal/GeneralForceSubsystem.h</includes>
    <includes id="HuntCrossleyContact_8h" name="HuntCrossleyContact.h" local="yes" imported="no">simbody/internal/HuntCrossleyContact.h</includes>
    <includes id="HuntCrossleyForce_8h" name="HuntCrossleyForce.h" local="yes" imported="no">simbody/internal/HuntCrossleyForce.h</includes>
    <includes id="DecorationSubsystem_8h" name="DecorationSubsystem.h" local="yes" imported="no">simbody/internal/DecorationSubsystem.h</includes>
    <includes id="TextDataEventReporter_8h" name="TextDataEventReporter.h" local="yes" imported="no">simbody/internal/TextDataEventReporter.h</includes>
    <includes id="ObservedPointFitter_8h" name="ObservedPointFitter.h" local="yes" imported="no">simbody/internal/ObservedPointFitter.h</includes>
    <includes id="Assembler_8h" name="Assembler.h" local="yes" imported="no">simbody/internal/Assembler.h</includes>
    <includes id="LocalEnergyMinimizer_8h" name="LocalEnergyMinimizer.h" local="yes" imported="no">simbody/internal/LocalEnergyMinimizer.h</includes>
    <includes id="ContactTrackerSubsystem_8h" name="ContactTrackerSubsystem.h" local="yes" imported="no">simbody/internal/ContactTrackerSubsystem.h</includes>
    <includes id="CompliantContactSubsystem_8h" name="CompliantContactSubsystem.h" local="yes" imported="no">simbody/internal/CompliantContactSubsystem.h</includes>
    <includes id="CableTrackerSubsystem_8h" name="CableTrackerSubsystem.h" local="yes" imported="no">simbody/internal/CableTrackerSubsystem.h</includes>
    <includes id="CablePath_8h" name="CablePath.h" local="yes" imported="no">simbody/internal/CablePath.h</includes>
    <includes id="CableSpring_8h" name="CableSpring.h" local="yes" imported="no">simbody/internal/CableSpring.h</includes>
    <includes id="Visualizer_8h" name="Visualizer.h" local="yes" imported="no">simbody/internal/Visualizer.h</includes>
    <includes id="Visualizer__InputListener_8h" name="Visualizer_InputListener.h" local="yes" imported="no">simbody/internal/Visualizer_InputListener.h</includes>
    <includes id="Visualizer__Reporter_8h" name="Visualizer_Reporter.h" local="yes" imported="no">simbody/internal/Visualizer_Reporter.h</includes>
  </compound>
  <compound kind="file">
    <name>SimTKsimbody_aux.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/</path>
    <filename>SimTKsimbody__aux_8h</filename>
    <includes id="Simbody_8h" name="Simbody.h" local="yes" imported="no">Simbody.h</includes>
  </compound>
  <compound kind="file">
    <name>SmallDefsThatNeedBig.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/SmallMatrix/include/SimTKcommon/internal/</path>
    <filename>SmallDefsThatNeedBig_8h</filename>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>SmallMatrix.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/SmallMatrix/include/SimTKcommon/</path>
    <filename>SmallMatrix_8h</filename>
    <includes id="Scalar_8h" name="Scalar.h" local="yes" imported="no">SimTKcommon/Scalar.h</includes>
    <includes id="TemplatizedLapack_8h" name="TemplatizedLapack.h" local="yes" imported="no">SimTKcommon/TemplatizedLapack.h</includes>
    <includes id="Vec_8h" name="Vec.h" local="yes" imported="no">SimTKcommon/internal/Vec.h</includes>
    <includes id="Row_8h" name="Row.h" local="yes" imported="no">SimTKcommon/internal/Row.h</includes>
    <includes id="Mat_8h" name="Mat.h" local="yes" imported="no">SimTKcommon/internal/Mat.h</includes>
    <includes id="SymMat_8h" name="SymMat.h" local="yes" imported="no">SimTKcommon/internal/SymMat.h</includes>
    <includes id="SmallMatrixMixed_8h" name="SmallMatrixMixed.h" local="yes" imported="no">SimTKcommon/internal/SmallMatrixMixed.h</includes>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Vec&lt; 1 &gt;</type>
      <name>Vec1</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8c05afa72ae400c6522822579e36bf1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2 &gt;</type>
      <name>Vec2</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2a20abe30c8427eb7a51af21a21de82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 3 &gt;</type>
      <name>Vec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae91357250892ce29d39ebf17e2aa85da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 4 &gt;</type>
      <name>Vec4</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a06ebf8e50473fe4ff867f9a30ca0ef1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 5 &gt;</type>
      <name>Vec5</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afc8678ad00b6fd28ff2f00998bd2f21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 6 &gt;</type>
      <name>Vec6</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6635f6ea880d0287e5619545864203c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 7 &gt;</type>
      <name>Vec7</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0018befafe47885d8153c4c0740cd968</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 8 &gt;</type>
      <name>Vec8</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>add8621d803341f15a756299c8481c1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 9 &gt;</type>
      <name>Vec9</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5ada6a8d10e6b078bc903a5fafdab0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 1, float &gt;</type>
      <name>fVec1</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a61b78494c87cc61223e3de652ee87cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2, float &gt;</type>
      <name>fVec2</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12c80778c529d2757a81e4cf068af7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 3, float &gt;</type>
      <name>fVec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a003e29e5051f4c29857b4d39e2a9f0a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 4, float &gt;</type>
      <name>fVec4</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb3bce23186ef79b2682621915d81375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 5, float &gt;</type>
      <name>fVec5</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51927633a25f66dc63fd670f7ad5a3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 6, float &gt;</type>
      <name>fVec6</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93c07ed44e27bb7004168adc1f763e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 7, float &gt;</type>
      <name>fVec7</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af6b6a7f478e98eb5b13fdab5e569b94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 8, float &gt;</type>
      <name>fVec8</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abfa6e6241bff6477796fb465be2548da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 9, float &gt;</type>
      <name>fVec9</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a57f6be177442b122c2ca6f5486c874b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 1 &gt;</type>
      <name>Row1</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abfb9e3b40eca123fc366a02425fe8dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2 &gt;</type>
      <name>Row2</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa4ffb79094a37bf0e521e56472528dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 3 &gt;</type>
      <name>Row3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b64644262553826ece08af3613697b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 4 &gt;</type>
      <name>Row4</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a326fde5f77314e9b00069019878b673d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 5 &gt;</type>
      <name>Row5</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a167704d4202cc1935204e8214e43cb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 6 &gt;</type>
      <name>Row6</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adcc0ed54e1a4242eb0763430952db0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 7 &gt;</type>
      <name>Row7</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef02d79ca2ba5c676147fb983d180593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 8 &gt;</type>
      <name>Row8</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abb0e8858a76c05d02c3eb61f274972df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 9 &gt;</type>
      <name>Row9</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3c90801bb2e18e0e4554ad9b15068401</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 1, float &gt;</type>
      <name>fRow1</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0676c06b0ba6b214b95495c7e9009f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, float &gt;</type>
      <name>fRow2</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7bf3bc86768d7c4e06eeaa51a001d8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 3, float &gt;</type>
      <name>fRow3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3f4f76dcaa557323540879d2086ab67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 4, float &gt;</type>
      <name>fRow4</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3d1c5e84e2e17b62f8a551c18345fa97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 5, float &gt;</type>
      <name>fRow5</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0b8f57df12acab1120ca312b9be532e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 6, float &gt;</type>
      <name>fRow6</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a255805fb49d235af322c6530ccb04be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 7, float &gt;</type>
      <name>fRow7</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a499cda3bd384e8d111702ff8876b5969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 8, float &gt;</type>
      <name>fRow8</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6da119f617199a1c2d52d9452953140</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 9, float &gt;</type>
      <name>fRow9</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0ce7bffbc26aca3b3be59ff80f76098a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 1 &gt;</type>
      <name>SymMat11</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a550cbb547da1e4b3b95e49b86a354ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 2 &gt;</type>
      <name>SymMat22</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abc181b50f662a15b7fcebe9d21b58484</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 3 &gt;</type>
      <name>SymMat33</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04a5834022dd0f62b98be91383b0634a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 4 &gt;</type>
      <name>SymMat44</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9de35334b79a50fd3f26c64551a079cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 5 &gt;</type>
      <name>SymMat55</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a987993c799e1987278203452ddb5a43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 6 &gt;</type>
      <name>SymMat66</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab0feaea22eee57fdbb98eb22ce562d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 7 &gt;</type>
      <name>SymMat77</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0665af3f6c2d2ac9a69f7406dad7a0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 8 &gt;</type>
      <name>SymMat88</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a49f66f1e9682c6f1fd98e9b483dccd09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 9 &gt;</type>
      <name>SymMat99</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeb9584d26bad73f71f35b1429e032cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 1, float &gt;</type>
      <name>fSymMat11</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aff1e1675b60ebc40d8fe16c0a0b99a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 2, float &gt;</type>
      <name>fSymMat22</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aabde27675b2acadf385db9d6e26fa967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 3, float &gt;</type>
      <name>fSymMat33</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1ea8dced161d575a5d7bf9af52a9ea24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 4, float &gt;</type>
      <name>fSymMat44</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5642288d205c0edde2e651573692d969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 5, float &gt;</type>
      <name>fSymMat55</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af187f16a7f2dbba69583fc1630ecf350</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 6, float &gt;</type>
      <name>fSymMat66</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ada7b412ad2adec3def09dc5dc9aef76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 7, float &gt;</type>
      <name>fSymMat77</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b80afa146a802a7df6d1808fe817fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 8, float &gt;</type>
      <name>fSymMat88</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92d0344a50ea4498fde02503be38df9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 9, float &gt;</type>
      <name>fSymMat99</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a29a810b4fb68e3d93190ed82c80c59c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 1 &gt;</type>
      <name>Mat11</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a98f2f038750e01204a7ba436c1ac19b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 2 &gt;</type>
      <name>Mat12</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abcca232ae398667b84f68a6fcdeb6a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 3 &gt;</type>
      <name>Mat13</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a91448d6300a33ddc0a4831c9b342d198</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 4 &gt;</type>
      <name>Mat14</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2bad728f627aa693231c884d26091b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 5 &gt;</type>
      <name>Mat15</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef3a19560f4285deedcd04d79843c9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 6 &gt;</type>
      <name>Mat16</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90575ef6111cf388ba6a72ef511b5c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 7 &gt;</type>
      <name>Mat17</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a01f9d7c6698d1fa01bc45f7a138f3215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 8 &gt;</type>
      <name>Mat18</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad4286200f4edba3aa01fdf0f00b58089</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 9 &gt;</type>
      <name>Mat19</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3032feab12344f38405a9891745c2fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 1 &gt;</type>
      <name>Mat21</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa63eaec2822e18409e9ef53a5bfb443b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2 &gt;</type>
      <name>Mat22</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a87cc0e4350103f7edd0481986c7a1c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 3 &gt;</type>
      <name>Mat23</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5beadda89a351e37ba095b2ddd58f516</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 4 &gt;</type>
      <name>Mat24</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af773f276a2067bd380449ad986a7ab5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 5 &gt;</type>
      <name>Mat25</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6f881967f90d7740670c621d466d9c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 6 &gt;</type>
      <name>Mat26</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93f1381ff6b311c73e1629b8b7e8a67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 7 &gt;</type>
      <name>Mat27</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a85202cc265143486aff8b3048ddaf66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 8 &gt;</type>
      <name>Mat28</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac218d9c998ba5a130d4a08cf55382be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 9 &gt;</type>
      <name>Mat29</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa3817745370fc955bb290d2636dbcab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 1 &gt;</type>
      <name>Mat31</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a734b71c2a6bbe6a446086c299a853acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 2 &gt;</type>
      <name>Mat32</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad2078a36f9bbf741da41598826748481</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 3 &gt;</type>
      <name>Mat33</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5f17318e33f3b2e5aa33f7996ae3cd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 4 &gt;</type>
      <name>Mat34</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afe9dfd500385d45d5369ad539c8e0b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 5 &gt;</type>
      <name>Mat35</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af5fe94d9bcbc8af14a97efc2e10cfd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 6 &gt;</type>
      <name>Mat36</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aebe2b6cab1fddcc5baf604e956263e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 7 &gt;</type>
      <name>Mat37</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2a611fa130ad0dfdd465132629f09518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 8 &gt;</type>
      <name>Mat38</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad47688c2c40c5adce01c03af107f7b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 9 &gt;</type>
      <name>Mat39</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa633813ad2df0d103d37ccc120fd3c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 1 &gt;</type>
      <name>Mat41</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f985de5deb75363627f3851e2574a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 2 &gt;</type>
      <name>Mat42</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a95314fd4ac122ae852100755dd5a75ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 3 &gt;</type>
      <name>Mat43</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0ecba9b37ce3718b1025ff5d76436578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 4 &gt;</type>
      <name>Mat44</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab5e69e96f457cbf245e455fc98aaf66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 5 &gt;</type>
      <name>Mat45</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32c7d2b20f8d43ab03dd88dbec680862</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 6 &gt;</type>
      <name>Mat46</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab1f9c30cd78d7876a22e0c6efdb5b334</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 7 &gt;</type>
      <name>Mat47</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a63ec49400d67fe4ffbd0728bf5651db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 8 &gt;</type>
      <name>Mat48</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a58ee33d2628385a2d485bdf614b1284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 9 &gt;</type>
      <name>Mat49</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09aa8182df99f72bb62aba91000002e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 1 &gt;</type>
      <name>Mat51</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab493bbb841d742bc00609a86b806a928</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 2 &gt;</type>
      <name>Mat52</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a606c9ff7ac31d22075ed554e46558cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 3 &gt;</type>
      <name>Mat53</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04e24c7833cb697606aa96840e87e1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 4 &gt;</type>
      <name>Mat54</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef85ff0b89c18a542ed3ff1ea42e3bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 5 &gt;</type>
      <name>Mat55</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a42e46985caecc07c703bb435e13d2be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 6 &gt;</type>
      <name>Mat56</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5cdbfa72614ba6ee70255a1c5229b1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 7 &gt;</type>
      <name>Mat57</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6e50ccdb4e2472f597c9da62c7762141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 8 &gt;</type>
      <name>Mat58</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a057f5e4a50c6b677034848b8fa3d40fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 9 &gt;</type>
      <name>Mat59</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2cc17a5b2cfebd44f1760e87a592b802</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 1 &gt;</type>
      <name>Mat61</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02fbebdb73d6547c32a8ea0e1a7e0247</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 2 &gt;</type>
      <name>Mat62</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6ae0b37c7a92556fc1c53d5d0e076f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 3 &gt;</type>
      <name>Mat63</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af36ca551065690c82ca625b43b93809b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 4 &gt;</type>
      <name>Mat64</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af4017e524f91bb096dc19b8d42a08098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 5 &gt;</type>
      <name>Mat65</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab09dd8c9bd57337a238e0537ce0beeb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 6 &gt;</type>
      <name>Mat66</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac3e41c02c2585cd9680200aa3cb2e14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 7 &gt;</type>
      <name>Mat67</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8b6b06d14e9b1ef0333290f07f759043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 8 &gt;</type>
      <name>Mat68</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1f7ebe1400475d7dff2e57b1f8486b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 9 &gt;</type>
      <name>Mat69</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1d9f97178293a874728d6611195ac387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 1 &gt;</type>
      <name>Mat71</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a30190d2d393eb7f89a25d3f44ba033df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 2 &gt;</type>
      <name>Mat72</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a100762e5325e142389402617e2e3e642</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 3 &gt;</type>
      <name>Mat73</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a13356b213214ef3dac27fab1fa9dc5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 4 &gt;</type>
      <name>Mat74</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a56304d015ac7e98ba2a9786bf0866722</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 5 &gt;</type>
      <name>Mat75</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af1b1d2fd123a39bc2e8de87700b36f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 6 &gt;</type>
      <name>Mat76</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a45bab0a41474e79367c1dd649943a41e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 7 &gt;</type>
      <name>Mat77</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09b94d0b26ed9a68beae6466a41bce2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 8 &gt;</type>
      <name>Mat78</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab945d1005a1f8a3f4f2a0ee50fe15c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 9 &gt;</type>
      <name>Mat79</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8002d0430c3c74991d87d52e2fa63fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 1 &gt;</type>
      <name>Mat81</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3a7990b78e0b6a1249c8a5fb35baeb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 2 &gt;</type>
      <name>Mat82</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0230be9135d37a686ed5f42e0564cf2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 3 &gt;</type>
      <name>Mat83</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb8ffa79759db36eb2521b4ce2e623f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 4 &gt;</type>
      <name>Mat84</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2dd298518738085b3a912cb6b8b35a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 5 &gt;</type>
      <name>Mat85</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e5cb2913c83dc7df416f0af71e80c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 6 &gt;</type>
      <name>Mat86</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2a86a9552dc8d94831c6585405e159e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 7 &gt;</type>
      <name>Mat87</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad314339548ce5cadd48496edffdaaadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 8 &gt;</type>
      <name>Mat88</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a20a7838bcd0a737265d444f071bf4740</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 9 &gt;</type>
      <name>Mat89</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8492f0193ab394e3601a1bf2c2f26202</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 1 &gt;</type>
      <name>Mat91</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa6e41fcdaf03f132d8b68cc74c921b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 2 &gt;</type>
      <name>Mat92</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76dbc9bb14af80d0558e9602627e1358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 3 &gt;</type>
      <name>Mat93</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5884839611c26ac421ec71ad89f87643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 4 &gt;</type>
      <name>Mat94</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a64f90509022e52c021de2cc3ef999da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 5 &gt;</type>
      <name>Mat95</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adf3792d9d7558ecf8b2da3ddff4ea4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 6 &gt;</type>
      <name>Mat96</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a699258f391d3174f022d4248242bdfca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 7 &gt;</type>
      <name>Mat97</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a209ad8ce3a857f557a48bc42d8377932</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 8 &gt;</type>
      <name>Mat98</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abeb319997b43e50b979f2fbc0c030c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 9 &gt;</type>
      <name>Mat99</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9b5ae2a9fa5e396dde4b4a0058480301</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 1, float &gt;</type>
      <name>fMat11</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acfde649bc9ab045280984b63cfdffae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, float &gt;</type>
      <name>fMat22</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6d1c1362cb0a91c4bd852de4998522b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 3, float &gt;</type>
      <name>fMat33</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad540693637bbec0b86c5beff153c4c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 4, float &gt;</type>
      <name>fMat34</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aed186d210cb4c71f00a5a05160163136</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 3, float &gt;</type>
      <name>fMat43</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeb5d29d1001abcf67da0baf99031911a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 4, float &gt;</type>
      <name>fMat44</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a14ba220c095cbe62528394f32529fb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 5, float &gt;</type>
      <name>fMat55</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6ae1f7927942b6e59b202890eae180fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 6, float &gt;</type>
      <name>fMat66</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa2a00c96e022ec7fe38a4a8b98af63db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 7, float &gt;</type>
      <name>fMat77</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a30fa0440eb83250035036a0aa17dcb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 8, float &gt;</type>
      <name>fMat88</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6990ffcdf54870649a6c9bd418b0f75d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 9, float &gt;</type>
      <name>fMat99</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9b28321d9566dd4915025f02cad953c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SmallMatrixMixed.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/SmallMatrix/include/SimTKcommon/internal/</path>
    <filename>SmallMatrixMixed_8h</filename>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a75379f49fd6af1682f606ad411ec8393</anchor>
      <arglist>(const Mat&lt; M, M, EL, CSL, RSL &gt; &amp;l, const SymMat&lt; M, ER, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1970393213a5c32ce8bda35ae3ee3fbe</anchor>
      <arglist>(const Mat&lt; M, M, EL, CSL, RSL &gt; &amp;l, const SymMat&lt; M, ER, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4857b052061c84efcda150905d284204</anchor>
      <arglist>(const SymMat&lt; M, EL, RSL &gt; &amp;l, const Mat&lt; M, M, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae52af4682f8c404da8a7477cc01729e0</anchor>
      <arglist>(const SymMat&lt; M, EL, RSL &gt; &amp;l, const Mat&lt; M, M, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E1 &gt;::THerm &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeecdb84ae3713aa35d307a67e50890d6</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;r, const Vec&lt; M, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E1 &gt;::THerm &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab95b89b131a70c33a03c0e0887dabb38</anchor>
      <arglist>(const Vec&lt; 1, E1, S1 &gt; &amp;r, const Vec&lt; 1, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abee1e485fc7f96da573329ddda4c65ab</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r, const Vec&lt; N, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b7a61b8002e338cf3b86916449f6f6d</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r, const Vec&lt; 1, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a744cb8af6066ebf46933eb58b0f78dcb</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r, const Vec&lt; N, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9547b8c08dd46d69d09928e8ac68cb74</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Row&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76633d85122ef9933db08a913cd3ca6d</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r, const Row&lt; N, E2, S2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E1 &gt;::template Result&lt; typename CNT&lt; E2 &gt;::THerm &gt;::Mul &gt;</type>
      <name>outer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0fd293cad29bd6fa0405ccffca69c738</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Vec&lt; M, E2, S2 &gt; &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Row&lt; M, E2, S2 &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3f15d558e93a904c1ff95720b83c6cc</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Row&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>outer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae2010318b4310afee21637d28ab39de7</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Row&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>outer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a629ac30932a3d0ec3ec52f6621c86d7f</anchor>
      <arglist>(const Row&lt; M, E1, S1 &gt; &amp;r, const Vec&lt; M, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>outer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a78b5f52c9509808764b3c5d4cc911bf4</anchor>
      <arglist>(const Row&lt; M, E1, S1 &gt; &amp;r, const Row&lt; M, E2, S2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ME, CS, RS &gt;::template Result&lt; Vec&lt; N, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a44d387292a36bec995b2f5d244e4a6b0</anchor>
      <arglist>(const Mat&lt; M, N, ME, CS, RS &gt; &amp;m, const Vec&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; M, E, S &gt;::template Result&lt; Mat&lt; M, N, ME, CS, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a135678cf4336bb8834ac9702ce8ab49f</anchor>
      <arglist>(const Row&lt; M, E, S &gt; &amp;r, const Mat&lt; M, N, ME, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; N, ME, RS &gt;::template Result&lt; Vec&lt; N, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a00c25c73c1bca68e661d8d9b8b97ff25</anchor>
      <arglist>(const SymMat&lt; N, ME, RS &gt; &amp;m, const Vec&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 1, ME, RS &gt;::template Result&lt; Vec&lt; 1, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adc6291ef4ee348052d91d6dd9b66d617</anchor>
      <arglist>(const SymMat&lt; 1, ME, RS &gt; &amp;m, const Vec&lt; 1, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 2, ME, RS &gt;::template Result&lt; Vec&lt; 2, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac293d389b2e0ccd98f8a2d7eb1ab1391</anchor>
      <arglist>(const SymMat&lt; 2, ME, RS &gt; &amp;m, const Vec&lt; 2, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, ME, RS &gt;::template Result&lt; Vec&lt; 3, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5aee6204a61bc06c2138cf41ff2db7a0</anchor>
      <arglist>(const SymMat&lt; 3, ME, RS &gt; &amp;m, const Vec&lt; 3, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; M, E, S &gt;::template Result&lt; SymMat&lt; M, ME, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af0dfe5368d0f6fb1ffb82b61a20756b8</anchor>
      <arglist>(const Row&lt; M, E, S &gt; &amp;r, const SymMat&lt; M, ME, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 1, E, S &gt;::template Result&lt; SymMat&lt; 1, ME, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad8847f69f13bee64edd72f371a68a3c3</anchor>
      <arglist>(const Row&lt; 1, E, S &gt; &amp;r, const SymMat&lt; 1, ME, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E, S &gt;::template Result&lt; SymMat&lt; 2, ME, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a682949b6b73d7ddef52a5b1bd30d61f7</anchor>
      <arglist>(const Row&lt; 2, E, S &gt; &amp;r, const SymMat&lt; 2, ME, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, E, S &gt;::template Result&lt; SymMat&lt; 3, ME, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6bb65df1eabb5142850ec44fb9b9d311</anchor>
      <arglist>(const Row&lt; 3, E, S &gt; &amp;r, const SymMat&lt; 3, ME, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Row&lt; N, E2, S2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac952206f1dcd27cd57febaa7b84bca2e</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Mat&lt; MM, NN, E2, CS2, RS2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c5bb315e7d335e2094a5ec8eb9117c0</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Mat&lt; MM, NN, E2, CS2, RS2 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; SymMat&lt; MM, E2, RS2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae7f393fd40099ef2670893fbb07ca791</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const SymMat&lt; MM, E2, RS2 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Vec&lt; MM, E2, S2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a181f11b50fb018d0dd24254e5d2ba635</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v1, const Vec&lt; MM, E2, S2 &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; M, E, S &gt;::template Result&lt; Mat&lt; MM, NN, ME, CS, RS &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae8e8b8e33c9df8cd25f1f0d39ac102f0</anchor>
      <arglist>(const Row&lt; M, E, S &gt; &amp;r, const Mat&lt; MM, NN, ME, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E1, S1 &gt;::template Result&lt; Vec&lt; M, E2, S2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8d7f83b93fbc03454829ad2b65cab354</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r, const Vec&lt; M, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N1, E1, S1 &gt;::template Result&lt; Row&lt; N2, E2, S2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4bd44708c8ecce1aa416da747baf8273</anchor>
      <arglist>(const Row&lt; N1, E1, S1 &gt; &amp;r1, const Row&lt; N2, E2, S2 &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ME, CS, RS &gt;::template Result&lt; Vec&lt; MM, E, S &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abf4925f4ed2ccaf81eba57e857e8885d</anchor>
      <arglist>(const Mat&lt; M, N, ME, CS, RS &gt; &amp;m, const Vec&lt; MM, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ME, CS, RS &gt;::template Result&lt; Row&lt; NN, E, S &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3640fcb2882627f68939e4ad4037b062</anchor>
      <arglist>(const Mat&lt; M, N, ME, CS, RS &gt; &amp;m, const Row&lt; NN, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ME, CS, RS &gt;::template Result&lt; SymMat&lt; Dim, E, S &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a15ef82f68ef6108014eb1606eeea2dea</anchor>
      <arglist>(const Mat&lt; M, N, ME, CS, RS &gt; &amp;m, const SymMat&lt; Dim, E, S &gt; &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae756378c84d8ec677106a9b0870d5c4d</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;a, const Vec&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9eedd4e9a4af6b9c8005aa028d4360ac</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;a, const Vec&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae1b6198f50a6350ac23978eb17a597de</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;a, const Row&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a300917de2fa6928519fede7c1b2a7c6b</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;a, const Row&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6447185d8a1c33f4baeeabef3502e3e7</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;a, const Vec&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4b348a616b2eebd99ef65959da98c2a4</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;a, const Vec&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a662a2b475ca013a676439cd1b073b3c0</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;a, const Row&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3d2b7d7846a81853c11bf4b7367808a6</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;a, const Row&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a58b5979fba09406434bf427ebfe561bc</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Mat&lt; 3, N, E2, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a16e73fbeee8aab0728ab9fea9cdf7710</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Mat&lt; 3, N, E2, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa9ad14875c4f9280316c84d9cae620f4</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Row&lt; N, Vec&lt; 3, E2, S2 &gt;, S3 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7ebdaa10d9146b638d36bfa0ffed2d77</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Row&lt; 3, Vec&lt; 3, E2, S2 &gt;, S3 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a83118cbc3aaffa0640e9d39f7f2e924c</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Row&lt; N, Vec&lt; 3, E2, S2 &gt;, S3 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a81a0f1401001c59e52611d0ddfc67b95</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Row&lt; 3, Vec&lt; 3, E2, S2 &gt;, S3 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EV &gt;::template Result&lt; EM &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae964f8dbf4df60f35f560ff28d56a3f5</anchor>
      <arglist>(const Vec&lt; 3, EV, SV &gt; &amp;v, const SymMat&lt; 3, EM, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EV &gt;::template Result&lt; EM &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adde2cc19a88bf3e3f569b87b84d76acb</anchor>
      <arglist>(const Vec&lt; 3, EV, SV &gt; &amp;v, const SymMat&lt; 3, EM, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9de9dd797aad136eb4b13685fa8846b7</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;r, const Mat&lt; 3, N, E2, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad1a1d40e7660d107d5d75501815862d4</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;r, const Mat&lt; 3, N, E2, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EV &gt;::template Result&lt; EM &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a80591c35607c0c13275db6220801cdfc</anchor>
      <arglist>(const Row&lt; 3, EV, SV &gt; &amp;r, const SymMat&lt; 3, EM, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EV &gt;::template Result&lt; EM &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a40487d2b7866090815217aa0a2a563ff</anchor>
      <arglist>(const Row&lt; 3, EV, SV &gt; &amp;r, const SymMat&lt; 3, EM, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae4653ba75f4556cabf3af16193fd4512</anchor>
      <arglist>(const Mat&lt; M, 3, EM, CS, RS &gt; &amp;m, const Vec&lt; 3, EV, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a13468997dce5d50fb11a981ad8d6fa1f</anchor>
      <arglist>(const Mat&lt; M, 3, EM, CS, RS &gt; &amp;m, const Vec&lt; 3, EV, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51ee883ac5ad9ca27335be62bdfbeb2d</anchor>
      <arglist>(const SymMat&lt; 3, EM, RS &gt; &amp;s, const Vec&lt; 3, EV, SV &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76dd996e21c512d77b718cc103712c08</anchor>
      <arglist>(const SymMat&lt; 3, EM, RS &gt; &amp;s, const Vec&lt; 3, EV, SV &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, 3, typename CNT&lt; EM &gt;::template Result&lt; ER &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8855cc5be627707d5a3060e23d8ba6c8</anchor>
      <arglist>(const Mat&lt; M, 3, EM, CS, RS &gt; &amp;m, const Row&lt; 3, ER, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, 3, typename CNT&lt; EM &gt;::template Result&lt; ER &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7fa93e2ea16180a1c2133beb751e90ec</anchor>
      <arglist>(const Mat&lt; M, 3, EM, CS, RS &gt; &amp;m, const Row&lt; 3, ER, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3466bad9e1830847220ae2f9522bfab3</anchor>
      <arglist>(const SymMat&lt; 3, EM, RS &gt; &amp;s, const Row&lt; 3, EV, SV &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa58bef996ec56a183c6f691222850ccb</anchor>
      <arglist>(const SymMat&lt; 3, EM, RS &gt; &amp;s, const Row&lt; 3, EV, SV &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa9336e01e76617fcb2163d6d4e8c90f1</anchor>
      <arglist>(const Vec&lt; 2, E1, S1 &gt; &amp;a, const Vec&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9c9ba6df1ef96e47d8b21485f1231b5a</anchor>
      <arglist>(const Vec&lt; 2, E1, S1 &gt; &amp;a, const Vec&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6dfa33b403f4590d83b58fff48c2111e</anchor>
      <arglist>(const Row&lt; 2, E1, S1 &gt; &amp;a, const Vec&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a248be638028ac58f642ea7ceee74503c</anchor>
      <arglist>(const Row&lt; 2, E1, S1 &gt; &amp;a, const Vec&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8cde3719803667e0afd02afd6dcfe1c0</anchor>
      <arglist>(const Vec&lt; 2, E1, S1 &gt; &amp;a, const Row&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a31bb112ba907f26ea7754d08dadb48c4</anchor>
      <arglist>(const Vec&lt; 2, E1, S1 &gt; &amp;a, const Row&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4652ba4352ad7dd8eff02cb65a0c929f</anchor>
      <arglist>(const Row&lt; 2, E1, S1 &gt; &amp;a, const Row&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aefca07faacce3c2a39a872c0bec1a32a</anchor>
      <arglist>(const Row&lt; 2, E1, S1 &gt; &amp;a, const Row&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abdddad3e705503c6f6b479f1d4beeb2a</anchor>
      <arglist>(const Vec&lt; 3, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a70b4f27eb533cfe14bed27158889a7b5</anchor>
      <arglist>(const Vec&lt; 3, negator&lt; E &gt;, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae9ac1c695c2ceac391f47d1e128c59e4</anchor>
      <arglist>(const Row&lt; 3, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a1d67c4595424efed79a3bffde8ddca</anchor>
      <arglist>(const Row&lt; 3, negator&lt; E &gt;, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a097547e1e09aa6a21dcdb58561ffd5a7</anchor>
      <arglist>(const Vec&lt; 2, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92baeac46af751f00b3c09e503361128</anchor>
      <arglist>(const Vec&lt; 2, negator&lt; E &gt;, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8c8a7d6ec223b61136e88a51b97ca2cd</anchor>
      <arglist>(const Row&lt; 2, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f9447732a8e782eae83418206cd5333</anchor>
      <arglist>(const Row&lt; 2, negator&lt; E &gt;, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E &gt;</type>
      <name>crossMatSq</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab3e26d4090b012a30647164cb240c3d6</anchor>
      <arglist>(const Vec&lt; 3, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E &gt;</type>
      <name>crossMatSq</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac0068b78c625afd17c00bce4b4fa4999</anchor>
      <arglist>(const Vec&lt; 3, negator&lt; E &gt;, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E &gt;</type>
      <name>crossMatSq</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c99f2bae0273a0097c0527b55f41890</anchor>
      <arglist>(const Row&lt; 3, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E &gt;</type>
      <name>crossMatSq</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afd173621984b0079ae67a0ccc49c32c7</anchor>
      <arglist>(const Row&lt; 3, negator&lt; E &gt;, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac89175b7f79d7843fe4ee9febc702193</anchor>
      <arglist>(const Mat&lt; 1, 1, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5fd610b77a30a97fa1bfafed7546bb8e</anchor>
      <arglist>(const SymMat&lt; 1, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2d4e72b15d866957f4537c598f3a37bc</anchor>
      <arglist>(const Mat&lt; 2, 2, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af2f2c3bb956121f963eaa8bd57eb26a6</anchor>
      <arglist>(const SymMat&lt; 2, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aace388e328b3cc53a45b641321d1b892</anchor>
      <arglist>(const Mat&lt; 3, 3, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a26f033f1f83b1c48f3bce2f0b4b108e3</anchor>
      <arglist>(const SymMat&lt; 3, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5f069fe89cd9be67afcd46b0e61d224a</anchor>
      <arglist>(const Mat&lt; M, M, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a00debd18886cee878271d74cb0e99307</anchor>
      <arglist>(const SymMat&lt; M, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 1, 1, E, CS, RS &gt;::TInvert</type>
      <name>lapackInverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2a1e3423cdcffd36acd64e8bdb9ac6e8</anchor>
      <arglist>(const Mat&lt; 1, 1, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, E, CS, RS &gt;::TInvert</type>
      <name>lapackInverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa3e9cc01573bbfa13dc9bf0c417baf39</anchor>
      <arglist>(const Mat&lt; M, M, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 1, 1, E, CS, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a350786e5711344078e2d1a51dd1b2a3d</anchor>
      <arglist>(const Mat&lt; 1, 1, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 1, E, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef2abb20fdadf482be5db59315e629a4</anchor>
      <arglist>(const SymMat&lt; 1, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 2, 2, E, CS, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2ec46ace44fd6a469934f321c6f62ce8</anchor>
      <arglist>(const Mat&lt; 2, 2, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 2, E, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7304cac65ee6712080c138e0052ee51a</anchor>
      <arglist>(const SymMat&lt; 2, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E, CS, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7886a54a1c662b44b822f6a0e0aa1b88</anchor>
      <arglist>(const Mat&lt; 3, 3, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af48fb90e63a1b4e92783725a954e597a</anchor>
      <arglist>(const SymMat&lt; 3, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, E, CS, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af4cb78f2bad766b79ff126049f68521b</anchor>
      <arglist>(const Mat&lt; M, M, E, CS, RS &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpatialAlgebra.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/internal/</path>
    <filename>SpatialAlgebra_8h</filename>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <class kind="class">SimTK::PhiMatrix</class>
    <class kind="class">SimTK::PhiMatrixTranspose</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeVelocity</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga1356d52bc6c756a65449cf77b6ed450c</anchor>
      <arglist>(const Transform &amp;X_FA, const SpatialVec &amp;V_FA, const Transform &amp;X_FB, const SpatialVec &amp;V_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeVelocityInF</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaa29f226e57ded5cd16a97087bf6cbc7a</anchor>
      <arglist>(const Vec3 &amp;p_AB_F, const SpatialVec &amp;V_FA, const SpatialVec &amp;V_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeAcceleration</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gab4ea6030e591f841957fe57c2e8e9856</anchor>
      <arglist>(const Transform &amp;X_FA, const SpatialVec &amp;V_FA, const SpatialVec &amp;A_FA, const Transform &amp;X_FB, const SpatialVec &amp;V_FB, const SpatialVec &amp;A_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeAccelerationInF</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaf0c33467c25c79e11eb6f9cdc6b31589</anchor>
      <arglist>(const Vec3 &amp;p_AB_F, const SpatialVec &amp;V_FA, const SpatialVec &amp;A_FA, const SpatialVec &amp;V_FB, const SpatialVec &amp;A_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>reverseRelativeVelocity</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga39da5fe5d3cc806ba5e0d1da41d5638f</anchor>
      <arglist>(const Transform &amp;X_AB, const SpatialVec &amp;V_AB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>reverseRelativeVelocityInA</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaf6cd519023caf21595f9346121cbc69d</anchor>
      <arglist>(const Transform &amp;X_AB, const SpatialVec &amp;V_AB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftVelocityBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga64e629bd9aead45c34c02f6448127edc</anchor>
      <arglist>(const SpatialVec &amp;V_AB, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftVelocityFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga606c054f4a71108a91b5f6e61bedef87</anchor>
      <arglist>(const SpatialVec &amp;V_A_BP, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftForceBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga2b44f1ea5624daf334b4aa6c0e07ea0e</anchor>
      <arglist>(const SpatialVec &amp;F_AP, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftForceFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga76d7f9be4b5cabe22b3ad7c1eef94be9</anchor>
      <arglist>(const SpatialVec &amp;F_AP, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftAccelerationBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga4cd275315e4cfd899f739fad664c1720</anchor>
      <arglist>(const SpatialVec &amp;A_AB, const Vec3 &amp;w_AB, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftAccelerationFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gab5349929701832c2c4020d1ef38ad9f0</anchor>
      <arglist>(const SpatialVec &amp;A_A_BP, const Vec3 &amp;w_AB, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
    <member kind="function">
      <type>PhiMatrixTranspose</type>
      <name>transpose</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8279fd7a157b0f4078ea245377484d82</anchor>
      <arglist>(const PhiMatrix &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>PhiMatrixTranspose</type>
      <name>operator~</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e6f680d1eee9369820c3aa07793f9d5</anchor>
      <arglist>(const PhiMatrix &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12cc9544da859e2b8922e51965de0bb6</anchor>
      <arglist>(const PhiMatrix &amp;phi, const SpatialVec &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMat</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4adb360d80854b182910189a9fb2a870</anchor>
      <arglist>(const PhiMatrix &amp;phi, const SpatialMat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6a3acb89c7a89a20def67a2e08b337f9</anchor>
      <arglist>(const PhiMatrixTranspose &amp;phiT, const SpatialVec &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMat</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aca3bdc06255c19bc05b8b914849a3572</anchor>
      <arglist>(const SpatialMat::THerm &amp;m, const PhiMatrixTranspose &amp;phiT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac56336ea74b71f07f371d943bd5cdba0</anchor>
      <arglist>(const PhiMatrix &amp;p1, const PhiMatrix &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab878b19d5109a691a7e75da946a63a21</anchor>
      <arglist>(const PhiMatrixTranspose &amp;p1, const PhiMatrixTranspose &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Spline.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>Spline_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="GCVSPLUtil_8h" name="GCVSPLUtil.h" local="yes" imported="no">simmath/internal/GCVSPLUtil.h</includes>
    <class kind="class">SimTK::Spline_</class>
    <class kind="class">SimTK::Spline_::SplineImpl</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Spline_&lt; Real &gt;</type>
      <name>Spline</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f6a9563ce4a9a5d32b0dacb08b8f1bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SplineFitter.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Geometry/include/simmath/internal/</path>
    <filename>SplineFitter_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Spline_8h" name="Spline.h" local="yes" imported="no">simmath/internal/Spline.h</includes>
    <includes id="GCVSPLUtil_8h" name="GCVSPLUtil.h" local="yes" imported="no">simmath/internal/GCVSPLUtil.h</includes>
    <class kind="class">SimTK::SplineFitter</class>
    <class kind="class">SimTK::SplineFitter::SplineFitterImpl</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>StableArray.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>StableArray_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="Array_8h" name="Array.h" local="yes" imported="no">SimTKcommon/internal/Array.h</includes>
    <class kind="class">SimTK::StableArray</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Stage.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>Stage_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="String_8h" name="String.h" local="yes" imported="no">SimTKcommon/internal/String.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">SimTKcommon/internal/Exception.h</includes>
    <class kind="class">SimTK::Stage</class>
    <class kind="class">SimTK::Exception::RealizeTopologyMustBeCalledFirst</class>
    <class kind="class">SimTK::Exception::StateAndSystemTopologyVersionsMustMatch</class>
    <class kind="class">SimTK::Exception::StageTooLow</class>
    <class kind="class">SimTK::Exception::StageIsWrong</class>
    <class kind="class">SimTK::Exception::StageTooHigh</class>
    <class kind="class">SimTK::Exception::StageOutOfRange</class>
    <class kind="class">SimTK::Exception::CacheEntryOutOfDate</class>
    <class kind="class">SimTK::Exception::RealizeCheckFailed</class>
    <namespace>SimTK</namespace>
    <namespace>SimTK::Exception</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_REALIZECHECK_ALWAYS</name>
      <anchorfile>Stage_8h.html</anchorfile>
      <anchor>a1dc8469081253ae95f26de3163376e47</anchor>
      <arglist>(cond, stage, subsysIx, subsysName, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_REALIZECHECK1_ALWAYS</name>
      <anchorfile>Stage_8h.html</anchorfile>
      <anchor>aa0dc96b86434b0d21ea7fb9da56a2be1</anchor>
      <arglist>(cond, stage, subsysIx, subsysName, msg, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_REALIZECHECK2_ALWAYS</name>
      <anchorfile>Stage_8h.html</anchorfile>
      <anchor>ad41f9fafebf8c1af37b6a0eabc1cc207</anchor>
      <arglist>(cond, stage, subsysIx, subsysName, msg, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_REALIZECHECK3_ALWAYS</name>
      <anchorfile>Stage_8h.html</anchorfile>
      <anchor>aba6205a67b193c9145a13c4a7953b319</anchor>
      <arglist>(cond, stage, subsysIx, subsysName, msg, a1, a2, a3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_REALIZECHECK4_ALWAYS</name>
      <anchorfile>Stage_8h.html</anchorfile>
      <anchor>abb9453b91e2376753e32301f16442f22</anchor>
      <arglist>(cond, stage, subsysIx, subsysName, msg, a1, a2, a3, a4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_REALIZECHECK5_ALWAYS</name>
      <anchorfile>Stage_8h.html</anchorfile>
      <anchor>a33ad8e4b6569645d6f098e6615622c80</anchor>
      <arglist>(cond, stage, subsysIx, subsysName, msg, a1, a2, a3, a4, a5)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4e1bb48fd2dc833588bd9a492606204a</anchor>
      <arglist>(std::ostream &amp;o, Stage g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>State.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>State_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="Event_8h" name="Event.h" local="yes" imported="no">SimTKcommon/internal/Event.h</includes>
    <class kind="class">SimTK::State</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>int</type>
      <name>StageVersion</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a578ce671df2b7d61432037baba8e8870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92abdecc386c237a2fbdb8219af569fe</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a21667be01e76a213df61d8ef13eabf93</anchor>
      <arglist>(SystemYIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa7384bd539ea8995df16a289debf4269</anchor>
      <arglist>(SystemQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a10983692c8e929b8414399782ca11027</anchor>
      <arglist>(QIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a245dff683d21a0d39c8d746d5877fd2e</anchor>
      <arglist>(SystemUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c19a9477dffe37ee5454a67801073aa</anchor>
      <arglist>(UIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a898f6b38b59ea73204daabe5ac202da4</anchor>
      <arglist>(SystemZIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad9387aed416461d4a1c43c42657d1ee6</anchor>
      <arglist>(ZIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a53c7aec347ab928bc3ae0a73e152fe2a</anchor>
      <arglist>(DiscreteVariableIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0bf087f3bf676cdc888a8bcdce252016</anchor>
      <arglist>(CacheEntryIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aabdf5f89fda7343dcfa50f85b3e969d8</anchor>
      <arglist>(SystemYErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac99486de40e45a7fa99d51919879f159</anchor>
      <arglist>(SystemQErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e34cda391a7e56d9097bcf787302caa</anchor>
      <arglist>(QErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a36c9c97a389f369a1be394eca9ca9e26</anchor>
      <arglist>(SystemUErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad73614a334a347f320b6f1da93b8f1ee</anchor>
      <arglist>(UErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab45d1ed48bdd2e4c47a5a0ee5bd63978</anchor>
      <arglist>(SystemUDotErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a26f84029e2d001101adf7a4d20220e33</anchor>
      <arglist>(UDotErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6cac6522a88ab19777253af4385a6a5d</anchor>
      <arglist>(SystemMultiplierIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a28eda1e0ae6904141f6da0ce01af7273</anchor>
      <arglist>(MultiplierIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a40ffaf82a8a4037d39dd8adb16ad8e5c</anchor>
      <arglist>(std::ostream &amp;o, const State &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>String.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>String_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="ExceptionMacros_8h" name="ExceptionMacros.h" local="yes" imported="no">SimTKcommon/internal/ExceptionMacros.h</includes>
    <class kind="class">SimTK::String</class>
    <namespace>SimTK</namespace>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae22643aff4203ff019e3e7c16b09e492</anchor>
      <arglist>(const String &amp;value, T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9af68e1df7f52c38a7d152459879277b</anchor>
      <arglist>(const String &amp;value, bool &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a03fd811eb82d8e1739c46bcc40cc0fb8</anchor>
      <arglist>(const String &amp;value, float &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12f8c59d9dbd3594b4212c193f3dc210</anchor>
      <arglist>(const String &amp;value, double &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab62f5ea3c3d922969543b47483bb2ebf</anchor>
      <arglist>(const String &amp;value, long double &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad93512c8529a0abce950989511f08b58</anchor>
      <arglist>(const String &amp;value, String &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a91cd875a039473d2985584023e40ffe7</anchor>
      <arglist>(const String &amp;value, std::string &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac8e3a8f000945e83638771ce5cd25405</anchor>
      <arglist>(const String &amp;value, negator&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a894c75c8f51cb0c2fb3a3e736cffdd58</anchor>
      <arglist>(const String &amp;value, conjugate&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1dc167761a53ad7ec87db85b69a98ffa</anchor>
      <arglist>(const String &amp;value, T *&amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Study.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>Study_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <includes id="System_8h" name="System.h" local="yes" imported="no">SimTKcommon/internal/System.h</includes>
    <class kind="class">SimTK::Study</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>StudyGuts.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>StudyGuts_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <class kind="class">SimTK::Study::Guts</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Subsystem.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>Subsystem_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <includes id="Measure_8h" name="Measure.h" local="yes" imported="no">SimTKcommon/internal/Measure.h</includes>
    <class kind="class">SimTK::Subsystem</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>SubsystemGuts.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>SubsystemGuts_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <class kind="class">SimTK::Subsystem::Guts</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>SymMat.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/SmallMatrix/include/SimTKcommon/internal/</path>
    <filename>SymMat_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::SymMat</class>
    <class kind="struct">SimTK::SymMat::EltResult</class>
    <class kind="struct">SimTK::SymMat::Result</class>
    <class kind="struct">SimTK::SymMat::Substitute</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>SymMat&lt; M, E1, S1 &gt;::template Result&lt; SymMat&lt; M, E2, S2 &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afb9d93bf47e2c7f20f32cd5d2e7297bc</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E1, S1 &gt;::template Result&lt; SymMat&lt; M, E2, S2 &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a797ec26c733b52084cba29d383dd131d</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E1, S1 &gt;::template Result&lt; SymMat&lt; M, E2, S2 &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5688e24d8241deb7b15a2429aa6c7cf1</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a89637866ceddce285e2d597c9f8c76a3</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0747a0f9da57cc40c69de13781a68bc2</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a508c363d5829ca4e1657ebed4e975bf7</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa9cf711a471da79679b85559ed029c36</anchor>
      <arglist>(const float &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0de3b266324ef62ae60ad4abf95768b9</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a78916c9eb05c8e1c33402fd7e5071266</anchor>
      <arglist>(const double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1f8e8b8b6a18ca46a55ff526d517ad99</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac766c2b187dffedd532b70f2d79a8b44</anchor>
      <arglist>(const long double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a28611136ebaa04702932fbc99ff793c4</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adcdc3f3de8ad606da3ba3802f26b64da</anchor>
      <arglist>(int l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adf8a784733d0baca97a0b2a7e01445e9</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7122746a961ec5cbbc5187a131669607</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afb905781b2ef0cb18adad5ac02c36137</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acc283c633665e0dd16369e86b1aa2faf</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a71991812e043c87842c7ca6a6c6bbeec</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9451c75d313a6e44a9111d5b3e6072c7</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a113fcf3e7e9a1304a34b27799f41b3b3</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90abafaaa69a08dffe6458281cdcaee5</anchor>
      <arglist>(const float &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a28adca3e2764dbdb9ec932122aa67966</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a531329ae1dc76c56efd9f443cb214db3</anchor>
      <arglist>(const double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8162c1736e2a702a2744051df2602029</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a07ca38f55dba6dc994bf68aa4610ba6c</anchor>
      <arglist>(const long double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a96087b299d72d80e5ca0f51bf39cd204</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4e25dec53b8f3944bc79a456abae61e</anchor>
      <arglist>(int l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9475c33970e167635ad0bbf619a3d5a9</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4139edb0a2d32c015ab7dd2b46dd253d</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a46903f1a828f4cb5f959ed36a57562ba</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a702802cc700948e7fd42885ba52a6dc5</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa2eef034649f2d142dbe956a56cab5f1</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7631fb363785f5545559735a526df569</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae9dff88a08dd5967363343d439e0d75e</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5b509a1db4a87e0c6476a278f811eb42</anchor>
      <arglist>(const float &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a560eb3248845ec1854eeda7991f43368</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a990878b1ff1d2dbb5b3afbdbb7e5cb2e</anchor>
      <arglist>(const double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02ff3711803b2530eaff968247b10bfc</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3ce58ea355b4e0d86ab2f7d15313bab</anchor>
      <arglist>(const long double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa3e4d8f618e20f825b6fc60976258324</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5b3b401c01f053eaf2b47d24a8e39e7b</anchor>
      <arglist>(int l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9e05694f70a957a527231ad8c6e8badf</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a488ba221fdaf3ea5ee873f096896eced</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae3b35e3070a804f2c334720a2a973c01</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0b2f54f86bd38c803f7a3a3fd45b2050</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3be6ad0f07e5d00145035986dc256b01</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7f06e1bb81042cbef6515101cec01b04</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0904edef1d9ef399ad6bc18322041b04</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac78248fe388ab12fe0e50f604cf09ab6</anchor>
      <arglist>(const float &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aefbea7cea034b2ead5b3885db12d169e</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad0b1505198f61059164afedb6304af0c</anchor>
      <arglist>(const double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab9c9a03ccbf55154a106c18dd7251e2d</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa8a36b2c99fa9817cd67620b9fd74bad</anchor>
      <arglist>(const long double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1b0db56995e0b8c74d6b6d38bef5bff0</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a195d92371ecc6efed4a1d6a0ae8ed87b</anchor>
      <arglist>(int l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af0a08f00d55766fae01345c1239b7611</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6b64edd2959c0e1be535914f89d2e899</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b10cc53f38b91c901869daddbc6e77e</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a343ec6a9fd0baa37f0579168a9b04ee7</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9349abdc8a7eea1253f138d2a13eae73</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a542a352a2f21298e3cdcda877f5e4a6b</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a052150afd21b0fd456c6ed2a3bd43f09</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const SymMat&lt; M, E, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac904796f05f0c62a29350bfda0ae9222</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, SymMat&lt; M, E, RS &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>System.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>System_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <includes id="Subsystem_8h" name="Subsystem.h" local="yes" imported="no">SimTKcommon/internal/Subsystem.h</includes>
    <class kind="class">SimTK::System</class>
    <class kind="class">SimTK::DefaultSystemSubsystem</class>
    <class kind="class">SimTK::ProjectOptions</class>
    <class kind="class">SimTK::ProjectResults</class>
    <class kind="class">SimTK::RealizeOptions</class>
    <class kind="class">SimTK::RealizeResults</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>SystemGuts.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Simulation/include/SimTKcommon/internal/</path>
    <filename>SystemGuts_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="State_8h" name="State.h" local="yes" imported="no">SimTKcommon/internal/State.h</includes>
    <includes id="System_8h" name="System.h" local="yes" imported="no">SimTKcommon/internal/System.h</includes>
    <class kind="class">SimTK::System::Guts</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>TemplatizedLapack.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/</path>
    <filename>TemplatizedLapack_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::Lapack</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Testing.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/</path>
    <filename>Testing_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <includes id="Random_8h" name="Random.h" local="yes" imported="no">SimTKcommon/internal/Random.h</includes>
    <class kind="class">SimTK::Test</class>
    <class kind="class">SimTK::Test::Subtest</class>
    <namespace>SimTK</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_START_TEST</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a5b5c5b23f3bf8e74333f900706c52e4f</anchor>
      <arglist>(testName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_END_TEST</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>aef42d17065e9cc2af407b9f319bee1ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SUBTEST</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a76470a54adce60c33f247aef0a858977</anchor>
      <arglist>(testFunction)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SUBTEST1</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>ac73d94762fbcce4ae84d63b3ae7900d6</anchor>
      <arglist>(testFunction, arg1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SUBTEST2</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a9915bb0c54f2127b34d339cc1c06a869</anchor>
      <arglist>(testFunction, arg1, arg2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SUBTEST3</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>afdc7f4f68f38133134dfc8d91b09dbf8</anchor>
      <arglist>(testFunction, arg1, arg2, arg3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SUBTEST4</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a79f64e5a1e671e0c46e11e6f9a5bd987</anchor>
      <arglist>(testFunction, arg1, arg2, arg3, arg4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a3fd9c5a4a7d749900e072494de08558c</anchor>
      <arglist>(cond)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_FAILED</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a59818b3d0e465bacf4f33ed567cb96db</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_FAILED1</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a888c3e8e05d58caba179f62c32ce8f3e</anchor>
      <arglist>(fmt, a1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_FAILED2</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a33055255c24c3c7283cb1ca462fff093</anchor>
      <arglist>(fmt, a1, a2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_EQ</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>ad5337477d821040b03ebc3771375e671</anchor>
      <arglist>(v1, v2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_EQ_SIZE</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a291401fa05f9914529aa76621298b435</anchor>
      <arglist>(v1, v2, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_EQ_TOL</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a149f43ae1242dde06473c78e60d995dd</anchor>
      <arglist>(v1, v2, tol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_NOTEQ</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a26abae6bd7182eca709697cc7d954856</anchor>
      <arglist>(v1, v2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_NOTEQ_SIZE</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>af66bf14a41fce617e2dae1250f282941</anchor>
      <arglist>(v1, v2, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_NOTEQ_TOL</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>afcc8b55ae1bdb54cb49052dae57539c2</anchor>
      <arglist>(v1, v2, tol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_MUST_THROW</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a79d8d25efc47834deb9b776f2c45e9c1</anchor>
      <arglist>(stmt)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_MUST_THROW_EXC</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a1d398ace07800b83058187008d2e9e77</anchor>
      <arglist>(stmt, exc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_MAY_THROW</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a4f90ffb6215eb100a0da33216c17ae41</anchor>
      <arglist>(stmt)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_MAY_THROW_EXC</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>af6eafc62795f8eeb363a7393ca8e7101</anchor>
      <arglist>(stmt, exc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_MUST_THROW_DEBUG</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a6624b2b6fd861cce17a2e00d38c691e9</anchor>
      <arglist>(stmt)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_TEST_MUST_THROW_EXC_DEBUG</name>
      <anchorfile>Testing_8h.html</anchorfile>
      <anchor>a373f14e897ad8dd48c731848657ebc8c</anchor>
      <arglist>(stmt, exc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TextDataEventReporter.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/include/simbody/internal/</path>
    <filename>TextDataEventReporter_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::TextDataEventReporter</class>
    <class kind="class">SimTK::TextDataEventReporter::UserFunction</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>ThreadLocal.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>ThreadLocal_8h</filename>
    <class kind="class">SimTK::ThreadLocal</class>
    <namespace>SimTK</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanUpThreadLocalStorage</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae5476fc2988d31b6c36eb6d5556ef6c2</anchor>
      <arglist>(void *value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; void *, pthread_key_t &gt;</type>
      <name>instanceMap</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a2c3daa5ee587c8d6dc8ba20d052fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; pthread_key_t, std::set&lt; void * &gt; &gt;</type>
      <name>keyInstances</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0eb37ea5cdb42a6383a2b6ad9823b3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static pthread_mutex_t</type>
      <name>keyLock</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aca8879e702392d0aa87e2f4878460432</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeStepper.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>TimeStepper_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::TimeStepper</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Timing.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Timing_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="Constants_8h" name="Constants.h" local="yes" imported="no">SimTKcommon/Constants.h</includes>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>long long</type>
      <name>timespecToNs</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>gace24356640e4cf281bc2221933c8d0d9</anchor>
      <arglist>(const timespec &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nsToTimespec</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>ga713811ece1aedbdd06d4f98951dea21e</anchor>
      <arglist>(const long long &amp;ns, timespec &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nsToSec</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>gaa9f63b9ee08b1b6dd0321c25dbb3deec</anchor>
      <arglist>(const long long &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>secToNs</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>ga3d51ddfbb75cb8a41277b5c56ebfdbfc</anchor>
      <arglist>(const double &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cpuTime</name>
      <anchorfile>group__CPUTimers.html</anchorfile>
      <anchor>ga504ddfe913f5861dd4f96267714ed4a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>threadCpuTime</name>
      <anchorfile>group__CPUTimers.html</anchorfile>
      <anchor>ga2b21a5c42c6b100d0e7d69d27c846d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>realTimeInNs</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga9dc21e8a0695b5f5f8acc15c91115cd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realTime</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga90346b7b40f4d56611634637591cf52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleepInNs</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>gac3ba999019f0632c52430fcd62a0e118</anchor>
      <arglist>(const long long &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleepInSec</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga899cbb9b0871969450e881a8828a8a26</anchor>
      <arglist>(const double &amp;seconds)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Transform.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/internal/</path>
    <filename>Transform_8h</filename>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="BigMatrix_8h" name="BigMatrix.h" local="yes" imported="no">SimTKcommon/internal/BigMatrix.h</includes>
    <includes id="UnitVec_8h" name="UnitVec.h" local="yes" imported="no">SimTKcommon/internal/UnitVec.h</includes>
    <includes id="Quaternion_8h" name="Quaternion.h" local="yes" imported="no">SimTKcommon/internal/Quaternion.h</includes>
    <includes id="Rotation_8h" name="Rotation.h" local="yes" imported="no">SimTKcommon/internal/Rotation.h</includes>
    <class kind="class">SimTK::Transform_</class>
    <class kind="class">SimTK::InverseTransform_</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Transform_&lt; Real &gt;</type>
      <name>Transform</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acc6561664fcf612c22f175dbf41c196e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform_&lt; float &gt;</type>
      <name>fTransform</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad4013f777149d64b3f323cd3d42a805e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform_&lt; double &gt;</type>
      <name>dTransform</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a13228c8656e10f79fc5d50e7c2d1bf48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5fe3fa31e112b1fa1ad10c7aed8041de</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, P, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2eed33fd9504b6f160c9a94e3bc20ad7</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, negator&lt; P &gt;, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02bbd3841638776ed1ae966660d856ce</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, negator&lt; P &gt;, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad1209b31cf218477b74c0f85ac6127b0</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_BF, const Vec&lt; 4, P, S &gt; &amp;a_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af032251f8e5e2e90d0aef288b756e3ba</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_BF, const Vec&lt; 4, negator&lt; P &gt;, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad5e04cfe3f2e5a121314d79cc9fe1017</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_BF, const Vec&lt; 4, negator&lt; P &gt;, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2e543a1bf7fed37b03fb91978b355609</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0fd52515da78a94a0f8e5639d418a9b9</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const RowVectorBase&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa7f07e8adc6868f9d82bbfee5a374666</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32e351099cd1b1ffb08214383f426e3c</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const MatrixBase&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5f828c9ea8647f59bbdb5af134bae757</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6ca599409535ce754846a4e1c81544a7</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const Vec&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9054ba43cf32933b9c3949f24bc41663</anchor>
      <arglist>(const Vec&lt; N, E, S &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a62432b74d5e1c8c16314dc0e04b7939d</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a531f2a37e69db7ce5d9469222eafa850</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa5f73ce71b5fb2d3d0bbcc0b922c93d9</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const Mat&lt; M, N, E, CS, RS &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a26d9dc48199b7d7ba1ca44fc4ad8b082</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3602a161e91f4191b1ee20f41e97708d</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X1, const InverseTransform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f86079a5d1f6c057af8329b62739511</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X1, const Transform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af4b85482222da9af0d82698197986f85</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X1, const InverseTransform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac28fea6f9808b9967305de1c205e05c9</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X1, const InverseTransform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a29fef4795c0c95bd24f3dc5bbeb4bedd</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X1, const InverseTransform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa19a0ef217d2d503b27237419c07c392</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X1, const Transform_&lt; P &gt; &amp;X2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UnitVec.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/Mechanics/include/SimTKcommon/internal/</path>
    <filename>UnitVec_8h</filename>
    <includes id="SmallMatrix_8h" name="SmallMatrix.h" local="yes" imported="no">SimTKcommon/SmallMatrix.h</includes>
    <includes id="CoordinateAxis_8h" name="CoordinateAxis.h" local="yes" imported="no">SimTKcommon/internal/CoordinateAxis.h</includes>
    <class kind="class">SimTK::UnitVec</class>
    <class kind="class">SimTK::UnitRow</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>UnitVec&lt; Real, 1 &gt;</type>
      <name>UnitVec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a880c082e02fe87b78798e9f75d4d2ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitVec&lt; float, 1 &gt;</type>
      <name>fUnitVec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec231355023aff63e565b8f92eb8f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitVec&lt; double, 1 &gt;</type>
      <name>dUnitVec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a34dfc7a23b6656a9faea3b02fd9a5c34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Value.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Value_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="String_8h" name="String.h" local="yes" imported="no">SimTKcommon/internal/String.h</includes>
    <includes id="Exception_8h" name="Exception.h" local="yes" imported="no">SimTKcommon/internal/Exception.h</includes>
    <class kind="class">SimTK::AbstractValue</class>
    <class kind="class">SimTK::Value</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a44445c9fd129c8072e4dfe64ed7235ed</anchor>
      <arglist>(std::ostream &amp;o, const AbstractValue &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vec.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/SmallMatrix/include/SimTKcommon/internal/</path>
    <filename>Vec_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <class kind="class">SimTK::Vec</class>
    <class kind="struct">SimTK::Vec::EltResult</class>
    <class kind="struct">SimTK::Vec::Result</class>
    <class kind="struct">SimTK::Vec::Substitute</class>
    <namespace>SimTK</namespace>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Vec&lt; M, E2, S2 &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a35ba86cde66f055d750be9e3d717895a</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Vec&lt; M, E2, S2 &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5591ad75cd7877261f8d163e1089a962</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afbb60d4cfb0b9bc6759181b6fc29038a</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4aaf1a5237de967770556367a129e616</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3994748f75644606abb3c0d2eff73ec7</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab46a91042a96e18d189c4288bcbb80ce</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abfe10d0a8275c8e3757876b796594eab</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acad9e9f6be82e38406b033c4420e10bb</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c0ae20ae1210f06c5786e745bbf0ea6</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76c828d0faccbe97ccc6cce36ed69775</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1e8f4a346f89b401831272c27227144c</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3034f41c752f118f909ef0f71c4d23e0</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af48934dd369681e002fe34f7515c1cb3</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adedd99c09110401d5dc189a4510c0dd6</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6c34e5944d17b83213c0e865fca8e6e2</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9ceaec67190cc343f1ca16ef497ae922</anchor>
      <arglist>(const float &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acd7645a08588988d8d913e79847432ea</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a48b877450aaa8eeb23af4ec03938f717</anchor>
      <arglist>(const double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a80490b2eb4f853241355bc7bd1e56daf</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab532ae846bc484813b105fdf21b87313</anchor>
      <arglist>(const long double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a852fc6e2365415e5eca60d310f70131a</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a979e3f327a2c2ba2b5ca5f55b1bdda13</anchor>
      <arglist>(int l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a748875bd8114ceef21ace8fbe841a877</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a58bb84759642bf3e30f12ea004333285</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af120a67eb8e2f09fd47e36e5b744cb73</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d471d65fae38e28a9c29f95a471d165</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2bd7385ef7e9eb09bde34ae47736543f</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9f5694c03f446776cb6584855d660f9c</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae72b23236f3d91f262c0294318a1f176</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a536510dac7f1135bc528d564849a4204</anchor>
      <arglist>(const float &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a77995d3ce71412a3e476036a3adcdbed</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7e7a8f4ab95187efa54b7c2c00c6a331</anchor>
      <arglist>(const double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afa7a2e10ebcd4950331c4a092d366277</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aca3b4087ab01af5eaa384df713fdeabe</anchor>
      <arglist>(const long double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a08ae6d5f5704263cb868d60d4b6de476</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a82241f16768ed886d96cfbd181773580</anchor>
      <arglist>(int l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a080589e5668a7c2da7b472bcec4682f7</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a64d0cad1aea5bc16d089e76b77a2ab8a</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ace67a6282c830d94120f4452ccd19c92</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae892264393a303d32bdc293d5afeefbe</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f075c27cd295e849fef6be047f45c62</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1e4ea345330380c0ec622d73b8d9dc49</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3a6b48bd3af25eccfbdeb7379589113</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6ac6daa44014530041c0d43b1ef06457</anchor>
      <arglist>(const float &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a866bf743e6798a924a6cc7f757f89dfe</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ec1d1723243bc95a0da42847cb5942a</anchor>
      <arglist>(const double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abe581945cd3b7d9855f30e880f5aceee</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a602e3f41fb8ad771c0a01d6ab25d222a</anchor>
      <arglist>(const long double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9f3c2ca0986eebd8a5c122b7c906e843</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6866630bf7f763f409d506930e8b50aa</anchor>
      <arglist>(int l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a71d39debf97fd5fc3bccf40c558e5612</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a86ba44b4cc986b91ee1fd98d448f8510</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a52bc45ad26f2dbfafc9e9e64bf62a8e9</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aad456d1d3a5cc13f4491b85891223350</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa51e7f3d747614eb86fd6c0f4fb5a00f</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a370dc800083559330ca738fe614d90bf</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4d309b613b757d469c5d399bbbac544e</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab8c742659c0378a90c468e759e4e8cfe</anchor>
      <arglist>(const float &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0e8944eaca260b36c4281ffbe72b7a12</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae69d60ff361d3a5c14412ad360546b19</anchor>
      <arglist>(const double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae274cc1fb153dcb05420d71d9e407244</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5da379ed855a76adadf54621b70336f4</anchor>
      <arglist>(const long double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a53bf530fbcb30a77e369301c45b2d9f8</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a67fd8fe744a41cb3f7d835f6904baafb</anchor>
      <arglist>(int l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab72a9b20819288b2f5bef8692587120d</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae236f55a8539a58c15859321d803bd94</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2fa2b199d5ee2cd4896d818430cda2ee</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6b2676768f8f8c1de0f572b3a053603</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acfcd3b0b547b73d5280845a2ebbdd134</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad0a06593bdf077ff578b1be156101a89</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93a4b3503a8d23b1df5a1805e5a06581</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const Vec&lt; M, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa3d24795b58164c7820e3e2bdcd7a85a</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, Vec&lt; M, E, S &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorMath.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>VectorMath_8h</filename>
    <includes id="basics_8h" name="basics.h" local="yes" imported="no">SimTKcommon/basics.h</includes>
    <includes id="Simmatrix_8h" name="Simmatrix.h" local="yes" imported="no">SimTKcommon/Simmatrix.h</includes>
    <namespace>SimTK</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ELEMENTWISE_FUNCTION</name>
      <anchorfile>VectorMath_8h.html</anchorfile>
      <anchor>a866e82f39cbe66f25880cfccf37f5a63</anchor>
      <arglist>(func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_ELEMENTWISE_FUNCTION</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a821ff958bff7253829426026eb12f123</anchor>
      <arglist>(exp) SimTK_ELEMENTWISE_FUNCTION(log) SimTK_ELEMENTWISE_FUNCTION(sqrt) SimTK_ELEMENTWISE_FUNCTION(sin) SimTK_ELEMENTWISE_FUNCTION(cos) SimTK_ELEMENTWISE_FUNCTION(tan) SimTK_ELEMENTWISE_FUNCTION(asin) SimTK_ELEMENTWISE_FUNCTION(acos) SimTK_ELEMENTWISE_FUNCTION(atan) SimTK_ELEMENTWISE_FUNCTION(sinh) SimTK_ELEMENTWISE_FUNCTION(cosh) SimTK_ELEMENTWISE_FUNCTION(tanh) template&lt; class ELEM &gt; VectorBase&lt; typename CNT&lt; ELEM &gt;</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a63210772f3bd9e4b2eb35309408b173e</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae9023cc8fd7b19ac03d741009325e8e0</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; N, typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae53890c1ea80c9fe512a086626dac827</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab4e96a29769e769a2bb80183dbd6c7f0</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4420ad4cff70c2c39c69443280bdae4e</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; N, typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adc0bbe4fcaf0a762bd8714f210deb616</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90540cf06e3b30a156a9c762aacb29e0</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aceb7cf9ec4426c94d81ad583d3cd5724</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a52a2db3247b7b2a5d4f79846e1ee1c</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad1fa82353cca59d314d5dc4d6e349698</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a60941ead10f387f52c861691d0c6cd7c</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a032c21f8458ddb6db95b51473d9771f3</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abc5d1465deb42ef3bd79c95a7723ed1e</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6c0a4de5068fb7373703f25a368760da</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a57483401201d4c9e44ad0499bec3f454</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad88a9f11366c1d535b117271ac9f8cf4</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a18be8264783d989c3f1c92c7174a4456</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a25b237a86ee204b6ab14b6dc69a9d45d</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0450869509a435532bda080e856ec84a</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab70c9fbbe780b841857c3736a664ef5a</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5e54f17d86aeb08126d641bea4ba6f86</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a714e3c5086d941000ec9f2c32a8c1602</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2c089a13d9115a531c393200af381f55</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a856151f3428d62ccb08b7498ad8d66d0</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9c50c0e8c5a507a35cb86479e7439296</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a802c4d4c88aa3ab11516614287333243</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae98a1dedddd59ec5a5b473d5559001a7</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90a760e67dd5fbc30eb6608f01a2c701</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a31663ecdcfe7b4329aba677dee6685a3</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afac354bef02eeeb1e692db9522773d6d</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3c404226827a2a160c355c6c1178acd1</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6fd6409eae98b1d60dddc91414074834</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac854f6874bf949de1142e38a67ae2392</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a87cf69c4e5b5bc7094b0e09ca2cfcd91</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a49acf4ea066e462f04356200e27d4c5f</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad35fbcffc7db7889a5c53ccdb0e43ace</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a20debaa5de25850db5715752ece6c1d6</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; N, ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b4521de37f85db50b6c209db4d9f308</anchor>
      <arglist>(Vec&lt; N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4f1fdb60793d5f2add57f06e73801c14</anchor>
      <arglist>(Row&lt; N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a283ec52c6b3016f90c3a2637c2c1927d</anchor>
      <arglist>(Mat&lt; M, N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; N, N, ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a27922abed0c283a91e4bf239a923775b</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac5552c22c9b5897d7c1fcdfb15be4369</anchor>
      <arglist>(RandomAccessIterator start, RandomAccessIterator end)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74aff6ba688ba3027ee45ed44526ec91</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adfd6970e6fceb9fdd6c143013ad03385</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac304471db591fbf5340700447f8500ef</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab2dd57239848fe098f10e9db3a0b8567</anchor>
      <arglist>(Vec&lt; N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a50e53d92dc477bac64311563cf5a591e</anchor>
      <arglist>(Row&lt; N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7afb2a3cb7a386e48c0f567137d12315</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8884ebbcc4b801ae7e19d3ecf5127ca7</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VerletIntegrator.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKmath/Integrators/include/simmath/</path>
    <filename>VerletIntegrator_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="SimTKmath_2include_2simmath_2internal_2common_8h" name="SimTKmath/include/simmath/internal/common.h" local="yes" imported="no">simmath/internal/common.h</includes>
    <includes id="Integrator_8h" name="Integrator.h" local="yes" imported="no">simmath/Integrator.h</includes>
    <class kind="class">SimTK::VerletIntegrator</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Visualizer.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/Visualizer/include/simbody/internal/</path>
    <filename>Visualizer_8h</filename>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <class kind="class">SimTK::Visualizer</class>
    <class kind="class">SimTK::Visualizer::FrameController</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Visualizer</type>
      <name>VTKVisualizer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9fb676a169f4ced41645f8b5100cb991</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Visualizer_InputListener.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/Visualizer/include/simbody/internal/</path>
    <filename>Visualizer__InputListener_8h</filename>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="Visualizer_8h" name="Visualizer.h" local="yes" imported="no">simbody/internal/Visualizer.h</includes>
    <class kind="class">SimTK::Visualizer::InputListener</class>
    <class kind="class">SimTK::Visualizer::InputSilo</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="file">
    <name>Visualizer_Reporter.h</name>
    <path>/home/travis/build/chrisdembia/simbody/Simbody/Visualizer/include/simbody/internal/</path>
    <filename>Visualizer__Reporter_8h</filename>
    <includes id="SimTKcommon_8h" name="SimTKcommon.h" local="yes" imported="no">SimTKcommon.h</includes>
    <includes id="Simbody_2include_2simbody_2internal_2common_8h" name="Simbody/include/simbody/internal/common.h" local="yes" imported="no">simbody/internal/common.h</includes>
    <includes id="Visualizer_8h" name="Visualizer.h" local="yes" imported="no">simbody/internal/Visualizer.h</includes>
    <class kind="class">SimTK::Visualizer::Reporter</class>
    <namespace>SimTK</namespace>
    <member kind="typedef">
      <type>Visualizer::Reporter</type>
      <name>VTKEventReporter</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab0261720ee4be9b32b41f7d92b2adb74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Xml.h</name>
    <path>/home/travis/build/chrisdembia/simbody/SimTKcommon/include/SimTKcommon/internal/</path>
    <filename>Xml_8h</filename>
    <includes id="SimTKcommon_2include_2SimTKcommon_2internal_2common_8h" name="SimTKcommon/include/SimTKcommon/internal/common.h" local="yes" imported="no">SimTKcommon/internal/common.h</includes>
    <includes id="Array_8h" name="Array.h" local="yes" imported="no">SimTKcommon/internal/Array.h</includes>
    <includes id="String_8h" name="String.h" local="yes" imported="no">SimTKcommon/internal/String.h</includes>
    <class kind="class">SimTK::Xml</class>
    <class kind="class">SimTK::Xml::Attribute</class>
    <class kind="class">SimTK::Xml::attribute_iterator</class>
    <class kind="class">SimTK::Xml::Node</class>
    <class kind="class">SimTK::Xml::node_iterator</class>
    <class kind="class">SimTK::Xml::element_iterator</class>
    <class kind="class">SimTK::Xml::Element</class>
    <class kind="class">SimTK::Xml::Text</class>
    <class kind="class">SimTK::Xml::Comment</class>
    <class kind="class">SimTK::Xml::Unknown</class>
    <namespace>SimTK</namespace>
  </compound>
  <compound kind="page">
    <name>simbody_license_page</name>
    <title>Simbody&amp;tm; Copyright and License</title>
    <filename>simbody_license_page</filename>
  </compound>
  <compound kind="group">
    <name>MatrixCharacteristics</name>
    <title>Matrix Characteristics</title>
    <filename>group__MatrixCharacteristics.html</filename>
    <class kind="class">SimTK::MatrixStructure</class>
    <class kind="class">SimTK::MatrixStorage</class>
    <class kind="class">SimTK::MatrixOutline</class>
    <class kind="class">SimTK::MatrixCondition</class>
    <class kind="class">SimTK::MatrixCharacter</class>
    <class kind="class">SimTK::MatrixCharacter::LapackFull</class>
    <class kind="class">SimTK::MatrixCharacter::Vector</class>
    <class kind="class">SimTK::MatrixCharacter::RowVector</class>
    <class kind="class">SimTK::MatrixCharacter::Mask</class>
    <class kind="class">SimTK::MatrixCommitment</class>
    <class kind="class">SimTK::MatrixCommitment::Triangular</class>
    <class kind="class">SimTK::MatrixCommitment::Symmetric</class>
    <class kind="class">SimTK::MatrixCommitment::Hermitian</class>
    <class kind="class">SimTK::MatrixCommitment::SkewSymmetric</class>
    <class kind="class">SimTK::MatrixCommitment::SkewHermitian</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__MatrixCharacteristics.html</anchorfile>
      <anchor>ga20dee8a22d0b10e4887e6418446d01cd</anchor>
      <arglist>(std::ostream &amp;o, const MatrixCharacter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__MatrixCharacteristics.html</anchorfile>
      <anchor>ga8cc1d805e4bd200104dbe524d396ede8</anchor>
      <arglist>(std::ostream &amp;o, const MatrixCommitment &amp;)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PredefinedConstants</name>
    <title>Predefined Constants</title>
    <filename>group__PredefinedConstants.html</filename>
    <subgroup>MacroConstants</subgroup>
    <subgroup>TypedNumConstants</subgroup>
  </compound>
  <compound kind="group">
    <name>MacroConstants</name>
    <title>Preprocessor Macro Constants</title>
    <filename>group__MacroConstants.html</filename>
    <subgroup>MathConstants</subgroup>
    <subgroup>PhysConstants</subgroup>
    <subgroup>UnitConversionFactors</subgroup>
  </compound>
  <compound kind="group">
    <name>MathConstants</name>
    <title>Mathematical Constants</title>
    <filename>group__MathConstants.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_PI</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga47877118bd7884b9302f31a8ec863e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_E</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga9ae5d15bf6007dc1d2a847eaa3da2cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LN2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga5f652b6a72ccfbebed2fb7df963a97bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LN10</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>gae5fd8faa06cc75fbd2e39ec0ec096cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LOG2E</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga60225913e0915a7e369a6010ed841484</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LOG10E</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga12adf3ce5300bd302d00135b1ef0da7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SQRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>gac937f8565a77a367726b62fdf6514fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_OOSQRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga96584e8e5c567acf1e25e903e76dd0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_CBRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga84f587e464a6ae5af7c29a14a8658eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_OOCBRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>gac653383156b86476633db19210360237</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SIXRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga1c13fa2b6d3884c2728fef3ce1ad82e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_OOSIXRT2</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga03bb95b3a83bf245113ee33827b447d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_SQRT3</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga148884290a4a805803ae142fbbe76925</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_CBRT3</name>
      <anchorfile>group__MathConstants.html</anchorfile>
      <anchor>ga2466390ff678f01fef3330f5e12b2c91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PhysConstants</name>
    <title>Physical Constants</title>
    <filename>group__PhysConstants.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_AVOGADROS_NUMBER</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga789b3ea01bc4ba5f275991d7158c10d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MASS_OF_PROTON_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gacb96e8267f12d5cc6d5dcb745d74f801</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MASS_OF_NEUTRON_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga596767107bb2e9157b9964089cf7c501</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MASS_OF_ELECTRON_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gaaec541bd2d7bbb4e69361636a3962d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_CHARGE_OF_PROTON_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga9d24ad3ddda2d31c6efa397e93c2cdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_CHARGE_OF_PROTON_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga995867457971210c984a2b675ac0ab02</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_CHARGE_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga42b6ebdf4d892d181b37d1a32ae0cc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_CHARGE_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga45dc0156703c161724fbd0305bb9fa10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LIGHTSPEED_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga71a35764508d84484de68d69be634f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_LIGHTSPEED_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gabb4b70d932b2dc6631a61479f47ddb7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_GRAVITATIONAL_CONSTANT_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga8daeca040fae0799ac3e02d25ac6f538</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_GRAVITATIONAL_CONSTANT_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga46b30cbd430150f2dbc0fb2a2d69aa6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MAGNETIC_PERMEABILITY_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga57afbf645fd9a9bae08dd697c36547bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MAGNETIC_PERMEABILITY_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gaebe5306727cfb4c0d48b0135cd7472ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ELECTRIC_PERMITTIVITY_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga14d142b4dd9126ae0a3a74aaab7ba9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_ELECTRIC_PERMITTIVITY_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga0262923a25c10ce28aaae333b96b5eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_COULOMB_CONSTANT_IN_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga4947df4db72cf6397a090dd936b3d0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_COULOMB_CONSTANT_IN_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga86283ff62cb6c81f9a9a96b56dbeb7db</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_COULOMB_CONSTANT_IN_KCAL_ANGSTROM</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gabf54205837d054a965337502f46e1d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_GAS_CONSTANT_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga9185a50ed28b82fe82d27638e5bc2b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_GAS_CONSTANT_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga7a2ad527bb838bb79be8a6904fc6220f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_MOLAR_GAS_CONSTANT_KCAL_ANGSTROM</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga99521b4c9aa9e3cd75511769e5f3c104</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_BOLTZMANN_CONSTANT_SI</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gadff5586ebdff39b006fb5cbf45531d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_BOLTZMANN_CONSTANT_MD</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>ga12697cf60fc8ba6b82923dc2671bec91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_BOLTZMANN_CONSTANT_KCAL_ANGSTROM</name>
      <anchorfile>group__PhysConstants.html</anchorfile>
      <anchor>gab540302a2792f0850fa3ff8afb4359b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>UnitConversionFactors</name>
    <title>Unit Conversion Factors</title>
    <filename>group__UnitConversionFactors.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_RADIAN_TO_DEGREE</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>gaef67a2e5772571ddcd3d04c398732e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DEGREE_TO_RADIAN</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga535eb2e1b3711d94cd95ba95253786a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_NS_TO_S</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>gadf1fa9495e5bb2c4982185fffa533ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_S_TO_NS</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga5503e295f567ca630f92c7c8a5de2421</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_KCAL_TO_KJOULE</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga92b714cb424568212858a96f72d8dadf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_KJOULE_TO_KCAL</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga4974b8b4dce90087a44fd7d8d554021a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_DALTON_TO_GRAM</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>gaf3ad09b894ea9b2072cea93fdb8fee91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_E_TO_COULOMB</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga236099a046183edea6c908347af17a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SimTK_EV_TO_JOULE</name>
      <anchorfile>group__UnitConversionFactors.html</anchorfile>
      <anchor>ga093652e443d7dc5da9182456180da9c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>GlobalFunctions</name>
    <title>Global Functions in the SimTK namespace</title>
    <filename>group__GlobalFunctions.html</filename>
    <subgroup>ScalarFunctions</subgroup>
    <subgroup>BitFunctions</subgroup>
    <subgroup>Serialization</subgroup>
    <subgroup>TimingFunctions</subgroup>
    <subgroup>SpatialAlgebraUtilities</subgroup>
  </compound>
  <compound kind="group">
    <name>ScalarFunctions</name>
    <title>Scalar Functions</title>
    <filename>group__ScalarFunctions.html</filename>
    <subgroup>isNaN</subgroup>
    <subgroup>isFinite</subgroup>
    <subgroup>isInf</subgroup>
    <subgroup>isNumericallyEqual</subgroup>
    <subgroup>SignGroup</subgroup>
    <subgroup>square</subgroup>
    <subgroup>cube</subgroup>
    <subgroup>ClampingGroup</subgroup>
    <subgroup>SmoothedStepFunctions</subgroup>
    <subgroup>EllipticIntegralsGroup</subgroup>
  </compound>
  <compound kind="group">
    <name>BitFunctions</name>
    <title>Bit-twiddling Functions</title>
    <filename>group__BitFunctions.html</filename>
    <subgroup>atMostOneBitIsSet</subgroup>
    <subgroup>exactlyOneBitIsSet</subgroup>
    <subgroup>SignBitGroup</subgroup>
  </compound>
  <compound kind="group">
    <name>Serialization</name>
    <title>Utilities for De/serializing</title>
    <filename>group__Serialization.html</filename>
    <subgroup>writeUnformatted</subgroup>
    <subgroup>readFromStream</subgroup>
    <subgroup>writeFormatted</subgroup>
    <subgroup>readFormatted</subgroup>
  </compound>
  <compound kind="group">
    <name>UniqueIndexTypes</name>
    <title>Type-Safe Integer Indices</title>
    <filename>group__UniqueIndexTypes.html</filename>
    <class kind="class">SimTK::MobilizedBodyIndex</class>
    <class kind="class">SimTK::ConstraintIndex</class>
    <class kind="class">SimTK::MobilizerQIndex</class>
    <class kind="class">SimTK::MobilizerUIndex</class>
    <class kind="class">SimTK::ForceIndex</class>
    <member kind="typedef">
      <type>MobilizedBodyIndex</type>
      <name>MobodIndex</name>
      <anchorfile>group__UniqueIndexTypes.html</anchorfile>
      <anchor>gac0fa07a3fc0ba26ac3d9ffd3993b6713</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MobilizedBodyIndex</type>
      <name>GroundIndex</name>
      <anchorfile>group__UniqueIndexTypes.html</anchorfile>
      <anchor>ga27dd884b9a84538ba38fa07c4d3bed84</anchor>
      <arglist>(0)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>writeUnformatted</name>
    <title>writeUnformatted()</title>
    <filename>group__writeUnformatted.html</filename>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gaae02786573d73eb2fcdb5e552a6fa891</anchor>
      <arglist>(std::ostream &amp;o, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga994f8d89f2e202447823e24396f1e8bc</anchor>
      <arglist>(std::ostream &amp;o, const float &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga17a8672c706c5c04e107e61d261dcb18</anchor>
      <arglist>(std::ostream &amp;o, const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga58eebde32533dc80226e182f44b22f30</anchor>
      <arglist>(std::ostream &amp;o, const long double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga9ece572abb6a3e110d45c46830f05943</anchor>
      <arglist>(std::ostream &amp;o, const negator&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gaeac578dd8246d4a6914a80eeb95c245d</anchor>
      <arglist>(std::ostream &amp;o, const std::complex&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga73696848d567dcfc32ae4976af39194a</anchor>
      <arglist>(std::ostream &amp;o, const conjugate&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gaea19f36902b9e41b3774e3103718dab5</anchor>
      <arglist>(std::ostream &amp;o, const Vec&lt; M, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga22f4be43e5bfa1b25369f758b4e66ee7</anchor>
      <arglist>(std::ostream &amp;o, const Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gab42c9328d2713319247ceccdd117fc34</anchor>
      <arglist>(std::ostream &amp;o, const Mat&lt; M, N, E, CS, RS &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gad17a40de28e390197785785cd30ff5fd</anchor>
      <arglist>(std::ostream &amp;o, const SymMat&lt; M, E, RS &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>readFromStream</name>
    <title>readUnformatted()</title>
    <filename>group__readFromStream.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>readOneTokenUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga8a680e6ad01873dd96f94bec96789506</anchor>
      <arglist>(std::istream &amp;in, String &amp;token)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga64e0c2535ba54f956b015cd371914e69</anchor>
      <arglist>(std::istream &amp;in, T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga780aae3c74feba345ffa3265f238a0fb</anchor>
      <arglist>(std::istream &amp;in, float &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga0d2353938f723372801aebd935eef8d3</anchor>
      <arglist>(std::istream &amp;in, double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga6f14b9155294cca7d382a354056877da</anchor>
      <arglist>(std::istream &amp;in, long double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gad1f2ca45282c306208dcd50748894a4d</anchor>
      <arglist>(std::istream &amp;in, negator&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gaf5e85081c35165308024a774475c17bb</anchor>
      <arglist>(std::istream &amp;in, std::complex&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gabc5553e096cb68fb840e301f75e38f29</anchor>
      <arglist>(std::istream &amp;in, conjugate&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted&lt; String &gt;</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga1202228eb72b7b27a0f1d9813a74ba77</anchor>
      <arglist>(std::istream &amp;in, String &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga75b4dd0ea98de6059b13e98cabbefb82</anchor>
      <arglist>(std::istream &amp;in, Vec&lt; M, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga35c841ecd286946547dc05f44d84d455</anchor>
      <arglist>(std::istream &amp;in, Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gae5721daf8ec53d172f0eb2ea2357c662</anchor>
      <arglist>(std::istream &amp;in, Mat&lt; M, N, E, CS, RS &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga4f43b4611ad3fa1e55020a4e18ceff8d</anchor>
      <arglist>(std::istream &amp;in, SymMat&lt; M, E, RS &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>writeFormatted</name>
    <title>writeFormatted()</title>
    <filename>group__writeFormatted.html</filename>
    <member kind="function">
      <type>void</type>
      <name>writeFormatted</name>
      <anchorfile>group__writeFormatted.html</anchorfile>
      <anchor>gade1630adab11d517027b2971162f8a62</anchor>
      <arglist>(std::ostream &amp;o, const T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>readFormatted</name>
    <title>readFormatted()</title>
    <filename>group__readFormatted.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>readFormatted</name>
      <anchorfile>group__readFormatted.html</anchorfile>
      <anchor>ga3c3f575ce29e7c9a32ab5f89e9274223</anchor>
      <arglist>(std::istream &amp;in, T &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>TimingFunctions</name>
    <title>Timing Functions</title>
    <filename>group__TimingFunctions.html</filename>
    <subgroup>TimeConversions</subgroup>
    <subgroup>CPUTimers</subgroup>
    <subgroup>ElapsedTime</subgroup>
  </compound>
  <compound kind="group">
    <name>TimeConversions</name>
    <title>Timespec/Nanosecond/Second Conversions</title>
    <filename>group__TimeConversions.html</filename>
    <member kind="function">
      <type>long long</type>
      <name>timespecToNs</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>gace24356640e4cf281bc2221933c8d0d9</anchor>
      <arglist>(const timespec &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nsToTimespec</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>ga713811ece1aedbdd06d4f98951dea21e</anchor>
      <arglist>(const long long &amp;ns, timespec &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nsToSec</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>gaa9f63b9ee08b1b6dd0321c25dbb3deec</anchor>
      <arglist>(const long long &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>secToNs</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>ga3d51ddfbb75cb8a41277b5c56ebfdbfc</anchor>
      <arglist>(const double &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>CPUTimers</name>
    <title>Measuring CPU Time</title>
    <filename>group__CPUTimers.html</filename>
    <member kind="function">
      <type>double</type>
      <name>cpuTime</name>
      <anchorfile>group__CPUTimers.html</anchorfile>
      <anchor>ga504ddfe913f5861dd4f96267714ed4a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>threadCpuTime</name>
      <anchorfile>group__CPUTimers.html</anchorfile>
      <anchor>ga2b21a5c42c6b100d0e7d69d27c846d1c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ElapsedTime</name>
    <title>High-Resolution Elapsed Time Measurement and Sleep</title>
    <filename>group__ElapsedTime.html</filename>
    <member kind="function">
      <type>long long</type>
      <name>realTimeInNs</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga9dc21e8a0695b5f5f8acc15c91115cd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realTime</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga90346b7b40f4d56611634637591cf52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleepInNs</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>gac3ba999019f0632c52430fcd62a0e118</anchor>
      <arglist>(const long long &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleepInSec</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga899cbb9b0871969450e881a8828a8a26</anchor>
      <arglist>(const double &amp;seconds)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RegressionTesting</name>
    <title>SimTK Regression Testing</title>
    <filename>group__RegressionTesting.html</filename>
    <class kind="class">SimTK::Test</class>
    <class kind="class">SimTK::Test::Subtest</class>
    <member kind="function">
      <type></type>
      <name>Test</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga00f5fdc2c110cb8d8bc26065425fa7e7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Test</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga9c2b8322d18c4908cbdbe8198cd3d582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>defTol</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga3e8b7e6d667e677b1d5b092256eaa306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>defTol2</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga2a4547f0b5532580ef17144faabee206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gafa185f89b0d7bc197f1dd829f6f6d30f</anchor>
      <arglist>(float v1, float v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga2efcb167f0c547353d067c8cc7bafa8b</anchor>
      <arglist>(double v1, double v2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gae0f0b744a814cbc0352f772c60a8b813</anchor>
      <arglist>(long double v1, long double v2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gae4b52795224b425d12f884ae6e985d41</anchor>
      <arglist>(int i1, int i2, int n, double tol=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga5bfa631da7c10949a8eb5a9ab1658677</anchor>
      <arglist>(unsigned u1, unsigned u2, int n, double tol=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaff026ecef71eac57c9349a6f2c07251d</anchor>
      <arglist>(float v1, double v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga93adf93813d07f10b50139fff7377e7a</anchor>
      <arglist>(double v1, float v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga985b8d92079c3adffbc535fb7ad5b3d7</anchor>
      <arglist>(float v1, long double v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga1e0ef053288697d2f6e561fe70b824c3</anchor>
      <arglist>(long double v1, float v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8c93398dea7824f5698af5a4ae7ec552</anchor>
      <arglist>(double v1, long double v2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac19da944c43063cb21c4a7bb00ea54a5</anchor>
      <arglist>(long double v1, double v2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8ac9314ad51d00fdf77c45ed1f9f1c5c</anchor>
      <arglist>(int i1, float f2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga7b09e669c16c48840d5086402cbce747</anchor>
      <arglist>(float f1, int i2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gafef76c665129d0c7d1e64bbb16ed64c8</anchor>
      <arglist>(unsigned i1, float f2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac20360a3b7c7ec4d9fd3fc11b3f9d1ca</anchor>
      <arglist>(float f1, unsigned i2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga5b4975a2c26a59fd70018fb4e9dbc4b9</anchor>
      <arglist>(int i1, double f2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga43a53486f3a01c2a51af6e9a1da86326</anchor>
      <arglist>(double f1, int i2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaefba8a14bc83088359be3c838cb96ab0</anchor>
      <arglist>(unsigned i1, double f2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8dabfd3265f67d55e380b61520c9735d</anchor>
      <arglist>(double f1, unsigned i2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaffb15bf6f88404ab7f5bb766052c7a8c</anchor>
      <arglist>(int i1, long double f2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga74b926c6680185cba552674f285cab77</anchor>
      <arglist>(long double f1, int i2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga29174f8598d11a3fecf50f28189bfb19</anchor>
      <arglist>(unsigned i1, long double f2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac2e168d9b27d51ce0a1e79fe6ecd86da</anchor>
      <arglist>(long double f1, unsigned i2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga74d8c787634e576000d13fefc7e45a92</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;v1, const std::complex&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gab0820ce99da61b37147ca6e7ee651348</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;v1, const conjugate&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga6de3f68748e830054645f9a17b1444bb</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;v1, const conjugate&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gad76a432607326441363600c86ccf8099</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;v1, const std::complex&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga7213bbb06554e267626b95eb48db1502</anchor>
      <arglist>(const negator&lt; P &gt; &amp;v1, const negator&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga9fc8007175e73da01f2ee61bd2385c73</anchor>
      <arglist>(const P &amp;v1, const negator&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga1f3fa0422ed9dbd9a38c55c36c8de735</anchor>
      <arglist>(const negator&lt; P &gt; &amp;v1, const P &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gae2cf4af7dfffb2525b73ec5cf96a15fb</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;v1, const conjugate&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga64bf75feec727e3c574c996a87ac8856</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;v1, const std::complex&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gad3550616f8156110c5ca2e9f6fbb49b4</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;v1, const negator&lt; conjugate&lt; P &gt; &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga13fff2d880f33420cc7b8753f03a70f3</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;v1, const negator&lt; std::complex&lt; P &gt; &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gad03fa6a67db9eb15fea1e2824981f38b</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v1, const Vec&lt; M, E2, S2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaaf63b7bda36bb4a98cf29dab937cdb17</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v1, const Row&lt; N, E2, S2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaaff4359bab263aa3df15b151c7c74117</anchor>
      <arglist>(const Mat&lt; M, N, E1, CS1, RS1 &gt; &amp;v1, const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga998ab6188528929e7ad31959987b3696</anchor>
      <arglist>(const SymMat&lt; N, E1, S1 &gt; &amp;v1, const SymMat&lt; N, E2, S2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gade60fc36291af9c129a1025c143d0b27</anchor>
      <arglist>(const VectorView_&lt; E1 &gt; &amp;v1, const VectorView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac26f9f8b70477fd36ed727b564be6db1</anchor>
      <arglist>(const Vector_&lt; E1 &gt; &amp;v1, const Vector_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gab522a91dc78ec438f2f83dd7bab8b5d7</anchor>
      <arglist>(const Vector_&lt; E1 &gt; &amp;v1, const VectorView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga0b5fa2609d765ae3d5f2119b0820cd2e</anchor>
      <arglist>(const VectorView_&lt; E1 &gt; &amp;v1, const Vector_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gada06f44f7b0497914e68d5296c022cb9</anchor>
      <arglist>(const RowVectorView_&lt; E1 &gt; &amp;v1, const RowVectorView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga74a1445355d28c2841b32a85fa315c62</anchor>
      <arglist>(const RowVector_&lt; E1 &gt; &amp;v1, const RowVector_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga14071c95c874a2dd77f94f14b3c73609</anchor>
      <arglist>(const RowVector_&lt; E1 &gt; &amp;v1, const RowVectorView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga4c9019d2faf7983acff2e7701abbb636</anchor>
      <arglist>(const RowVectorView_&lt; E1 &gt; &amp;v1, const RowVector_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac1261863f2cc51fc9e5f219aeb16c62f</anchor>
      <arglist>(const MatrixView_&lt; E1 &gt; &amp;v1, const MatrixView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga275b1d26f3e128fede4e55b4ffe75714</anchor>
      <arglist>(const Matrix_&lt; E1 &gt; &amp;m1, const Matrix_&lt; E2 &gt; &amp;m2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac9e788b2936fe43a59b57390891255c9</anchor>
      <arglist>(const Matrix_&lt; E1 &gt; &amp;m1, const MatrixView_&lt; E2 &gt; &amp;m2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga1d6259f8d2a1371cb7db41d02dc7b59f</anchor>
      <arglist>(const MatrixView_&lt; E1 &gt; &amp;m1, const Matrix_&lt; E2 &gt; &amp;m2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga6ee41e024220c4e15ea1dd24d1de76cd</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gadd1902a1b4391b1fde7d1968020b8656</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;T1, const Transform_&lt; P &gt; &amp;T2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga29e6295a5c1edf7173e67f1b8157c70c</anchor>
      <arglist>(const UnitInertia_&lt; P &gt; &amp;G1, const UnitInertia_&lt; P &gt; &amp;G2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga0f23c36ecbfc9ad6efd2c1c6579922d0</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;I1, const Inertia_&lt; P &gt; &amp;I2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>randReal</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga0547ca7c9a497f330b6cf922758ecbd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Complex</type>
      <name>randComplex</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga679653179bf35e3329f92242987ff57c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Conjugate</type>
      <name>randConjugate</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gae7e9d8b4e04ff06bfc8ed01c343a4f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>randFloat</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga2b1bcdb52ae116a560bbf1bfd649c2dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>randDouble</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga5c7a072ae202902673cf872990681472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; M &gt;</type>
      <name>randVec</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga823866e407c47c7fbf04763b28d55075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; N &gt;</type>
      <name>randRow</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga118787b3c6be972ff4b8cbc20840c358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; M, N &gt;</type>
      <name>randMat</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaca56ad1e8741defe2b21eae0523dfcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymMat&lt; N &gt;</type>
      <name>randSymMat</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaaf71e4c21ebb021bb2e5f04d17869753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>randVector</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga71d20ad3eaef9b1ae3b27e69e89a9ed6</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>randMatrix</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaf3d7537645efb2a8fc76095371aeecf9</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3</type>
      <name>randVec3</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga57ddc6c612e2e3fd1043700209ae82e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33</type>
      <name>randMat33</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8196ab5e1b3036eeb06a903de0b6091b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymMat33</type>
      <name>randSymMat33</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaac503a3fb068e75d4dc136800213ccd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialVec</type>
      <name>randSpatialVec</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga0c0ff596c887f90a550d76b58289e8e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialMat</type>
      <name>randSpatialMat</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaf19aca29b55b88210e9ae7e68b170e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>randRotation</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac25db24790ec1223a7c2cddb1e7aba53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transform</type>
      <name>randTransform</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaa24ca6435616e379fdcc5efdae41290a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Subtest</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8a85ab1e17ef35db0e662dd9e3be5d1c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Subtest</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gabdda78ad141ded3991c3b788a57d6234</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SpatialAlgebraUtilities</name>
    <title>Spatial Algebra Utilities</title>
    <filename>group__SpatialAlgebraUtilities.html</filename>
    <member kind="typedef">
      <type>Vec&lt; 2, Vec3 &gt;</type>
      <name>SpatialVec</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga09c3f8ce9203cc999a69e18bdfa299ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, Row3 &gt;</type>
      <name>SpatialRow</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaa093939834c7a15587de84b8fa379572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, Mat33 &gt;</type>
      <name>SpatialMat</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga62d661c98a4b9595b84102e835800511</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeVelocity</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga1356d52bc6c756a65449cf77b6ed450c</anchor>
      <arglist>(const Transform &amp;X_FA, const SpatialVec &amp;V_FA, const Transform &amp;X_FB, const SpatialVec &amp;V_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeVelocityInF</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaa29f226e57ded5cd16a97087bf6cbc7a</anchor>
      <arglist>(const Vec3 &amp;p_AB_F, const SpatialVec &amp;V_FA, const SpatialVec &amp;V_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeAcceleration</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gab4ea6030e591f841957fe57c2e8e9856</anchor>
      <arglist>(const Transform &amp;X_FA, const SpatialVec &amp;V_FA, const SpatialVec &amp;A_FA, const Transform &amp;X_FB, const SpatialVec &amp;V_FB, const SpatialVec &amp;A_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeAccelerationInF</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaf0c33467c25c79e11eb6f9cdc6b31589</anchor>
      <arglist>(const Vec3 &amp;p_AB_F, const SpatialVec &amp;V_FA, const SpatialVec &amp;A_FA, const SpatialVec &amp;V_FB, const SpatialVec &amp;A_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>reverseRelativeVelocity</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga39da5fe5d3cc806ba5e0d1da41d5638f</anchor>
      <arglist>(const Transform &amp;X_AB, const SpatialVec &amp;V_AB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>reverseRelativeVelocityInA</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaf6cd519023caf21595f9346121cbc69d</anchor>
      <arglist>(const Transform &amp;X_AB, const SpatialVec &amp;V_AB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftVelocityBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga64e629bd9aead45c34c02f6448127edc</anchor>
      <arglist>(const SpatialVec &amp;V_AB, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftVelocityFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga606c054f4a71108a91b5f6e61bedef87</anchor>
      <arglist>(const SpatialVec &amp;V_A_BP, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftForceBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga2b44f1ea5624daf334b4aa6c0e07ea0e</anchor>
      <arglist>(const SpatialVec &amp;F_AP, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftForceFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga76d7f9be4b5cabe22b3ad7c1eef94be9</anchor>
      <arglist>(const SpatialVec &amp;F_AP, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftAccelerationBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga4cd275315e4cfd899f739fad664c1720</anchor>
      <arglist>(const SpatialVec &amp;A_AB, const Vec3 &amp;w_AB, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftAccelerationFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gab5349929701832c2c4020d1ef38ad9f0</anchor>
      <arglist>(const SpatialVec &amp;A_A_BP, const Vec3 &amp;w_AB, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>isNaN</name>
    <title>isNaN()</title>
    <filename>group__isNaN.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga9da8ecd39778e545317bf7118e5715c8</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gae54451636826c4c92a008d5727f0259d</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga87a5ec9ee433db8ba2fc4f3cfc909612</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaef08e42c36138040a64b88f5124954bb</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga033b741d081dd96f0b70d15bc5579d9d</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaee1639f5a0a00bf2573d70004b67b7a2</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga8ad5cf5bb115ba42403bf0dc0b0d0f1c</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gac6f5da3ebcea806bf330d4fd9bc3a940</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gad7b0ce99500f5bd2a4453510fe9fca9a</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaf7373194d259de344e2309aae2a0bfbd</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>isFinite</name>
    <title>isFinite()</title>
    <filename>group__isFinite.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gaaefb475975dd2a35bf2248e16aadaf8d</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga87069fe8c28a4fd0bbd59ae07f5f9159</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gabda0333b6af1ea4af9be0f99adc7b90c</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gac8242f7150cacc52df29a4fd8fe642fb</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga43656d634341750704899a08551b45ab</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gac0d324a6c102dda4b86fca1edebe3e7d</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga0ccfa30a271c9e4c5876adc2aa0c9de3</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gad9048d49aea0e1f9745a445d550cfade</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga48a7c459a95e7850cad08c0edb105014</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga302faee5c1612479474d814735a2665e</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>isInf</name>
    <title>isInf()</title>
    <filename>group__isInf.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga2de11c8889fc623d3b4067796d1b6e3f</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga40f9ebde86aabc78cbd0bb7d3dd2fd39</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga27ded82efd3d6f955ccc923a0768be65</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gadcf0f198bd95948c4bb44c0eddd5b158</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gafb71a728a956a7871751eea4a2e8cb12</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gacabcb83214c0501194b31493b26bf432</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga9b8125eb797a7f9f2da008cf37cb5269</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga0ccb492c19672dc6d3d621a94b6691d2</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gaaf53a57b924c0459caa104f09aecef64</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga844fea956d0bb225b506d5cecb5d53f4</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>isNumericallyEqual</name>
    <title>isNumericallyEqual()</title>
    <filename>group__isNumericallyEqual.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga7c26dcc1bc5c5edf388e8bd1675cd884</anchor>
      <arglist>(const float &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gadf7bf88379c8b3ac8780331b48d7cace</anchor>
      <arglist>(const double &amp;a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaae66686c14ae9276cdae653e0a1ff244</anchor>
      <arglist>(const long double &amp;a, const long double &amp;b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga979e1667fe5c1c296dcfff1ee473d0fa</anchor>
      <arglist>(const float &amp;a, const double &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gadce454298bbd991dc74c94d05350bc5d</anchor>
      <arglist>(const double &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga020d71563b487697a44467e6ba2cc89c</anchor>
      <arglist>(const float &amp;a, const long double &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga9d71c5eb1f8341f2404d1e28c0fc2e4d</anchor>
      <arglist>(const long double &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga7d1ef1b4c1fc6f4486fb072abd93d3d9</anchor>
      <arglist>(const double &amp;a, const long double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga2704923e9cf1b7f90b35ccced37a145c</anchor>
      <arglist>(const long double &amp;a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga77f2fe3542e889a2fc4045628c443e48</anchor>
      <arglist>(const float &amp;a, int b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gad0ef618f27d2b892752f98a6166b8c3f</anchor>
      <arglist>(int a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gabca7abd19ebf26721920b754b4e4f1d1</anchor>
      <arglist>(const double &amp;a, int b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga1903229cea7b917668fef94fbdf0ebf5</anchor>
      <arglist>(int a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacc953060e19024c6f91f0e9486dd12c3</anchor>
      <arglist>(const long double &amp;a, int b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gad1ef80164aa8b2df22058523de38a59a</anchor>
      <arglist>(int a, const long double &amp;b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga967ff1bda7788433fbb928b7fa2f98de</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const std::complex&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga88a722b6efa5b7947b4a28f801335b3d</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const conjugate&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga96dd91aeefab0deedb9df8338a7bca91</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const conjugate&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga74909a013adb53c9d039cd565f4efcb9</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const std::complex&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacf5487884b6decf6bf6d248100d92545</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaa95b667ef0a8c5d0341e1470d82fc4a4</anchor>
      <arglist>(const float &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaeb1af6223f2c962fb567d715f71d8c4f</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const double &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga2677afff49bdde43b1234ff4641f26c5</anchor>
      <arglist>(const double &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga6f75d58a88cefe1dfdc7488035bec193</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const long double &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga0e638731c37e5850fb169e4ecc399bf2</anchor>
      <arglist>(const long double &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga63f1b5e10d3fa0891cd5f420180a66b5</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, int b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaf6b16f8b92fd3889f24cbdbcd66af433</anchor>
      <arglist>(int a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga5822d04dcdb3d7571a865732f3883017</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gabd5d29abf07dc71ad0b406edecd4b92e</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gafccdeaef060eff8ccfb90109a6426cb4</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const double &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga3c971c0c8af5f492a60f68c2675fb7be</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga05d21766eea507c94930163e9361a69b</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const long double &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacc690db2d428932aaa3210b5e34c1ca6</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaf43e5d7a4ed140c265ac088fd8711ba1</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, int b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga5639cdf06c68248ef08cedbe852525b5</anchor>
      <arglist>(int a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>TypedNumConstants</name>
    <title>Numerical Constants with Types</title>
    <filename>group__TypedNumConstants.html</filename>
    <member kind="variable">
      <type>const Real</type>
      <name>NaN</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga5b3e8459e97fe52f06520c6462cecca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Infinity</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga1ce4d54f64bb7dfd1f763bc3c7192783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Eps</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gae52d8e90cb945806de17a8aa6d71581c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>SqrtEps</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga01191c1a2b9a6f9e0d6faa9472244731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>TinyReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaf8d717c96dc07c80d5f074185c5ab88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>SignificantReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga2026d7a87fa1a6a089bf866339521e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>LeastPositiveReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gafcd89352c6783472296ac9d0e6d75f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MostPositiveReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga949ec795ccd1618d3a19be058f5f69f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>LeastNegativeReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8a87e0f68fcb471515b0c7e9d11cfa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MostNegativeReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad6f718d1389c58d071e0da2bc97742c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NumDigitsReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad547cb849c6061b6c0f193d29b29bcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LosslessNumDigitsReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga5cf1b4daeeb7235604213ecd1cfecfdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Zero</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga27e042de142dc666f090af4659be93b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>One</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga6fd0f8c648f23391c6cad9addcdf686a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MinusOne</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga009370366f4bdfd95c2c860a354c9292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Two</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga4b5419b19811ee3f37c6dafdd33cf48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Three</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab2f29bcf7a9840206e331513a148bb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneHalf</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaa01ff2c544d7220dbfe9ec5d0f304b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneThird</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga52f7cf4cca5e9123daf28431b46dfc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneFourth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga2f1937badfad7e143ce88e57b59d215a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneFifth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8daa2faf617a43c9df00bff29bdc3970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneSixth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga221f99b97dcca0a29db23322a8c04ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneSeventh</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gabeac454933ee957f1a6768f8e02af20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneEighth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga79095ebd82f55410529bf0d480e8e025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneNinth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga310d0756d50906365bf75fa7941be8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Pi</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad71ae24820d06c99844f307ba4b31e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverPi</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga10f6903b9327f729f5fce2c28dda20d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga62e94c379e736581bd70ce4647168f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Log2E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga159b9314259d179521e9fb1a84d994e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Log10E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaf8cdbf3b0e779033853a4990ed0fd320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Sqrt2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga7c5dd94e4cc4496998fafa2c466a1e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverSqrt2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gae19f40ebebf2a68ec67b1145bc2fa6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Sqrt3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga09859b35562a7f4108af3dfb35bd5197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverSqrt3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab1197416c87ede92e08b30c0635dec61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>CubeRoot2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8b7122e07290dafdef3655bf94f7ef89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>CubeRoot3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga35a481fde6f6713b0e787f5592df4291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Ln2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaac81af38456470d7240c0428b3f40777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Ln10</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab873b75f254d6f2bf44347f868cddc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Complex</type>
      <name>I</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga89110fa308da931e7b5b69f62b143bd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>atMostOneBitIsSet</name>
    <title>atMostOneBitIsSet()</title>
    <filename>group__atMostOneBitIsSet.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>gaab0e407d56a4bd1a5175de7d4c0a87e0</anchor>
      <arglist>(unsigned char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga62f4eea2278bf4e48973d475d1161964</anchor>
      <arglist>(unsigned short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga8c03f6de17db6a7190c1f6c618f4689b</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga484cd174243857a5c633304c78d031e0</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga07b5ee52eae77d64dc117f4959d1fc85</anchor>
      <arglist>(unsigned long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga4db180a4bf0bf8505c09500f4b184c9d</anchor>
      <arglist>(signed char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga563f8bd175f2bccb072aa050ad47d3c7</anchor>
      <arglist>(char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga61164b0e7ebc0a75062300e259f85313</anchor>
      <arglist>(short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga3d39edaff8ba7ae940f560907d9052bd</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga64d0b90c9dfb3cb5d2595a98231f3797</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>gaa7994e0e869072e2659b120c99dd09cd</anchor>
      <arglist>(long long v)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>exactlyOneBitIsSet</name>
    <title>exactlyOneBitIsSet()</title>
    <filename>group__exactlyOneBitIsSet.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gac76109f5344f0691b476efe3645523ab</anchor>
      <arglist>(unsigned char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gae0087ce107cb4028259b14091cec88f7</anchor>
      <arglist>(unsigned short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gaccd513f711e273c7e0be226318227329</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gadaa62947ec9a188bb0c9ec5aa08371b8</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga0f073d547b00f2d111c1b6332f7f3181</anchor>
      <arglist>(unsigned long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga8e0346679d22cf82aa17cc3a0014ebfa</anchor>
      <arglist>(signed char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga18fe61a58e874c63d83ce3c3f5076288</anchor>
      <arglist>(char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga2914211ecd30c8293155cd381d1019fa</anchor>
      <arglist>(short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gad6ee352772340f22238cc94599e84328</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gaa58b6930350ab34984459349bf61659f</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga717a63fd7fbb17b46824d0e2cb4ccfbc</anchor>
      <arglist>(long long v)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SignBitGroup</name>
    <title>signBit()</title>
    <filename>group__SignBitGroup.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaf0dfe08c6d691cc620c6df88c3a7e9a0</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gae73884823dfda8eb948890de1cc2655b</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaa32db09c5cf51fa910bb968c808984d8</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga555ecce97391793759a227861832e3cb</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gad85acf57b04b2e28367dd3a9bd7fe409</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga3d556ab4786ab31913f4a0abfa44b028</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga43db802dcdf3928727c270a9e6592dcd</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaddaa112934f351dd061b1a9bd7a1cc7d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaa44e576e3291255349c832663f2db90a</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gae43872b0ddafb57a97c84e7ac150e737</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga0034dfbc57b1e6f83da8d4295c1faa04</anchor>
      <arglist>(const float &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gada0a2c6ca0d3ff0d0f60b844bd5b34d5</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga4cfe5969509c55ef89a5adf1bf2cdd0e</anchor>
      <arglist>(const negator&lt; float &gt; &amp;nf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga467ec306ca041073f04ce50c08e99c53</anchor>
      <arglist>(const negator&lt; double &gt; &amp;nd)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SignGroup</name>
    <title>sign()</title>
    <filename>group__SignGroup.html</filename>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga786583adbf125e25a5b0cf631c76fb0d</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaec46f5b92fa307789ada163451f81363</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga8fd13ddb466a566bfa70c65d4aa17b7f</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga0f2211d550c517a8887c7491e5bbeb63</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga4a2c3742f2cbc4966962e6ae60e2c2a1</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga973f8b9310bf02364e2a036d70dfdd5a</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaf206e1f8f0cddd75cb2d4220fc8d72ac</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga606c6a8ea497b867695c8776221cf20a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga1bfef2569ba98a05266c874c99c7bd18</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gac3ab8baef006c89b6f816b10409e40c0</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaace4a43ab242cdb0ac5e25f679868235</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga2c17a68e95cc56f311688a5a30bfcc8c</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga1fbd99a509775a30189aa07d032d4f31</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga845ffea71c0e22b4087b1f564147d47e</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga4a2cf9811e5daf2aef80e76218a8a4c4</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga751524e09aceed18d9cf5e24aa03a82d</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>square</name>
    <title>square()</title>
    <filename>group__square.html</filename>
    <member kind="function">
      <type>unsigned char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gac143407eb9f50070a3c4d5515eb5c965</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gad600a0339eadb00fe136ae2c37506c2f</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga49573a50afd1c2b199c29664a0596ec4</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga6c9fe7826b9dc8c192e8d7d70081bb6f</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga63e2ddff4824bdd6161734098b576d80</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga70395ffc98edaeed65ce37bf90960e7e</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaf09785ab09e7ebdd6db6db9633a00ce9</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga5be93f7c23e10c18a835b654d3d2c774</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga405566a25e69c550a410305afeda205a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga081d1813ae8cf8969987a9da343db000</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gac9658dc99d0099a67593464eab83d74a</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gab9a8435cce97be4c3bd36ba6b6f124f8</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gadaff15a8e575dcd4798f53f897910cda</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaf50e21dd134553b2accc2be42f3872d3</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga6619767dbef2cf8fb747b73bd23d9b7d</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga28fc1785b7244e9eba48848309dfe8af</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gacc693aa1293e11ae4576b1cb20401d09</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga47961dee5d4a488f776db1a09c6578eb</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga738eb9e1ee02f29b8605b5d066f66943</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaaf3a7082c137e5ce40e220c67d302b9a</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gafa8058475cb7b2be36d9beb406459ff8</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>cube</name>
    <title>cube()</title>
    <filename>group__cube.html</filename>
    <member kind="function">
      <type>unsigned char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gafa5cf370fddde320439c9e579f2e69c0</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gae56f27a41f3834ba5059e780bd6129f6</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0b2aee7ba11e5b8b9fb283b60f4b843a</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga965fc0c5aaf300eb851ef4f96b6cc7d1</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gad70f58c4813eb8c01b731315aa0c24cb</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0ba5f2c7916164123f94e0d28bfa8e3d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaec29e36ee2beb451dee208eeff16e865</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga3ecd49be48551ac475ea05c61d2698d6</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga74d6f6909c8f66c4ef9db176c6dec71f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gac5208cf80778b15ed46a00cd6e3bdbb7</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga2a90acde51ec8be5e3f9a86c46577420</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gad0829b03a63357870489980e1d79637e</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga6b275a5c915bff6361c7db3707d64a38</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga847c9d1292b67f40a7140aa4a14705de</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; float &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga241f0e1c93a693e1f6bf2d61b0dae4ba</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; double &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf3e046c6392ce0e356b607114923c3c1</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; long double &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf459e091022bfbd9dd8a81ef0c18df70</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf79a6b9c41ca47d7773e5d649dedf4ea</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gac9eb65bcf008c30d5a8a467b31ec77fc</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0fd9376142ff7b7311894d4897dfb78a</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gae678ce7fdb8ca65fbb92ea91fcd77448</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ClampingGroup</name>
    <title>clamp(), clampInPlace()</title>
    <filename>group__ClampingGroup.html</filename>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga38acaf38212d4fb838326a2c4e69f97f</anchor>
      <arglist>(double low, double &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga32271fe67c0bf4f3d490a0d46a806adb</anchor>
      <arglist>(float low, float &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gae8f763d2bf781401574af0aed1bb2ce5</anchor>
      <arglist>(long double low, long double &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaed97ca53e54f65ab22e370ac74b51e9d</anchor>
      <arglist>(int low, double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6a99bd4d62584e04224666128232cadd</anchor>
      <arglist>(int low, float &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gab6a312a43690f2bb79c9b8468d719f63</anchor>
      <arglist>(int low, long double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga1505848f16f29e7d3e6449c1f39d0d98</anchor>
      <arglist>(int low, double &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga05c4d3d3d9c9fceb1d645932d8792dbc</anchor>
      <arglist>(int low, float &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaf5d01d5392488e9fe8285e59de05ae73</anchor>
      <arglist>(int low, long double &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaa7597fd5748c3e144dad166599d66ad8</anchor>
      <arglist>(double low, double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga7963d262e91121c1e171aa97b821fef7</anchor>
      <arglist>(float low, float &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga535d323f9e12510d90a06a01079a3efa</anchor>
      <arglist>(long double low, long double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga2e894f541bacd8638402cc232ba98d26</anchor>
      <arglist>(unsigned char low, unsigned char &amp;v, unsigned char high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga160e7d29a6348c0689aa9be35d693110</anchor>
      <arglist>(unsigned short low, unsigned short &amp;v, unsigned short high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaba7ec36b5447e5d925148796881b8398</anchor>
      <arglist>(unsigned int low, unsigned int &amp;v, unsigned int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gae2928da8bf9b2ea0003184bb5144d637</anchor>
      <arglist>(unsigned long low, unsigned long &amp;v, unsigned long high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga095f20cb4669015230bd2b02d2c7aab6</anchor>
      <arglist>(unsigned long long low, unsigned long long &amp;v, unsigned long long high)</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaa2d484f7b27def905846f14ff28145d2</anchor>
      <arglist>(char low, char &amp;v, char high)</arglist>
    </member>
    <member kind="function">
      <type>signed char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga0e862150746577f69e538855598dc17a</anchor>
      <arglist>(signed char low, signed char &amp;v, signed char high)</arglist>
    </member>
    <member kind="function">
      <type>short &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga11f19fe11fb1ced367d555549188e15d</anchor>
      <arglist>(short low, short &amp;v, short high)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga11a76b944d0652ded4f098311a1c2c66</anchor>
      <arglist>(int low, int &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga3281fb2a9738c44470ec47d5ae0b0e07</anchor>
      <arglist>(long low, long &amp;v, long high)</arglist>
    </member>
    <member kind="function">
      <type>long long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga27d8afe412c619ce300ae94d743f0ece</anchor>
      <arglist>(long long low, long long &amp;v, long long high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; float &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga756e5fea80a3ac704feac9936e84dbde</anchor>
      <arglist>(float low, negator&lt; float &gt; &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; double &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gacd8df713052ad4185be0490401f629ea</anchor>
      <arglist>(double low, negator&lt; double &gt; &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; long double &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gabb56b4e37d5a269cbc54dea6405da68d</anchor>
      <arglist>(long double low, negator&lt; long double &gt; &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad5b547e81ba85c63aa9c0553fbbf5335</anchor>
      <arglist>(double low, double v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga4ca449d5ed49355fabd28e80e3e25d41</anchor>
      <arglist>(float low, float v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga8b099a7c224220c04f872e04219c7960</anchor>
      <arglist>(long double low, long double v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga848bc31512347475fb342e9d5ac26890</anchor>
      <arglist>(int low, double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad91e612f3dcf013d5ca499ccd2deda90</anchor>
      <arglist>(int low, float v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gada23a7ca4a2e33bbb7f2d9cc13b5250e</anchor>
      <arglist>(int low, long double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga27505d0bc9a87fcde76fe18ae05dfb35</anchor>
      <arglist>(int low, double v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gadb5cbc68653901401f0de7511f591b32</anchor>
      <arglist>(int low, float v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga31e84eeefbf1d7f80de546a11e9c9720</anchor>
      <arglist>(int low, long double v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga4149a5c786becc7e8eec912a1c60b084</anchor>
      <arglist>(double low, double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga9ffc0523268d588d3792ca6fe9aa88a4</anchor>
      <arglist>(float low, float v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6720f04175e96eba698e1147a1092a7b</anchor>
      <arglist>(long double low, long double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga71e2dbdcd20e99bfb78dbd94b598a075</anchor>
      <arglist>(unsigned char low, unsigned char v, unsigned char high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga7cf3b76f17a9012188a63b75a2bdd4af</anchor>
      <arglist>(unsigned short low, unsigned short v, unsigned short high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad36b8843067397b5edc2f59cd4d18618</anchor>
      <arglist>(unsigned int low, unsigned int v, unsigned int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaefde149ba9a39405afe4222fd039d59d</anchor>
      <arglist>(unsigned long low, unsigned long v, unsigned long high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga28cd5fb2d6410807f583a1c28ed5ad01</anchor>
      <arglist>(unsigned long long low, unsigned long long v, unsigned long long high)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga28f89f549eb0f6575228cb79e6da8fec</anchor>
      <arglist>(char low, char v, char high)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga25d1257803a0544b7aa233ac0faa2d75</anchor>
      <arglist>(signed char low, signed char v, signed char high)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6d5ce438dae88203a4a4ca87c813ae13</anchor>
      <arglist>(short low, short v, short high)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga09ee0735f3bc52ba2b0a6982f137af4a</anchor>
      <arglist>(int low, int v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gac6010391fc613826bc9942f97e9cbfa0</anchor>
      <arglist>(long low, long v, long high)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga89c5c4b67fe2c880e885abb0da9d85ba</anchor>
      <arglist>(long long low, long long v, long long high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad94920536c62d103820648e3fdaa5283</anchor>
      <arglist>(float low, negator&lt; float &gt; v, float high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gac17d0411f41184d590c2bf46eebacd8a</anchor>
      <arglist>(double low, negator&lt; double &gt; v, double high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga5a4eee2e10d69a23c246c151649baf74</anchor>
      <arglist>(long double low, negator&lt; long double &gt; v, long double high)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SmoothedStepFunctions</name>
    <title>Smoothed step functions</title>
    <filename>group__SmoothedStepFunctions.html</filename>
    <member kind="function">
      <type>double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga14a6901ad8aad0dac8f03d70768abfb5</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga2c088639b4bf4910fd64849b4ce8d549</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gac48fb0eb6ecaea90f2a32686a1140063</anchor>
      <arglist>(double y0, double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga6694140703d29efd3912ab8e7ddf7b25</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga5ffb459aa21e5131d1c2f81e359dfe56</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga551e174b41808913f351de991c9a03e5</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga5fb901189730c407eb64402efed53275</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga53d2cf758da9d987869aa64134f26b88</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga74cdf7a402da5698b8fbeffb3d46fe13</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf05c46288d5dcb2db0fe22f816cbff2d</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga86266927fa9cebfc043954077237521a</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga329b7ee352b6ba21e80bff31c652e40c</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga69bf07fe0b7db1b05fa12d48adf2e513</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga1f730a1e82a7dfc5ad559dd76b6e1f14</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gadd405e8dc4f21e8ff88e4a43888313fe</anchor>
      <arglist>(float y0, float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaded4bce1c3073f50ed96835360d79a3a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf7706f10a835de34a3b2cccf4c190068</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf0568c0bbb40c9b7e0bb0d0996d714e9</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gafc1cbbea49839a2652059f245ea9d04a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0ec1ea01005696e81013c229ae50ef02</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gabb01c6e73f34e8a52f3c24b179833ee9</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga9a7f67772ae290241d80dcc809c66db0</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaaf7f6fbfbbc77e71d952e28cd01270f3</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gad078c8dbae339ddda704f2bf1bf31e82</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0583e311bbf92765c170802cfb34d017</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0b9eff2cde8c6bda47769b6766f07d16</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga91d776c0527661c940a4b618e292cafe</anchor>
      <arglist>(long double y0, long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaeb5be572b4463129cc6ecf8204dc7d7e</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gabc970e7fe869b7c5ad8eb5f4a4703165</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga34f9bebc6e1713116598a3b280a34de5</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga87a887b27493a49eca816aca3882940a</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gafe3f101eb9e9b0f3d2fb3ce03b4961ea</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga4c90dd31876e0bd340b3ca6fc3ea6961</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga98892af5388ae43bbfdacdac17e90aa6</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga4aa9e45c1570ad99b733fb25ac77266b</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gadc4e15fc875e1360d4e3d382e838c278</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga247753566adef0968093b7d5f8fdc719</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga684b164e95e7f86ba68907fe9df4afcf</anchor>
      <arglist>(int x)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>EllipticIntegralsGroup</name>
    <title>Elliptic integrals</title>
    <filename>group__EllipticIntegralsGroup.html</filename>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga246d464967507a1ba843c2d3bd0d4482</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; float, float &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gaa6033fa6333e444418ee159dffa39127</anchor>
      <arglist>(float m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gace92d2fd5a890de2aa211d589da1a5b7</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga7d13984ecd931506e33a8c935343b1c3</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; float, float &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gafa4381144fc4f46d28587628e845f44f</anchor>
      <arglist>(float m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga749807654459c2fac9a8f61bb679b2d5</anchor>
      <arglist>(int m)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SimTK</name>
    <filename>namespaceSimTK.html</filename>
    <namespace>SimTK::Exception</namespace>
    <namespace>SimTK::Impl</namespace>
    <class kind="class">SimTK::Assembler</class>
    <class kind="class">SimTK::AssemblyCondition</class>
    <class kind="class">SimTK::QValue</class>
    <class kind="class">SimTK::Markers</class>
    <class kind="class">SimTK::Body</class>
    <class kind="class">SimTK::CablePath</class>
    <class kind="class">SimTK::CableObstacle</class>
    <class kind="class">SimTK::CableSpring</class>
    <class kind="class">SimTK::CableTrackerSubsystem</class>
    <class kind="class">SimTK::CompliantContactSubsystem</class>
    <class kind="class">SimTK::ContactForce</class>
    <class kind="class">SimTK::ContactDetail</class>
    <class kind="class">SimTK::ContactPatch</class>
    <class kind="class">SimTK::ContactForceGenerator</class>
    <class kind="class">SimTK::Constraint</class>
    <class kind="class">SimTK::ContactMaterial</class>
    <class kind="class">SimTK::ContactSurface</class>
    <class kind="class">SimTK::ContactTrackerSubsystem</class>
    <class kind="class">SimTK::ContactSnapshot</class>
    <class kind="class">SimTK::DecorationSubsystem</class>
    <class kind="class">SimTK::ElasticFoundationForce</class>
    <class kind="class">SimTK::Force</class>
    <class kind="class">SimTK::ForceSubsystem</class>
    <class kind="class">SimTK::GeneralContactSubsystem</class>
    <class kind="class">SimTK::GeneralForceSubsystem</class>
    <class kind="class">SimTK::HuntCrossleyContact</class>
    <class kind="class">SimTK::HuntCrossleyForce</class>
    <class kind="class">SimTK::LocalEnergyMinimizer</class>
    <class kind="class">SimTK::MobilizedBody</class>
    <class kind="class">SimTK::Motion</class>
    <class kind="class">SimTK::MultibodySystem</class>
    <class kind="class">SimTK::ObservedPointFitter</class>
    <class kind="class">SimTK::SimbodyMatterSubsystem</class>
    <class kind="class">SimTK::SimbodyMatterSubtree</class>
    <class kind="class">SimTK::SimbodyMatterSubtreeResults</class>
    <class kind="class">SimTK::TextDataEventReporter</class>
    <class kind="class">SimTK::Visualizer</class>
    <class kind="class">SimTK::MatrixBase</class>
    <class kind="class">SimTK::VectorBase</class>
    <class kind="class">SimTK::RowVectorBase</class>
    <class kind="class">SimTK::MatrixView_</class>
    <class kind="class">SimTK::DeadMatrixView_</class>
    <class kind="class">SimTK::Matrix_</class>
    <class kind="class">SimTK::VectorView_</class>
    <class kind="class">SimTK::Vector_</class>
    <class kind="class">SimTK::RowVectorView_</class>
    <class kind="class">SimTK::RowVector_</class>
    <class kind="class">SimTK::VectorIterator</class>
    <class kind="class">SimTK::MatrixStructure</class>
    <class kind="class">SimTK::MatrixStorage</class>
    <class kind="class">SimTK::MatrixOutline</class>
    <class kind="class">SimTK::MatrixCondition</class>
    <class kind="class">SimTK::MatrixCharacter</class>
    <class kind="class">SimTK::MatrixCommitment</class>
    <class kind="class">SimTK::MatrixHelper</class>
    <class kind="class">SimTK::DecorationGenerator</class>
    <class kind="class">SimTK::DecorativeGeometry</class>
    <class kind="class">SimTK::DecorativePoint</class>
    <class kind="class">SimTK::DecorativeLine</class>
    <class kind="class">SimTK::DecorativeCircle</class>
    <class kind="class">SimTK::DecorativeSphere</class>
    <class kind="class">SimTK::DecorativeEllipsoid</class>
    <class kind="class">SimTK::DecorativeBrick</class>
    <class kind="class">SimTK::DecorativeCylinder</class>
    <class kind="class">SimTK::DecorativeFrame</class>
    <class kind="class">SimTK::DecorativeText</class>
    <class kind="class">SimTK::DecorativeMesh</class>
    <class kind="class">SimTK::Decorations</class>
    <class kind="class">SimTK::DecorativeGeometryImplementation</class>
    <class kind="class">SimTK::PolygonalMesh</class>
    <class kind="struct">SimTK::ArrayIndexTraits</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; int &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned long &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; long &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned short &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; short &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned char &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; signed char &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; char &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; bool &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; unsigned long long &gt;</class>
    <class kind="struct">SimTK::ArrayIndexTraits&lt; long long &gt;</class>
    <class kind="class">SimTK::ArrayViewConst_</class>
    <class kind="class">SimTK::ArrayView_</class>
    <class kind="class">SimTK::Array_</class>
    <class kind="class">SimTK::AtomicInteger</class>
    <class kind="class">SimTK::ClonePtr</class>
    <class kind="class">SimTK::Function_</class>
    <class kind="class">SimTK::Parallel2DExecutor</class>
    <class kind="class">SimTK::ParallelExecutor</class>
    <class kind="class">SimTK::ParallelWorkQueue</class>
    <class kind="class">SimTK::Pathname</class>
    <class kind="class">SimTK::Plugin</class>
    <class kind="class">SimTK::PIMPLHandle</class>
    <class kind="class">SimTK::PIMPLImplementation</class>
    <class kind="class">SimTK::ReferencePtr</class>
    <class kind="class">SimTK::StableArray</class>
    <class kind="class">SimTK::String</class>
    <class kind="class">SimTK::ThreadLocal</class>
    <class kind="class">SimTK::AbstractValue</class>
    <class kind="class">SimTK::Value</class>
    <class kind="class">SimTK::Xml</class>
    <class kind="class">SimTK::Lapack</class>
    <class kind="class">SimTK::Test</class>
    <class kind="class">SimTK::CoordinateAxis</class>
    <class kind="class">SimTK::CoordinateDirection</class>
    <class kind="class">SimTK::Inertia_</class>
    <class kind="class">SimTK::UnitInertia_</class>
    <class kind="class">SimTK::SpatialInertia_</class>
    <class kind="class">SimTK::ArticulatedInertia_</class>
    <class kind="class">SimTK::MassProperties_</class>
    <class kind="class">SimTK::Quaternion_</class>
    <class kind="class">SimTK::Rotation_</class>
    <class kind="class">SimTK::InverseRotation_</class>
    <class kind="class">SimTK::PhiMatrix</class>
    <class kind="class">SimTK::PhiMatrixTranspose</class>
    <class kind="class">SimTK::Transform_</class>
    <class kind="class">SimTK::InverseTransform_</class>
    <class kind="class">SimTK::UnitVec</class>
    <class kind="class">SimTK::UnitRow</class>
    <class kind="class">SimTK::PolynomialRootFinder</class>
    <class kind="class">SimTK::Random</class>
    <class kind="class">SimTK::CNT</class>
    <class kind="struct">SimTK::Wider</class>
    <class kind="struct">SimTK::Wider&lt; float, float &gt;</class>
    <class kind="struct">SimTK::Wider&lt; float, double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; double, float &gt;</class>
    <class kind="struct">SimTK::Wider&lt; double, double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; float, long double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; double, long double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; long double, float &gt;</class>
    <class kind="struct">SimTK::Wider&lt; long double, double &gt;</class>
    <class kind="struct">SimTK::Wider&lt; long double, long double &gt;</class>
    <class kind="class">SimTK::conjugate</class>
    <class kind="class">SimTK::conjugate&lt; float &gt;</class>
    <class kind="class">SimTK::conjugate&lt; double &gt;</class>
    <class kind="class">SimTK::conjugate&lt; long double &gt;</class>
    <class kind="class">SimTK::negator</class>
    <class kind="struct">SimTK::Widest</class>
    <class kind="struct">SimTK::Widest&lt; float, float &gt;</class>
    <class kind="struct">SimTK::Widest&lt; float, double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; float, long double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; double, float &gt;</class>
    <class kind="struct">SimTK::Widest&lt; double, double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; double, long double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; long double, float &gt;</class>
    <class kind="struct">SimTK::Widest&lt; long double, double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; long double, long double &gt;</class>
    <class kind="struct">SimTK::Widest&lt; complex&lt; R1 &gt;, complex&lt; R2 &gt; &gt;</class>
    <class kind="struct">SimTK::Widest&lt; complex&lt; R1 &gt;, R2 &gt;</class>
    <class kind="struct">SimTK::Widest&lt; R1, complex&lt; R2 &gt; &gt;</class>
    <class kind="struct">SimTK::Narrowest</class>
    <class kind="struct">SimTK::Narrowest&lt; float, float &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; float, double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; float, long double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; double, float &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; double, double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; double, long double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; long double, float &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; long double, double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; long double, long double &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; complex&lt; R1 &gt;, complex&lt; R2 &gt; &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; complex&lt; R1 &gt;, R2 &gt;</class>
    <class kind="struct">SimTK::Narrowest&lt; R1, complex&lt; R2 &gt; &gt;</class>
    <class kind="class">SimTK::RTraits</class>
    <class kind="class">SimTK::RTraits&lt; float &gt;</class>
    <class kind="class">SimTK::RTraits&lt; double &gt;</class>
    <class kind="class">SimTK::RTraits&lt; long double &gt;</class>
    <class kind="class">SimTK::NTraits</class>
    <class kind="class">SimTK::NTraits&lt; complex&lt; R &gt; &gt;</class>
    <class kind="class">SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;</class>
    <class kind="class">SimTK::CNT&lt; complex&lt; R &gt; &gt;</class>
    <class kind="class">SimTK::CNT&lt; conjugate&lt; R &gt; &gt;</class>
    <class kind="class">SimTK::CNT&lt; float &gt;</class>
    <class kind="class">SimTK::CNT&lt; double &gt;</class>
    <class kind="class">SimTK::CNT&lt; long double &gt;</class>
    <class kind="class">SimTK::Event</class>
    <class kind="class">SimTK::EventTriggerInfo</class>
    <class kind="class">SimTK::HandleEventsOptions</class>
    <class kind="class">SimTK::HandleEventsResults</class>
    <class kind="class">SimTK::EventHandler</class>
    <class kind="class">SimTK::ScheduledEventHandler</class>
    <class kind="class">SimTK::TriggeredEventHandler</class>
    <class kind="class">SimTK::PeriodicEventHandler</class>
    <class kind="class">SimTK::EventReporter</class>
    <class kind="class">SimTK::ScheduledEventReporter</class>
    <class kind="class">SimTK::TriggeredEventReporter</class>
    <class kind="class">SimTK::PeriodicEventReporter</class>
    <class kind="class">SimTK::AbstractMeasure</class>
    <class kind="class">SimTK::Measure_</class>
    <class kind="class">SimTK::Stage</class>
    <class kind="class">SimTK::State</class>
    <class kind="class">SimTK::Study</class>
    <class kind="class">SimTK::Subsystem</class>
    <class kind="class">SimTK::System</class>
    <class kind="class">SimTK::DefaultSystemSubsystem</class>
    <class kind="class">SimTK::ProjectOptions</class>
    <class kind="class">SimTK::ProjectResults</class>
    <class kind="class">SimTK::RealizeOptions</class>
    <class kind="class">SimTK::RealizeResults</class>
    <class kind="class">SimTK::Mat</class>
    <class kind="class">SimTK::Row</class>
    <class kind="class">SimTK::SymMat</class>
    <class kind="class">SimTK::Vec</class>
    <class kind="class">SimTK::BicubicSurface</class>
    <class kind="class">SimTK::BicubicFunction</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm</class>
    <class kind="class">SimTK::Contact</class>
    <class kind="class">SimTK::UntrackedContact</class>
    <class kind="class">SimTK::BrokenContact</class>
    <class kind="class">SimTK::CircularPointContact</class>
    <class kind="class">SimTK::EllipticalPointContact</class>
    <class kind="class">SimTK::TriangleMeshContact</class>
    <class kind="class">SimTK::PointContact</class>
    <class kind="class">SimTK::ContactGeometry</class>
    <class kind="class">SimTK::Plane</class>
    <class kind="class">SimTK::GeodHitPlaneEvent</class>
    <class kind="class">SimTK::PathDecorator</class>
    <class kind="class">SimTK::PlaneDecorator</class>
    <class kind="class">SimTK::ContactTracker</class>
    <class kind="class">SimTK::GCVSPLUtil</class>
    <class kind="class">SimTK::Geo</class>
    <class kind="class">SimTK::Geodesic</class>
    <class kind="class">SimTK::GeodesicDecorator</class>
    <class kind="class">SimTK::GeodesicOptions</class>
    <class kind="class">SimTK::GeodesicIntegrator</class>
    <class kind="class">SimTK::OBBLeaf</class>
    <class kind="class">SimTK::OBBNode</class>
    <class kind="class">SimTK::OBBTree</class>
    <class kind="class">SimTK::OrientedBoundingBox</class>
    <class kind="class">SimTK::ParticleConSurfaceSystemGuts</class>
    <class kind="class">SimTK::ParticleConSurfaceSystem</class>
    <class kind="class">SimTK::Spline_</class>
    <class kind="class">SimTK::SplineFitter</class>
    <class kind="class">SimTK::Differentiator</class>
    <class kind="class">SimTK::SysObjectiveFunc</class>
    <class kind="class">SimTK::SysConstraintFunc</class>
    <class kind="class">SimTK::DefaultOptimizer</class>
    <class kind="class">SimTK::Factor</class>
    <class kind="class">SimTK::FactorLU</class>
    <class kind="class">SimTK::FactorQTZ</class>
    <class kind="class">SimTK::Eigen</class>
    <class kind="class">SimTK::FactorSVD</class>
    <class kind="class">SimTK::MultibodyGraphMaker</class>
    <class kind="class">SimTK::OptimizerSystem</class>
    <class kind="class">SimTK::Optimizer</class>
    <class kind="class">SimTK::CPodesIntegrator</class>
    <class kind="class">SimTK::ExplicitEulerIntegrator</class>
    <class kind="class">SimTK::Integrator</class>
    <class kind="class">SimTK::CPodesSystem</class>
    <class kind="class">SimTK::CPodes</class>
    <class kind="class">SimTK::RungeKutta2Integrator</class>
    <class kind="class">SimTK::RungeKutta3Integrator</class>
    <class kind="class">SimTK::RungeKuttaFeldbergIntegrator</class>
    <class kind="class">SimTK::RungeKuttaMersonIntegrator</class>
    <class kind="class">SimTK::SemiExplicitEuler2Integrator</class>
    <class kind="class">SimTK::SemiExplicitEulerIntegrator</class>
    <class kind="class">SimTK::TimeStepper</class>
    <class kind="class">SimTK::VerletIntegrator</class>
    <class kind="class">SimTK::CableObstacleIndex</class>
    <class kind="class">SimTK::CablePathIndex</class>
    <class kind="class">SimTK::MobilizedBodyIndex</class>
    <class kind="class">SimTK::ConstraintIndex</class>
    <class kind="class">SimTK::MobilizerQIndex</class>
    <class kind="class">SimTK::MobilizerUIndex</class>
    <class kind="class">SimTK::ForceIndex</class>
    <class kind="class">SimTK::EventId</class>
    <class kind="class">SimTK::SystemEventTriggerIndex</class>
    <class kind="class">SimTK::SystemEventTriggerByStageIndex</class>
    <class kind="class">SimTK::EventTriggerByStageIndex</class>
    <class kind="class">SimTK::SubsystemIndex</class>
    <class kind="class">SimTK::SystemYIndex</class>
    <class kind="class">SimTK::SystemQIndex</class>
    <class kind="class">SimTK::QIndex</class>
    <class kind="class">SimTK::SystemUIndex</class>
    <class kind="class">SimTK::UIndex</class>
    <class kind="class">SimTK::SystemZIndex</class>
    <class kind="class">SimTK::ZIndex</class>
    <class kind="class">SimTK::DiscreteVariableIndex</class>
    <class kind="class">SimTK::CacheEntryIndex</class>
    <class kind="class">SimTK::SystemYErrIndex</class>
    <class kind="class">SimTK::SystemQErrIndex</class>
    <class kind="class">SimTK::QErrIndex</class>
    <class kind="class">SimTK::SystemUErrIndex</class>
    <class kind="class">SimTK::UErrIndex</class>
    <class kind="class">SimTK::SystemUDotErrIndex</class>
    <class kind="class">SimTK::UDotErrIndex</class>
    <class kind="class">SimTK::SystemMultiplierIndex</class>
    <class kind="class">SimTK::MultiplierIndex</class>
    <class kind="class">SimTK::ContactSurfaceIndex</class>
    <class kind="class">SimTK::ContactId</class>
    <class kind="class">SimTK::ContactTypeId</class>
    <class kind="class">SimTK::ContactGeometryTypeId</class>
    <member kind="typedef">
      <type>MobilizedBodyIndex</type>
      <name>MobodIndex</name>
      <anchorfile>group__UniqueIndexTypes.html</anchorfile>
      <anchor>gac0fa07a3fc0ba26ac3d9ffd3993b6713</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ForceSubsystem::Guts</type>
      <name>ForceSubsystemRep</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a381296ab138573d7192ed7a91c321037</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Visualizer</type>
      <name>VTKVisualizer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9fb676a169f4ced41645f8b5100cb991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Visualizer::Reporter</type>
      <name>VTKEventReporter</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab0261720ee4be9b32b41f7d92b2adb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Function_&lt; Real &gt;</type>
      <name>Function</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0802d357d8b06888b8a1bc35a78c715c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2, Vec3 &gt;</type>
      <name>SpatialVec</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga09c3f8ce9203cc999a69e18bdfa299ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2, Vec&lt; 3, float &gt; &gt;</type>
      <name>fSpatialVec</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a89c7df8a7eb716f7b979a7b757d48889</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2, Vec&lt; 3, double &gt; &gt;</type>
      <name>dSpatialVec</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3244d1cd64cf9a226ff743e7eb4e264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, Row3 &gt;</type>
      <name>SpatialRow</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaa093939834c7a15587de84b8fa379572</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, Row&lt; 3, float &gt; &gt;</type>
      <name>fSpatialRow</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae8002831e62016edb58c55ff7a94bfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, Row&lt; 3, double &gt; &gt;</type>
      <name>dSpatialRow</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2e8fff65912d6c87b0f6d2bd86218cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, Mat33 &gt;</type>
      <name>SpatialMat</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga62d661c98a4b9595b84102e835800511</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, Mat&lt; 3, 3, float &gt; &gt;</type>
      <name>fSpatialMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4cd6b4a19d429ce6c1e95ebb9013287e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, Mat&lt; 3, 3, double &gt; &gt;</type>
      <name>dSpatialMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acd8f897a91ee59725b172c0b859a5815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitInertia_&lt; Real &gt;</type>
      <name>UnitInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af4586b331c8fbbb1f3c18d2a1a03ce92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitInertia_&lt; float &gt;</type>
      <name>fUnitInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a477722ebc554f08856ea0f612b27b8c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitInertia_&lt; double &gt;</type>
      <name>dUnitInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adcce13c4ad58d5aee947072ef9cd3586</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inertia_&lt; Real &gt;</type>
      <name>Inertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a71d271165c00227f5ff5951f1218029b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inertia_&lt; float &gt;</type>
      <name>fInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac0bfa6ada6b7f313bca2c045b437a2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inertia_&lt; double &gt;</type>
      <name>dInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a84c419f8747bdcbeb1ef97d96343e01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MassProperties_&lt; Real &gt;</type>
      <name>MassProperties</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9d54d39dfaae29e62c7c1375620f1802</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MassProperties_&lt; float &gt;</type>
      <name>fMassProperties</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2dca158d2075cfe285fd5c5bb062c61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MassProperties_&lt; double &gt;</type>
      <name>dMassProperties</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae2fd881082f43b2cc419b79624aa6df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialInertia_&lt; Real &gt;</type>
      <name>SpatialInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a01fddf4cefc9b5c82cb55789127abe53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialInertia_&lt; float &gt;</type>
      <name>fSpatialInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9d341aa61d4a6e53db1e610ac22e39b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpatialInertia_&lt; double &gt;</type>
      <name>dSpatialInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a014e74e4b8e0c5775715942ad5086dea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArticulatedInertia_&lt; Real &gt;</type>
      <name>ArticulatedInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab1473db0cef6d6f29b827de9f1b3cb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArticulatedInertia_&lt; float &gt;</type>
      <name>fArticulatedInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5d2d90552acc185537775410bcbeed3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArticulatedInertia_&lt; double &gt;</type>
      <name>dArticulatedInertia</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a836979f05f6f8ff960c2e6eef8d0e6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitInertia</type>
      <name>Gyration</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51507d2e5a82282fd8ec7ff82886d16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion_&lt; Real &gt;</type>
      <name>Quaternion</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a404fac7242c0f4f8b9f21759a2cf3852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion_&lt; float &gt;</type>
      <name>fQuaternion</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acdec23a5ef6b291761d970393a7b92b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion_&lt; double &gt;</type>
      <name>dQuaternion</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d8b3119f051865cf9297bc16c6098de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation_&lt; Real &gt;</type>
      <name>Rotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a028f32537d08269e2de2f2f4aa99e5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation_&lt; float &gt;</type>
      <name>fRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0347954caa733a24cc44afa6ab7edae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation_&lt; double &gt;</type>
      <name>dRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9222b9287b42f088656459f937b4a39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseRotation_&lt; Real &gt;</type>
      <name>InverseRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9e62e9407d923c9d31e0dda0581449cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseRotation_&lt; float &gt;</type>
      <name>fInverseRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adfbacd30d9d3e5b501d79c1211a78417</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseRotation_&lt; double &gt;</type>
      <name>dInverseRotation</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7518b7a11a697122a13e4ffcc0b59988</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform_&lt; Real &gt;</type>
      <name>Transform</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acc6561664fcf612c22f175dbf41c196e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform_&lt; float &gt;</type>
      <name>fTransform</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad4013f777149d64b3f323cd3d42a805e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform_&lt; double &gt;</type>
      <name>dTransform</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a13228c8656e10f79fc5d50e7c2d1bf48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitVec&lt; Real, 1 &gt;</type>
      <name>UnitVec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a880c082e02fe87b78798e9f75d4d2ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitVec&lt; float, 1 &gt;</type>
      <name>fUnitVec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec231355023aff63e565b8f92eb8f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitVec&lt; double, 1 &gt;</type>
      <name>dUnitVec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a34dfc7a23b6656a9faea3b02fd9a5c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; Real &gt;</type>
      <name>Conjugate</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa4386955f62d021e42dd0c8d843ff594</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Measure_&lt; Real &gt;</type>
      <name>Measure</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af2db98c0c9ab926410ec5cc323ba877a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>StageVersion</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a578ce671df2b7d61432037baba8e8870</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 1 &gt;</type>
      <name>Vec1</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8c05afa72ae400c6522822579e36bf1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2 &gt;</type>
      <name>Vec2</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2a20abe30c8427eb7a51af21a21de82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 3 &gt;</type>
      <name>Vec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae91357250892ce29d39ebf17e2aa85da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 4 &gt;</type>
      <name>Vec4</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a06ebf8e50473fe4ff867f9a30ca0ef1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 5 &gt;</type>
      <name>Vec5</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afc8678ad00b6fd28ff2f00998bd2f21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 6 &gt;</type>
      <name>Vec6</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6635f6ea880d0287e5619545864203c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 7 &gt;</type>
      <name>Vec7</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0018befafe47885d8153c4c0740cd968</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 8 &gt;</type>
      <name>Vec8</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>add8621d803341f15a756299c8481c1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 9 &gt;</type>
      <name>Vec9</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5ada6a8d10e6b078bc903a5fafdab0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 1, float &gt;</type>
      <name>fVec1</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a61b78494c87cc61223e3de652ee87cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 2, float &gt;</type>
      <name>fVec2</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12c80778c529d2757a81e4cf068af7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 3, float &gt;</type>
      <name>fVec3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a003e29e5051f4c29857b4d39e2a9f0a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 4, float &gt;</type>
      <name>fVec4</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb3bce23186ef79b2682621915d81375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 5, float &gt;</type>
      <name>fVec5</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51927633a25f66dc63fd670f7ad5a3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 6, float &gt;</type>
      <name>fVec6</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93c07ed44e27bb7004168adc1f763e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 7, float &gt;</type>
      <name>fVec7</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af6b6a7f478e98eb5b13fdab5e569b94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 8, float &gt;</type>
      <name>fVec8</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abfa6e6241bff6477796fb465be2548da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; 9, float &gt;</type>
      <name>fVec9</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a57f6be177442b122c2ca6f5486c874b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 1 &gt;</type>
      <name>Row1</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abfb9e3b40eca123fc366a02425fe8dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2 &gt;</type>
      <name>Row2</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa4ffb79094a37bf0e521e56472528dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 3 &gt;</type>
      <name>Row3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b64644262553826ece08af3613697b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 4 &gt;</type>
      <name>Row4</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a326fde5f77314e9b00069019878b673d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 5 &gt;</type>
      <name>Row5</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a167704d4202cc1935204e8214e43cb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 6 &gt;</type>
      <name>Row6</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adcc0ed54e1a4242eb0763430952db0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 7 &gt;</type>
      <name>Row7</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef02d79ca2ba5c676147fb983d180593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 8 &gt;</type>
      <name>Row8</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abb0e8858a76c05d02c3eb61f274972df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 9 &gt;</type>
      <name>Row9</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3c90801bb2e18e0e4554ad9b15068401</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 1, float &gt;</type>
      <name>fRow1</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0676c06b0ba6b214b95495c7e9009f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 2, float &gt;</type>
      <name>fRow2</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7bf3bc86768d7c4e06eeaa51a001d8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 3, float &gt;</type>
      <name>fRow3</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3f4f76dcaa557323540879d2086ab67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 4, float &gt;</type>
      <name>fRow4</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3d1c5e84e2e17b62f8a551c18345fa97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 5, float &gt;</type>
      <name>fRow5</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0b8f57df12acab1120ca312b9be532e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 6, float &gt;</type>
      <name>fRow6</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a255805fb49d235af322c6530ccb04be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 7, float &gt;</type>
      <name>fRow7</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a499cda3bd384e8d111702ff8876b5969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 8, float &gt;</type>
      <name>fRow8</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6da119f617199a1c2d52d9452953140</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; 9, float &gt;</type>
      <name>fRow9</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0ce7bffbc26aca3b3be59ff80f76098a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 1 &gt;</type>
      <name>SymMat11</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a550cbb547da1e4b3b95e49b86a354ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 2 &gt;</type>
      <name>SymMat22</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abc181b50f662a15b7fcebe9d21b58484</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 3 &gt;</type>
      <name>SymMat33</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04a5834022dd0f62b98be91383b0634a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 4 &gt;</type>
      <name>SymMat44</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9de35334b79a50fd3f26c64551a079cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 5 &gt;</type>
      <name>SymMat55</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a987993c799e1987278203452ddb5a43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 6 &gt;</type>
      <name>SymMat66</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab0feaea22eee57fdbb98eb22ce562d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 7 &gt;</type>
      <name>SymMat77</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0665af3f6c2d2ac9a69f7406dad7a0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 8 &gt;</type>
      <name>SymMat88</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a49f66f1e9682c6f1fd98e9b483dccd09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 9 &gt;</type>
      <name>SymMat99</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeb9584d26bad73f71f35b1429e032cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 1, float &gt;</type>
      <name>fSymMat11</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aff1e1675b60ebc40d8fe16c0a0b99a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 2, float &gt;</type>
      <name>fSymMat22</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aabde27675b2acadf385db9d6e26fa967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 3, float &gt;</type>
      <name>fSymMat33</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1ea8dced161d575a5d7bf9af52a9ea24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 4, float &gt;</type>
      <name>fSymMat44</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5642288d205c0edde2e651573692d969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 5, float &gt;</type>
      <name>fSymMat55</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af187f16a7f2dbba69583fc1630ecf350</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 6, float &gt;</type>
      <name>fSymMat66</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ada7b412ad2adec3def09dc5dc9aef76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 7, float &gt;</type>
      <name>fSymMat77</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b80afa146a802a7df6d1808fe817fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 8, float &gt;</type>
      <name>fSymMat88</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92d0344a50ea4498fde02503be38df9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; 9, float &gt;</type>
      <name>fSymMat99</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a29a810b4fb68e3d93190ed82c80c59c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 1 &gt;</type>
      <name>Mat11</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a98f2f038750e01204a7ba436c1ac19b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 2 &gt;</type>
      <name>Mat12</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abcca232ae398667b84f68a6fcdeb6a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 3 &gt;</type>
      <name>Mat13</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a91448d6300a33ddc0a4831c9b342d198</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 4 &gt;</type>
      <name>Mat14</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2bad728f627aa693231c884d26091b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 5 &gt;</type>
      <name>Mat15</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef3a19560f4285deedcd04d79843c9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 6 &gt;</type>
      <name>Mat16</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90575ef6111cf388ba6a72ef511b5c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 7 &gt;</type>
      <name>Mat17</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a01f9d7c6698d1fa01bc45f7a138f3215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 8 &gt;</type>
      <name>Mat18</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad4286200f4edba3aa01fdf0f00b58089</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 9 &gt;</type>
      <name>Mat19</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3032feab12344f38405a9891745c2fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 1 &gt;</type>
      <name>Mat21</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa63eaec2822e18409e9ef53a5bfb443b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2 &gt;</type>
      <name>Mat22</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a87cc0e4350103f7edd0481986c7a1c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 3 &gt;</type>
      <name>Mat23</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5beadda89a351e37ba095b2ddd58f516</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 4 &gt;</type>
      <name>Mat24</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af773f276a2067bd380449ad986a7ab5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 5 &gt;</type>
      <name>Mat25</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6f881967f90d7740670c621d466d9c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 6 &gt;</type>
      <name>Mat26</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93f1381ff6b311c73e1629b8b7e8a67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 7 &gt;</type>
      <name>Mat27</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a85202cc265143486aff8b3048ddaf66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 8 &gt;</type>
      <name>Mat28</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac218d9c998ba5a130d4a08cf55382be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 9 &gt;</type>
      <name>Mat29</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa3817745370fc955bb290d2636dbcab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 1 &gt;</type>
      <name>Mat31</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a734b71c2a6bbe6a446086c299a853acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 2 &gt;</type>
      <name>Mat32</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad2078a36f9bbf741da41598826748481</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 3 &gt;</type>
      <name>Mat33</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5f17318e33f3b2e5aa33f7996ae3cd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 4 &gt;</type>
      <name>Mat34</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afe9dfd500385d45d5369ad539c8e0b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 5 &gt;</type>
      <name>Mat35</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af5fe94d9bcbc8af14a97efc2e10cfd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 6 &gt;</type>
      <name>Mat36</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aebe2b6cab1fddcc5baf604e956263e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 7 &gt;</type>
      <name>Mat37</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2a611fa130ad0dfdd465132629f09518</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 8 &gt;</type>
      <name>Mat38</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad47688c2c40c5adce01c03af107f7b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 9 &gt;</type>
      <name>Mat39</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa633813ad2df0d103d37ccc120fd3c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 1 &gt;</type>
      <name>Mat41</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f985de5deb75363627f3851e2574a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 2 &gt;</type>
      <name>Mat42</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a95314fd4ac122ae852100755dd5a75ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 3 &gt;</type>
      <name>Mat43</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0ecba9b37ce3718b1025ff5d76436578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 4 &gt;</type>
      <name>Mat44</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab5e69e96f457cbf245e455fc98aaf66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 5 &gt;</type>
      <name>Mat45</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32c7d2b20f8d43ab03dd88dbec680862</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 6 &gt;</type>
      <name>Mat46</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab1f9c30cd78d7876a22e0c6efdb5b334</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 7 &gt;</type>
      <name>Mat47</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a63ec49400d67fe4ffbd0728bf5651db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 8 &gt;</type>
      <name>Mat48</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a58ee33d2628385a2d485bdf614b1284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 9 &gt;</type>
      <name>Mat49</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09aa8182df99f72bb62aba91000002e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 1 &gt;</type>
      <name>Mat51</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab493bbb841d742bc00609a86b806a928</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 2 &gt;</type>
      <name>Mat52</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a606c9ff7ac31d22075ed554e46558cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 3 &gt;</type>
      <name>Mat53</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04e24c7833cb697606aa96840e87e1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 4 &gt;</type>
      <name>Mat54</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef85ff0b89c18a542ed3ff1ea42e3bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 5 &gt;</type>
      <name>Mat55</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a42e46985caecc07c703bb435e13d2be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 6 &gt;</type>
      <name>Mat56</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5cdbfa72614ba6ee70255a1c5229b1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 7 &gt;</type>
      <name>Mat57</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6e50ccdb4e2472f597c9da62c7762141</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 8 &gt;</type>
      <name>Mat58</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a057f5e4a50c6b677034848b8fa3d40fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 9 &gt;</type>
      <name>Mat59</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2cc17a5b2cfebd44f1760e87a592b802</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 1 &gt;</type>
      <name>Mat61</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02fbebdb73d6547c32a8ea0e1a7e0247</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 2 &gt;</type>
      <name>Mat62</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6ae0b37c7a92556fc1c53d5d0e076f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 3 &gt;</type>
      <name>Mat63</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af36ca551065690c82ca625b43b93809b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 4 &gt;</type>
      <name>Mat64</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af4017e524f91bb096dc19b8d42a08098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 5 &gt;</type>
      <name>Mat65</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab09dd8c9bd57337a238e0537ce0beeb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 6 &gt;</type>
      <name>Mat66</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac3e41c02c2585cd9680200aa3cb2e14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 7 &gt;</type>
      <name>Mat67</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8b6b06d14e9b1ef0333290f07f759043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 8 &gt;</type>
      <name>Mat68</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1f7ebe1400475d7dff2e57b1f8486b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 9 &gt;</type>
      <name>Mat69</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1d9f97178293a874728d6611195ac387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 1 &gt;</type>
      <name>Mat71</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a30190d2d393eb7f89a25d3f44ba033df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 2 &gt;</type>
      <name>Mat72</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a100762e5325e142389402617e2e3e642</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 3 &gt;</type>
      <name>Mat73</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a13356b213214ef3dac27fab1fa9dc5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 4 &gt;</type>
      <name>Mat74</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a56304d015ac7e98ba2a9786bf0866722</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 5 &gt;</type>
      <name>Mat75</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af1b1d2fd123a39bc2e8de87700b36f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 6 &gt;</type>
      <name>Mat76</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a45bab0a41474e79367c1dd649943a41e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 7 &gt;</type>
      <name>Mat77</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09b94d0b26ed9a68beae6466a41bce2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 8 &gt;</type>
      <name>Mat78</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab945d1005a1f8a3f4f2a0ee50fe15c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 9 &gt;</type>
      <name>Mat79</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8002d0430c3c74991d87d52e2fa63fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 1 &gt;</type>
      <name>Mat81</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3a7990b78e0b6a1249c8a5fb35baeb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 2 &gt;</type>
      <name>Mat82</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0230be9135d37a686ed5f42e0564cf2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 3 &gt;</type>
      <name>Mat83</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb8ffa79759db36eb2521b4ce2e623f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 4 &gt;</type>
      <name>Mat84</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2dd298518738085b3a912cb6b8b35a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 5 &gt;</type>
      <name>Mat85</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e5cb2913c83dc7df416f0af71e80c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 6 &gt;</type>
      <name>Mat86</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2a86a9552dc8d94831c6585405e159e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 7 &gt;</type>
      <name>Mat87</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad314339548ce5cadd48496edffdaaadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 8 &gt;</type>
      <name>Mat88</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a20a7838bcd0a737265d444f071bf4740</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 9 &gt;</type>
      <name>Mat89</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8492f0193ab394e3601a1bf2c2f26202</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 1 &gt;</type>
      <name>Mat91</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa6e41fcdaf03f132d8b68cc74c921b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 2 &gt;</type>
      <name>Mat92</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76dbc9bb14af80d0558e9602627e1358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 3 &gt;</type>
      <name>Mat93</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5884839611c26ac421ec71ad89f87643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 4 &gt;</type>
      <name>Mat94</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a64f90509022e52c021de2cc3ef999da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 5 &gt;</type>
      <name>Mat95</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adf3792d9d7558ecf8b2da3ddff4ea4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 6 &gt;</type>
      <name>Mat96</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a699258f391d3174f022d4248242bdfca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 7 &gt;</type>
      <name>Mat97</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a209ad8ce3a857f557a48bc42d8377932</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 8 &gt;</type>
      <name>Mat98</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abeb319997b43e50b979f2fbc0c030c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 9 &gt;</type>
      <name>Mat99</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9b5ae2a9fa5e396dde4b4a0058480301</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 1, 1, float &gt;</type>
      <name>fMat11</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acfde649bc9ab045280984b63cfdffae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 2, 2, float &gt;</type>
      <name>fMat22</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6d1c1362cb0a91c4bd852de4998522b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 3, float &gt;</type>
      <name>fMat33</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad540693637bbec0b86c5beff153c4c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 3, 4, float &gt;</type>
      <name>fMat34</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aed186d210cb4c71f00a5a05160163136</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 3, float &gt;</type>
      <name>fMat43</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeb5d29d1001abcf67da0baf99031911a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 4, 4, float &gt;</type>
      <name>fMat44</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a14ba220c095cbe62528394f32529fb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 5, 5, float &gt;</type>
      <name>fMat55</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6ae1f7927942b6e59b202890eae180fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 6, 6, float &gt;</type>
      <name>fMat66</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa2a00c96e022ec7fe38a4a8b98af63db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 7, 7, float &gt;</type>
      <name>fMat77</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a30fa0440eb83250035036a0aa17dcb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 8, 8, float &gt;</type>
      <name>fMat88</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6990ffcdf54870649a6c9bd418b0f75d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; 9, 9, float &gt;</type>
      <name>fMat99</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9b28321d9566dd4915025f02cad953c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline_&lt; Real &gt;</type>
      <name>Spline</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f6a9563ce4a9a5d32b0dacb08b8f1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BodyOrSpaceType</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a187a6e6aa955d2c754226793d2056082</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BodyRotationSequence</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a187a6e6aa955d2c754226793d2056082a09b19887fda64e235788a45fad909651</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SpaceRotationSequence</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a187a6e6aa955d2c754226793d2056082aeb72c74f63529881130e798f144ad057</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCALAR_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46aab42171825d1c1087bdea2e0dde3d1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCALAR_COMPOSITE_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46ae6fc3303d3ca942a2cf25680b607f3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPOSITE_COMPOSITE_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46a3be7821f44ee95cd1896f09b7e5b4175</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPOSITE_3_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46a26c7854937dfaa25cc8b5aff5a6d367c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_RESOLVED_DEPTH</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74b018aadcd7d398d49a6b9983deab46af1be5f4d29c00737dfc358cecd7fb6a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OptimizerAlgorithm</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BestAvailable</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efba91b8ccf023855f6f6e5f4a35daf12031</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorPoint</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efba3e34c051a0fbdfd4a5a5c7ac50b8be45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LBFGS</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efbac5f8f853b0294d4822cb08e7b51ab9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LBFGSB</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efbad7432802d6aa3fb5f5aa02ce29e1e5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CFSQP</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa161f2fe3216692957b24eba7fe77efbae4dea09adae0360d42c7e9a8bda53edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad01a035528e0f8852bdf001912d4e7a2</anchor>
      <arglist>(AssemblyConditionIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af22926f727b68275e357eef1e5af82af</anchor>
      <arglist>(CableObstacleIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4ec111359d375e6e684896869ac2630e</anchor>
      <arglist>(CablePathIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abe510c16f52a2d389640dc83ce5e161e</anchor>
      <arglist>(MobilizedBodyIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const MobilizedBodyIndex</type>
      <name>GroundIndex</name>
      <anchorfile>group__UniqueIndexTypes.html</anchorfile>
      <anchor>ga27dd884b9a84538ba38fa07c4d3bed84</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abd2fedaf8c807420289afb4200ba8c13</anchor>
      <arglist>(ConstraintIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76612fea435b3fbac4a66dae18097eba</anchor>
      <arglist>(ParticleIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aab6f0a444b8ee2eac6864f1eef35db5b</anchor>
      <arglist>(AncestorConstrainedBodyPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abfda3cbf4e3f6970d43da1e8a1048c41</anchor>
      <arglist>(USquaredIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad261700b5a60d35fee7e6ca49bfe718d</anchor>
      <arglist>(QuaternionPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa291718064638af503fc3082e02bd212</anchor>
      <arglist>(MobodQPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa662d29ffa8ccbf03413efe7b7f0636c</anchor>
      <arglist>(PresQPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab6fe6278416d4d238af6c72a5c287584</anchor>
      <arglist>(PresUPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a722c2bc5017d69aa5abcc126436610d8</anchor>
      <arglist>(PresUDotPoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af7b4cddeaf2881feed40eb01ad1e0665</anchor>
      <arglist>(PresForcePoolIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a981a19affd3adc4ea7beb987e80ef59c</anchor>
      <arglist>(MobilizerQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acdf002912824171d4c6d8467a62d9434</anchor>
      <arglist>(MobilizerUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4a7da8510709639e7be839c38f35870</anchor>
      <arglist>(ConstrainedBodyIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab8997771a008f37f4d42f84fa55d5f84</anchor>
      <arglist>(ConstrainedMobilizerIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ef0c966172d07d27424ab57b308358d</anchor>
      <arglist>(ConstrainedQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5317d1e463ca45d8fbc00908b53aa518</anchor>
      <arglist>(ConstrainedUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90d69fa5e92061ab7001df04f42b1bfc</anchor>
      <arglist>(ParticipatingQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac07eedd349f1e3de1adfe15066a342c2</anchor>
      <arglist>(ParticipatingUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04996df0c9d3e3ad65a67aff43fb1793</anchor>
      <arglist>(SubtreeBodyIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SubtreeBodyIndex</type>
      <name>SubtreeAncestorIndex</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad2da02b7ad370dc7b2f39006a0bc5bd9</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a908a1a40f9f193731390fb20ff62ec7b</anchor>
      <arglist>(SubtreeQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a532f71b01d40a242d9b45a297902b4af</anchor>
      <arglist>(SubtreeUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3c635935dd952ec5a51f393f5881d446</anchor>
      <arglist>(ForceIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f8b4ac025a264b351fdef2b47a78471</anchor>
      <arglist>(ContactSetIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a306139f1a6a0d5bf28030ca561aa0370</anchor>
      <arglist>(std::ostream &amp;o, const ContactForce &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae6dbccaa587ff7db32a3729dfc78397a</anchor>
      <arglist>(std::ostream &amp;o, const ContactDetail &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb96f300b909985a8174b4e7c10ee561</anchor>
      <arglist>(ContactCliqueId)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6835e9093ff4d91a687bc30f53cac09b</anchor>
      <arglist>(std::ostream &amp;o, const ContactSnapshot &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac35f888fc616cdc39bafeec6f3e4c982</anchor>
      <arglist>(std::ostream &amp;, const SimbodyMatterSubtree &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aabcbbda2db556a5b7cbca69b05fa87c2</anchor>
      <arglist>(std::ostream &amp;, const SimbodyMatterSubtreeResults &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>readVectorFromStreamHelper</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a212b048ff8e66e44b617732b916e9cff</anchor>
      <arglist>(std::istream &amp;in, bool isFixedSize, Vector_&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__MatrixCharacteristics.html</anchorfile>
      <anchor>ga20dee8a22d0b10e4887e6418446d01cd</anchor>
      <arglist>(std::ostream &amp;o, const MatrixCharacter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>group__MatrixCharacteristics.html</anchorfile>
      <anchor>ga8cc1d805e4bd200104dbe524d396ede8</anchor>
      <arglist>(std::ostream &amp;o, const MatrixCommitment &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>readArrayFromStreamHelper</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a47ace16fb1192b2579d3b9bf9aaa8062</anchor>
      <arglist>(std::istream &amp;in, bool isFixedSize, Array_&lt; T, X &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a291561380e9c21a878696591216b3bf6</anchor>
      <arglist>(std::ostream &amp;stream, const AtomicInteger &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a17c7c5828853a7172233560df69b2637</anchor>
      <arglist>(std::ostream &amp;o, const PIMPLHandle&lt; H, IMPL, PTR &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8780b2905403c31255dc4fe3480b2428</anchor>
      <arglist>(std::ostream &amp;o, const PIMPLHandle&lt; HANDLE, IMPL, PTR &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gaae02786573d73eb2fcdb5e552a6fa891</anchor>
      <arglist>(std::ostream &amp;o, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga994f8d89f2e202447823e24396f1e8bc</anchor>
      <arglist>(std::ostream &amp;o, const float &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga17a8672c706c5c04e107e61d261dcb18</anchor>
      <arglist>(std::ostream &amp;o, const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga58eebde32533dc80226e182f44b22f30</anchor>
      <arglist>(std::ostream &amp;o, const long double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga9ece572abb6a3e110d45c46830f05943</anchor>
      <arglist>(std::ostream &amp;o, const negator&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gaeac578dd8246d4a6914a80eeb95c245d</anchor>
      <arglist>(std::ostream &amp;o, const std::complex&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga73696848d567dcfc32ae4976af39194a</anchor>
      <arglist>(std::ostream &amp;o, const conjugate&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readOneTokenUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga8a680e6ad01873dd96f94bec96789506</anchor>
      <arglist>(std::istream &amp;in, String &amp;token)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga64e0c2535ba54f956b015cd371914e69</anchor>
      <arglist>(std::istream &amp;in, T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga780aae3c74feba345ffa3265f238a0fb</anchor>
      <arglist>(std::istream &amp;in, float &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga0d2353938f723372801aebd935eef8d3</anchor>
      <arglist>(std::istream &amp;in, double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga6f14b9155294cca7d382a354056877da</anchor>
      <arglist>(std::istream &amp;in, long double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gad1f2ca45282c306208dcd50748894a4d</anchor>
      <arglist>(std::istream &amp;in, negator&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gaf5e85081c35165308024a774475c17bb</anchor>
      <arglist>(std::istream &amp;in, std::complex&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gabc5553e096cb68fb840e301f75e38f29</anchor>
      <arglist>(std::istream &amp;in, conjugate&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted&lt; String &gt;</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga1202228eb72b7b27a0f1d9813a74ba77</anchor>
      <arglist>(std::istream &amp;in, String &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeFormatted</name>
      <anchorfile>group__writeFormatted.html</anchorfile>
      <anchor>gade1630adab11d517027b2971162f8a62</anchor>
      <arglist>(std::ostream &amp;o, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFormatted</name>
      <anchorfile>group__readFormatted.html</anchorfile>
      <anchor>ga3c3f575ce29e7c9a32ab5f89e9274223</anchor>
      <arglist>(std::istream &amp;in, T &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae22643aff4203ff019e3e7c16b09e492</anchor>
      <arglist>(const String &amp;value, T &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9af68e1df7f52c38a7d152459879277b</anchor>
      <arglist>(const String &amp;value, bool &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a03fd811eb82d8e1739c46bcc40cc0fb8</anchor>
      <arglist>(const String &amp;value, float &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12f8c59d9dbd3594b4212c193f3dc210</anchor>
      <arglist>(const String &amp;value, double &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab62f5ea3c3d922969543b47483bb2ebf</anchor>
      <arglist>(const String &amp;value, long double &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad93512c8529a0abce950989511f08b58</anchor>
      <arglist>(const String &amp;value, String &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a91cd875a039473d2985584023e40ffe7</anchor>
      <arglist>(const String &amp;value, std::string &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac8e3a8f000945e83638771ce5cd25405</anchor>
      <arglist>(const String &amp;value, negator&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a894c75c8f51cb0c2fb3a3e736cffdd58</anchor>
      <arglist>(const String &amp;value, conjugate&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>tryConvertStringTo</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1dc167761a53ad7ec87db85b69a98ffa</anchor>
      <arglist>(const String &amp;value, T *&amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanUpThreadLocalStorage</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae5476fc2988d31b6c36eb6d5556ef6c2</anchor>
      <arglist>(void *value)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>timespecToNs</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>gace24356640e4cf281bc2221933c8d0d9</anchor>
      <arglist>(const timespec &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nsToTimespec</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>ga713811ece1aedbdd06d4f98951dea21e</anchor>
      <arglist>(const long long &amp;ns, timespec &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>nsToSec</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>gaa9f63b9ee08b1b6dd0321c25dbb3deec</anchor>
      <arglist>(const long long &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>secToNs</name>
      <anchorfile>group__TimeConversions.html</anchorfile>
      <anchor>ga3d51ddfbb75cb8a41277b5c56ebfdbfc</anchor>
      <arglist>(const double &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cpuTime</name>
      <anchorfile>group__CPUTimers.html</anchorfile>
      <anchor>ga504ddfe913f5861dd4f96267714ed4a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>threadCpuTime</name>
      <anchorfile>group__CPUTimers.html</anchorfile>
      <anchor>ga2b21a5c42c6b100d0e7d69d27c846d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>realTimeInNs</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga9dc21e8a0695b5f5f8acc15c91115cd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>realTime</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga90346b7b40f4d56611634637591cf52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleepInNs</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>gac3ba999019f0632c52430fcd62a0e118</anchor>
      <arglist>(const long long &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleepInSec</name>
      <anchorfile>group__ElapsedTime.html</anchorfile>
      <anchor>ga899cbb9b0871969450e881a8828a8a26</anchor>
      <arglist>(const double &amp;seconds)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a44445c9fd129c8072e4dfe64ed7235ed</anchor>
      <arglist>(std::ostream &amp;o, const AbstractValue &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_ELEMENTWISE_FUNCTION</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a821ff958bff7253829426026eb12f123</anchor>
      <arglist>(exp) SimTK_ELEMENTWISE_FUNCTION(log) SimTK_ELEMENTWISE_FUNCTION(sqrt) SimTK_ELEMENTWISE_FUNCTION(sin) SimTK_ELEMENTWISE_FUNCTION(cos) SimTK_ELEMENTWISE_FUNCTION(tan) SimTK_ELEMENTWISE_FUNCTION(asin) SimTK_ELEMENTWISE_FUNCTION(acos) SimTK_ELEMENTWISE_FUNCTION(atan) SimTK_ELEMENTWISE_FUNCTION(sinh) SimTK_ELEMENTWISE_FUNCTION(cosh) SimTK_ELEMENTWISE_FUNCTION(tanh) template&lt; class ELEM &gt; VectorBase&lt; typename CNT&lt; ELEM &gt;</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a63210772f3bd9e4b2eb35309408b173e</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae9023cc8fd7b19ac03d741009325e8e0</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; N, typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae53890c1ea80c9fe512a086626dac827</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab4e96a29769e769a2bb80183dbd6c7f0</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4420ad4cff70c2c39c69443280bdae4e</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; N, typename CNT&lt; ELEM &gt;::TAbs &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adc0bbe4fcaf0a762bd8714f210deb616</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90540cf06e3b30a156a9c762aacb29e0</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aceb7cf9ec4426c94d81ad583d3cd5724</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a52a2db3247b7b2a5d4f79846e1ee1c</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad1fa82353cca59d314d5dc4d6e349698</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a60941ead10f387f52c861691d0c6cd7c</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a032c21f8458ddb6db95b51473d9771f3</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>sum</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abc5d1465deb42ef3bd79c95a7723ed1e</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6c0a4de5068fb7373703f25a368760da</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a57483401201d4c9e44ad0499bec3f454</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad88a9f11366c1d535b117271ac9f8cf4</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a18be8264783d989c3f1c92c7174a4456</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a25b237a86ee204b6ab14b6dc69a9d45d</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0450869509a435532bda080e856ec84a</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>min</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab70c9fbbe780b841857c3736a664ef5a</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5e54f17d86aeb08126d641bea4ba6f86</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a714e3c5086d941000ec9f2c32a8c1602</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2c089a13d9115a531c393200af381f55</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a856151f3428d62ccb08b7498ad8d66d0</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9c50c0e8c5a507a35cb86479e7439296</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a802c4d4c88aa3ab11516614287333243</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>max</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae98a1dedddd59ec5a5b473d5559001a7</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90a760e67dd5fbc30eb6608f01a2c701</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a31663ecdcfe7b4329aba677dee6685a3</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afac354bef02eeeb1e692db9522773d6d</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3c404226827a2a160c355c6c1178acd1</anchor>
      <arglist>(const Vec&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6fd6409eae98b1d60dddc91414074834</anchor>
      <arglist>(const Row&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac854f6874bf949de1142e38a67ae2392</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>mean</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a87cf69c4e5b5bc7094b0e09ca2cfcd91</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a49acf4ea066e462f04356200e27d4c5f</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad35fbcffc7db7889a5c53ccdb0e43ace</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a20debaa5de25850db5715752ece6c1d6</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; N, ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b4521de37f85db50b6c209db4d9f308</anchor>
      <arglist>(Vec&lt; N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4f1fdb60793d5f2add57f06e73801c14</anchor>
      <arglist>(Row&lt; N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a283ec52c6b3016f90c3a2637c2c1927d</anchor>
      <arglist>(Mat&lt; M, N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; N, N, ELEM &gt;</type>
      <name>sort</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a27922abed0c283a91e4bf239a923775b</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac5552c22c9b5897d7c1fcdfb15be4369</anchor>
      <arglist>(RandomAccessIterator start, RandomAccessIterator end)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a74aff6ba688ba3027ee45ed44526ec91</anchor>
      <arglist>(const VectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adfd6970e6fceb9fdd6c143013ad03385</anchor>
      <arglist>(const RowVectorBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELEM &gt;</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac304471db591fbf5340700447f8500ef</anchor>
      <arglist>(const MatrixBase&lt; ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab2dd57239848fe098f10e9db3a0b8567</anchor>
      <arglist>(Vec&lt; N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>ELEM</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a50e53d92dc477bac64311563cf5a591e</anchor>
      <arglist>(Row&lt; N, ELEM &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7afb2a3cb7a386e48c0f567137d12315</anchor>
      <arglist>(const Mat&lt; M, N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, ELEM &gt;</type>
      <name>median</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8884ebbcc4b801ae7e19d3ecf5127ca7</anchor>
      <arglist>(const SymMat&lt; N, ELEM &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a08dcce968d051a9f6b06527e6620553e</anchor>
      <arglist>(std::ostream &amp;o, const MassProperties_&lt; P &gt; &amp;mp)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9cdd6b5c2aab168f5306813b98b882bd</anchor>
      <arglist>(std::ostream &amp;, const Rotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afac79a76f355e3d6625cd2959832161e</anchor>
      <arglist>(std::ostream &amp;, const InverseRotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeVelocity</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga1356d52bc6c756a65449cf77b6ed450c</anchor>
      <arglist>(const Transform &amp;X_FA, const SpatialVec &amp;V_FA, const Transform &amp;X_FB, const SpatialVec &amp;V_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeVelocityInF</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaa29f226e57ded5cd16a97087bf6cbc7a</anchor>
      <arglist>(const Vec3 &amp;p_AB_F, const SpatialVec &amp;V_FA, const SpatialVec &amp;V_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeAcceleration</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gab4ea6030e591f841957fe57c2e8e9856</anchor>
      <arglist>(const Transform &amp;X_FA, const SpatialVec &amp;V_FA, const SpatialVec &amp;A_FA, const Transform &amp;X_FB, const SpatialVec &amp;V_FB, const SpatialVec &amp;A_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findRelativeAccelerationInF</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaf0c33467c25c79e11eb6f9cdc6b31589</anchor>
      <arglist>(const Vec3 &amp;p_AB_F, const SpatialVec &amp;V_FA, const SpatialVec &amp;A_FA, const SpatialVec &amp;V_FB, const SpatialVec &amp;A_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>reverseRelativeVelocity</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga39da5fe5d3cc806ba5e0d1da41d5638f</anchor>
      <arglist>(const Transform &amp;X_AB, const SpatialVec &amp;V_AB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>reverseRelativeVelocityInA</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gaf6cd519023caf21595f9346121cbc69d</anchor>
      <arglist>(const Transform &amp;X_AB, const SpatialVec &amp;V_AB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftVelocityBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga64e629bd9aead45c34c02f6448127edc</anchor>
      <arglist>(const SpatialVec &amp;V_AB, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftVelocityFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga606c054f4a71108a91b5f6e61bedef87</anchor>
      <arglist>(const SpatialVec &amp;V_A_BP, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftForceBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga2b44f1ea5624daf334b4aa6c0e07ea0e</anchor>
      <arglist>(const SpatialVec &amp;F_AP, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftForceFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga76d7f9be4b5cabe22b3ad7c1eef94be9</anchor>
      <arglist>(const SpatialVec &amp;F_AP, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftAccelerationBy</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>ga4cd275315e4cfd899f739fad664c1720</anchor>
      <arglist>(const SpatialVec &amp;A_AB, const Vec3 &amp;w_AB, const Vec3 &amp;r_A)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>shiftAccelerationFromTo</name>
      <anchorfile>group__SpatialAlgebraUtilities.html</anchorfile>
      <anchor>gab5349929701832c2c4020d1ef38ad9f0</anchor>
      <arglist>(const SpatialVec &amp;A_A_BP, const Vec3 &amp;w_AB, const Vec3 &amp;fromP_A, const Vec3 &amp;toQ_A)</arglist>
    </member>
    <member kind="function">
      <type>PhiMatrixTranspose</type>
      <name>transpose</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8279fd7a157b0f4078ea245377484d82</anchor>
      <arglist>(const PhiMatrix &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>PhiMatrixTranspose</type>
      <name>operator~</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e6f680d1eee9369820c3aa07793f9d5</anchor>
      <arglist>(const PhiMatrix &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12cc9544da859e2b8922e51965de0bb6</anchor>
      <arglist>(const PhiMatrix &amp;phi, const SpatialVec &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMat</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4adb360d80854b182910189a9fb2a870</anchor>
      <arglist>(const PhiMatrix &amp;phi, const SpatialMat &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6a3acb89c7a89a20def67a2e08b337f9</anchor>
      <arglist>(const PhiMatrixTranspose &amp;phiT, const SpatialVec &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMat</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aca3bdc06255c19bc05b8b914849a3572</anchor>
      <arglist>(const SpatialMat::THerm &amp;m, const PhiMatrixTranspose &amp;phiT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac56336ea74b71f07f371d943bd5cdba0</anchor>
      <arglist>(const PhiMatrix &amp;p1, const PhiMatrix &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab878b19d5109a691a7e75da946a63a21</anchor>
      <arglist>(const PhiMatrixTranspose &amp;p1, const PhiMatrixTranspose &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5fe3fa31e112b1fa1ad10c7aed8041de</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, P, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2eed33fd9504b6f160c9a94e3bc20ad7</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, negator&lt; P &gt;, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02bbd3841638776ed1ae966660d856ce</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, negator&lt; P &gt;, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad1209b31cf218477b74c0f85ac6127b0</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_BF, const Vec&lt; 4, P, S &gt; &amp;a_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af032251f8e5e2e90d0aef288b756e3ba</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_BF, const Vec&lt; 4, negator&lt; P &gt;, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad5e04cfe3f2e5a121314d79cc9fe1017</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_BF, const Vec&lt; 4, negator&lt; P &gt;, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2e543a1bf7fed37b03fb91978b355609</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0fd52515da78a94a0f8e5639d418a9b9</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const RowVectorBase&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa7f07e8adc6868f9d82bbfee5a374666</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32e351099cd1b1ffb08214383f426e3c</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const MatrixBase&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5f828c9ea8647f59bbdb5af134bae757</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6ca599409535ce754846a4e1c81544a7</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const Vec&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9054ba43cf32933b9c3949f24bc41663</anchor>
      <arglist>(const Vec&lt; N, E, S &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a62432b74d5e1c8c16314dc0e04b7939d</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a531f2a37e69db7ce5d9469222eafa850</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa5f73ce71b5fb2d3d0bbcc0b922c93d9</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const Mat&lt; M, N, E, CS, RS &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a26d9dc48199b7d7ba1ca44fc4ad8b082</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;v, const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3602a161e91f4191b1ee20f41e97708d</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X1, const InverseTransform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f86079a5d1f6c057af8329b62739511</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X1, const Transform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af4b85482222da9af0d82698197986f85</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X1, const InverseTransform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac28fea6f9808b9967305de1c205e05c9</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X1, const InverseTransform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a29fef4795c0c95bd24f3dc5bbeb4bedd</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X1, const InverseTransform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa19a0ef217d2d503b27237419c07c392</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X1, const Transform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>convertRadiansToDegrees</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad441f40120adc47892ddae78bddb33fb</anchor>
      <arglist>(const Real rad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>convertDegreesToRadians</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a024d2ab093463ed35bcb3346d17bc63c</anchor>
      <arglist>(const Real deg)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae403ebce59ddb8964c46bde2bc67d06e</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad35701a88965345097a468543b876499</anchor>
      <arglist>(int r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae96925663019d5369f9872a071dcc8ac</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0f8ea407c8d6fa04198cc8dcf4d77ec0</anchor>
      <arglist>(const double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0fe0dbac87f2f2d94577c6aa95b840eb</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a87ad5e9505e6eafbdd25bccd939de9e8</anchor>
      <arglist>(const long double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1cbf94d8ce889b913bcb08d750a05ff4</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac46015e914c2e6eaa82bbbbe72e67a02</anchor>
      <arglist>(int r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae6554d577fa862ac378f2c7730094671</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab3ce79974e9225c9ce57fa91ed4f711e</anchor>
      <arglist>(const double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a055a300a5d7989aceb2ebbbf83d80d62</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac0d40faa40033fe738c54b2ff90fa2ea</anchor>
      <arglist>(const long double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae9a47d665d29e6499fd43108f66fbad7</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32313656bd4fe9d3eaf682b68f73ad5e</anchor>
      <arglist>(int r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a34c9f30468b4617439ed82fb3598af2d</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1c4686d965b4a722fb00d4acb1af98f7</anchor>
      <arglist>(const double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2090ece4bfb903441c56d5fa34279ff7</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab05ab8908ab319a1f44e5416da300cbe</anchor>
      <arglist>(const long double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2ea1cadeca7712adb52d2539f6d0bc26</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a61db4277ab8b2a092a8c7386c20678dc</anchor>
      <arglist>(int r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3f399ddde6146362bfb3ad1dd243a0ec</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3f104752b92791df752442fb4e1a3d60</anchor>
      <arglist>(const double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6e1812d101b98a39a3a5588e0a690dc2</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aaaaa0c06d020cf1be09d81004191a187</anchor>
      <arglist>(const long double &amp;r, const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4ab41c3c59ae6a6cdf74dc589c4003f2</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acfa04eb6779b9a27e224b75dc7e1cfef</anchor>
      <arglist>(int r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2671ef95de763aab8b24662347eed261</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a952f2acc788f2c6cb3ada83bf3ccd9e5</anchor>
      <arglist>(const float &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa6243c2ddbdfbad20a7a960fcb464818</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac47797df86af0f10deed6903b3d7edf1</anchor>
      <arglist>(const long double &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac93a0c7c108172ef2608a8e06567e660</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a79b75e4a440032117720bf883185bad2</anchor>
      <arglist>(int r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae1aa31002ee03572e049aa0aab977956</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2301b76e00b34b599b8c3ec6ed27c2e1</anchor>
      <arglist>(const float &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6e14bf6a9a1ca0a9c2b3cf4203c5a32f</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8c27443897b982722625dfe6efa3ea4b</anchor>
      <arglist>(const long double &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1551b951ce7845c1cd9674f3fe3a66c4</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b735e97ba5bd0c146b8874a59f120e8</anchor>
      <arglist>(int r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec1ad0de1d81c3cb44112e42d82d7ca9</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a470da0e3e4a9c22fa062fb6525edba99</anchor>
      <arglist>(const float &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a03ffbcbcf6dd8a4f7fb41da61068710c</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a77417b9f31a81aad50d11e86861bef38</anchor>
      <arglist>(const long double &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7a3585def58aad7e920eb6a4b7a54e25</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab2326eaea77d18673cec1827214db0d6</anchor>
      <arglist>(int r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a60d8201666b2cb4c88cf9648b77fc2f5</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a60b69d1c47b03af44dd760310cd03506</anchor>
      <arglist>(const float &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>accba1f3df9e06775a101dd04936764ba</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a594db726bdd7b2f2da55b49186ec97b4</anchor>
      <arglist>(const long double &amp;r, const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af2424591263d9437fadfce898d49e0df</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa5a96047d8b08a1e9dd7de75346b95ba</anchor>
      <arglist>(int r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a612e0e77ff76ce23325a987ba1f2cf58</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a014725b593141c29312a6c99ed7398dc</anchor>
      <arglist>(const float &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a254fb13271cb6c15b3d75809c0b2aac6</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a94bb7c1718bd12284f019002ca5613ce</anchor>
      <arglist>(const double &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af32792db02db232911965ed4d5110717</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a205a218d35371da8c440a8a17d484ee4</anchor>
      <arglist>(int r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af9841e6268dc5f621abaa2f773f3ebd8</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a99b2828e8f6609860a5e5b04f759f5db</anchor>
      <arglist>(const float &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a180d8cf8174aa4bc52e6f7bb0046f47f</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a695b25ac72d77fcc08fb720f3949d1d7</anchor>
      <arglist>(const double &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a58a8135d6941dc0bdc6ee0f4fa1323ed</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e0c588a7b9740382cd4e679ebdca2e3</anchor>
      <arglist>(int r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5df623dd760bfc7a7b931323bfebc104</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af20e6657d1aeed90f699160cd0e7dd81</anchor>
      <arglist>(const float &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a585bb27997f28c81e16dd6ba707b4bad</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a988e983b2c2abd573bad6e4bdd48b71c</anchor>
      <arglist>(const double &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab4a245adc3a0af27cf310fa576e231bf</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, int r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1b5011b1053642d8190ec1088cc574bc</anchor>
      <arglist>(int r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f77306592b22ddc08d74f7092ffdf71</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8c45dda9cddd7f11f6526dbfb09c0af7</anchor>
      <arglist>(const float &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2cdc154c46905fe0c064378667c59345</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d566cee659f5e1411aef8a32720cc44</anchor>
      <arglist>(const double &amp;r, const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>real</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeaa827805a9e4e7ddace710ebf77c3f5</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; float &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abae53367383176b30112a7fcd41b1cc2</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; float &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a830713eb25553b6e4a1f16050c0cbbe1</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a43865b00e1b03f56c61ab68f32b31500</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>norm</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab0654ff12161f19d018318ead5863f27</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>real</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad19c48740701efef3a60e0edacc732f5</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; double &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5e34e1896f72abe39fbf0eabba2c1192</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; double &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a40a37a88c66a5e0d9d4e039c03cf6a80</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec2b96481356c51a5d1480c26ee48407</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5f1b9d331bc4fcf2eec08b835c56febd</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const long double &amp;</type>
      <name>real</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7542f9bfef835fc00cf8af328fda90fe</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; long double &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6043323a5a3feccb21fe22b346080f23</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; long double &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aca9495e6c1677c10c4fb1dd9d9365fa2</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>abs</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a07509f129b53ad148912b5ce2eb9891e</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>norm</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9986a76a03867f061e020370865c6386</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32bc3311eb9591b84552fb442a6567c5</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, conjugate&lt; R &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a66d043045800c1ff87ccd02fef8abb</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;os, const conjugate&lt; R &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a61e08876bf80dead9bc068e292e59196</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ad37aec5c7e13678609087cc666e57c</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a80bae81abc432946731802056986a404</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1471a185ee2d70a29fd4e073a646690b</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9f832abc7f4f061c12b3a9d264f3407d</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6fa2dcbed1eaf72bea2fe558b9cef239</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad907518d2d35166afbd9689a56be845b</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a875a8257564cf6b2c95318febbbe8ca7</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a439f825077407feffbada04285e7bd1f</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6045474bb3b010c9687ee037d2a50f6d</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a28f37aae2e15e0c9b6342cacf5ac2e20</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2fa02d27d3c7b34b9a734c897c2eed04</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a05f4f7fda5027105993f07407cff7735</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8bfba1df7aee815490157bf87a8d9a14</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7efc1b8332639836016dfd677ada3f68</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a53de12d48b6838d0a14e89a255ed7acd</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a73c829b3bf361c758d4ef4cbc9cca31e</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0c3ec879a72a733746d7b7e0004f304b</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aac639daeeac2aca1f6b4e6d8da68488d</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6f91e1c52ac17dea0ef26766dac6bfe</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a18d4c7e4d8529cd7c09f879465c772a6</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b292b68b207e3bda860e2d3437048e7</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a414189caa6fe8f2fd561dcb969249ec0</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a584bf54f9a130523fb107edd97971bbb</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0962c982494918d8bd93b009ad20887c</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adca0db588bbf078d82fe01788e3bfcc1</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aed14ab20afe07442683fa032e912d801</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; R &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7cf7a5f0ab9fb0e6c0c4ab555c75aba1</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a67ef5a90d6c33b4d0f2907ce4410ca98</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WCplx</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5e9834353c7b2e367c62f343707a8a40</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; R &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad8d046164fab71c36a1cd483ddedf24c</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>conjugate&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8521ebbae0782d58bc199cbea8a0dc14</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WConj</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7853e5be9fe4dc0de8c2f6d0a5e19d8b</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; R &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a42ab4f91667b01eec66c8fc1bb9a5f6a</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac7fb0a05d6a11918ac43099bf48ed119</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, double &gt;::WCplx</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac60a5a7c102f573b671a01cfbf8b28a5</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; R &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WConj</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac732aec82d65b17825dd97d315e68fbe</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acaf6e3debbfded7fc252418783912e93</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d15863376a7bf4a3e91631e90590b11</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abe94f27eccba973695b0e0b594c6043d</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; typename Wider&lt; R, S &gt;::WCplx &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aba4e950d5cf1c3b7f0bca89c9482f019</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa6a65e7e4b1a5bd5692f86454191e970</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; typename Wider&lt; R, S &gt;::WCplx &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4c1be8b57acabc0ddd38ba06ee4b307</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad72bb5bdc77c52384748c9851ada2b9f</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a088c8382b7d08b062979a387be3babf4</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aea23292d4a1250111eb5a17385b11f94</anchor>
      <arglist>(const negator&lt; complex&lt; R &gt; &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a044e65f0113bddccab35929794ee3833</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const negator&lt; complex&lt; S &gt; &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9282499e1394a0ebbafa864917e3c14b</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acafb736c213bdd6af245877f5218d06e</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Wider&lt; R, S &gt;::WCplx</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7e74ab74bb57268d64176ea94f200d0d</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4f01243efd7a9239a53fb8253e6ad435</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a75169772fd944f95a8d974fd1f31eea4</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5253ad30c1b1bb1e1daffcecfe8c189a</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ceea55ab60bfd8024be1bef3f84a54c</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad27134aac049e658ae6ddd5fa9a1bce1</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;a, const complex&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0ffad78ef10b22ddcae1e3d21e203e6c</anchor>
      <arglist>(const complex&lt; R &gt; &amp;a, const conjugate&lt; S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga9da8ecd39778e545317bf7118e5715c8</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gae54451636826c4c92a008d5727f0259d</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga87a5ec9ee433db8ba2fc4f3cfc909612</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaef08e42c36138040a64b88f5124954bb</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga033b741d081dd96f0b70d15bc5579d9d</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gaaefb475975dd2a35bf2248e16aadaf8d</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga87069fe8c28a4fd0bbd59ae07f5f9159</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gabda0333b6af1ea4af9be0f99adc7b90c</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gac8242f7150cacc52df29a4fd8fe642fb</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga43656d634341750704899a08551b45ab</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga2de11c8889fc623d3b4067796d1b6e3f</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga40f9ebde86aabc78cbd0bb7d3dd2fd39</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga27ded82efd3d6f955ccc923a0768be65</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gadcf0f198bd95948c4bb44c0eddd5b158</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gafb71a728a956a7871751eea4a2e8cb12</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const DEST &amp;</type>
      <name>negRecast</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4b4f4fb307bf3ffde32ddab417828718</anchor>
      <arglist>(const SRC &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; B &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b0392eefb745c342e813096a55fe0ab</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7e52f0cf775230463ee18e850c4b9718</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acb18989d17ca833382f5e51d7c883a1c</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; B &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a694f2c8fc55a2a3f0ab1eb7649c861ee</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abc30bfc71a1022b8df91f737432e79f8</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afe10bbf5c7ccb2b13a299c0a1c311b90</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; B &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a431553f1563af84a7893929db31dd4e4</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6bbcda20b106f558acf6a1ee47b30cac</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5121ed88c338589897d1aa24f956a224</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; B &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a182e03955e8dc0590e75a0f4f82502d3</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab65112f950374e70d21aaf4313524df0</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; A &gt;::template Result&lt; negator&lt; B &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3bb4d8e1f3a5923313592a57579943d</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6005a63100dd03b82682ae07ed43731d</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a67183631697512343a3287a2cb7a3dda</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4a4e3007486f025b53615d528df0021c</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a380e3460c0ade23db383030551ef50e4</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const B &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2b04fd0c4e36edaec5c207f2865089a4</anchor>
      <arglist>(const A &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa46c6b14fa8cbffe08d7a07ec0e0957b</anchor>
      <arglist>(const negator&lt; A &gt; &amp;l, const negator&lt; B &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>add7f1358f7386e5d8581c1626fb1662c</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, negator&lt; NUM &gt; &amp;nn)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a99032b17cb08fb80ff6bebf982bca5be</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;os, const negator&lt; NUM &gt; &amp;nn)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const complex&lt; long double &gt;</type>
      <name>zeroes</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a323b7fc26129703d1354cff7e689ae94</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaee1639f5a0a00bf2573d70004b67b7a2</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>ga8ad5cf5bb115ba42403bf0dc0b0d0f1c</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gac6f5da3ebcea806bf330d4fd9bc3a940</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gad7b0ce99500f5bd2a4453510fe9fca9a</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>group__isNaN.html</anchorfile>
      <anchor>gaf7373194d259de344e2309aae2a0bfbd</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gac0d324a6c102dda4b86fca1edebe3e7d</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga0ccfa30a271c9e4c5876adc2aa0c9de3</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>gad9048d49aea0e1f9745a445d550cfade</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga48a7c459a95e7850cad08c0edb105014</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>group__isFinite.html</anchorfile>
      <anchor>ga302faee5c1612479474d814735a2665e</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gacabcb83214c0501194b31493b26bf432</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga9b8125eb797a7f9f2da008cf37cb5269</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga0ccb492c19672dc6d3d621a94b6691d2</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>gaaf53a57b924c0459caa104f09aecef64</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>group__isInf.html</anchorfile>
      <anchor>ga844fea956d0bb225b506d5cecb5d53f4</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga7c26dcc1bc5c5edf388e8bd1675cd884</anchor>
      <arglist>(const float &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gadf7bf88379c8b3ac8780331b48d7cace</anchor>
      <arglist>(const double &amp;a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaae66686c14ae9276cdae653e0a1ff244</anchor>
      <arglist>(const long double &amp;a, const long double &amp;b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga979e1667fe5c1c296dcfff1ee473d0fa</anchor>
      <arglist>(const float &amp;a, const double &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gadce454298bbd991dc74c94d05350bc5d</anchor>
      <arglist>(const double &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga020d71563b487697a44467e6ba2cc89c</anchor>
      <arglist>(const float &amp;a, const long double &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga9d71c5eb1f8341f2404d1e28c0fc2e4d</anchor>
      <arglist>(const long double &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga7d1ef1b4c1fc6f4486fb072abd93d3d9</anchor>
      <arglist>(const double &amp;a, const long double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga2704923e9cf1b7f90b35ccced37a145c</anchor>
      <arglist>(const long double &amp;a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga77f2fe3542e889a2fc4045628c443e48</anchor>
      <arglist>(const float &amp;a, int b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gad0ef618f27d2b892752f98a6166b8c3f</anchor>
      <arglist>(int a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gabca7abd19ebf26721920b754b4e4f1d1</anchor>
      <arglist>(const double &amp;a, int b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga1903229cea7b917668fef94fbdf0ebf5</anchor>
      <arglist>(int a, const double &amp;b, double tol=RTraits&lt; double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacc953060e19024c6f91f0e9486dd12c3</anchor>
      <arglist>(const long double &amp;a, int b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gad1ef80164aa8b2df22058523de38a59a</anchor>
      <arglist>(int a, const long double &amp;b, double tol=RTraits&lt; long double &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga967ff1bda7788433fbb928b7fa2f98de</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const std::complex&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga88a722b6efa5b7947b4a28f801335b3d</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const conjugate&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga96dd91aeefab0deedb9df8338a7bca91</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const conjugate&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga74909a013adb53c9d039cd565f4efcb9</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const std::complex&lt; Q &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, Q &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacf5487884b6decf6bf6d248100d92545</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaa95b667ef0a8c5d0341e1470d82fc4a4</anchor>
      <arglist>(const float &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaeb1af6223f2c962fb567d715f71d8c4f</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const double &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga2677afff49bdde43b1234ff4641f26c5</anchor>
      <arglist>(const double &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga6f75d58a88cefe1dfdc7488035bec193</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, const long double &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga0e638731c37e5850fb169e4ecc399bf2</anchor>
      <arglist>(const long double &amp;a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga63f1b5e10d3fa0891cd5f420180a66b5</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;a, int b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaf6b16f8b92fd3889f24cbdbcd66af433</anchor>
      <arglist>(int a, const std::complex&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga5822d04dcdb3d7571a865732f3883017</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const float &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gabd5d29abf07dc71ad0b406edecd4b92e</anchor>
      <arglist>(const float &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; float &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gafccdeaef060eff8ccfb90109a6426cb4</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const double &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga3c971c0c8af5f492a60f68c2675fb7be</anchor>
      <arglist>(const double &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; typename Narrowest&lt; P, double &gt;::Precision &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga05d21766eea507c94930163e9361a69b</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, const long double &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gacc690db2d428932aaa3210b5e34c1ca6</anchor>
      <arglist>(const long double &amp;a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>gaf43e5d7a4ed140c265ac088fd8711ba1</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;a, int b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>group__isNumericallyEqual.html</anchorfile>
      <anchor>ga5639cdf06c68248ef08cedbe852525b5</anchor>
      <arglist>(int a, const conjugate&lt; P &gt; &amp;b, double tol=RTraits&lt; P &gt;::getDefaultTolerance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a234043183211cdef4c8030aa5cfe3c87</anchor>
      <arglist>(float, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4bc4e98e160a865873ceab3ed45abf6</anchor>
      <arglist>(float, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f8ccbc97ce5e50750c35e2af6f486f4</anchor>
      <arglist>(float, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a16bc3a4e24da22812260ca858088999a</anchor>
      <arglist>(double, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa291e5a4ca9269119354952aad3b8b8f</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad2f8f61f8e0c4452ec5a9c2f25940228</anchor>
      <arglist>(double, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4df3f14f25eea11e5967b3ba5a62ee70</anchor>
      <arglist>(long double, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab3c21698a68a1e1562d5670a3b66d11a</anchor>
      <arglist>(long double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_BNTCMPLX_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a860031e8becaa517db1dd87fb59c8c8f</anchor>
      <arglist>(long double, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b4620a8439d1d3d1b90c0b2a9eb2b62</anchor>
      <arglist>(float, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0c229fb5fb0c8d9f7d4a0a5a291ecf39</anchor>
      <arglist>(float, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02c70fd054004224d904c1a49672b994</anchor>
      <arglist>(float, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aacd5aeafd14ecf677b03062f94ecbcf1</anchor>
      <arglist>(double, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5405ca9104f27ac5e77e5678d8f1233f</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2b0b0d9f91ac11f80529d3d7e3fa791c</anchor>
      <arglist>(double, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a665d3f4f29d5d7ecdfca5b8afb662550</anchor>
      <arglist>(long double, float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92187ec6772803ed0690cac45567464c</anchor>
      <arglist>(long double, double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_NTRAITS_CONJ_SPEC</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa5abefe4c250cfab450450cd4974651c</anchor>
      <arglist>(long double, long double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_REAL_NTRAITS</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a681f046ee7b18722d98f716e8097a9b4</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_REAL_NTRAITS</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aee777bc11b615a88a4d92b8cae638715</anchor>
      <arglist>(double)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_REAL_NTRAITS</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac5e22fe5ecab290e04ea349158ab3e37</anchor>
      <arglist>(long double)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>gaab0e407d56a4bd1a5175de7d4c0a87e0</anchor>
      <arglist>(unsigned char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga62f4eea2278bf4e48973d475d1161964</anchor>
      <arglist>(unsigned short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga8c03f6de17db6a7190c1f6c618f4689b</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga484cd174243857a5c633304c78d031e0</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga07b5ee52eae77d64dc117f4959d1fc85</anchor>
      <arglist>(unsigned long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga4db180a4bf0bf8505c09500f4b184c9d</anchor>
      <arglist>(signed char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga563f8bd175f2bccb072aa050ad47d3c7</anchor>
      <arglist>(char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga61164b0e7ebc0a75062300e259f85313</anchor>
      <arglist>(short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga3d39edaff8ba7ae940f560907d9052bd</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>ga64d0b90c9dfb3cb5d2595a98231f3797</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atMostOneBitIsSet</name>
      <anchorfile>group__atMostOneBitIsSet.html</anchorfile>
      <anchor>gaa7994e0e869072e2659b120c99dd09cd</anchor>
      <arglist>(long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gac76109f5344f0691b476efe3645523ab</anchor>
      <arglist>(unsigned char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gae0087ce107cb4028259b14091cec88f7</anchor>
      <arglist>(unsigned short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gaccd513f711e273c7e0be226318227329</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gadaa62947ec9a188bb0c9ec5aa08371b8</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga0f073d547b00f2d111c1b6332f7f3181</anchor>
      <arglist>(unsigned long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga8e0346679d22cf82aa17cc3a0014ebfa</anchor>
      <arglist>(signed char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga18fe61a58e874c63d83ce3c3f5076288</anchor>
      <arglist>(char v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga2914211ecd30c8293155cd381d1019fa</anchor>
      <arglist>(short v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gad6ee352772340f22238cc94599e84328</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>gaa58b6930350ab34984459349bf61659f</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exactlyOneBitIsSet</name>
      <anchorfile>group__exactlyOneBitIsSet.html</anchorfile>
      <anchor>ga717a63fd7fbb17b46824d0e2cb4ccfbc</anchor>
      <arglist>(long long v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaf0dfe08c6d691cc620c6df88c3a7e9a0</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gae73884823dfda8eb948890de1cc2655b</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaa32db09c5cf51fa910bb968c808984d8</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga555ecce97391793759a227861832e3cb</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gad85acf57b04b2e28367dd3a9bd7fe409</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga3d556ab4786ab31913f4a0abfa44b028</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga43db802dcdf3928727c270a9e6592dcd</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaddaa112934f351dd061b1a9bd7a1cc7d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gaa44e576e3291255349c832663f2db90a</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gae43872b0ddafb57a97c84e7ac150e737</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga0034dfbc57b1e6f83da8d4295c1faa04</anchor>
      <arglist>(const float &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>gada0a2c6ca0d3ff0d0f60b844bd5b34d5</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga4cfe5969509c55ef89a5adf1bf2cdd0e</anchor>
      <arglist>(const negator&lt; float &gt; &amp;nf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>signBit</name>
      <anchorfile>group__SignBitGroup.html</anchorfile>
      <anchor>ga467ec306ca041073f04ce50c08e99c53</anchor>
      <arglist>(const negator&lt; double &gt; &amp;nd)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga786583adbf125e25a5b0cf631c76fb0d</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaec46f5b92fa307789ada163451f81363</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga8fd13ddb466a566bfa70c65d4aa17b7f</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga0f2211d550c517a8887c7491e5bbeb63</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga4a2c3742f2cbc4966962e6ae60e2c2a1</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga973f8b9310bf02364e2a036d70dfdd5a</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaf206e1f8f0cddd75cb2d4220fc8d72ac</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga606c6a8ea497b867695c8776221cf20a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga1bfef2569ba98a05266c874c99c7bd18</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gac3ab8baef006c89b6f816b10409e40c0</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>gaace4a43ab242cdb0ac5e25f679868235</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga2c17a68e95cc56f311688a5a30bfcc8c</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga1fbd99a509775a30189aa07d032d4f31</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga845ffea71c0e22b4087b1f564147d47e</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga4a2cf9811e5daf2aef80e76218a8a4c4</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>group__SignGroup.html</anchorfile>
      <anchor>ga751524e09aceed18d9cf5e24aa03a82d</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gac143407eb9f50070a3c4d5515eb5c965</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gad600a0339eadb00fe136ae2c37506c2f</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga49573a50afd1c2b199c29664a0596ec4</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga6c9fe7826b9dc8c192e8d7d70081bb6f</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga63e2ddff4824bdd6161734098b576d80</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga70395ffc98edaeed65ce37bf90960e7e</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaf09785ab09e7ebdd6db6db9633a00ce9</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga5be93f7c23e10c18a835b654d3d2c774</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga405566a25e69c550a410305afeda205a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga081d1813ae8cf8969987a9da343db000</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gac9658dc99d0099a67593464eab83d74a</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gab9a8435cce97be4c3bd36ba6b6f124f8</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gadaff15a8e575dcd4798f53f897910cda</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaf50e21dd134553b2accc2be42f3872d3</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga6619767dbef2cf8fb747b73bd23d9b7d</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga28fc1785b7244e9eba48848309dfe8af</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gacc693aa1293e11ae4576b1cb20401d09</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga47961dee5d4a488f776db1a09c6578eb</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>ga738eb9e1ee02f29b8605b5d066f66943</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gaaf3a7082c137e5ce40e220c67d302b9a</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>square</name>
      <anchorfile>group__square.html</anchorfile>
      <anchor>gafa8058475cb7b2be36d9beb406459ff8</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gafa5cf370fddde320439c9e579f2e69c0</anchor>
      <arglist>(unsigned char u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gae56f27a41f3834ba5059e780bd6129f6</anchor>
      <arglist>(unsigned short u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0b2aee7ba11e5b8b9fb283b60f4b843a</anchor>
      <arglist>(unsigned int u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga965fc0c5aaf300eb851ef4f96b6cc7d1</anchor>
      <arglist>(unsigned long u)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gad70f58c4813eb8c01b731315aa0c24cb</anchor>
      <arglist>(unsigned long long u)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0ba5f2c7916164123f94e0d28bfa8e3d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaec29e36ee2beb451dee208eeff16e865</anchor>
      <arglist>(signed char i)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga3ecd49be48551ac475ea05c61d2698d6</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga74d6f6909c8f66c4ef9db176c6dec71f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gac5208cf80778b15ed46a00cd6e3bdbb7</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga2a90acde51ec8be5e3f9a86c46577420</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gad0829b03a63357870489980e1d79637e</anchor>
      <arglist>(const float &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga6b275a5c915bff6361c7db3707d64a38</anchor>
      <arglist>(const double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga847c9d1292b67f40a7140aa4a14705de</anchor>
      <arglist>(const long double &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; float &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga241f0e1c93a693e1f6bf2d61b0dae4ba</anchor>
      <arglist>(const negator&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; double &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf3e046c6392ce0e356b607114923c3c1</anchor>
      <arglist>(const negator&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; long double &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf459e091022bfbd9dd8a81ef0c18df70</anchor>
      <arglist>(const negator&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gaf79a6b9c41ca47d7773e5d649dedf4ea</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gac9eb65bcf008c30d5a8a467b31ec77fc</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>ga0fd9376142ff7b7311894d4897dfb78a</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::complex&lt; P &gt;</type>
      <name>cube</name>
      <anchorfile>group__cube.html</anchorfile>
      <anchor>gae678ce7fdb8ca65fbb92ea91fcd77448</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga38acaf38212d4fb838326a2c4e69f97f</anchor>
      <arglist>(double low, double &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga32271fe67c0bf4f3d490a0d46a806adb</anchor>
      <arglist>(float low, float &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gae8f763d2bf781401574af0aed1bb2ce5</anchor>
      <arglist>(long double low, long double &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaed97ca53e54f65ab22e370ac74b51e9d</anchor>
      <arglist>(int low, double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6a99bd4d62584e04224666128232cadd</anchor>
      <arglist>(int low, float &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gab6a312a43690f2bb79c9b8468d719f63</anchor>
      <arglist>(int low, long double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga1505848f16f29e7d3e6449c1f39d0d98</anchor>
      <arglist>(int low, double &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga05c4d3d3d9c9fceb1d645932d8792dbc</anchor>
      <arglist>(int low, float &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaf5d01d5392488e9fe8285e59de05ae73</anchor>
      <arglist>(int low, long double &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaa7597fd5748c3e144dad166599d66ad8</anchor>
      <arglist>(double low, double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga7963d262e91121c1e171aa97b821fef7</anchor>
      <arglist>(float low, float &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga535d323f9e12510d90a06a01079a3efa</anchor>
      <arglist>(long double low, long double &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga2e894f541bacd8638402cc232ba98d26</anchor>
      <arglist>(unsigned char low, unsigned char &amp;v, unsigned char high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga160e7d29a6348c0689aa9be35d693110</anchor>
      <arglist>(unsigned short low, unsigned short &amp;v, unsigned short high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaba7ec36b5447e5d925148796881b8398</anchor>
      <arglist>(unsigned int low, unsigned int &amp;v, unsigned int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gae2928da8bf9b2ea0003184bb5144d637</anchor>
      <arglist>(unsigned long low, unsigned long &amp;v, unsigned long high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga095f20cb4669015230bd2b02d2c7aab6</anchor>
      <arglist>(unsigned long long low, unsigned long long &amp;v, unsigned long long high)</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaa2d484f7b27def905846f14ff28145d2</anchor>
      <arglist>(char low, char &amp;v, char high)</arglist>
    </member>
    <member kind="function">
      <type>signed char &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga0e862150746577f69e538855598dc17a</anchor>
      <arglist>(signed char low, signed char &amp;v, signed char high)</arglist>
    </member>
    <member kind="function">
      <type>short &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga11f19fe11fb1ced367d555549188e15d</anchor>
      <arglist>(short low, short &amp;v, short high)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga11a76b944d0652ded4f098311a1c2c66</anchor>
      <arglist>(int low, int &amp;v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga3281fb2a9738c44470ec47d5ae0b0e07</anchor>
      <arglist>(long low, long &amp;v, long high)</arglist>
    </member>
    <member kind="function">
      <type>long long &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga27d8afe412c619ce300ae94d743f0ece</anchor>
      <arglist>(long long low, long long &amp;v, long long high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; float &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga756e5fea80a3ac704feac9936e84dbde</anchor>
      <arglist>(float low, negator&lt; float &gt; &amp;v, float high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; double &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gacd8df713052ad4185be0490401f629ea</anchor>
      <arglist>(double low, negator&lt; double &gt; &amp;v, double high)</arglist>
    </member>
    <member kind="function">
      <type>negator&lt; long double &gt; &amp;</type>
      <name>clampInPlace</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gabb56b4e37d5a269cbc54dea6405da68d</anchor>
      <arglist>(long double low, negator&lt; long double &gt; &amp;v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad5b547e81ba85c63aa9c0553fbbf5335</anchor>
      <arglist>(double low, double v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga4ca449d5ed49355fabd28e80e3e25d41</anchor>
      <arglist>(float low, float v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga8b099a7c224220c04f872e04219c7960</anchor>
      <arglist>(long double low, long double v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga848bc31512347475fb342e9d5ac26890</anchor>
      <arglist>(int low, double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad91e612f3dcf013d5ca499ccd2deda90</anchor>
      <arglist>(int low, float v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gada23a7ca4a2e33bbb7f2d9cc13b5250e</anchor>
      <arglist>(int low, long double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga27505d0bc9a87fcde76fe18ae05dfb35</anchor>
      <arglist>(int low, double v, double high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gadb5cbc68653901401f0de7511f591b32</anchor>
      <arglist>(int low, float v, float high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga31e84eeefbf1d7f80de546a11e9c9720</anchor>
      <arglist>(int low, long double v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga4149a5c786becc7e8eec912a1c60b084</anchor>
      <arglist>(double low, double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga9ffc0523268d588d3792ca6fe9aa88a4</anchor>
      <arglist>(float low, float v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6720f04175e96eba698e1147a1092a7b</anchor>
      <arglist>(long double low, long double v, int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga71e2dbdcd20e99bfb78dbd94b598a075</anchor>
      <arglist>(unsigned char low, unsigned char v, unsigned char high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga7cf3b76f17a9012188a63b75a2bdd4af</anchor>
      <arglist>(unsigned short low, unsigned short v, unsigned short high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad36b8843067397b5edc2f59cd4d18618</anchor>
      <arglist>(unsigned int low, unsigned int v, unsigned int high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gaefde149ba9a39405afe4222fd039d59d</anchor>
      <arglist>(unsigned long low, unsigned long v, unsigned long high)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga28cd5fb2d6410807f583a1c28ed5ad01</anchor>
      <arglist>(unsigned long long low, unsigned long long v, unsigned long long high)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga28f89f549eb0f6575228cb79e6da8fec</anchor>
      <arglist>(char low, char v, char high)</arglist>
    </member>
    <member kind="function">
      <type>signed char</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga25d1257803a0544b7aa233ac0faa2d75</anchor>
      <arglist>(signed char low, signed char v, signed char high)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga6d5ce438dae88203a4a4ca87c813ae13</anchor>
      <arglist>(short low, short v, short high)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga09ee0735f3bc52ba2b0a6982f137af4a</anchor>
      <arglist>(int low, int v, int high)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gac6010391fc613826bc9942f97e9cbfa0</anchor>
      <arglist>(long low, long v, long high)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga89c5c4b67fe2c880e885abb0da9d85ba</anchor>
      <arglist>(long long low, long long v, long long high)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gad94920536c62d103820648e3fdaa5283</anchor>
      <arglist>(float low, negator&lt; float &gt; v, float high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>gac17d0411f41184d590c2bf46eebacd8a</anchor>
      <arglist>(double low, negator&lt; double &gt; v, double high)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>clamp</name>
      <anchorfile>group__ClampingGroup.html</anchorfile>
      <anchor>ga5a4eee2e10d69a23c246c151649baf74</anchor>
      <arglist>(long double low, negator&lt; long double &gt; v, long double high)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga14a6901ad8aad0dac8f03d70768abfb5</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga2c088639b4bf4910fd64849b4ce8d549</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gac48fb0eb6ecaea90f2a32686a1140063</anchor>
      <arglist>(double y0, double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga6694140703d29efd3912ab8e7ddf7b25</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga5ffb459aa21e5131d1c2f81e359dfe56</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga551e174b41808913f351de991c9a03e5</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga5fb901189730c407eb64402efed53275</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga53d2cf758da9d987869aa64134f26b88</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga74cdf7a402da5698b8fbeffb3d46fe13</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf05c46288d5dcb2db0fe22f816cbff2d</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga86266927fa9cebfc043954077237521a</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga329b7ee352b6ba21e80bff31c652e40c</anchor>
      <arglist>(double yRange, double x0, double oneOverXRange, double x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga69bf07fe0b7db1b05fa12d48adf2e513</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga1f730a1e82a7dfc5ad559dd76b6e1f14</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gadd405e8dc4f21e8ff88e4a43888313fe</anchor>
      <arglist>(float y0, float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaded4bce1c3073f50ed96835360d79a3a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf7706f10a835de34a3b2cccf4c190068</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaf0568c0bbb40c9b7e0bb0d0996d714e9</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gafc1cbbea49839a2652059f245ea9d04a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0ec1ea01005696e81013c229ae50ef02</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gabb01c6e73f34e8a52f3c24b179833ee9</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga9a7f67772ae290241d80dcc809c66db0</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaaf7f6fbfbbc77e71d952e28cd01270f3</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gad078c8dbae339ddda704f2bf1bf31e82</anchor>
      <arglist>(float yRange, float x0, float oneOverXRange, float x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0583e311bbf92765c170802cfb34d017</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga0b9eff2cde8c6bda47769b6766f07d16</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga91d776c0527661c940a4b618e292cafe</anchor>
      <arglist>(long double y0, long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gaeb5be572b4463129cc6ecf8204dc7d7e</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gabc970e7fe869b7c5ad8eb5f4a4703165</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>dstepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga34f9bebc6e1713116598a3b280a34de5</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga87a887b27493a49eca816aca3882940a</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gafe3f101eb9e9b0f3d2fb3ce03b4961ea</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d2stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga4c90dd31876e0bd340b3ca6fc3ea6961</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga98892af5388ae43bbfdacdac17e90aa6</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga4aa9e45c1570ad99b733fb25ac77266b</anchor>
      <arglist>(long double x)</arglist>
    </member>
    <member kind="function">
      <type>long double</type>
      <name>d3stepAny</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>gadc4e15fc875e1360d4e3d382e838c278</anchor>
      <arglist>(long double yRange, long double x0, long double oneOverXRange, long double x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepUp</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga247753566adef0968093b7d5f8fdc719</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stepDown</name>
      <anchorfile>group__SmoothedStepFunctions.html</anchorfile>
      <anchor>ga684b164e95e7f86ba68907fe9df4afcf</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga246d464967507a1ba843c2d3bd0d4482</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; float, float &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gaa6033fa6333e444418ee159dffa39127</anchor>
      <arglist>(float m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>approxCompleteEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gace92d2fd5a890de2aa211d589da1a5b7</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga7d13984ecd931506e33a8c935343b1c3</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; float, float &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>gafa4381144fc4f46d28587628e845f44f</anchor>
      <arglist>(float m)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, double &gt;</type>
      <name>completeEllipticIntegralsKE</name>
      <anchorfile>group__EllipticIntegralsGroup.html</anchorfile>
      <anchor>ga749807654459c2fac9a8f61bb679b2d5</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a99b43b75cf283cbf54151e33ecd77bb6</anchor>
      <arglist>(EventId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3bb68c644ac71c61ea30609cad4adb98</anchor>
      <arglist>(SystemEventTriggerIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae0dbdb1f02717c1ea9c2bd2d41f88d47</anchor>
      <arglist>(SystemEventTriggerByStageIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afa825c4cd4b5441688a57913b9534467</anchor>
      <arglist>(EventTriggerByStageIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae3e71d3b697a3a643bc88762b200f0a5</anchor>
      <arglist>(MeasureIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4e1bb48fd2dc833588bd9a492606204a</anchor>
      <arglist>(std::ostream &amp;o, Stage g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92abdecc386c237a2fbdb8219af569fe</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a21667be01e76a213df61d8ef13eabf93</anchor>
      <arglist>(SystemYIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa7384bd539ea8995df16a289debf4269</anchor>
      <arglist>(SystemQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a10983692c8e929b8414399782ca11027</anchor>
      <arglist>(QIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a245dff683d21a0d39c8d746d5877fd2e</anchor>
      <arglist>(SystemUIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c19a9477dffe37ee5454a67801073aa</anchor>
      <arglist>(UIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a898f6b38b59ea73204daabe5ac202da4</anchor>
      <arglist>(SystemZIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad9387aed416461d4a1c43c42657d1ee6</anchor>
      <arglist>(ZIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a53c7aec347ab928bc3ae0a73e152fe2a</anchor>
      <arglist>(DiscreteVariableIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0bf087f3bf676cdc888a8bcdce252016</anchor>
      <arglist>(CacheEntryIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aabdf5f89fda7343dcfa50f85b3e969d8</anchor>
      <arglist>(SystemYErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac99486de40e45a7fa99d51919879f159</anchor>
      <arglist>(SystemQErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e34cda391a7e56d9097bcf787302caa</anchor>
      <arglist>(QErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a36c9c97a389f369a1be394eca9ca9e26</anchor>
      <arglist>(SystemUErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad73614a334a347f320b6f1da93b8f1ee</anchor>
      <arglist>(UErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab45d1ed48bdd2e4c47a5a0ee5bd63978</anchor>
      <arglist>(SystemUDotErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a26f84029e2d001101adf7a4d20220e33</anchor>
      <arglist>(UDotErrIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6cac6522a88ab19777253af4385a6a5d</anchor>
      <arglist>(SystemMultiplierIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a28eda1e0ae6904141f6da0ce01af7273</anchor>
      <arglist>(MultiplierIndex)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a40ffaf82a8a4037d39dd8adb16ad8e5c</anchor>
      <arglist>(std::ostream &amp;o, const State &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, EL, CSL, RSL &gt;::template Result&lt; Mat&lt; M, N, ER, CSR, RSR &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab443405b060faa7b73fa04bf49fd085e</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; M, N, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, EL, CSL, RSL &gt;::template Result&lt; Mat&lt; M, N, ER, CSR, RSR &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a84c0554f218e063f87b3c5d1336dca08</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; M, N, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, EL, CSL, RSL &gt;::template Result&lt; Mat&lt; N, P, ER, CSR, RSR &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad6cef592972f44cd3ba801b5ff34c84a</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; N, P, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, EL, CSL, RSL &gt;::template Result&lt; Mat&lt; MM, NN, ER, CSR, RSR &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a94c2414499cd5e62bc586c8b00ef13c9</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; MM, NN, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a96088123fe12288813483dbdc94fa0c7</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; M, N, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeee470bb4b97b340d6379d6fe1750135</anchor>
      <arglist>(const Mat&lt; M, N, EL, CSL, RSL &gt; &amp;l, const Mat&lt; M, N, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a325ad807a2ead6ed2fac45e55e0d8fda</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a95ca052c62bcf97ed5f94654bd7a3fa2</anchor>
      <arglist>(const float &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a681073ab4d4b0c4c11a98be8512bc5f4</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b1aa81711108a0967a1b26d6591a197</anchor>
      <arglist>(const double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acee54da53f534c8c0f8de0c15796e229</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aee98849b6975d70b4a7713cbc8f42173</anchor>
      <arglist>(const long double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a16e9ba42908d1760d0ceee65104d31b8</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a17f449696aa7da8160fb00f1c6f8f540</anchor>
      <arglist>(int l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1e60a3838311003b3286625941a84133</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8fbf3414ad049b459b7ac649d417d64b</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9f56dc0553f5f8e385ce217a554cb27c</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4079d97c8eb529eb58dfda6c3fdbdfc5</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af15dd658d476089df53d3ccc79e8817a</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af853b071d98aab62edb892150a0d6b1c</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab3ca5badb6b70371af42636e91101f5a</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09524995acccb7a4377da57f551654ab</anchor>
      <arglist>(const float &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3c5164f668b8b984eb4f65976b3f04d9</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0c6e763348da08cbe959f91e7a767ea7</anchor>
      <arglist>(const double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4aa59686c694083bc6c6332e50e2c8e2</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afe0c5f8506d7673f0bab16264f20ddcf</anchor>
      <arglist>(const long double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a015b74f62071acf29c8728c4186c1658</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a809b91dad835da6af1ec1a14f9fa927b</anchor>
      <arglist>(int l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a28b2a4d7fe3ce9c697b05368e1f95d</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acc0c5c34278c4ddecb3c73e64ddc9416</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5ecb428cecf295283ca162800cd95c98</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f0cb64a86cac327874a49206b9265c3</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4e4a86aa66ef0d5230d0c05606ca6276</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeac059b03ece75b26ceeab71098cec48</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afd00ea93ee023d264e2f7f629d5e595a</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afa2a47a48dc9ea813e75f6a5d89cb456</anchor>
      <arglist>(const float &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8398371d7f2fe66a30ca579395e5d67f</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8141b913e6c729695f0a4d80ab80c80b</anchor>
      <arglist>(const double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7fe9dff365c3c72cfb8cfa07951c45ea</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2890157a34365fd26d40697cf6e48949</anchor>
      <arglist>(const long double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab1042e8ffc45d27e99456a9525f7fe03</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0967ebd638bfb26c015129fcf7ab3818</anchor>
      <arglist>(int l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93d3bfb445e9c6516b46a67443eeb6b4</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2ff024a4d1f094a32c186c9bb84a51a9</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4b1d811edbbfdf40b075273876ed7221</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b204f424d103ebee07b9fa0260f578d</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aae5c470f2079133c5ee2f0e6f0556dee</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa4fecac66786889ff3400fea48ae320f</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; float &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7beb5ce8f77613cb7c9fccf6300a9bab</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6b07d11e6f530bfe77928247a34ba88d</anchor>
      <arglist>(const float &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c7732ccc22449d0e7848c34acc26ee7</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad45cda2de54c04e5c736d1caa9582693</anchor>
      <arglist>(const double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; long double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a401e365520f22a3956dcf94926f6550c</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af300d5053654a8a44e9f78c428debc11</anchor>
      <arglist>(const long double &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6e1f234d26d3ab910a5d5b6e3a99cd6b</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a415bcbc6ddf2b860375e468a1b418a7c</anchor>
      <arglist>(int l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aafe5a91f578297ba9711089a4719692f</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d7df9ade89e03b98d8e6c26462569a0</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac39d3d76e436846a558b3de2d7e1c38a</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09e695b34665dd29ff694b208b269fb9</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E, CS, RS &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a85bd4aa2bd6bcb0593c6bf81035e0fa5</anchor>
      <arglist>(const Mat&lt; M, N, E, CS, RS &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Mat&lt; M, N, E, CS, RS &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ade566dd7aff6ed41f0a3692f64e1ff86</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Mat&lt; M, N, E, CS, RS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abf8a923ce5ce85ac3fddbddd1c5df70d</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const Mat&lt; M, N, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aff8b18bcf3e60c2e030028faedc9c5b3</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, Mat&lt; M, N, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E1, S1 &gt;::template Result&lt; Row&lt; N, E2, S2 &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b8d70e3fd4dce576e27b084dadcac75</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E1, S1 &gt;::template Result&lt; Row&lt; N, E2, S2 &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a836ea4532666631d900934828257d929</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad82902fcb72a6d72cf360fccbc2fa856</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a32aa8cbb38233718a76d6c1541fc70df</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a96e9ff9eafabbc9dce71d3965fb44a85</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad13f9ebbf2b7be19f7e2ab826c1ce758</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5ccd5a2794e529c57597ff59419e3b8d</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a150dbf19974be4334beda5574505adb3</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a34458ba652227f4e1c1f4d2d4cdfefe4</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7742b13e6140d0ceb5fce8cb3ae60208</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aaaa7f3ecb83f7d1b95d91ee8e34d8f9f</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;l, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04199e5b03042b6b332697aa5e3c860c</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af9b8113dcf8e4756451bc3b0d33c23de</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad78d87f2237de19d1685e729a98e5ddd</anchor>
      <arglist>(const float &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a80b4184bc7401ce4a5b202740d1bf860</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f8339d48b9818d94559c4cbb356c51c</anchor>
      <arglist>(const double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a861242e8ca7fcb64c7849bfa46648ec2</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad978ff747450f3c0695c6d96023f7d67</anchor>
      <arglist>(const long double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3ed619c454faa4f13e4a135aecffba7</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02bfbbcc7a312d26763bfc5cbf87d3d0</anchor>
      <arglist>(int l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a754ea9bc297db2fc62e74e29200718b4</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ade89aff78787f0d51edf4d78ec672716</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a78562c42712b1c2e942ca3f8c5bd14b0</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af143a050cd20b48bf6f243ffd194af4d</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad59e0788edb9919e556b5ff217462c5b</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae7ac41a3955533c21541dbe9f89e9a52</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a09d7eed2497e53dbc4a52db2d4f8b05c</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae98d2bf5e9c822b28f94a553338e9406</anchor>
      <arglist>(const float &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51485f2d86fd12ce01f7993563d82178</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7e781fc2e094093e38956bfccf578c91</anchor>
      <arglist>(const double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4695993f2589e251cbe4f94343454023</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3be46003a22e45615bbf3cd99efafda2</anchor>
      <arglist>(const long double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4fe5693451f5a90d285f5db01f948a00</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aba7198f8ad4be387512286b6f282df96</anchor>
      <arglist>(int l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2c71a64a8e448541e2528436f76a439b</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a22ac0531922a53c3cd345e6d247a0eb6</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab8fec1dbf2cc174920ccc250c51d6a46</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a07b11417259d032dbac219088eaa1d15</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa395297d2e2a02ffbc42ab73695b82fb</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12b1a77eeb93f6a35d1e4b67c03d6575</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1dc420e8bfe8627acbc5f78913d5aedb</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec18564fcda86fed618473087c2e92d0</anchor>
      <arglist>(const float &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8fbbf7a462d2810846d34777a1788e93</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a587ffbc20d7cd589c428e119ff4d9d65</anchor>
      <arglist>(const double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa745ac182744fc8607b22acd528d2885</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afcdedd68a3e3417a61251df690823845</anchor>
      <arglist>(const long double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa06f7226673d6ce6583d351e4ccda591</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adea776d1367a244e0e50717529cbe987</anchor>
      <arglist>(int l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0bc1c0280a0f1868edde61dd86d5b480</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afc5b7ca1f02d05cf55353bcb7e632053</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0244d71291b85fdea239c7a73586fa88</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aaf9454b3e07a5741a6513fc7e90a8928</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92a0c5ceb10f9badda20bc5c82e534ee</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acb1573f7b7143f9b08dd87a27ff83b96</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; float &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad90376ffb4b2a46e3aaadd859a7aee49</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb4f16fa447341b48874ea215909a941</anchor>
      <arglist>(const float &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2d2b73fbcd077129eac3e06feaf9160a</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a229f61fc3c3400d76101c398cd94ad82</anchor>
      <arglist>(const double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; long double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7f8280a19de650584bed5cd3de9d51f1</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a573e640f8c0aef233f2f77f87c174e44</anchor>
      <arglist>(const long double &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1704ad4b6d269a4ccf7cb192998cbd44</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a139709818ede6ba0f4c098f7aedfb6ca</anchor>
      <arglist>(int l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a38513830400aaa78a63cb3941e52c5b2</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acd5a8d5387d2e8aff403734e3f5d0faf</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae63c11a343d6632b56bfb4689ba1c71c</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e9be51ab3330a8324c00aba96052cbb</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4ff273f04372cef28aefb3f57d55cede</anchor>
      <arglist>(const Row&lt; N, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Row&lt; N, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7ec098096fe6adcffba09796b04ed259</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Row&lt; N, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acbf4fb3509a0ed0d0d80829c413ace17</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a94ac775a450de4c8c2a5f4902bde8697</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a75379f49fd6af1682f606ad411ec8393</anchor>
      <arglist>(const Mat&lt; M, M, EL, CSL, RSL &gt; &amp;l, const SymMat&lt; M, ER, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1970393213a5c32ce8bda35ae3ee3fbe</anchor>
      <arglist>(const Mat&lt; M, M, EL, CSL, RSL &gt; &amp;l, const SymMat&lt; M, ER, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4857b052061c84efcda150905d284204</anchor>
      <arglist>(const SymMat&lt; M, EL, RSL &gt; &amp;l, const Mat&lt; M, M, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae52af4682f8c404da8a7477cc01729e0</anchor>
      <arglist>(const SymMat&lt; M, EL, RSL &gt; &amp;l, const Mat&lt; M, M, ER, CSR, RSR &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E1 &gt;::THerm &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeecdb84ae3713aa35d307a67e50890d6</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;r, const Vec&lt; M, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E1 &gt;::THerm &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab95b89b131a70c33a03c0e0887dabb38</anchor>
      <arglist>(const Vec&lt; 1, E1, S1 &gt; &amp;r, const Vec&lt; 1, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abee1e485fc7f96da573329ddda4c65ab</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r, const Vec&lt; N, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7b7a61b8002e338cf3b86916449f6f6d</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r, const Vec&lt; 1, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a744cb8af6066ebf46933eb58b0f78dcb</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r, const Vec&lt; N, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9547b8c08dd46d69d09928e8ac68cb74</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Row&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>dot</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76633d85122ef9933db08a913cd3ca6d</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r, const Row&lt; N, E2, S2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E1 &gt;::template Result&lt; typename CNT&lt; E2 &gt;::THerm &gt;::Mul &gt;</type>
      <name>outer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0fd293cad29bd6fa0405ccffca69c738</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Vec&lt; M, E2, S2 &gt; &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Row&lt; M, E2, S2 &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3f15d558e93a904c1ff95720b83c6cc</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Row&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>outer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae2010318b4310afee21637d28ab39de7</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Row&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>outer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a629ac30932a3d0ec3ec52f6621c86d7f</anchor>
      <arglist>(const Row&lt; M, E1, S1 &gt; &amp;r, const Vec&lt; M, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>outer</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a78b5f52c9509808764b3c5d4cc911bf4</anchor>
      <arglist>(const Row&lt; M, E1, S1 &gt; &amp;r, const Row&lt; M, E2, S2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ME, CS, RS &gt;::template Result&lt; Vec&lt; N, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a44d387292a36bec995b2f5d244e4a6b0</anchor>
      <arglist>(const Mat&lt; M, N, ME, CS, RS &gt; &amp;m, const Vec&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; M, E, S &gt;::template Result&lt; Mat&lt; M, N, ME, CS, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a135678cf4336bb8834ac9702ce8ab49f</anchor>
      <arglist>(const Row&lt; M, E, S &gt; &amp;r, const Mat&lt; M, N, ME, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; N, ME, RS &gt;::template Result&lt; Vec&lt; N, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a00c25c73c1bca68e661d8d9b8b97ff25</anchor>
      <arglist>(const SymMat&lt; N, ME, RS &gt; &amp;m, const Vec&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 1, ME, RS &gt;::template Result&lt; Vec&lt; 1, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adc6291ef4ee348052d91d6dd9b66d617</anchor>
      <arglist>(const SymMat&lt; 1, ME, RS &gt; &amp;m, const Vec&lt; 1, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 2, ME, RS &gt;::template Result&lt; Vec&lt; 2, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac293d389b2e0ccd98f8a2d7eb1ab1391</anchor>
      <arglist>(const SymMat&lt; 2, ME, RS &gt; &amp;m, const Vec&lt; 2, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, ME, RS &gt;::template Result&lt; Vec&lt; 3, E, S &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5aee6204a61bc06c2138cf41ff2db7a0</anchor>
      <arglist>(const SymMat&lt; 3, ME, RS &gt; &amp;m, const Vec&lt; 3, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; M, E, S &gt;::template Result&lt; SymMat&lt; M, ME, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af0dfe5368d0f6fb1ffb82b61a20756b8</anchor>
      <arglist>(const Row&lt; M, E, S &gt; &amp;r, const SymMat&lt; M, ME, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 1, E, S &gt;::template Result&lt; SymMat&lt; 1, ME, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad8847f69f13bee64edd72f371a68a3c3</anchor>
      <arglist>(const Row&lt; 1, E, S &gt; &amp;r, const SymMat&lt; 1, ME, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E, S &gt;::template Result&lt; SymMat&lt; 2, ME, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a682949b6b73d7ddef52a5b1bd30d61f7</anchor>
      <arglist>(const Row&lt; 2, E, S &gt; &amp;r, const SymMat&lt; 2, ME, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, E, S &gt;::template Result&lt; SymMat&lt; 3, ME, RS &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6bb65df1eabb5142850ec44fb9b9d311</anchor>
      <arglist>(const Row&lt; 3, E, S &gt; &amp;r, const SymMat&lt; 3, ME, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Row&lt; N, E2, S2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac952206f1dcd27cd57febaa7b84bca2e</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Row&lt; N, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Mat&lt; MM, NN, E2, CS2, RS2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c5bb315e7d335e2094a5ec8eb9117c0</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const Mat&lt; MM, NN, E2, CS2, RS2 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; SymMat&lt; MM, E2, RS2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae7f393fd40099ef2670893fbb07ca791</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const SymMat&lt; MM, E2, RS2 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Vec&lt; MM, E2, S2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a181f11b50fb018d0dd24254e5d2ba635</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v1, const Vec&lt; MM, E2, S2 &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; M, E, S &gt;::template Result&lt; Mat&lt; MM, NN, ME, CS, RS &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae8e8b8e33c9df8cd25f1f0d39ac102f0</anchor>
      <arglist>(const Row&lt; M, E, S &gt; &amp;r, const Mat&lt; MM, NN, ME, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, E1, S1 &gt;::template Result&lt; Vec&lt; M, E2, S2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8d7f83b93fbc03454829ad2b65cab354</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r, const Vec&lt; M, E2, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N1, E1, S1 &gt;::template Result&lt; Row&lt; N2, E2, S2 &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4bd44708c8ecce1aa416da747baf8273</anchor>
      <arglist>(const Row&lt; N1, E1, S1 &gt; &amp;r1, const Row&lt; N2, E2, S2 &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ME, CS, RS &gt;::template Result&lt; Vec&lt; MM, E, S &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abf4925f4ed2ccaf81eba57e857e8885d</anchor>
      <arglist>(const Mat&lt; M, N, ME, CS, RS &gt; &amp;m, const Vec&lt; MM, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ME, CS, RS &gt;::template Result&lt; Row&lt; NN, E, S &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3640fcb2882627f68939e4ad4037b062</anchor>
      <arglist>(const Mat&lt; M, N, ME, CS, RS &gt; &amp;m, const Row&lt; NN, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, ME, CS, RS &gt;::template Result&lt; SymMat&lt; Dim, E, S &gt; &gt;::MulNon</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a15ef82f68ef6108014eb1606eeea2dea</anchor>
      <arglist>(const Mat&lt; M, N, ME, CS, RS &gt; &amp;m, const SymMat&lt; Dim, E, S &gt; &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae756378c84d8ec677106a9b0870d5c4d</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;a, const Vec&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9eedd4e9a4af6b9c8005aa028d4360ac</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;a, const Vec&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae1b6198f50a6350ac23978eb17a597de</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;a, const Row&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a300917de2fa6928519fede7c1b2a7c6b</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;a, const Row&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6447185d8a1c33f4baeeabef3502e3e7</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;a, const Vec&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4b348a616b2eebd99ef65959da98c2a4</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;a, const Vec&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a662a2b475ca013a676439cd1b073b3c0</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;a, const Row&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3d2b7d7846a81853c11bf4b7367808a6</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;a, const Row&lt; 3, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a58b5979fba09406434bf427ebfe561bc</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Mat&lt; 3, N, E2, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a16e73fbeee8aab0728ab9fea9cdf7710</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Mat&lt; 3, N, E2, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa9ad14875c4f9280316c84d9cae620f4</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Row&lt; N, Vec&lt; 3, E2, S2 &gt;, S3 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7ebdaa10d9146b638d36bfa0ffed2d77</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Row&lt; 3, Vec&lt; 3, E2, S2 &gt;, S3 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a83118cbc3aaffa0640e9d39f7f2e924c</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Row&lt; N, Vec&lt; 3, E2, S2 &gt;, S3 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 3, Vec&lt; 3, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a81a0f1401001c59e52611d0ddfc67b95</anchor>
      <arglist>(const Vec&lt; 3, E1, S1 &gt; &amp;v, const Row&lt; 3, Vec&lt; 3, E2, S2 &gt;, S3 &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EV &gt;::template Result&lt; EM &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae964f8dbf4df60f35f560ff28d56a3f5</anchor>
      <arglist>(const Vec&lt; 3, EV, SV &gt; &amp;v, const SymMat&lt; 3, EM, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EV &gt;::template Result&lt; EM &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adde2cc19a88bf3e3f569b87b84d76acb</anchor>
      <arglist>(const Vec&lt; 3, EV, SV &gt; &amp;v, const SymMat&lt; 3, EM, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9de9dd797aad136eb4b13685fa8846b7</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;r, const Mat&lt; 3, N, E2, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad1a1d40e7660d107d5d75501815862d4</anchor>
      <arglist>(const Row&lt; 3, E1, S1 &gt; &amp;r, const Mat&lt; 3, N, E2, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EV &gt;::template Result&lt; EM &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a80591c35607c0c13275db6220801cdfc</anchor>
      <arglist>(const Row&lt; 3, EV, SV &gt; &amp;r, const SymMat&lt; 3, EM, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EV &gt;::template Result&lt; EM &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a40487d2b7866090815217aa0a2a563ff</anchor>
      <arglist>(const Row&lt; 3, EV, SV &gt; &amp;r, const SymMat&lt; 3, EM, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae4653ba75f4556cabf3af16193fd4512</anchor>
      <arglist>(const Mat&lt; M, 3, EM, CS, RS &gt; &amp;m, const Vec&lt; 3, EV, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a13468997dce5d50fb11a981ad8d6fa1f</anchor>
      <arglist>(const Mat&lt; M, 3, EM, CS, RS &gt; &amp;m, const Vec&lt; 3, EV, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51ee883ac5ad9ca27335be62bdfbeb2d</anchor>
      <arglist>(const SymMat&lt; 3, EM, RS &gt; &amp;s, const Vec&lt; 3, EV, SV &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76dd996e21c512d77b718cc103712c08</anchor>
      <arglist>(const SymMat&lt; 3, EM, RS &gt; &amp;s, const Vec&lt; 3, EV, SV &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, 3, typename CNT&lt; EM &gt;::template Result&lt; ER &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8855cc5be627707d5a3060e23d8ba6c8</anchor>
      <arglist>(const Mat&lt; M, 3, EM, CS, RS &gt; &amp;m, const Row&lt; 3, ER, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, 3, typename CNT&lt; EM &gt;::template Result&lt; ER &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7fa93e2ea16180a1c2133beb751e90ec</anchor>
      <arglist>(const Mat&lt; M, 3, EM, CS, RS &gt; &amp;m, const Row&lt; 3, ER, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3466bad9e1830847220ae2f9522bfab3</anchor>
      <arglist>(const SymMat&lt; 3, EM, RS &gt; &amp;s, const Row&lt; 3, EV, SV &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, typename CNT&lt; EM &gt;::template Result&lt; EV &gt;::Mul &gt;</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa58bef996ec56a183c6f691222850ccb</anchor>
      <arglist>(const SymMat&lt; 3, EM, RS &gt; &amp;s, const Row&lt; 3, EV, SV &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa9336e01e76617fcb2163d6d4e8c90f1</anchor>
      <arglist>(const Vec&lt; 2, E1, S1 &gt; &amp;a, const Vec&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9c9ba6df1ef96e47d8b21485f1231b5a</anchor>
      <arglist>(const Vec&lt; 2, E1, S1 &gt; &amp;a, const Vec&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6dfa33b403f4590d83b58fff48c2111e</anchor>
      <arglist>(const Row&lt; 2, E1, S1 &gt; &amp;a, const Vec&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a248be638028ac58f642ea7ceee74503c</anchor>
      <arglist>(const Row&lt; 2, E1, S1 &gt; &amp;a, const Vec&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8cde3719803667e0afd02afd6dcfe1c0</anchor>
      <arglist>(const Vec&lt; 2, E1, S1 &gt; &amp;a, const Row&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a31bb112ba907f26ea7754d08dadb48c4</anchor>
      <arglist>(const Vec&lt; 2, E1, S1 &gt; &amp;a, const Row&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>cross</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4652ba4352ad7dd8eff02cb65a0c929f</anchor>
      <arglist>(const Row&lt; 2, E1, S1 &gt; &amp;a, const Row&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator%</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aefca07faacce3c2a39a872c0bec1a32a</anchor>
      <arglist>(const Row&lt; 2, E1, S1 &gt; &amp;a, const Row&lt; 2, E2, S2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abdddad3e705503c6f6b479f1d4beeb2a</anchor>
      <arglist>(const Vec&lt; 3, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a70b4f27eb533cfe14bed27158889a7b5</anchor>
      <arglist>(const Vec&lt; 3, negator&lt; E &gt;, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae9ac1c695c2ceac391f47d1e128c59e4</anchor>
      <arglist>(const Row&lt; 3, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a1d67c4595424efed79a3bffde8ddca</anchor>
      <arglist>(const Row&lt; 3, negator&lt; E &gt;, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a097547e1e09aa6a21dcdb58561ffd5a7</anchor>
      <arglist>(const Vec&lt; 2, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92baeac46af751f00b3c09e503361128</anchor>
      <arglist>(const Vec&lt; 2, negator&lt; E &gt;, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8c8a7d6ec223b61136e88a51b97ca2cd</anchor>
      <arglist>(const Row&lt; 2, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; 2, E &gt;</type>
      <name>crossMat</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2f9447732a8e782eae83418206cd5333</anchor>
      <arglist>(const Row&lt; 2, negator&lt; E &gt;, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E &gt;</type>
      <name>crossMatSq</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab3e26d4090b012a30647164cb240c3d6</anchor>
      <arglist>(const Vec&lt; 3, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E &gt;</type>
      <name>crossMatSq</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac0068b78c625afd17c00bce4b4fa4999</anchor>
      <arglist>(const Vec&lt; 3, negator&lt; E &gt;, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E &gt;</type>
      <name>crossMatSq</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c99f2bae0273a0097c0527b55f41890</anchor>
      <arglist>(const Row&lt; 3, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E &gt;</type>
      <name>crossMatSq</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afd173621984b0079ae67a0ccc49c32c7</anchor>
      <arglist>(const Row&lt; 3, negator&lt; E &gt;, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac89175b7f79d7843fe4ee9febc702193</anchor>
      <arglist>(const Mat&lt; 1, 1, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5fd610b77a30a97fa1bfafed7546bb8e</anchor>
      <arglist>(const SymMat&lt; 1, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2d4e72b15d866957f4537c598f3a37bc</anchor>
      <arglist>(const Mat&lt; 2, 2, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af2f2c3bb956121f963eaa8bd57eb26a6</anchor>
      <arglist>(const SymMat&lt; 2, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aace388e328b3cc53a45b641321d1b892</anchor>
      <arglist>(const Mat&lt; 3, 3, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a26f033f1f83b1c48f3bce2f0b4b108e3</anchor>
      <arglist>(const SymMat&lt; 3, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5f069fe89cd9be67afcd46b0e61d224a</anchor>
      <arglist>(const Mat&lt; M, M, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>det</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a00debd18886cee878271d74cb0e99307</anchor>
      <arglist>(const SymMat&lt; M, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 1, 1, E, CS, RS &gt;::TInvert</type>
      <name>lapackInverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2a1e3423cdcffd36acd64e8bdb9ac6e8</anchor>
      <arglist>(const Mat&lt; 1, 1, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, E, CS, RS &gt;::TInvert</type>
      <name>lapackInverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa3e9cc01573bbfa13dc9bf0c417baf39</anchor>
      <arglist>(const Mat&lt; M, M, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 1, 1, E, CS, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a350786e5711344078e2d1a51dd1b2a3d</anchor>
      <arglist>(const Mat&lt; 1, 1, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 1, E, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef2abb20fdadf482be5db59315e629a4</anchor>
      <arglist>(const SymMat&lt; 1, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 2, 2, E, CS, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2ec46ace44fd6a469934f321c6f62ce8</anchor>
      <arglist>(const Mat&lt; 2, 2, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 2, E, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7304cac65ee6712080c138e0052ee51a</anchor>
      <arglist>(const SymMat&lt; 2, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 3, E, CS, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7886a54a1c662b44b822f6a0e0aa1b88</anchor>
      <arglist>(const Mat&lt; 3, 3, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; 3, E, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af48fb90e63a1b4e92783725a954e597a</anchor>
      <arglist>(const SymMat&lt; 3, E, RS &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, E, CS, RS &gt;::TInvert</type>
      <name>inverse</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af4cb78f2bad766b79ff126049f68521b</anchor>
      <arglist>(const Mat&lt; M, M, E, CS, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E1, S1 &gt;::template Result&lt; SymMat&lt; M, E2, S2 &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afb9d93bf47e2c7f20f32cd5d2e7297bc</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E1, S1 &gt;::template Result&lt; SymMat&lt; M, E2, S2 &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a797ec26c733b52084cba29d383dd131d</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E1, S1 &gt;::template Result&lt; SymMat&lt; M, E2, S2 &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5688e24d8241deb7b15a2429aa6c7cf1</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a89637866ceddce285e2d597c9f8c76a3</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0747a0f9da57cc40c69de13781a68bc2</anchor>
      <arglist>(const SymMat&lt; M, E1, S1 &gt; &amp;l, const SymMat&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a508c363d5829ca4e1657ebed4e975bf7</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa9cf711a471da79679b85559ed029c36</anchor>
      <arglist>(const float &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0de3b266324ef62ae60ad4abf95768b9</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a78916c9eb05c8e1c33402fd7e5071266</anchor>
      <arglist>(const double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1f8e8b8b6a18ca46a55ff526d517ad99</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac766c2b187dffedd532b70f2d79a8b44</anchor>
      <arglist>(const long double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a28611136ebaa04702932fbc99ff793c4</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adcdc3f3de8ad606da3ba3802f26b64da</anchor>
      <arglist>(int l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adf8a784733d0baca97a0b2a7e01445e9</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7122746a961ec5cbbc5187a131669607</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afb905781b2ef0cb18adad5ac02c36137</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acc283c633665e0dd16369e86b1aa2faf</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a71991812e043c87842c7ca6a6c6bbeec</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9451c75d313a6e44a9111d5b3e6072c7</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a113fcf3e7e9a1304a34b27799f41b3b3</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90abafaaa69a08dffe6458281cdcaee5</anchor>
      <arglist>(const float &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a28adca3e2764dbdb9ec932122aa67966</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a531329ae1dc76c56efd9f443cb214db3</anchor>
      <arglist>(const double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8162c1736e2a702a2744051df2602029</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a07ca38f55dba6dc994bf68aa4610ba6c</anchor>
      <arglist>(const long double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a96087b299d72d80e5ca0f51bf39cd204</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4e25dec53b8f3944bc79a456abae61e</anchor>
      <arglist>(int l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9475c33970e167635ad0bbf619a3d5a9</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4139edb0a2d32c015ab7dd2b46dd253d</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a46903f1a828f4cb5f959ed36a57562ba</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a702802cc700948e7fd42885ba52a6dc5</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa2eef034649f2d142dbe956a56cab5f1</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7631fb363785f5545559735a526df569</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae9dff88a08dd5967363343d439e0d75e</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5b509a1db4a87e0c6476a278f811eb42</anchor>
      <arglist>(const float &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a560eb3248845ec1854eeda7991f43368</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a990878b1ff1d2dbb5b3afbdbb7e5cb2e</anchor>
      <arglist>(const double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a02ff3711803b2530eaff968247b10bfc</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3ce58ea355b4e0d86ab2f7d15313bab</anchor>
      <arglist>(const long double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa3e4d8f618e20f825b6fc60976258324</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5b3b401c01f053eaf2b47d24a8e39e7b</anchor>
      <arglist>(int l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9e05694f70a957a527231ad8c6e8badf</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a488ba221fdaf3ea5ee873f096896eced</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae3b35e3070a804f2c334720a2a973c01</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0b2f54f86bd38c803f7a3a3fd45b2050</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3be6ad0f07e5d00145035986dc256b01</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7f06e1bb81042cbef6515101cec01b04</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; float &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0904edef1d9ef399ad6bc18322041b04</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac78248fe388ab12fe0e50f604cf09ab6</anchor>
      <arglist>(const float &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aefbea7cea034b2ead5b3885db12d169e</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad0b1505198f61059164afedb6304af0c</anchor>
      <arglist>(const double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; long double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab9c9a03ccbf55154a106c18dd7251e2d</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa8a36b2c99fa9817cd67620b9fd74bad</anchor>
      <arglist>(const long double &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1b0db56995e0b8c74d6b6d38bef5bff0</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a195d92371ecc6efed4a1d6a0ae8ed87b</anchor>
      <arglist>(int l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af0a08f00d55766fae01345c1239b7611</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6b64edd2959c0e1be535914f89d2e899</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b10cc53f38b91c901869daddbc6e77e</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a343ec6a9fd0baa37f0579168a9b04ee7</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9349abdc8a7eea1253f138d2a13eae73</anchor>
      <arglist>(const SymMat&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; SymMat&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a542a352a2f21298e3cdcda877f5e4a6b</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const SymMat&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a052150afd21b0fd456c6ed2a3bd43f09</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const SymMat&lt; M, E, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac904796f05f0c62a29350bfda0ae9222</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, SymMat&lt; M, E, RS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Vec&lt; M, E2, S2 &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a35ba86cde66f055d750be9e3d717895a</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E1, S1 &gt;::template Result&lt; Vec&lt; M, E2, S2 &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5591ad75cd7877261f8d163e1089a962</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afbb60d4cfb0b9bc6759181b6fc29038a</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4aaf1a5237de967770556367a129e616</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3994748f75644606abb3c0d2eff73ec7</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab46a91042a96e18d189c4288bcbb80ce</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abfe10d0a8275c8e3757876b796594eab</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acad9e9f6be82e38406b033c4420e10bb</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5c0ae20ae1210f06c5786e745bbf0ea6</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a76c828d0faccbe97ccc6cce36ed69775</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1e8f4a346f89b401831272c27227144c</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3034f41c752f118f909ef0f71c4d23e0</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af48934dd369681e002fe34f7515c1cb3</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;l, const Vec&lt; M, E2, S2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adedd99c09110401d5dc189a4510c0dd6</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v, const E2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6c34e5944d17b83213c0e865fca8e6e2</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9ceaec67190cc343f1ca16ef497ae922</anchor>
      <arglist>(const float &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acd7645a08588988d8d913e79847432ea</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a48b877450aaa8eeb23af4ec03938f717</anchor>
      <arglist>(const double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a80490b2eb4f853241355bc7bd1e56daf</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab532ae846bc484813b105fdf21b87313</anchor>
      <arglist>(const long double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a852fc6e2365415e5eca60d310f70131a</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a979e3f327a2c2ba2b5ca5f55b1bdda13</anchor>
      <arglist>(int l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a748875bd8114ceef21ace8fbe841a877</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a58bb84759642bf3e30f12ea004333285</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af120a67eb8e2f09fd47e36e5b744cb73</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7d471d65fae38e28a9c29f95a471d165</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2bd7385ef7e9eb09bde34ae47736543f</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9f5694c03f446776cb6584855d660f9c</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae72b23236f3d91f262c0294318a1f176</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a536510dac7f1135bc528d564849a4204</anchor>
      <arglist>(const float &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a77995d3ce71412a3e476036a3adcdbed</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7e7a8f4ab95187efa54b7c2c00c6a331</anchor>
      <arglist>(const double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afa7a2e10ebcd4950331c4a092d366277</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aca3b4087ab01af5eaa384df713fdeabe</anchor>
      <arglist>(const long double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a08ae6d5f5704263cb868d60d4b6de476</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a82241f16768ed886d96cfbd181773580</anchor>
      <arglist>(int l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a080589e5668a7c2da7b472bcec4682f7</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a64d0cad1aea5bc16d089e76b77a2ab8a</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ace67a6282c830d94120f4452ccd19c92</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae892264393a303d32bdc293d5afeefbe</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8f075c27cd295e849fef6be047f45c62</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Dvd</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1e4ea345330380c0ec622d73b8d9dc49</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad3a6b48bd3af25eccfbdeb7379589113</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6ac6daa44014530041c0d43b1ef06457</anchor>
      <arglist>(const float &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a866bf743e6798a924a6cc7f757f89dfe</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ec1d1723243bc95a0da42847cb5942a</anchor>
      <arglist>(const double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abe581945cd3b7d9855f30e880f5aceee</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a602e3f41fb8ad771c0a01d6ab25d222a</anchor>
      <arglist>(const long double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9f3c2ca0986eebd8a5c122b7c906e843</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6866630bf7f763f409d506930e8b50aa</anchor>
      <arglist>(int l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a71d39debf97fd5fc3bccf40c558e5612</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a86ba44b4cc986b91ee1fd98d448f8510</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a52bc45ad26f2dbfafc9e9e64bf62a8e9</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aad456d1d3a5cc13f4491b85891223350</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa51e7f3d747614eb86fd6c0f4fb5a00f</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Add</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a370dc800083559330ca738fe614d90bf</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; float &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4d309b613b757d469c5d399bbbac544e</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; float &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab8c742659c0378a90c468e759e4e8cfe</anchor>
      <arglist>(const float &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0e8944eaca260b36c4281ffbe72b7a12</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; double &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae69d60ff361d3a5c14412ad360546b19</anchor>
      <arglist>(const double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; long double &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae274cc1fb153dcb05420d71d9e407244</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; long double &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5da379ed855a76adadf54621b70336f4</anchor>
      <arglist>(const long double &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename CNT&lt; E &gt;::Precision &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a53bf530fbcb30a77e369301c45b2d9f8</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; typename CNT&lt; E &gt;::Precision &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a67fd8fe744a41cb3f7d835f6904baafb</anchor>
      <arglist>(int l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab72a9b20819288b2f5bef8692587120d</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const std::complex&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae236f55a8539a58c15859321d803bd94</anchor>
      <arglist>(const std::complex&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; std::complex&lt; R &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2fa2b199d5ee2cd4896d818430cda2ee</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const conjugate&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; std::complex&lt; R &gt; &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6b2676768f8f8c1de0f572b3a053603</anchor>
      <arglist>(const conjugate&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, E, S &gt;::template Result&lt; typename negator&lt; R &gt;::StdNumber &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acfcd3b0b547b73d5280845a2ebbdd134</anchor>
      <arglist>(const Vec&lt; M, E, S &gt; &amp;l, const negator&lt; R &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; R &gt;::template Result&lt; Vec&lt; M, E, S &gt; &gt;::Sub</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad0a06593bdf077ff578b1be156101a89</anchor>
      <arglist>(const negator&lt; R &gt; &amp;l, const Vec&lt; M, E, S &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93a4b3503a8d23b1df5a1805e5a06581</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const Vec&lt; M, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::basic_istream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa3d24795b58164c7820e3e2bdcd7a85a</anchor>
      <arglist>(std::basic_istream&lt; CHAR, TRAITS &gt; &amp;is, Vec&lt; M, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a22d897fc7c71b3b776c098f9701872ed</anchor>
      <arglist>(ContactSurfaceIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4fdf4b7e0fa5eb25dcc3a3a920bbac01</anchor>
      <arglist>(ContactId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6beaa0bd9837c5dcb62f34065a5da3a2</anchor>
      <arglist>(ContactTypeId)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5be09b802b5785052f6ee506f6d5679f</anchor>
      <arglist>(std::ostream &amp;o, const Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_INDEX_TYPE</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae08e7551aea3a4a197a10730f692ac36</anchor>
      <arglist>(ContactGeometryTypeId)</arglist>
    </member>
    <member kind="function">
      <type>OrientedBoundingBox</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a410269bfaada2a1c4c4897655495c868</anchor>
      <arglist>(const Transform &amp;t, const OrientedBoundingBox &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>explicitODE_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a03a744f79ed1b8eafc314bb73c1ee86b</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, Vector &amp;fout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>implicitODE_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a83c3bc1e9723bae2f75c643d789cac96</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, const Vector &amp;yp, Vector &amp;fout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>constraint_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a637ce3bfc1ffe924a7071927033bb363</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, Vector &amp;cout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>project_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4b60261fe7cb14f844c3ba0950414b44</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;ycur, Vector &amp;corr, Real epsProj, Vector &amp;err)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>quadrature_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1d14c3decdbfd9b247463d4880739a34</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, Vector &amp;qout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>root_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a25d3170b1b969b3c14b2fe0b4b7690e3</anchor>
      <arglist>(const CPodesSystem &amp;sys, Real t, const Vector &amp;y, const Vector &amp;yp, Vector &amp;gout)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>weight_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a00576eff653847f4d19b4218e5955265</anchor>
      <arglist>(const CPodesSystem &amp;sys, const Vector &amp;y, Vector &amp;weights)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>errorHandler_static</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7bf734cd87406a40d4403b5f90763976</anchor>
      <arglist>(const CPodesSystem &amp;sys, int error_code, const char *module, const char *function, char *msg)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a424ccc5c7500fa0548d766f8e04191d4</anchor>
      <arglist>(const MatrixBase&lt; E1 &gt; &amp;l, const MatrixBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac4023efabadf84bb7dee8ed4b2d99e34</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9a5fe736515048f8dad49b69d840cb62</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const MatrixBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a195414de1c9364a719375c0f6f5900d7</anchor>
      <arglist>(const MatrixBase&lt; E1 &gt; &amp;l, const MatrixBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1551d9cbd51313d4ee58a6a64b29e644</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a88f8f9f66ddadda6750df0f79b2c2971</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const MatrixBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abeff0b397e256732a5de56eb20999afd</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8bbc0c80559fc15d0779d732f34fa01b</anchor>
      <arglist>(const typename CNT&lt; E &gt;::StdNumber &amp;l, const MatrixBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a289810e16cb099ab1e48a2ad94882077</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab9aded904b29fe257993fce1dbf07799</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a190412a7458fbffe6f6be9cbbd998862</anchor>
      <arglist>(int l, const MatrixBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a911291adf01e319e47e39bfc5cd3a010</anchor>
      <arglist>(const MatrixBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa72cd90e039e67ea84dd94b705e13f32</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;l, const VectorBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad6ec3d05326a377c3f412d05a0b39393</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5125c5118ab51cb7216c138c45b153c2</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const VectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab1391b89bc1e678bd3a3c44f47269659</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;l, const VectorBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4e5ca16602ab5f80fa95a759aa9e5311</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aecf912181a0bf1da6652eadaab7bf107</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const VectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a932398998e7753d96ef367d4396d3147</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5cf35788e7066974215026e0a087006c</anchor>
      <arglist>(const typename CNT&lt; E &gt;::StdNumber &amp;l, const VectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3a02087934aef01884a1e469836fd525</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aff769b119b5770a48b9da106131e4e75</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8e1d3a844ed5120b8e2a15c130b10eaa</anchor>
      <arglist>(int l, const VectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac6b140c1bec3abdfeee1437d579f140d</anchor>
      <arglist>(const VectorBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Vec&lt; M, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a363e4a17944f5d3da4caefe981e570d4</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;v, const Vec&lt; M, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename Vec&lt; M, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa41af0bcb0b952f0921e5a914a31f730</anchor>
      <arglist>(const Vec&lt; M, E2, S &gt; &amp;s, const VectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Row&lt; N, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a51727de4ff113ab21b1c2e1235073aab</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;v, const Row&lt; N, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename Row&lt; N, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a36096f5b271f9748f06407c03d1e1a17</anchor>
      <arglist>(const Row&lt; N, E2, S &gt; &amp;s, const VectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Mat&lt; M, N, E2, S1, S2 &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adb9c78559638250dc81036cacf576487</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;v, const Mat&lt; M, N, E2, S1, S2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename Mat&lt; M, N, E2, S1, S2 &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a46434d0dbc38563d716c09baee89989a</anchor>
      <arglist>(const Mat&lt; M, N, E2, S1, S2 &gt; &amp;s, const VectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; SymMat&lt; M, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aac9993fe87e6ade910df29f52522cb49</anchor>
      <arglist>(const VectorBase&lt; E1 &gt; &amp;v, const SymMat&lt; M, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename SymMat&lt; M, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a734a6b33c1d724767acf1dacc424e871</anchor>
      <arglist>(const SymMat&lt; M, E2, S &gt; &amp;s, const VectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad36aee4e52f2485774e9717829694f04</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;l, const RowVectorBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a07966cc586ef14f60b0f46505b898410</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator+</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9fad7d837633347cf13f05b6a647bcf2</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const RowVectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a85af56cdad9d60457b1e1109320d144e</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;l, const RowVectorBase&lt; E2 &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9b385484631779dafe07ff11de9e9895</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator-</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a41a08390497cfcafe72a52340f42b3a8</anchor>
      <arglist>(const typename CNT&lt; E &gt;::T &amp;l, const RowVectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a12f858b65031448faa2e7455429155e4</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a87b862f6d4af89dcbf8958ee5d028e46</anchor>
      <arglist>(const typename CNT&lt; E &gt;::StdNumber &amp;l, const RowVectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac636d4a75f2b56b58672cb84ae3044c2</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, const typename CNT&lt; E &gt;::StdNumber &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af88221d71c1925dedddb5fdd9105739c</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa47f86e9449a8a1990e185cdef9e11d5</anchor>
      <arglist>(int l, const RowVectorBase&lt; E &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; E &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae533133c378e9c7b2c8e9157a32863e7</anchor>
      <arglist>(const RowVectorBase&lt; E &gt; &amp;l, int r)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Vec&lt; M, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aea2313f00d30b7b4a0ddd72c0f6e902d</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;v, const Vec&lt; M, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename Vec&lt; M, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9a08e0cf9ff85d92a07cc41e36a6b013</anchor>
      <arglist>(const Vec&lt; M, E2, S &gt; &amp;s, const RowVectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Row&lt; N, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a816f67b0fb94d176da9b940be021cc68</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;v, const Row&lt; N, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename Row&lt; N, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a64c70cff618e9b27926d4bc3c858914b</anchor>
      <arglist>(const Row&lt; N, E2, S &gt; &amp;s, const RowVectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; Mat&lt; M, N, E2, S1, S2 &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a982878253ed29f1ec7274b3bbf0e1acd</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;v, const Mat&lt; M, N, E2, S1, S2 &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename Mat&lt; M, N, E2, S1, S2 &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6b1459d255f59563b7bb7e5e03468a04</anchor>
      <arglist>(const Mat&lt; M, N, E2, S1, S2 &gt; &amp;s, const RowVectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; SymMat&lt; M, E2, S &gt; &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a92ce6d3f70e342789d8bbffecb6992d8</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;v, const SymMat&lt; M, E2, S &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; typename SymMat&lt; M, E2, S &gt;::template Result&lt; E1 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aba3396b8cab38442ea690604cd5a5761</anchor>
      <arglist>(const SymMat&lt; M, E2, S &gt; &amp;s, const RowVectorBase&lt; E1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8bfbda32246389aa290f1f01b55f46ca</anchor>
      <arglist>(const RowVectorBase&lt; E1 &gt; &amp;r, const VectorBase&lt; E2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a59d0492bd6b062babc3dbb96a25ec0f5</anchor>
      <arglist>(const MatrixBase&lt; E1 &gt; &amp;m, const VectorBase&lt; E2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad6264834e01607912cf263956c16c1f0</anchor>
      <arglist>(const MatrixBase&lt; E1 &gt; &amp;m1, const MatrixBase&lt; E2 &gt; &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec&lt; P, 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a583d9ec25c572b240b0bb566ca701159</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R, const UnitVec&lt; P, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>UnitRow&lt; P, 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad35dfc094fc3550f3c72b76a2e02e874</anchor>
      <arglist>(const UnitRow&lt; P, S &gt; &amp;r, const Rotation_&lt; P &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec&lt; P, 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab7a7c6fc11de66a6a19d2a61336afeff</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R, const UnitVec&lt; P, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>UnitRow&lt; P, 1 &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a95fa57d06ef4720fff781ad82ffd3f6a</anchor>
      <arglist>(const UnitRow&lt; P, S &gt; &amp;r, const InverseRotation_&lt; P &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a90cc404afe6ff2c4926fd93d0454dfd7</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec4d2f4a828242204bfa78f0e3f75399</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const InverseRotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aaf8091d0c9ede8026aa6a282dd472e6f</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0f0440a8494866f40833fec49f4b2897</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R1, const InverseRotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2d961d548f1e122aabc19cb7a66aa3ca</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad250fb571f1a5878fe9005d79e7d18fe</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const InverseRotation &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a4982667a60f9659bc8e8185e667b32f0</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0d1a8a958ad5807a933ddb3fa3c9bf30</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R1, const InverseRotation_&lt; P &gt; &amp;R2)</arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Black</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7eb05bba246a36f0c38f1103e71271d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Gray</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a65212921c988ed05db4238888b2c9211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Red</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa65237cfdb919189f099be1edfa64380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Green</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af85a41273df077dbfc9e7b6b9a1d468b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Blue</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3b0c2aa41d7d89bb42b875c8b17b9269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Yellow</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ac97c4e28d7ff9a0ad6cca191a65245cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Orange</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a215331212cc50a27bf7adc2e64f71bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Magenta</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a8ebc073e8e0b231823fb73c70ce3d907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Purple</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae1ef2f5b3baed6fbfaec04add6c7dcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>Cyan</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>adfe796a52cf587653789cefbb1dc7c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3</type>
      <name>White</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7909322e9f6cf4fcc6fdfa2a42e58d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; void *, pthread_key_t &gt;</type>
      <name>instanceMap</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1a2c3daa5ee587c8d6dc8ba20d052fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static std::map&lt; pthread_key_t, std::set&lt; void * &gt; &gt;</type>
      <name>keyInstances</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0eb37ea5cdb42a6383a2b6ad9823b3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static pthread_mutex_t</type>
      <name>keyLock</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aca8879e702392d0aa87e2f4878460432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateAxis::XCoordinateAxis</type>
      <name>XAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae7ef72313bd2927b2dac68bd8e80915c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateAxis::YCoordinateAxis</type>
      <name>YAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5bf507620ec3ac8aac653700d455ee81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateAxis::ZCoordinateAxis</type>
      <name>ZAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2e014e2731959bba79efa02e1d12e0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateDirection::NegXDirection</type>
      <name>NegXAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa71774d9492a13d0b97c665068f04139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateDirection::NegYDirection</type>
      <name>NegYAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abb248ecb66f5e6b7cb85d42933a3aeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CoordinateDirection::NegZDirection</type>
      <name>NegZAxis</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0e7be08fa229d338b17abaa2fc1ba246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>NaN</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga5b3e8459e97fe52f06520c6462cecca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Infinity</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga1ce4d54f64bb7dfd1f763bc3c7192783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Eps</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gae52d8e90cb945806de17a8aa6d71581c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>SqrtEps</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga01191c1a2b9a6f9e0d6faa9472244731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>TinyReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaf8d717c96dc07c80d5f074185c5ab88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>SignificantReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga2026d7a87fa1a6a089bf866339521e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>LeastPositiveReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gafcd89352c6783472296ac9d0e6d75f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MostPositiveReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga949ec795ccd1618d3a19be058f5f69f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>LeastNegativeReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8a87e0f68fcb471515b0c7e9d11cfa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MostNegativeReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad6f718d1389c58d071e0da2bc97742c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NumDigitsReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad547cb849c6061b6c0f193d29b29bcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>LosslessNumDigitsReal</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga5cf1b4daeeb7235604213ecd1cfecfdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Zero</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga27e042de142dc666f090af4659be93b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>One</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga6fd0f8c648f23391c6cad9addcdf686a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>MinusOne</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga009370366f4bdfd95c2c860a354c9292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Two</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga4b5419b19811ee3f37c6dafdd33cf48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Three</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab2f29bcf7a9840206e331513a148bb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneHalf</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaa01ff2c544d7220dbfe9ec5d0f304b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneThird</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga52f7cf4cca5e9123daf28431b46dfc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneFourth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga2f1937badfad7e143ce88e57b59d215a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneFifth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8daa2faf617a43c9df00bff29bdc3970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneSixth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga221f99b97dcca0a29db23322a8c04ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneSeventh</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gabeac454933ee957f1a6768f8e02af20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneEighth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga79095ebd82f55410529bf0d480e8e025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneNinth</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga310d0756d50906365bf75fa7941be8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Pi</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gad71ae24820d06c99844f307ba4b31e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverPi</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga10f6903b9327f729f5fce2c28dda20d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga62e94c379e736581bd70ce4647168f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Log2E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga159b9314259d179521e9fb1a84d994e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Log10E</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaf8cdbf3b0e779033853a4990ed0fd320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Sqrt2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga7c5dd94e4cc4496998fafa2c466a1e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverSqrt2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gae19f40ebebf2a68ec67b1145bc2fa6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Sqrt3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga09859b35562a7f4108af3dfb35bd5197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>OneOverSqrt3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab1197416c87ede92e08b30c0635dec61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>CubeRoot2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga8b7122e07290dafdef3655bf94f7ef89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>CubeRoot3</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga35a481fde6f6713b0e787f5592df4291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Ln2</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gaac81af38456470d7240c0428b3f40777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Real</type>
      <name>Ln10</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>gab873b75f254d6f2bf44347f868cddc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Complex</type>
      <name>I</name>
      <anchorfile>group__TypedNumConstants.html</anchorfile>
      <anchor>ga89110fa308da931e7b5b69f62b143bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>DefaultRecpCondition</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aa9971b0979514067c6edd5cf4e1a2935</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; Real &gt;</type>
      <name>Vector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acd32706a1c8d3ee7c84c56bf048e7f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; float &gt;</type>
      <name>fVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aef18f21977ee9be83a38f30111bf3277</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; double &gt;</type>
      <name>dVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a729bced59a02be5c3b97561d4b8da486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; Complex &gt;</type>
      <name>ComplexVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af68b34cccce7b8913322671b9f65fbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; fComplex &gt;</type>
      <name>fComplexVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0aa72498634f64805b008e92bcd99e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector_&lt; dComplex &gt;</type>
      <name>dComplexVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>abdf1abb9eb717e56398d28ddb333f869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; Real &gt;</type>
      <name>VectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a81943f03ae52dedc5d9952d26e81a17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; float &gt;</type>
      <name>fVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a33dee6c36141c9b485e5b11f2dfb4cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; double &gt;</type>
      <name>dVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab73d4a4af66bba8219e7007444cfcbbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; Complex &gt;</type>
      <name>ComplexVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a93b3f84573d5281d3d6a94b9941e7753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; fComplex &gt;</type>
      <name>fComplexVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1989b4fbd0ebb847b4b974fb19aaebc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorView_&lt; dComplex &gt;</type>
      <name>dComplexVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>afc566a9c5cbaac8c53b5b11d704efaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; Real &gt;</type>
      <name>RowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a736e7a9151ea9c2d5fda5847f00d1b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; float &gt;</type>
      <name>fRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a784bf198e13d61fb90f1eeb62aaa90e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; double &gt;</type>
      <name>dRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9330b3edd4a61c7a23d64ac86da30354</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; Complex &gt;</type>
      <name>ComplexRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aeb3e92c8fb03f0688e0395359017c146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; fComplex &gt;</type>
      <name>fComplexRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a927f3193f2d2c4a37fbf3df6795e2c8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVector_&lt; dComplex &gt;</type>
      <name>dComplexRowVector</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a45a24504ea257045d2e1448b7a1ff4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; Real &gt;</type>
      <name>RowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ad9f9b8fd90cf619ce8c1896792d964ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; float &gt;</type>
      <name>fRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aabea062aaf671e305e0e4c77a2d3bba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; double &gt;</type>
      <name>dRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a47b5ab997e5205b77f73cf2b5abaf95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; Complex &gt;</type>
      <name>ComplexRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a9150e9f496423939de64f3cc741c002b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; fComplex &gt;</type>
      <name>fComplexRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>af5c5cd651e82f8596d9d909fe0ae38ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorView_&lt; dComplex &gt;</type>
      <name>dComplexRowVectorView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a7fb95843f48a35d88412a3e96f4afb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; Real &gt;</type>
      <name>Matrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a68f30258553b9b50cb6aefa6d82e3e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; float &gt;</type>
      <name>fMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a3fe24e5a6d2228a39594aebd739e8581</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; double &gt;</type>
      <name>dMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae648d5665c013c75b227c70212d61d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; Complex &gt;</type>
      <name>ComplexMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a04b7d0f439927eba951b722bd27c6b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; fComplex &gt;</type>
      <name>fComplexMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5e22e0fb550e8558fcdc4d56df48e727</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix_&lt; dComplex &gt;</type>
      <name>dComplexMatrix</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a1aea5e95da4219a6b1b5eb66ded4a91d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; Real &gt;</type>
      <name>MatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aae0b3a98c7410467c52ed58ea48a676b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; float &gt;</type>
      <name>fMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a6d0823e6c74c86a20c3ae794e1515f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; double &gt;</type>
      <name>dMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a485d29e208e9ce16cf90e27d545fae8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; Complex &gt;</type>
      <name>ComplexMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ab4a34667dd2d79b39089b1b9468e093e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; fComplex &gt;</type>
      <name>fComplexMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2fdb010134303ad973b2c24525f457e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixView_&lt; dComplex &gt;</type>
      <name>dComplexMatrixView</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a45da068c6e5c1ec984c631a8f87e3dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a2b08d1545f0d1cd18dcfbd1f9e37468c</anchor>
      <arglist>(std::istream &amp;in, VectorView_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a0b1e432c0891a7b1e6d17b40ad1ba9c5</anchor>
      <arglist>(std::istream &amp;in, Vector_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>acc8a71303964ef58fda4d9029ca909aa</anchor>
      <arglist>(std::istream &amp;in, RowVectorView_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae81dc6f49097a495d8d60d7a97bb5b7c</anchor>
      <arglist>(std::istream &amp;in, RowVector_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>a5355c4484f91b7a50c68d1c7f48e595e</anchor>
      <arglist>(std::istream &amp;in, MatrixView_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>ae5a47c7697cda37c694c6dfeed7386c3</anchor>
      <arglist>(std::istream &amp;in, Matrix_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>namespaceSimTK.html</anchorfile>
      <anchor>aec2cd770dce0790e2a7730fa3bc6e032</anchor>
      <arglist>(std::istream &amp;in, Matrix_&lt; E &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Assembler</name>
    <filename>classSimTK_1_1Assembler.html</filename>
    <base>SimTK::Study</base>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_LOCAL_INDEX_TYPE</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>af2cba277fcd0d70b05eacdf0af047c5e</anchor>
      <arglist>(Assembler, FreeQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Assembler</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a45692688783ffbebbea0dab8e311f9b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Assembler</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a420a4b6c924cef95af35335a27180f2b</anchor>
      <arglist>(const MultibodySystem &amp;system)</arglist>
    </member>
    <member kind="function">
      <type>Assembler &amp;</type>
      <name>setErrorTolerance</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>aebd9e8a89eb2d8fcf2f45c3e2c7825d6</anchor>
      <arglist>(Real tolerance=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getErrorToleranceInUse</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a5f11cb4539bf5d52b987d447151c8669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Assembler &amp;</type>
      <name>setAccuracy</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>aaa93b0d9fe899ded27e2b6a58e983eaa</anchor>
      <arglist>(Real accuracy=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccuracyInUse</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a6a358e84fd2a21bcd3219ab1b12730b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Assembler &amp;</type>
      <name>setSystemConstraintsWeight</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a7e5d3327db75d0c26c9cc2fe004e9949</anchor>
      <arglist>(Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getSystemConstraintsWeight</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>ab2e1b6c0aed935b13dfe52c2249f935e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Assembler &amp;</type>
      <name>setAssemblyConditionWeight</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a5659c54ffc655f052ce9fbda060f0a2f</anchor>
      <arglist>(AssemblyConditionIndex condition, Real weight)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAssemblyConditionWeight</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a3ca6442a5974a407edf0a93a1ba9bedc</anchor>
      <arglist>(AssemblyConditionIndex condition) const </arglist>
    </member>
    <member kind="function">
      <type>AssemblyConditionIndex</type>
      <name>adoptAssemblyError</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a74825cbcbd820c905f04adb068bca90e</anchor>
      <arglist>(AssemblyCondition *p)</arglist>
    </member>
    <member kind="function">
      <type>AssemblyConditionIndex</type>
      <name>adoptAssemblyGoal</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a1d83ab5b8f7a696c838540f46b3fda46</anchor>
      <arglist>(AssemblyCondition *p, Real weight=1)</arglist>
    </member>
    <member kind="function">
      <type>Assembler &amp;</type>
      <name>setInternalState</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>ab6066b1ac50fd360aeaf1bc2913b4e10</anchor>
      <arglist>(const State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a8278f6b7371cbb80b419f5191751cb2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a0f9ae6fbe8ba8f6a1011499a8af8b5ac</anchor>
      <arglist>(const State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>assemble</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>abf11e6813b2f8e8de97f3825817df601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>track</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>afa718e809d48c514de50bee75b0d0f8a</anchor>
      <arglist>(Real frameTime=-1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>assemble</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a69f802dab0e0608589950181bfaeeb7b</anchor>
      <arglist>(State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcCurrentGoal</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>af9986438e87f38fd80ab6da84bfe96a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcCurrentErrorNorm</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a626c72f95f59e9795e44d01adf7c32f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFromInternalState</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a21fd4e5d1fd7729fe5982bb9adce8c15</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockMobilizer</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a45805f8d14eb46a2300f4bf221023cff</anchor>
      <arglist>(MobilizedBodyIndex mbx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlockMobilizer</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a96de95a176ba025279a00efeefde37c7</anchor>
      <arglist>(MobilizedBodyIndex mbx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockQ</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a96f3704a614bcb0e3c3b6ec0e5f62767</anchor>
      <arglist>(MobilizedBodyIndex mbx, MobilizerQIndex qx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlockQ</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>ab26a5776dc4633788118d97c31204ed0</anchor>
      <arglist>(MobilizedBodyIndex mbx, MobilizerQIndex qx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restrictQ</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a44d237d522926fe07f62a7e568002a46</anchor>
      <arglist>(MobilizedBodyIndex mbx, MobilizerQIndex qx, Real lowerBound, Real upperBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unrestrictQ</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>afa9820086be253df8f0861ae0a5edddd</anchor>
      <arglist>(MobilizedBodyIndex mbx, MobilizerQIndex qx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGoalEvals</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>acee1720803536bb488a05d549f40df9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumErrorEvals</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a299a3b2331a94a71105eb479241b47db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGoalGradientEvals</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>af1d5b47bc3278bebdad94ffc7f9f9179</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumErrorJacobianEvals</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a4bba861d59cd70c9acf09ba45c65cb25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAssemblySteps</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a9455dcbc384b098e13782302a0189dce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInitializations</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a56e04d6f6c2852a89a2814b8d4d8064d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStats</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a71fa60ad4734f3f59e42cf9b8a503abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceNumericalGradient</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a51911bf6b1073a5820d494247fa9cf1d</anchor>
      <arglist>(bool yesno)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceNumericalJacobian</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a1ecda6c568c5090843596c7f73c70391</anchor>
      <arglist>(bool yesno)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseRMSErrorNorm</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>ab9c00e8e67f543f973c0c95fa08015cb</anchor>
      <arglist>(bool yesno)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingRMSErrorNorm</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a42c580c86b02cca22acfb016bc59585b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uninitialize</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a147b23f1c15ec8490e1d8f57876d5a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a77618dfa61854119c230d6d8d73e4140</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>getInternalState</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a77ddbd51e8b8b4837d6e690c27f93d85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReporter</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a99dc8e6c23d858321ba9bb8b8dc4eb78</anchor>
      <arglist>(const EventReporter &amp;reporter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFreeQs</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>ac21c13a4bd4ea9ab889b522d97176f99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QIndex</type>
      <name>getQIndexOfFreeQ</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>ad897f1380ffa222fd1f53f2722e135e9</anchor>
      <arglist>(FreeQIndex freeQIndex) const </arglist>
    </member>
    <member kind="function">
      <type>FreeQIndex</type>
      <name>getFreeQIndexOfQ</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a3fd4a3b52bd00f819fc9f4dca931a4b1</anchor>
      <arglist>(QIndex qx) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getFreeQBounds</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a1c244201d99cf6b749d4754e041e64c4</anchor>
      <arglist>(FreeQIndex freeQIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const MultibodySystem &amp;</type>
      <name>getMultibodySystem</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>af00001b8e5be1567b770c4b7beab7915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SimbodyMatterSubsystem &amp;</type>
      <name>getMatterSubsystem</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a4999666eeb2ee12bd7771aaa9ee5c1e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AssemblerSystem</name>
      <anchorfile>classSimTK_1_1Assembler.html</anchorfile>
      <anchor>a250a5a4f578d19ca644313c4f563ad40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::AssemblyCondition</name>
    <filename>classSimTK_1_1AssemblyCondition.html</filename>
    <member kind="function">
      <type></type>
      <name>AssemblyCondition</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a008967c2cfea4150d68e7796ffff1e0c</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AssemblyCondition</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a0e8548f2bc9f687f50ba90c65af46b96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>initializeCondition</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>aef6f7b295f057904287b70b683101921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>uninitializeCondition</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a21bbea246047f2a686c5673ea4f3c633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>calcErrors</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a5822a085a33f147e38f644960eca14f8</anchor>
      <arglist>(const State &amp;state, Vector &amp;err) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>calcErrorJacobian</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>ada27c0d7a3244181b63ae6d6257d7136</anchor>
      <arglist>(const State &amp;state, Matrix &amp;jacobian) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumErrors</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a35aeddcb486378a30a1a52372c105482</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>calcGoal</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a83f4776f8c3dd52a83e7684797e0411e</anchor>
      <arglist>(const State &amp;state, Real &amp;goal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>calcGoalGradient</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a71c99b10a6a207e2f6a10900f85778c4</anchor>
      <arglist>(const State &amp;state, Vector &amp;gradient) const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a12741ba3ba04303ab26b4eaa2c5e3b35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInAssembler</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a6e4b6f8b10b7c457f3add12e8e80cbfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Assembler &amp;</type>
      <name>getAssembler</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>ae4661cb28f710ac8ce65f2a698f9fcb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AssemblyConditionIndex</type>
      <name>getAssemblyConditionIndex</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a3e8adccae0489cc379278ca4bf5e40d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getNumFreeQs</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a23215d361b5bfb662f30d2f273605fe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>QIndex</type>
      <name>getQIndexOfFreeQ</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>afba42b9d3910f9f0532f038dedd4d79c</anchor>
      <arglist>(Assembler::FreeQIndex fx) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Assembler::FreeQIndex</type>
      <name>getFreeQIndexOfQ</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>aa70e6f5c5cfad1741b8850dd85dc50bc</anchor>
      <arglist>(QIndex qx) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const MultibodySystem &amp;</type>
      <name>getMultibodySystem</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>ad2770bd8f15488db474a3a069fb5ebeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SimbodyMatterSubsystem &amp;</type>
      <name>getMatterSubsystem</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a726bf84efea0d3ccec23953a170a60bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeAssembler</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>ac6e433dd9356210a634065304920cf50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>uninitializeAssembler</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a03df1b5040accc748c221cdc34afff1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Assembler</name>
      <anchorfile>classSimTK_1_1AssemblyCondition.html</anchorfile>
      <anchor>a08829e094e460cdd0df495c883c39ce2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::QValue</name>
    <filename>classSimTK_1_1QValue.html</filename>
    <base>SimTK::AssemblyCondition</base>
    <member kind="function">
      <type></type>
      <name>QValue</name>
      <anchorfile>classSimTK_1_1QValue.html</anchorfile>
      <anchor>acf9d0eaf514ec83426cae5ecb3d4c250</anchor>
      <arglist>(MobilizedBodyIndex mbx, MobilizerQIndex qx, Real value)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1QValue.html</anchorfile>
      <anchor>a80bc75e51dd65b7a82206683b20fffc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1QValue.html</anchorfile>
      <anchor>a943a9476d6de1a776d1b6b2f35624548</anchor>
      <arglist>(Real newValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEquations</name>
      <anchorfile>classSimTK_1_1QValue.html</anchorfile>
      <anchor>aca8d63e2b5930e60874cc1ee1de44e1f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcErrors</name>
      <anchorfile>classSimTK_1_1QValue.html</anchorfile>
      <anchor>a7165bbe736e220b75510d261f8d7ab1f</anchor>
      <arglist>(const State &amp;state, Vector &amp;error) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcErrorJacobian</name>
      <anchorfile>classSimTK_1_1QValue.html</anchorfile>
      <anchor>a8e7233114e4dba44fb6723a091f43bef</anchor>
      <arglist>(const State &amp;state, Matrix &amp;J) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcGoal</name>
      <anchorfile>classSimTK_1_1QValue.html</anchorfile>
      <anchor>ab3f08dcb65d337b4aeee0272c51a59c8</anchor>
      <arglist>(const State &amp;state, Real &amp;goal) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcGoalGradient</name>
      <anchorfile>classSimTK_1_1QValue.html</anchorfile>
      <anchor>a04bd412efe091349e3f0d975d0263420</anchor>
      <arglist>(const State &amp;state, Vector &amp;grad) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Markers</name>
    <filename>classSimTK_1_1Markers.html</filename>
    <base>SimTK::AssemblyCondition</base>
    <class kind="struct">SimTK::Markers::Marker</class>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_LOCAL_INDEX_TYPE</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a1d51c07fde85f4c35986d83420b6daf6</anchor>
      <arglist>(Markers, MarkerIx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DEFINE_UNIQUE_LOCAL_INDEX_TYPE</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a58c7c1f0656b7337c9cc2d86ef93d1b4</anchor>
      <arglist>(Markers, ObservationIx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Markers</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aa6e2abd47342cc19365ea0e4910cb62a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MarkerIx</type>
      <name>addMarker</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>abc0271d0b6ea2ae53245bdba97788699</anchor>
      <arglist>(const String &amp;name, MobilizedBodyIndex bodyB, const Vec3 &amp;markerInB, Real weight=1)</arglist>
    </member>
    <member kind="function">
      <type>MarkerIx</type>
      <name>addMarker</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>ac1e802c74ee429fd9f05f37b18540918</anchor>
      <arglist>(MobilizedBodyIndex bodyB, const Vec3 &amp;markerInB, Real weight=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineObservationOrder</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>ac450d3e8a5ca9fc6f9ef517351a40b7b</anchor>
      <arglist>(const Array_&lt; MarkerIx &gt; &amp;observationOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineObservationOrder</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>adc0c3ddc3b1404a41d4cba4f8616b109</anchor>
      <arglist>(const Array_&lt; String &gt; &amp;observationOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineObservationOrder</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>ac55f41ffdc54902a6b6ecab35923e9b3</anchor>
      <arglist>(const std::vector&lt; String &gt; &amp;observationOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineObservationOrder</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a15b95eb1867c4f4aff89386f84dd3432</anchor>
      <arglist>(const Array_&lt; std::string &gt; &amp;observationOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineObservationOrder</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a2c91f8ea14ab64af77c7e0e5ed0bae30</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;observationOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>defineObservationOrder</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a40cb879b507ba1ca7ccfb2f9458d4d8b</anchor>
      <arglist>(int n, const char *const observationOrder[])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMarkers</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a766a25810e254d7b0702929469c1b0c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getMarkerName</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a142f81a6c8a8a6d60b752449a1626c58</anchor>
      <arglist>(MarkerIx ix)</arglist>
    </member>
    <member kind="function">
      <type>const MarkerIx</type>
      <name>getMarkerIx</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>ae9fd383e7ea769955491b472a30b5840</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMarkerWeight</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aee3cbc9dd57222daabd416d3d7835fba</anchor>
      <arglist>(MarkerIx mx)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getMarkerBody</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>ab1af0ee241663449e463ac646d1522b9</anchor>
      <arglist>(MarkerIx mx) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMarkerStation</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a31f224abe215c3adb9a11c951067b548</anchor>
      <arglist>(MarkerIx mx) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumObservations</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a495668c602d682856e77e985c7f39973</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ObservationIx</type>
      <name>getObservationIxForMarker</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aea11020fcfaa689b6aec7e3c09a440e1</anchor>
      <arglist>(MarkerIx mx) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasObservation</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>ac4fdb5c76bfc5dbcb8987d18161aa60d</anchor>
      <arglist>(MarkerIx mx) const </arglist>
    </member>
    <member kind="function">
      <type>MarkerIx</type>
      <name>getMarkerIxForObservation</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aba7e5312de9497eca32af0b373da96df</anchor>
      <arglist>(ObservationIx ox) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMarker</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aeae66cd0ffdbc1921315fb91c0ec7e87</anchor>
      <arglist>(ObservationIx ox) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; MarkerIx &gt; &amp;</type>
      <name>getMarkersOnBody</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a18525539b6cf09457eee00a5d5fa1cc9</anchor>
      <arglist>(MobilizedBodyIndex mbx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveOneObservation</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>ae3ae751ebb077500cbcb2f1a119f83a5</anchor>
      <arglist>(ObservationIx ox, const Vec3 &amp;observation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveAllObservations</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aaa0334d457a01f078a517824544415bc</anchor>
      <arglist>(const Array_&lt; Vec3 &gt; &amp;observations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeMarkerWeight</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a2ac25a264d121e6cbd086dfc5c15b91e</anchor>
      <arglist>(MarkerIx mx, Real weight)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getObservation</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a97007bfaeb2d727d4827f32174b96441</anchor>
      <arglist>(ObservationIx ox) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Vec3, ObservationIx &gt; &amp;</type>
      <name>getAllObservations</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a88c53b2ff899bd8c10a926ae78314886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findCurrentMarkerLocation</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aa2557d3a435aa8f537db6e3ab3a3241e</anchor>
      <arglist>(MarkerIx mx) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>findCurrentMarkerError</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a738192d37cefa7f62a1a22f7b27e255f</anchor>
      <arglist>(MarkerIx mx) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>findCurrentMarkerErrorSquared</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a2f996fffa0879e42066e251a08ecfab8</anchor>
      <arglist>(MarkerIx mx) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcErrors</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aa2b403b3918e31cab7bb4f9362170273</anchor>
      <arglist>(const State &amp;state, Vector &amp;err) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcErrorJacobian</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>aeff24d4b6f38111004a124ed6dac3819</anchor>
      <arglist>(const State &amp;state, Matrix &amp;jacobian) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumErrors</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a67979f7f2240c5f4283231a6785c6a98</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcGoal</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>af9755ac3efc0ef4b91335f0c9dcdf6c2</anchor>
      <arglist>(const State &amp;state, Real &amp;goal) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>calcGoalGradient</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a25842c4fbae6f2b6813e78453ead0ab6</anchor>
      <arglist>(const State &amp;state, Vector &amp;grad) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initializeCondition</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a362321f41dd568a89b6b7bddd0e6e1bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uninitializeCondition</name>
      <anchorfile>classSimTK_1_1Markers.html</anchorfile>
      <anchor>a2db6bcfc6f539439e174bc16df7e7433</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Body</name>
    <filename>classSimTK_1_1Body.html</filename>
    <class kind="class">SimTK::Body::Ground</class>
    <class kind="class">SimTK::Body::Linear</class>
    <class kind="class">SimTK::Body::Massless</class>
    <class kind="class">SimTK::Body::Particle</class>
    <class kind="class">SimTK::Body::Rigid</class>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>af22868b53d9d2c12186543e4b66f4669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Body</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>af0bdbaa304cce240bb5df8e6b2bbc9ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a2e36446031b117843c091815617538f9</anchor>
      <arglist>(const Body &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Body &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a8618440d6e978b42a768029534655efe</anchor>
      <arglist>(const Body &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a163d0254a9c7d15d426ed7661fdaca73</anchor>
      <arglist>(const MassProperties &amp;massProps)</arglist>
    </member>
    <member kind="function">
      <type>Body &amp;</type>
      <name>setDefaultRigidBodyMassProperties</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a66ef18cc8d60bcb5b9e5dd5ba480fc54</anchor>
      <arglist>(const MassProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const MassProperties &amp;</type>
      <name>getDefaultRigidBodyMassProperties</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>aaebd3923de3e5565a47b4b70fcc86401</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDecoration</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a83ad47502982c25d81c50de9d892f3e9</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDecoration</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>ad8be825d257258a92825de5672f3cb76</anchor>
      <arglist>(const DecorativeGeometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDecorations</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a55a487caf74953bb66447f4ff1202e6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorativeGeometry &amp;</type>
      <name>getDecoration</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>aeb943a2eed7d0c824c1031a900d7f1a1</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>updDecoration</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a6174ada0db0ba172a8a885fa82a80cec</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addContactSurface</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>ad69f5499c390bef85e36f1d525642c4e</anchor>
      <arglist>(const Transform &amp;X_BS, const ContactSurface &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addContactSurface</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a2dfa286a9cf6c0377b0e09fc78eced51</anchor>
      <arglist>(const ContactSurface &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumContactSurfaces</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>ae80b365ec3a32e771496560a766cb8cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ContactSurface &amp;</type>
      <name>getContactSurface</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a9c57e3c00c0b59388f820abdba133042</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getContactSurfaceTransform</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a01136d6f07ac1e677abdafd962fc7362</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>ContactSurface &amp;</type>
      <name>updContactSurface</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>afc93996f13bb8dc02b7f26a6d54d65f7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>updContactSurfaceTransform</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a72733ec99b83eb35bb864b883015b441</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwnerHandle</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a2196136c42fd5fc5ced84e107b6e8171</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyHandle</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a5fef18482dc81ab407e6a3c3d8fc6f02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a85ca146f30ac35eb02e2319a4c38ea86</anchor>
      <arglist>(class BodyRep *r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRep</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a0d532bc05f1b15ca5630c96424287381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BodyRep &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>aa9b8a1852d1d71ecf69fb4dde3d42be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BodyRep &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a2490832fa74a6d50240c0b8caa334af6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRep</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>a7e0852d97e1891cc48a538e3262b8ca4</anchor>
      <arglist>(BodyRep &amp;r)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class BodyRep *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1Body.html</anchorfile>
      <anchor>ae397aa7e2fdc62dfda344ef7c5492125</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Body::Ground</name>
    <filename>classSimTK_1_1Body_1_1Ground.html</filename>
    <base>SimTK::Body</base>
    <member kind="function">
      <type></type>
      <name>Ground</name>
      <anchorfile>classSimTK_1_1Body_1_1Ground.html</anchorfile>
      <anchor>a31375450d362a6641057f04281472e6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1Body_1_1Ground.html</anchorfile>
      <anchor>a14ba1b77efcded36c73e918d7877d930</anchor>
      <arglist>(Ground, Body)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Body::Linear</name>
    <filename>classSimTK_1_1Body_1_1Linear.html</filename>
    <base>SimTK::Body</base>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>classSimTK_1_1Body_1_1Linear.html</anchorfile>
      <anchor>a4df8a302ece17217a1d518c5daeb1691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>classSimTK_1_1Body_1_1Linear.html</anchorfile>
      <anchor>acd3b506e5d93d67fce89e7c86e844fc2</anchor>
      <arglist>(const MassProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Linear &amp;</type>
      <name>setDefaultRigidBodyMassProperties</name>
      <anchorfile>classSimTK_1_1Body_1_1Linear.html</anchorfile>
      <anchor>ac897ad57cd09b85306f1232a36a9a80f</anchor>
      <arglist>(const MassProperties &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1Body_1_1Linear.html</anchorfile>
      <anchor>aea48d592f7cb2e9d07eab9f9252c0d94</anchor>
      <arglist>(Linear, Body)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Body::Massless</name>
    <filename>classSimTK_1_1Body_1_1Massless.html</filename>
    <base>SimTK::Body</base>
    <member kind="function">
      <type></type>
      <name>Massless</name>
      <anchorfile>classSimTK_1_1Body_1_1Massless.html</anchorfile>
      <anchor>a4e56f798be7e1183098414cadcc53b33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1Body_1_1Massless.html</anchorfile>
      <anchor>a8b34ffe8b62215f70b066d30ed99ef07</anchor>
      <arglist>(Massless, Body)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Body::Particle</name>
    <filename>classSimTK_1_1Body_1_1Particle.html</filename>
    <base>SimTK::Body</base>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>classSimTK_1_1Body_1_1Particle.html</anchorfile>
      <anchor>a0cba66e17ad4c71f4e9424c9f7641ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>classSimTK_1_1Body_1_1Particle.html</anchorfile>
      <anchor>a9f3be95c8c29b67e1c2d5efb8dd9d0d4</anchor>
      <arglist>(const Real &amp;mass)</arglist>
    </member>
    <member kind="function">
      <type>Particle &amp;</type>
      <name>setDefaultRigidBodyMassProperties</name>
      <anchorfile>classSimTK_1_1Body_1_1Particle.html</anchorfile>
      <anchor>a4f2fdd9e855b57a61bc195830185f45a</anchor>
      <arglist>(const MassProperties &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1Body_1_1Particle.html</anchorfile>
      <anchor>a348aeede3f82341e7ef866b72fa978f0</anchor>
      <arglist>(Particle, Body)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Body::Rigid</name>
    <filename>classSimTK_1_1Body_1_1Rigid.html</filename>
    <base>SimTK::Body</base>
    <member kind="function">
      <type></type>
      <name>Rigid</name>
      <anchorfile>classSimTK_1_1Body_1_1Rigid.html</anchorfile>
      <anchor>a728202ccead9d93ba6929854b2d6ad7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rigid</name>
      <anchorfile>classSimTK_1_1Body_1_1Rigid.html</anchorfile>
      <anchor>a99bf0931f04f94ade4558f87a91cd88b</anchor>
      <arglist>(const MassProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Rigid &amp;</type>
      <name>setDefaultRigidBodyMassProperties</name>
      <anchorfile>classSimTK_1_1Body_1_1Rigid.html</anchorfile>
      <anchor>a4b6a71ba61c5314974718a519db811e2</anchor>
      <arglist>(const MassProperties &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1Body_1_1Rigid.html</anchorfile>
      <anchor>a94fe4019de9df123ec6c4ca1e0886af5</anchor>
      <arglist>(Rigid, Body)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CablePath</name>
    <filename>classSimTK_1_1CablePath.html</filename>
    <member kind="function">
      <type></type>
      <name>CablePath</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>abcc5addd22f946fb3fa1a79dac2e0601</anchor>
      <arglist>(CableTrackerSubsystem &amp;cables, const MobilizedBody &amp;originBody, const Vec3 &amp;defaultOriginPoint, const MobilizedBody &amp;terminationBody, const Vec3 &amp;defaultTerminationPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CablePath</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>a01a735f32422201355b4eaeccc47dd01</anchor>
      <arglist>(CableTrackerSubsystem &amp;cables, const MobilizedBody &amp;originBody, const MobilizedBody &amp;terminationBody)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CablePath</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>ac59ed2bfd55237ea705bedce6211a8ac</anchor>
      <arglist>(const CablePath &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>CablePath &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>ab2d8dd423ad00e0b8adcf1bf1ca4225a</anchor>
      <arglist>(const CablePath &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CablePath</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>ac86aa79b0b955c7f341e506b87b32fb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveForInitialCablePath</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>ab8e3817afe4fb796e6350e86bf4bd581</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumObstacles</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>aa1ca8d7f6080dfaede202b032d2f4ecd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CableObstacle &amp;</type>
      <name>getObstacle</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>a8071052f4ee199c6594a18a5f9fc12ce</anchor>
      <arglist>(CableObstacleIndex obstacleIx) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getCableLength</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>ac4512bfc7cf614762e4eebccea3ef2dd</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getCableLengthDot</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>aaa037d0876effe0cff5c930421e9379f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBodyForces</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>ac3fbd37473cb7df555f7dad1452fe287</anchor>
      <arglist>(const State &amp;state, Real tension, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcCablePower</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>ae2a1842cda367058ecae9c23499c8f6d</anchor>
      <arglist>(const State &amp;state, Real tension) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getIntegratedCableLengthDot</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>adc02be889a3730f602bfba8ac4781e3d</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntegratedCableLengthDot</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>a29c907e9ec60f62ae0c7976f70686650</anchor>
      <arglist>(State &amp;state, Real value) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CablePath</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>a8f26aa53850b99602d3636f1e245267c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>acb16564992c61ce3eda7a94fba904e3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1CablePath.html</anchorfile>
      <anchor>a35d3c37e4ec6ea82ca61e2e419fa4985</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CableObstacle</name>
    <filename>classSimTK_1_1CableObstacle.html</filename>
    <class kind="class">SimTK::CableObstacle::Surface</class>
    <class kind="class">SimTK::CableObstacle::ViaPoint</class>
    <member kind="function">
      <type></type>
      <name>CableObstacle</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a231430aa4dc022e9a2d4aed92f67d76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CableObstacle</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>aac5a0fa18918df8732e4d8ef78399049</anchor>
      <arglist>(CablePath &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CableObstacle</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a669ca502545b20dc1e3b1f601d97c71d</anchor>
      <arglist>(const CableObstacle &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>CableObstacle &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a159083a50660b747da2899fe82fdb395</anchor>
      <arglist>(const CableObstacle &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CableObstacle</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>adbc39b356d1602fe439909aeca2bc806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getDefaultTransform</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a8f9022474760766885d412d877535ca7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getMobilizedBody</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a9dff77c9bdcbae1e644fe9dd1b90618f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CablePath &amp;</type>
      <name>getCablePath</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>aa564b4c8be2bdeb446d8b26065d29e39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CableObstacleIndex</type>
      <name>getObstacleIndex</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a43903c2fcc57509030eb89315bb112fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorativeGeometry &amp;</type>
      <name>getDecorativeGeometry</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>ab94b059540ff7470ad676f2186fc2b4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>updDecorativeGeometry</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>acd99ce9cdf0be5130849ebad97b7b6e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabledByDefault</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>aa4465138f0323a6eace22cdce5c20bff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CableObstacle &amp;</type>
      <name>setDisabledByDefault</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>aa103d3db6f7309d7776701fbc741c4be</anchor>
      <arglist>(bool shouldBeDisabled)</arglist>
    </member>
    <member kind="function">
      <type>CableObstacle &amp;</type>
      <name>setDefaultTransform</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>ab31be2e2999999ec532c893134dc5ddb</anchor>
      <arglist>(const Transform &amp;X_BS)</arglist>
    </member>
    <member kind="function">
      <type>CableObstacle &amp;</type>
      <name>setDecorativeGeometry</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a2696b9ed2e35b2748f113a05d56cc681</anchor>
      <arglist>(const DecorativeGeometry &amp;viz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a1c8c5534527612d4d00d9058904f2049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>ac4cb79217c8055fcdc4cf95314edfaff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>ac9b4a7fc6962f578755856a5cde211b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>ae422f1bcbb81da97590ce6b04519f8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CableObstacle</name>
      <anchorfile>classSimTK_1_1CableObstacle.html</anchorfile>
      <anchor>a4f4f7c5b59229be2a7fd2b58c1727394</anchor>
      <arglist>(Impl *impl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CableObstacle::Surface</name>
    <filename>classSimTK_1_1CableObstacle_1_1Surface.html</filename>
    <base>SimTK::CableObstacle</base>
    <member kind="function">
      <type></type>
      <name>Surface</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1Surface.html</anchorfile>
      <anchor>a9196f232f0840cc9e86d9f3d01758ee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Surface</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1Surface.html</anchorfile>
      <anchor>a076aeac71a28d211768f3a0fa813bff6</anchor>
      <arglist>(CablePath &amp;path, const MobilizedBody &amp;mobod, const Transform &amp;X_BS, const ContactGeometry &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>Surface &amp;</type>
      <name>setDecorativeGeometry</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1Surface.html</anchorfile>
      <anchor>af80b49d31c4eaa857fd982f205078b50</anchor>
      <arglist>(const DecorativeGeometry &amp;viz)</arglist>
    </member>
    <member kind="function">
      <type>Surface &amp;</type>
      <name>setNearPoint</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1Surface.html</anchorfile>
      <anchor>aea5bb18902b40868d165b2e4625c63c0</anchor>
      <arglist>(const Vec3 &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>Surface &amp;</type>
      <name>setContactPointHints</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1Surface.html</anchorfile>
      <anchor>a14b875f8e14a1f56f64744891d701930</anchor>
      <arglist>(const Vec3 &amp;startHint, const Vec3 &amp;endHint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1Surface.html</anchorfile>
      <anchor>a1b42c5ac8c90c2dcb9edc87f5d52e53e</anchor>
      <arglist>(const CableObstacle &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Surface &amp;</type>
      <name>downcast</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1Surface.html</anchorfile>
      <anchor>a3a78c8f022bd83d89385630b68551e96</anchor>
      <arglist>(const CableObstacle &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Surface &amp;</type>
      <name>updDowncast</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1Surface.html</anchorfile>
      <anchor>ab7c7a54de979f8385a9fba8ab36e9864</anchor>
      <arglist>(CableObstacle &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CableObstacle::ViaPoint</name>
    <filename>classSimTK_1_1CableObstacle_1_1ViaPoint.html</filename>
    <base>SimTK::CableObstacle</base>
    <member kind="function">
      <type></type>
      <name>ViaPoint</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1ViaPoint.html</anchorfile>
      <anchor>a0616df779aa452e8f0cf42d360b8a2e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ViaPoint</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1ViaPoint.html</anchorfile>
      <anchor>a72a09209fb169d1012e32af443b722fe</anchor>
      <arglist>(CablePath &amp;path, const MobilizedBody &amp;viaMobod, const Vec3 &amp;defaultStation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1ViaPoint.html</anchorfile>
      <anchor>acafbf109c4f5f9b5f0bbf8c486dd8d52</anchor>
      <arglist>(const CableObstacle &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ViaPoint &amp;</type>
      <name>downcast</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1ViaPoint.html</anchorfile>
      <anchor>a27925a2f647465695cde639ba88d1080</anchor>
      <arglist>(const CableObstacle &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ViaPoint &amp;</type>
      <name>updDowncast</name>
      <anchorfile>classSimTK_1_1CableObstacle_1_1ViaPoint.html</anchorfile>
      <anchor>ad22f4ba759f5154812678760da57dbab</anchor>
      <arglist>(CableObstacle &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CableSpring</name>
    <filename>classSimTK_1_1CableSpring.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>CableSpring</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a3302250982a6078c9908a3dac003c48c</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const CablePath &amp;path, Real defaultStiffness, Real defaultSlackLength, Real defaultDissipationCoef)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CableSpring</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a8f0ad4b1954686b15595b0e29457d662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CableSpring &amp;</type>
      <name>setDefaultStiffness</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a457b0d3d9114848f53de641500cc57a9</anchor>
      <arglist>(Real stiffness)</arglist>
    </member>
    <member kind="function">
      <type>CableSpring &amp;</type>
      <name>setDefaultSlackLength</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>af60df0ed9200731baedbba732f3fcb97</anchor>
      <arglist>(Real slackLength)</arglist>
    </member>
    <member kind="function">
      <type>CableSpring &amp;</type>
      <name>setDefaultDissipationCoef</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a31f95bd0365eb748d2a60a5944c63c72</anchor>
      <arglist>(Real dissipation)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultStiffness</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>ad7efbcce9f1e363a7071750a4fa9437a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultSlackLength</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a34e78ea92da86ce48a55f8bd967266fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultDissipationCoef</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a751969c1ee69a3e88eafd60328228e9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CableSpring &amp;</type>
      <name>setStiffness</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>af824d4d51d0080b303490c6bac05e2eb</anchor>
      <arglist>(State &amp;state, Real stiffness) const </arglist>
    </member>
    <member kind="function">
      <type>const CableSpring &amp;</type>
      <name>setSlackLength</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a89087450725a7c79bf9ffe2cd5831199</anchor>
      <arglist>(State &amp;state, Real slackLength) const </arglist>
    </member>
    <member kind="function">
      <type>const CableSpring &amp;</type>
      <name>setDissipationCoef</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a8a3d2cc2c2122197cb81f7be9bf7034c</anchor>
      <arglist>(State &amp;state, Real dissipationCoef) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getStiffness</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>ad9ea7bbad7bf71c9a72391e71299083e</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getSlackLength</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a59de122bb2f2716506260322080ec14e</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDissipationCoef</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>af9a9fdbcfafc2544bba9c5c6b6ac6367</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getLength</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a4ba755a945f65d98886ae56023771a68</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getLengthDot</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a13d6950890c715d3588d441aabe063ea</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTension</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a832cfb1f65a36ed601f2b53ee7329e88</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPotentialEnergy</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a1e24719deb88447766df9ed105246b40</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPowerDissipation</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a06d7746e1a779696431ce8cda41474f1</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDissipatedEnergy</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a805493498cc836d80f8690e7c8b911f9</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDissipatedEnergy</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a74abae8d9c956ffb42563e171b740ac5</anchor>
      <arglist>(State &amp;state, Real energy) const </arglist>
    </member>
    <member kind="function">
      <type>const CablePath &amp;</type>
      <name>getCablePath</name>
      <anchorfile>classSimTK_1_1CableSpring.html</anchorfile>
      <anchor>a1bd76be76e642b2ec420ff71e7a89541</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CableTrackerSubsystem</name>
    <filename>classSimTK_1_1CableTrackerSubsystem.html</filename>
    <base>SimTK::Subsystem</base>
    <member kind="function">
      <type></type>
      <name>CableTrackerSubsystem</name>
      <anchorfile>classSimTK_1_1CableTrackerSubsystem.html</anchorfile>
      <anchor>a32bfbeef2e86660a3ae53aba0f279735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CableTrackerSubsystem</name>
      <anchorfile>classSimTK_1_1CableTrackerSubsystem.html</anchorfile>
      <anchor>abc05343c2040428aa369e8ec0e49aa5d</anchor>
      <arglist>(MultibodySystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCablePaths</name>
      <anchorfile>classSimTK_1_1CableTrackerSubsystem.html</anchorfile>
      <anchor>af7d6b82d5dc29fac85e0ec3a13bb58e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CablePath &amp;</type>
      <name>getCablePath</name>
      <anchorfile>classSimTK_1_1CableTrackerSubsystem.html</anchorfile>
      <anchor>a925d156ce8ab8eb5dc3b89051ddde711</anchor>
      <arglist>(CablePathIndex cableIx) const </arglist>
    </member>
    <member kind="function">
      <type>CablePath &amp;</type>
      <name>updCablePath</name>
      <anchorfile>classSimTK_1_1CableTrackerSubsystem.html</anchorfile>
      <anchor>aceb2b34e1343193b69fbe19031d1e308</anchor>
      <arglist>(CablePathIndex cableIx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CompliantContactSubsystem</name>
    <filename>classSimTK_1_1CompliantContactSubsystem.html</filename>
    <base>SimTK::ForceSubsystem</base>
    <member kind="function">
      <type></type>
      <name>CompliantContactSubsystem</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a841104492a7ee88195d76c89d38e67d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompliantContactSubsystem</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>aaa945ae984c6c5943b3cb96643340a71</anchor>
      <arglist>(MultibodySystem &amp;, const ContactTrackerSubsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTransitionVelocity</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a3c6bcedecf80305b725fe3a1c57f3667</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransitionVelocity</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a3fd3882c7afc41d7ff442a762a1d107d</anchor>
      <arglist>(Real vt)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOOTransitionVelocity</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a575cd89a706161dbb9f0fb49f4d08416</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackDissipatedEnergy</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a2ba1905786c464de43f3edb793912a39</anchor>
      <arglist>(bool shouldTrack)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTrackDissipatedEnergy</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>ad202cfbaf4e7a015b0ca138dc45ce0b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumContactForces</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a614999766ed122a97b05fbbc26b91e01</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactForce &amp;</type>
      <name>getContactForce</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a9e81f575053da2bddc335a2a7972fc3b</anchor>
      <arglist>(const State &amp;state, int n) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactForce &amp;</type>
      <name>getContactForceById</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>aba825885fa30c10eec23f9386d882080</anchor>
      <arglist>(const State &amp;state, ContactId id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>calcContactPatchDetailsById</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a8083755739a20371f2c8c085d862765f</anchor>
      <arglist>(const State &amp;state, ContactId id, ContactPatch &amp;patch) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDissipatedEnergy</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>aad0c9a729556cff4f4ab62786a1162e7</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDissipatedEnergy</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>abd20127d969cb44450709edb5c4b4fff</anchor>
      <arglist>(State &amp;state, Real energy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptForceGenerator</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a84b8d543bf8d47beced5285738815b1e</anchor>
      <arglist>(ContactForceGenerator *generator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptDefaultForceGenerator</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a1196978aafd18d7a0d19c4a3d6d449c6</anchor>
      <arglist>(ContactForceGenerator *generator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasForceGenerator</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>aca7f9d4b973d1eab0e8c0a25b0ca23c4</anchor>
      <arglist>(ContactTypeId contact) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDefaultForceGenerator</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>af874007f1e8aeda3393e367893576404</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ContactForceGenerator &amp;</type>
      <name>getContactForceGenerator</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a5b77a524f23d0625ad93da9a465e4582</anchor>
      <arglist>(ContactTypeId contact) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactForceGenerator &amp;</type>
      <name>getDefaultForceGenerator</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a6d4caaf031ac3744dd6e2fd6b9f2210c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ContactTrackerSubsystem &amp;</type>
      <name>getContactTrackerSubsystem</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>abbbf92836dde2b1fa5e0b6ef741e6284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MultibodySystem &amp;</type>
      <name>getMultibodySystem</name>
      <anchorfile>classSimTK_1_1CompliantContactSubsystem.html</anchorfile>
      <anchor>a03f03571dc82ae51f595c9c0713fb418</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactForce</name>
    <filename>classSimTK_1_1ContactForce.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactForce</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>ac8f15a4ee31561355346f65d24ed067b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactForce</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a9dd9a2e99347645de379cbd33aa22174</anchor>
      <arglist>(ContactId id, const Vec3 &amp;contactPt, const SpatialVec &amp;forceOnSurface2, Real potentialEnergy, Real powerLoss)</arglist>
    </member>
    <member kind="function">
      <type>ContactId</type>
      <name>getContactId</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a958625fb342f8cc53f8a0069b86e9f74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getContactPoint</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a4023d7f08ac2181d5e2663f1850d6767</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getForceOnSurface2</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a3dd61022bc6a7caab706d6cc54b0d169</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPotentialEnergy</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a296e94d93c6e7a20884729bff29ea51c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPowerDissipation</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a5aa780c383134b710e25b28901eb464d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTo</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a4159c4cc89d2bf9137c515c18ff1a03f</anchor>
      <arglist>(ContactId id, const Vec3 &amp;contactPt, const SpatialVec &amp;forceOnSurface2, Real potentialEnergy, Real powerLoss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactId</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a25aa17b79d70242d9fee031f1f3cc390</anchor>
      <arglist>(ContactId id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactPoint</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a8151c828f6984648268c49bf34405707</anchor>
      <arglist>(const Vec3 &amp;contactPt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceOnSurface2</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a623578f0a286b3ca62356991533feb19</anchor>
      <arglist>(const SpatialVec &amp;forceOnSurface2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPotentialEnergy</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>ae1501193bec17fb782a5b91892309ceb</anchor>
      <arglist>(Real potentialEnergy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPowerDissipation</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a5a5c3dbbcd81fe675daf042b1cb7a8b1</anchor>
      <arglist>(Real powerLoss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a59cfe01536d86f65dd4e45ca44045bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a6bc9e41a8a11216130c36a5b8ef5f9bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeFrameInPlace</name>
      <anchorfile>classSimTK_1_1ContactForce.html</anchorfile>
      <anchor>a7d629e7ef107849ce7cd9ed4927ce504</anchor>
      <arglist>(const Transform &amp;X_BA)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactDetail</name>
    <filename>classSimTK_1_1ContactDetail.html</filename>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getContactPoint</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a703294faad01c991ba132dae56ca37de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getContactNormal</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a92475447ac5df1355b56486ceb4bde6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getSlipVelocity</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a01eb497adab381fd24065a23d952c82d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getForceOnSurface2</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a476a89ef550ef5455bac5237d57b6638</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDeformation</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a892f710cb5d6ed02a762ed65c932aad0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDeformationRate</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a28ed1f10a5fb4cb561975017ab139a1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPatchArea</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a60771bce99a14cc2c3c68d536d75998c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPeakPressure</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a7ab1362279bbcf167addd946cb150ff2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPotentialEnergy</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a87a9d503842530ba25f9f0e42e883624</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPowerDissipation</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a6a600b0f3f184b6512a14ac71fdcd685</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeFrameInPlace</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>ada751d4d07476f4f43254b36129bc47e</anchor>
      <arglist>(const Transform &amp;X_BA)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeFrameAndSwitchSurfacesInPlace</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a562c251f38796df1454db89bb0c73b44</anchor>
      <arglist>(const Transform &amp;X_BA)</arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>m_contactPt</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>aa49a0a0bbd33f6f505803ebcd3085426</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec3</type>
      <name>m_patchNormal</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a161afa10998f7b287c19117dc1ea6f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>m_slipVelocity</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a4592b48429684a39f1136f73875b89c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>m_forceOnSurface2</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>ad1c4e28f75a3343a77ba07df9a4df6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>m_deformation</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a36bccf932938da9c24c11e01e7411e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>m_deformationRate</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>ac1fcefd69d4cff269fb72b692d485298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>m_patchArea</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>ae5032adec66ab31cb9c0211315d08168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>m_peakPressure</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a7f1b2cf2772b8e66a80b0653a7fb5f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>m_potentialEnergy</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>af9f31832368181533595e3d0f42f5d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>m_powerLoss</name>
      <anchorfile>classSimTK_1_1ContactDetail.html</anchorfile>
      <anchor>a0acaac123984edd625c7c80e2308af1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactPatch</name>
    <filename>classSimTK_1_1ContactPatch.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1ContactPatch.html</anchorfile>
      <anchor>a2fc45fb6934481bd481a334b5082439b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1ContactPatch.html</anchorfile>
      <anchor>ab6813336ea2d4bd2d86a2f1e9eddd99d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ContactForce &amp;</type>
      <name>getContactForce</name>
      <anchorfile>classSimTK_1_1ContactPatch.html</anchorfile>
      <anchor>ac786ddd1f20fbb3552793eecc7a57460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDetails</name>
      <anchorfile>classSimTK_1_1ContactPatch.html</anchorfile>
      <anchor>aa57ae4a98c1a0ad18446e00de9f39225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ContactDetail &amp;</type>
      <name>getContactDetail</name>
      <anchorfile>classSimTK_1_1ContactPatch.html</anchorfile>
      <anchor>a8b0367c1604855a6ea00fdcd79720d58</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeFrameInPlace</name>
      <anchorfile>classSimTK_1_1ContactPatch.html</anchorfile>
      <anchor>a05f019647effea48d505775369dc1419</anchor>
      <arglist>(const Transform &amp;X_BA)</arglist>
    </member>
    <member kind="variable">
      <type>ContactForce</type>
      <name>m_resultant</name>
      <anchorfile>classSimTK_1_1ContactPatch.html</anchorfile>
      <anchor>adef77d588fc39887d8b6fcf8da9309e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array_&lt; ContactDetail &gt;</type>
      <name>m_elements</name>
      <anchorfile>classSimTK_1_1ContactPatch.html</anchorfile>
      <anchor>a5ed7b12df7d0db8e2285d242210a54e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactForceGenerator</name>
    <filename>classSimTK_1_1ContactForceGenerator.html</filename>
    <class kind="class">SimTK::ContactForceGenerator::DoNothing</class>
    <class kind="class">SimTK::ContactForceGenerator::ElasticFoundation</class>
    <class kind="class">SimTK::ContactForceGenerator::HertzCircular</class>
    <class kind="class">SimTK::ContactForceGenerator::HertzElliptical</class>
    <class kind="class">SimTK::ContactForceGenerator::ThrowError</class>
    <member kind="function">
      <type></type>
      <name>ContactForceGenerator</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator.html</anchorfile>
      <anchor>acf7a3d9608964fdfd59430f225a8dcd1</anchor>
      <arglist>(ContactTypeId type)</arglist>
    </member>
    <member kind="function">
      <type>ContactTypeId</type>
      <name>getContactTypeId</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator.html</anchorfile>
      <anchor>a5556bdc9aff88f9f85f8f30dca9de385</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CompliantContactSubsystem &amp;</type>
      <name>getCompliantContactSubsystem</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator.html</anchorfile>
      <anchor>affea9c66097805ccc28f65ba03cad5b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCompliantContactSubsystem</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator.html</anchorfile>
      <anchor>ab8852ef9fa5e12271bab3bf856415fc8</anchor>
      <arglist>(const CompliantContactSubsystem *sub)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ContactForceGenerator</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator.html</anchorfile>
      <anchor>a792f49ac716f64f1596a9ec925e191e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcContactForce</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator.html</anchorfile>
      <anchor>a85d96c881f8e75e6040b9731b670a438</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactForce &amp;contactForce) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcContactPatch</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator.html</anchorfile>
      <anchor>af2ac4cae08b6397f8d54b9b589a02297</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactPatch &amp;patch) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactForceGenerator::DoNothing</name>
    <filename>classSimTK_1_1ContactForceGenerator_1_1DoNothing.html</filename>
    <base>SimTK::ContactForceGenerator</base>
    <member kind="function">
      <type></type>
      <name>DoNothing</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1DoNothing.html</anchorfile>
      <anchor>a50cf5f041a6ac236b8752a5e0a9c27e1</anchor>
      <arglist>(ContactTypeId type=ContactTypeId(0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DoNothing</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1DoNothing.html</anchorfile>
      <anchor>a8c4a4cb123506a41ad8d8bfc15b0e493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactForce</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1DoNothing.html</anchorfile>
      <anchor>a1ecfc1931eb7d44c9de8370422b865f1</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactForce &amp;contactForce) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactPatch</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1DoNothing.html</anchorfile>
      <anchor>aa4dfbbded4484dda9b906b885e928c82</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactPatch &amp;patch) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactForceGenerator::ElasticFoundation</name>
    <filename>classSimTK_1_1ContactForceGenerator_1_1ElasticFoundation.html</filename>
    <base>SimTK::ContactForceGenerator</base>
    <member kind="function">
      <type></type>
      <name>ElasticFoundation</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1ElasticFoundation.html</anchorfile>
      <anchor>acb3b84e1c25d7c98514277d586bc5939</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ElasticFoundation</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1ElasticFoundation.html</anchorfile>
      <anchor>af12cf041c7f93d1b9ae075c80706235d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactForce</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1ElasticFoundation.html</anchorfile>
      <anchor>a92cfe9c4e2fbc1e06b2d07a857b67ff3</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactForce &amp;contactForce) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactPatch</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1ElasticFoundation.html</anchorfile>
      <anchor>a199720c49eba7e6bce3a8f4bec2cd291</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactPatch &amp;patch) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactForceGenerator::HertzCircular</name>
    <filename>classSimTK_1_1ContactForceGenerator_1_1HertzCircular.html</filename>
    <base>SimTK::ContactForceGenerator</base>
    <member kind="function">
      <type></type>
      <name>HertzCircular</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1HertzCircular.html</anchorfile>
      <anchor>a36e63f4f505f7ace6b085c66ecf4093d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HertzCircular</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1HertzCircular.html</anchorfile>
      <anchor>a3c24917678dd10055507bd2677e0fd44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactForce</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1HertzCircular.html</anchorfile>
      <anchor>a5810787b30b401de8bd823c03bc1b21f</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactForce &amp;contactForce) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactPatch</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1HertzCircular.html</anchorfile>
      <anchor>a89176191d95eed3194ccf251d242a05e</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactPatch &amp;patch) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactForceGenerator::HertzElliptical</name>
    <filename>classSimTK_1_1ContactForceGenerator_1_1HertzElliptical.html</filename>
    <base>SimTK::ContactForceGenerator</base>
    <member kind="function">
      <type></type>
      <name>HertzElliptical</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1HertzElliptical.html</anchorfile>
      <anchor>a2d1bc188a893a51c8403bc2fdf8ed28d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HertzElliptical</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1HertzElliptical.html</anchorfile>
      <anchor>a9ae2e2315ffbe12dde35b89a31f60737</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactForce</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1HertzElliptical.html</anchorfile>
      <anchor>a6ef14f2ba390bd5df1d768e7d6ec5e8a</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactForce &amp;contactForce) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactPatch</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1HertzElliptical.html</anchorfile>
      <anchor>afaa6d8fdf5750c94246282a098b18bd5</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactPatch &amp;patch) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactForceGenerator::ThrowError</name>
    <filename>classSimTK_1_1ContactForceGenerator_1_1ThrowError.html</filename>
    <base>SimTK::ContactForceGenerator</base>
    <member kind="function">
      <type></type>
      <name>ThrowError</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1ThrowError.html</anchorfile>
      <anchor>a965374d85ccf8e42bbaa373770fb1911</anchor>
      <arglist>(ContactTypeId type=ContactTypeId(0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThrowError</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1ThrowError.html</anchorfile>
      <anchor>a5b128731b57813b7e9550f76d884cab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactForce</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1ThrowError.html</anchorfile>
      <anchor>ae9fcaadd9b0f2048e23ba6e6886a6291</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactForce &amp;contactForce) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcContactPatch</name>
      <anchorfile>classSimTK_1_1ContactForceGenerator_1_1ThrowError.html</anchorfile>
      <anchor>a8cb3fd0e51da62fa32dade69ef2cc6ab</anchor>
      <arglist>(const State &amp;state, const Contact &amp;overlapping, const SpatialVec &amp;V_S1S2, ContactPatch &amp;patch) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint</name>
    <filename>classSimTK_1_1Constraint.html</filename>
    <base>PIMPLHandle&lt; Constraint, ConstraintImpl, true &gt;</base>
    <class kind="class">SimTK::Constraint::Ball</class>
    <class kind="class">SimTK::Constraint::BallRollingOnPlane</class>
    <class kind="class">SimTK::Constraint::ConstantAcceleration</class>
    <class kind="class">SimTK::Constraint::ConstantAngle</class>
    <class kind="class">SimTK::Constraint::ConstantOrientation</class>
    <class kind="class">SimTK::Constraint::ConstantSpeed</class>
    <class kind="class">SimTK::Constraint::CoordinateCoupler</class>
    <class kind="class">SimTK::Constraint::Custom</class>
    <class kind="class">SimTK::Constraint::NoSlip1D</class>
    <class kind="class">SimTK::Constraint::PointInPlane</class>
    <class kind="class">SimTK::Constraint::PointOnLine</class>
    <class kind="class">SimTK::Constraint::PrescribedMotion</class>
    <class kind="class">SimTK::Constraint::Rod</class>
    <class kind="class">SimTK::Constraint::SpeedCoupler</class>
    <class kind="class">SimTK::Constraint::Weld</class>
    <member kind="typedef">
      <type>Rod</type>
      <name>ConstantDistance</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ad956e0d50be0a7afe93e2cadcbb33e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ball</type>
      <name>CoincidentPoints</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a9e870517e208b608b3ce2f3b0b45e604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ball</type>
      <name>Spherical</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a70e999ccc0948f2d97a462e0433e08d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Weld</type>
      <name>CoincidentFrames</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>acbc4a1ad249138302809cd65b3b9e287</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a18fdce4e9e5981592f1f08d1badbf68f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ab4c5f37d584f44a9536ac316e7ba326e</anchor>
      <arglist>(ConstraintImpl *r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a902fbd9378f18aebd467c192cb1e672c</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a0a2808b879f9527cf6f1ceb9a76647df</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabled</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a34fe71541b713ca19cc2baa9b24b64d8</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabledByDefault</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a44ad94cdfd74fe5aca26fb7f2b6dbb04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledByDefault</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a0411c5f7cfc6459740de6e39f25b3ea9</anchor>
      <arglist>(bool shouldBeDisabled)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ConstraintIndex</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a70e805e1b846f0c5deff14968af86a8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SimbodyMatterSubsystem &amp;</type>
      <name>getMatterSubsystem</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a4feee6e0db7f183fba057cae15a2ce52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SimbodyMatterSubsystem &amp;</type>
      <name>updMatterSubsystem</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>aa978ca9e95e43f24b754b2e5731f63f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstraintIndex</type>
      <name>getConstraintIndex</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a2a5d7e7d7a8d89252695fd585c74c69f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSubsystem</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>abbcfb851bb0ddbde7bc1f2f0e146c2af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSameSubsystem</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>af54709adc04539c9473e29ac9a7e6492</anchor>
      <arglist>(const MobilizedBody &amp;mobod) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstrainedBodies</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>afdbb3bdc7ba81fd95d9ea8e8a5d9293e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getMobilizedBodyFromConstrainedBody</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ac26295517e74b6e2d0dba4dc3aa99962</anchor>
      <arglist>(ConstrainedBodyIndex consBodyIx) const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getAncestorMobilizedBody</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ae410b74a104d2df2448b4739a20514f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstrainedMobilizers</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>aab316fbeec317de19474eb3b9e0ce6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getMobilizedBodyFromConstrainedMobilizer</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a4e902f87134bde1b4124b104614d2a80</anchor>
      <arglist>(ConstrainedMobilizerIndex consMobilizerIx) const </arglist>
    </member>
    <member kind="function">
      <type>const SimbodyMatterSubtree &amp;</type>
      <name>getSubtree</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ab3bcad39ee3f98ceb59d19d2548c17cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstrainedQ</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a2ce8087160568d8baed8371ca2c05610</anchor>
      <arglist>(const State &amp;, ConstrainedMobilizerIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstrainedU</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a1bf71bb7e093d99f16537393c398fe35</anchor>
      <arglist>(const State &amp;, ConstrainedMobilizerIndex) const </arglist>
    </member>
    <member kind="function">
      <type>ConstrainedUIndex</type>
      <name>getConstrainedUIndex</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>adc49e078f6a2acdeab1bdadca3f8b04d</anchor>
      <arglist>(const State &amp;, ConstrainedMobilizerIndex, MobilizerUIndex which) const </arglist>
    </member>
    <member kind="function">
      <type>ConstrainedQIndex</type>
      <name>getConstrainedQIndex</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ae4af1a379aa581eb7975b6f6a7d7d1ac</anchor>
      <arglist>(const State &amp;, ConstrainedMobilizerIndex, MobilizerQIndex which) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstrainedQ</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ad53d7da251c991a35aafb91fd1b0580c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstrainedU</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>abf894e07a0a92b35bbd2960a9a82761e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>QIndex</type>
      <name>getQIndexOfConstrainedQ</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>aa01b2cbdb9f388ebd7f7f3c1016c9e88</anchor>
      <arglist>(const State &amp;state, ConstrainedQIndex consQIndex) const </arglist>
    </member>
    <member kind="function">
      <type>UIndex</type>
      <name>getUIndexOfConstrainedU</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a682b3e0ab8f931076185383f1090bba4</anchor>
      <arglist>(const State &amp;state, ConstrainedUIndex consUIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNumConstraintEquationsInUse</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>aa4d838e3d26a8aa0e0f855e4925f4fdd</anchor>
      <arglist>(const State &amp;state, int &amp;mp, int &amp;mv, int &amp;ma) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIndexOfMultipliersInUse</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a5e8a6606b12cec632427a2215c436869</anchor>
      <arglist>(const State &amp;state, MultiplierIndex &amp;px0, MultiplierIndex &amp;vx0, MultiplierIndex &amp;ax0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMyPartInConstraintSpaceVector</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a5cde06b373d54cd2b4b385561b1795b8</anchor>
      <arglist>(const State &amp;state, const Vector &amp;myPart, Vector &amp;constraintSpace) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMyPartFromConstraintSpaceVector</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a23e30c851063daa7983e802fd0bb8d5d</anchor>
      <arglist>(const State &amp;state, const Vector &amp;constraintSpace, Vector &amp;myPart) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getPositionErrorsAsVector</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ae05bbf6cea56b12ec364be8375c5b6bd</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>calcPositionErrorFromQ</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>abee5f03e796c4d531f9722ed2af7d3c7</anchor>
      <arglist>(const State &amp;, const Vector &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>calcPositionConstraintMatrixP</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a941e287d872c451df57043a19bd2fb87</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>calcPositionConstraintMatrixPt</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a77f743b8a7d03a9405f40f4b9026ee3d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>calcPositionConstraintMatrixPNInv</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a6ffcc5051a23d6727f212d27a010ac27</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcConstraintForcesFromMultipliers</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a78898d966c47e277c9fd46d43b1f8a96</anchor>
      <arglist>(const State &amp;, const Vector &amp;lambda, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInA, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getVelocityErrorsAsVector</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a4fd0df31f9e01c36c8d2d7b782baa1b2</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>calcVelocityErrorFromU</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ac5f87249bb926499f6a901744dd73a83</anchor>
      <arglist>(const State &amp;, const Vector &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>calcVelocityConstraintMatrixV</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a69c60c624582e51029020c34e064511b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>calcVelocityConstraintMatrixVt</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a56d57e717fc09e17ed0d395b02b94b3d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getAccelerationErrorsAsVector</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>afd573ac5d8d56f11a2a46d492542f987</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>calcAccelerationErrorFromUDot</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a7fb752d72d0a1bd2c7aba594288c4491</anchor>
      <arglist>(const State &amp;, const Vector &amp;udot) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getMultipliersAsVector</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ac75e759b50f8798c4f483009679bb95a</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConstraintForcesAsVectors</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a3fbcfee82c06ce0f12c1bb8ae29f5134</anchor>
      <arglist>(const State &amp;state, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; SpatialVec &gt;</type>
      <name>getConstrainedBodyForcesAsVector</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a33217e7e30f395f254865f9dec4252c8</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getConstrainedMobilityForcesAsVector</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a23954a18adc38724d2d401212180f795</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcPower</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a1b678c78d533e1d36fecf9a63938191c</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>calcAccelerationConstraintMatrixA</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>ae6a0cf9c391f1f39864c7ad97397eda2</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>calcAccelerationConstraintMatrixAt</name>
      <anchorfile>classSimTK_1_1Constraint.html</anchorfile>
      <anchor>a93ac8080d68c01bc995e2e721cfdc794</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::Ball</name>
    <filename>classSimTK_1_1Constraint_1_1Ball.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>Ball</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a429cc2bd50ac68d9b7c6906b01ccd4cb</anchor>
      <arglist>(MobilizedBody &amp;body1, MobilizedBody &amp;body2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a5b3fcaa8c3847f8e0d51f4fd2f25bc78</anchor>
      <arglist>(MobilizedBody &amp;body1, const Vec3 &amp;defaultPoint1, MobilizedBody &amp;body2, const Vec3 &amp;defaultPoint2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a3bd7e9801b4fbf42433bb8c633f14593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPointOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>adf8d69bf44b63cf722529c17e0177fe9</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;point_B1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPointOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a284635f3c2b1102562c22a134be02265</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;point_B2) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPointOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a244c7f1d5c84f4b80a53a1e9e74734e8</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPointOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>ad3237349eeafaa6e221b552ee1999b03</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>setDefaultPointOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>ac1ff9e620b51fe9bf3da5bc4382908da</anchor>
      <arglist>(const Vec3 &amp;defaultPoint_B1)</arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>setDefaultPointOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a5e95f7d77ffc097ee9ec005be02205c8</anchor>
      <arglist>(const Vec3 &amp;defaultPoint_B2)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultPointOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a2ddff47ade62a86ffe8f2fbd9625432a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultPointOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a65263868604441d2bd553faf61260875</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>setDefaultRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>ada038bed64edeafc754ae76665b29aa1</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>aad0d4988c5c35362c7afde6181fd31f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBody1MobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a5f1dbbeb56fbfaaed14146a4cf97ace3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBody2MobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a11d6a3a9e2c21bf05b23d26987393bdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getPositionErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a8025e7a922986c2cb1edc961614bed3a</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getVelocityErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a2e4acba3cf2c497dc8d00a075608cbfc</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getAccelerationErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>a1f25d6e3d48d3e069961bc02d69e76d3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getBallReactionForceOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>ab90ff24ae8eca397b301f806120f3ae4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getBallReactionForceOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>adcc4b13fb9ed816f80abdcad6fd8f6e4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Ball.html</anchorfile>
      <anchor>ae1ad77c46a9b3caf3781d1c430f7352f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::BallRollingOnPlane</name>
    <filename>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>BallRollingOnPlane</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a7914c981d6c8df23f68e0904d4fbe7b2</anchor>
      <arglist>(MobilizedBody &amp;planeBody_P, const UnitVec3 &amp;defaultPlaneNormal_P, Real defaultPlaneHeight, MobilizedBody &amp;ballBody_B, const Vec3 &amp;defaultBallCenter_B, Real defaultBallRadius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BallRollingOnPlane</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a0aefecf4afe28eb63a1f7730f07ea6c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BallRollingOnPlane &amp;</type>
      <name>setPlaneDisplayHalfWidth</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>afa47e9023ca9fb3c831eb6388925f755</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPlaneDisplayHalfWidth</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>ac7a9f633ca19339d548e58f653a2a7b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BallRollingOnPlane &amp;</type>
      <name>setDefaultPlaneNormal</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>ab1812154a43d31d556c86edb5a46978c</anchor>
      <arglist>(const UnitVec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BallRollingOnPlane &amp;</type>
      <name>setDefaultPlaneHeight</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a1f5d9354f86717df68ea4d2b507851fe</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>BallRollingOnPlane &amp;</type>
      <name>setDefaultBallCenter</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>ad8b26084a8f8bfed587909a597e8b612</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BallRollingOnPlane &amp;</type>
      <name>setDefaultBallRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a780bcd0aa1cdddf4540271a2c1133e9d</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getPlaneMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a38b398b83c28ce5f55b88ebec87064c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBallMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>af0bbf4b4064fc5c185b367af33b83198</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDefaultPlaneNormal</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a1f8430dc01c0a2b7b71383c9059bab91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultPlaneHeight</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a5334827dd41e2330627fea9b871dd615</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultBallCenter</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a49fa7a6d669006caf8c05c1666264e43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultBallRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a956204111bcabd72046106b8fb14bb09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getPlaneNormal</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>ab148715ed2d05075cc5f7db083261670</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPlaneHeight</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>adf7bb562174ea2799dc32663a06f5c9c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBallCenter</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a45758ccfda5cb743d3df9352843a8e81</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getBallRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a74c7ff829070c3eaadc539ef5ecd1061</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPositionError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a8c8cd152d298df6f3b3acb1eee753503</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getVelocityError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a83f0dabe84dc188e6d77076f9f38056e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getAccelerationError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a0ab3f343f5863ba743008021af7506b9</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a38ce2f8259dbb2b52dd9198be70939e3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getNormalForce</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a59d9520c39972d65f77d28406cc82fcb</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getFrictionForceOnBallInPlaneFrame</name>
      <anchorfile>classSimTK_1_1Constraint_1_1BallRollingOnPlane.html</anchorfile>
      <anchor>a6b9816e8b59f3e0798d6846415eddb0f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::ConstantAcceleration</name>
    <filename>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>ConstantAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>a5d1d8a1c2b27439720e9a5974e896115</anchor>
      <arglist>(MobilizedBody &amp;mobilizer, MobilizerUIndex whichU, Real defaultAcceleration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>aa471eb2f85a725c3264664cebfce5ad4</anchor>
      <arglist>(MobilizedBody &amp;mobilizer, Real defaultAcceleration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>ab4ecfce475c869374a114a56407868c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>a7b7ef5e919f173bb6e7f0bad0b668b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizerUIndex</type>
      <name>getWhichU</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>ad428465e5bb259dd38eef48492083ba1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>aea0187d8ee3745f36e8024387806cdaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstantAcceleration &amp;</type>
      <name>setDefaultAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>ad4a6659182ccd7bdcecc9ffecf206e82</anchor>
      <arglist>(Real accel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>a43b506900d5fbb3e5e5493cf5c674331</anchor>
      <arglist>(State &amp;state, Real accel) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>ad85a653c1b219ea127ef7dbf48ade73f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccelerationError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>a6df44a19804dc9fa71d56dce19f4f89e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMultiplier</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAcceleration.html</anchorfile>
      <anchor>a8c39df6fe0092aeacd842a54fc4a4699</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::ConstantAngle</name>
    <filename>classSimTK_1_1Constraint_1_1ConstantAngle.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>ConstantAngle</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a080a357cdd4ce88c730256f59ed646b2</anchor>
      <arglist>(MobilizedBody &amp;baseBody_B, const UnitVec3 &amp;defaultAxis_B, MobilizedBody &amp;followerBody_F, const UnitVec3 &amp;defaultAxis_F, Real angle=Pi/2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantAngle</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>ace4f00baa73acc0030495f4381607b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstantAngle &amp;</type>
      <name>setAxisDisplayLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a3f8cf50791fbb84c40c9f4e89db42f91</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>ConstantAngle &amp;</type>
      <name>setAxisDisplayWidth</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>aafdc788d168b7e3eca320da640a007f6</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAxisDisplayLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a33c692c2b26964fdec35126dc43e55f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAxisDisplayWidth</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a00ef144c9e5f44a7567e8cf3740dcf44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstantAngle &amp;</type>
      <name>setDefaultBaseAxis</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a3682db3a9b9d0faacf3891b01121dd52</anchor>
      <arglist>(const UnitVec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstantAngle &amp;</type>
      <name>setDefaultFollowerAxis</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a691136b156902e2fdfb1279beff4465c</anchor>
      <arglist>(const UnitVec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstantAngle &amp;</type>
      <name>setDefaultAngle</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a3e500e365863b32d1ad84f2a05b0e8df</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBaseMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a81ef59de07d2b74ef6c7133a2825ee88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getFollowerMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>ae1cbe6b7be459d467b2f59124b009c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDefaultBaseAxis</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a28e0510acaafae19e8d91605d2211296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDefaultFollowerAxis</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>ab7bc2a12383798d549c5919e5c384537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultAngle</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a4bd8eea9a575d019cd9f53d57b48a682</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getBaseAxis</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a631967173d443f10fbc44dff3fdd2424</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getFollowerAxis</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>aab42a8f0943662396383680299c74a94</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAngle</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a95fcb4fb0ba87107e0b06dc08f0e5113</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPositionError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>aab87363e68125cb4d211507113c928ac</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getVelocityError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>af6f4b9eac2b9f2c7ebfb3bc5307f2d75</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccelerationError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>a2aa39c0fa338aa82f7a6acd59ba9017c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMultiplier</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>ade1d3acd769324fdd44cd367fe0d3db3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTorqueOnFollowerBody</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantAngle.html</anchorfile>
      <anchor>ae5fa3a8f14ad6667d0730485468ab696</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::ConstantOrientation</name>
    <filename>classSimTK_1_1Constraint_1_1ConstantOrientation.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>ConstantOrientation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a67652600a6c3157d9ffb974aa832425b</anchor>
      <arglist>(MobilizedBody &amp;baseBody_B, const Rotation &amp;defaultRB, MobilizedBody &amp;followerBody_F, const Rotation &amp;defaultRF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantOrientation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a9b762973117a591caf73d60ced4c1a0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstantOrientation &amp;</type>
      <name>setDefaultBaseRotation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>ad8bec4618c6d9480920afc81251768de</anchor>
      <arglist>(const Rotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstantOrientation &amp;</type>
      <name>setDefaultFollowerRotation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>ab89c9ff31683d9b9e44ff434cd6739db</anchor>
      <arglist>(const Rotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBaseMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a55adda2732ad8901d662dff1c5caaad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getFollowerMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>af7aadb334319b60637e91e1799c9e3d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>getDefaultBaseRotation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a16593803ea8b4591ea2c7e54c0e0cc64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>getDefaultFollowerRotation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a9072f7f0fd7efc551526f58029538092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>getBaseRotation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>ae2b482b2964c192ca1a416a601db993a</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>getFollowerRotation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a4761bf4215d0bc514ae7fc5dafcaa068</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getPositionErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a71d595373a464a742e8f07111ce3e615</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getVelocityErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a8be01ba891d487a7280d5d751509a127</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getAccelerationErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>aaec2c6f44a3de207e8c991538fbc0188</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>aae20ca904065118bbc9f73b9a38d43cf</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getTorqueOnFollowerBody</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantOrientation.html</anchorfile>
      <anchor>a816ab6d7179a3eae1ea54c1571cc3a87</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::ConstantSpeed</name>
    <filename>classSimTK_1_1Constraint_1_1ConstantSpeed.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>ConstantSpeed</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>aa4955dfd4a9fc029cab68560930e590e</anchor>
      <arglist>(MobilizedBody &amp;mobilizer, MobilizerUIndex whichU, Real defaultSpeed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantSpeed</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>aea46f364210490c9101f1185efd35f6b</anchor>
      <arglist>(MobilizedBody &amp;mobilizer, Real defaultSpeed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantSpeed</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>ad19a5dab0753a9413b2bae68a3b4a310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>adc070f5d1604c5b9c9f9dff913914a3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizerUIndex</type>
      <name>getWhichU</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>a8ff557111ab857be312b21eeef23f789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultSpeed</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>ad9323b1fff22d5fbcf9c2c6a14426258</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstantSpeed &amp;</type>
      <name>setDefaultSpeed</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>a7bd404f0b76618b783e885ce0875347e</anchor>
      <arglist>(Real speed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>aa06bb21c37b0ac14573fea768674d9a7</anchor>
      <arglist>(State &amp;state, Real speed) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getSpeed</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>afe886f19dfd21a3495b179f80a7175f7</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getVelocityError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>ae56716bc30708513c815b5933d139e79</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccelerationError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>af8dfe68a35696bb41f69e40cb70d6562</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMultiplier</name>
      <anchorfile>classSimTK_1_1Constraint_1_1ConstantSpeed.html</anchorfile>
      <anchor>a142a7fefa8c1080715657205114b79a7</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::CoordinateCoupler</name>
    <filename>classSimTK_1_1Constraint_1_1CoordinateCoupler.html</filename>
    <base>SimTK::Constraint::Custom</base>
    <member kind="function">
      <type></type>
      <name>CoordinateCoupler</name>
      <anchorfile>classSimTK_1_1Constraint_1_1CoordinateCoupler.html</anchorfile>
      <anchor>ad7720d3ba8fde118e882f6aeb4940083</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;matter, const Function *function, const Array_&lt; MobilizedBodyIndex &gt; &amp;coordMobod, const Array_&lt; MobilizerQIndex &gt; &amp;coordQIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordinateCoupler</name>
      <anchorfile>classSimTK_1_1Constraint_1_1CoordinateCoupler.html</anchorfile>
      <anchor>ab80ff1d9955c5b381d4a6afc3dd55043</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;matter, const Function *function, const std::vector&lt; MobilizedBodyIndex &gt; &amp;coordBody, const std::vector&lt; MobilizerQIndex &gt; &amp;coordIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordinateCoupler</name>
      <anchorfile>classSimTK_1_1Constraint_1_1CoordinateCoupler.html</anchorfile>
      <anchor>ad952ae15a8daba044d77811a80cb203e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::Custom</name>
    <filename>classSimTK_1_1Constraint_1_1Custom.html</filename>
    <base>SimTK::Constraint</base>
    <class kind="class">SimTK::Constraint::Custom::Implementation</class>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom.html</anchorfile>
      <anchor>a5ad27ef3b1f9367dd794565ad75c53d8</anchor>
      <arglist>(Implementation *implementation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom.html</anchorfile>
      <anchor>a4be67fe3814c06a8aaf192033b607aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom.html</anchorfile>
      <anchor>ad4095c2a0ba737de0d9bcb15e33ac860</anchor>
      <arglist>(Custom, CustomImpl, Constraint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>getImplementation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom.html</anchorfile>
      <anchor>aa3402cddb4cd483255a17c864226ce85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>updImplementation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom.html</anchorfile>
      <anchor>a4d8cf881083c7d253f2bfa1a39a168f2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::Custom::Implementation</name>
    <filename>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</filename>
    <base>PIMPLHandle&lt; Implementation, ImplementationImpl &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Implementation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ab3a7affd642106cf2b5be876651bac18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Implementation *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>afa40e50dcc5f319b7603f2e49e6acb18</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a6d9252d86f8e9b59536d7b50956d4857</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;, int mp, int mv, int ma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>af0243c670fa04674b7f2b67f2f52bb76</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const SimbodyMatterSubsystem &amp;</type>
      <name>getMatterSubsystem</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a1df134d565988ce31c7da79da6c9b4e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateTopologyCache</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a993c7e54628fb4fc65512344bec85ef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>setDefaultNumConstraintEquations</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a51dcdcb1d7b64e4fd917745d6978d1c5</anchor>
      <arglist>(int mp, int mv, int ma)</arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>setDisabledByDefault</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a7231e9ec01ea01f5926adf6ea54a5fcd</anchor>
      <arglist>(bool shouldBeDisabled)</arglist>
    </member>
    <member kind="function">
      <type>ConstrainedBodyIndex</type>
      <name>addConstrainedBody</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ae4adc6491ab17669023c5d6407e7c60e</anchor>
      <arglist>(const MobilizedBody &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConstrainedMobilizerIndex</type>
      <name>addConstrainedMobilizer</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a6d4694ca92ccc188ecef00509675b1ea</anchor>
      <arglist>(const MobilizedBody &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getMobilizedBodyIndexOfConstrainedBody</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aebb703a32e953ff6ae3bad7f55076534</anchor>
      <arglist>(ConstrainedBodyIndex) const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getMobilizedBodyIndexOfConstrainedMobilizer</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a6783b360c399e6e37c63c5bac2507c3d</anchor>
      <arglist>(ConstrainedMobilizerIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneQ</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a8f5d36ffa409453f483dd16db67924c7</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real, ConstrainedQIndex &gt; &amp;constrainedQ, ConstrainedMobilizerIndex mobilizer, MobilizerQIndex whichQ) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneQFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2f2e70cc801353257877229718eaa6e7</anchor>
      <arglist>(const State &amp;state, ConstrainedMobilizerIndex mobilizer, MobilizerQIndex whichQ) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneQDot</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a0a464d7395bef1a45f81a262a42cb809</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real, ConstrainedQIndex &gt; &amp;constrainedQDot, ConstrainedMobilizerIndex mobilizer, MobilizerQIndex whichQ) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneQDotFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a5dba6dd2509a84746892d6b5a8c79462</anchor>
      <arglist>(const State &amp;state, ConstrainedMobilizerIndex mobilizer, MobilizerQIndex whichQ) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneQDotDot</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ad117284b1c544765c82b48a56c0e550c</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real, ConstrainedQIndex &gt; &amp;constrainedQDotDot, ConstrainedMobilizerIndex mobilizer, MobilizerQIndex whichQ) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneU</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2bf2a13122ba29a14bc26e6ea4722117</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real, ConstrainedUIndex &gt; &amp;constrainedU, ConstrainedMobilizerIndex mobilizer, MobilizerUIndex whichU) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneUFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a4752391c58afea1c20ad8d40b5f244ff</anchor>
      <arglist>(const State &amp;state, ConstrainedMobilizerIndex mobilizer, MobilizerUIndex whichU) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneUDot</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ac79efe42c6959f6db7ca8c6661b66b66</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real, ConstrainedUIndex &gt; &amp;constrainedUDot, ConstrainedMobilizerIndex mobilizer, MobilizerUIndex whichU) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInOneMobilityForce</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a57208e8f15f98285c54ebdc28e5991fd</anchor>
      <arglist>(const State &amp;state, ConstrainedMobilizerIndex mobilizer, MobilizerUIndex whichU, Real fu, Array_&lt; Real, ConstrainedUIndex &gt; &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInOneQForce</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aed846d20c3e7a3c2c24e5708bb946393</anchor>
      <arglist>(const State &amp;state, ConstrainedMobilizerIndex mobilizer, MobilizerQIndex whichQ, Real fq, Array_&lt; Real, ConstrainedQIndex &gt; &amp;qForces) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getBodyTransform</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a3551c1427f3526d23fb6f0a1029bce1c</anchor>
      <arglist>(const Array_&lt; Transform, ConstrainedBodyIndex &gt; &amp;allX_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>getBodyRotation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a215d13299e99df4ebc15ff2f465041ee</anchor>
      <arglist>(const Array_&lt; Transform, ConstrainedBodyIndex &gt; &amp;allX_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyOriginLocation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aab92a4c7417d7d396c02a8d62c8c10bc</anchor>
      <arglist>(const Array_&lt; Transform, ConstrainedBodyIndex &gt; &amp;allX_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getBodyTransformFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a307aaa19ecb04d37c9c4df5440de4712</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex B) const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>getBodyRotationFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2d1556009bb593241e7410e797b7878b</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyOriginLocationFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a6c5ec5a45be0dace470ce9af45516dcb</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getBodyVelocity</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ade0b79471ec10de5d93eedb1fc7063c5</anchor>
      <arglist>(const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;allV_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyAngularVelocity</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aac35e848b3063ff03b60081de732cdc8</anchor>
      <arglist>(const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;allV_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyOriginVelocity</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a6c0efa72caa680bd077b115c9c08c2ac</anchor>
      <arglist>(const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;allV_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getBodyVelocityFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>af5f4d589e94f6a41f0f9da03a5444a1f</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyAngularVelocityFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ae8c9d2983af4fb1fb6dc662506ff76e5</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyOriginVelocityFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ab64effcd9e8680ead8c20f007f4adf40</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getBodyAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aa3209d049563debdddbebe44baa37e61</anchor>
      <arglist>(const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;allA_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyAngularAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a4bc1a14f11e29fdce97f1ea34a096db8</anchor>
      <arglist>(const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;allA_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyOriginAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a3d803decfe2575df35f8ad34ea6c35a9</anchor>
      <arglist>(const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;allA_AB, ConstrainedBodyIndex bodyB) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationLocation</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ad6acf838ab261b6590936aa56ba89693</anchor>
      <arglist>(const Array_&lt; Transform, ConstrainedBodyIndex &gt; &amp;allX_AB, ConstrainedBodyIndex bodyB, const Vec3 &amp;p_BS) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationLocationFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a57b49bcfbc37665dfa48f9548b32a4b0</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB, const Vec3 &amp;p_BS) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationVelocity</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a5f82f34f6ce65ef0e156a8f02f7c90dd</anchor>
      <arglist>(const State &amp;state, const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;allV_AB, ConstrainedBodyIndex bodyB, const Vec3 &amp;p_BS) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationVelocityFromState</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a4a210086ef3672ccd9b6dd3fd81326f2</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB, const Vec3 &amp;p_BS) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a26d44cabfb561bebf9cb21c01169f38d</anchor>
      <arglist>(const State &amp;state, const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;allA_AB, ConstrainedBodyIndex bodyB, const Vec3 &amp;p_BS) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInStationForce</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2cd291bf9a8947bea8eca68e6227a930</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB, const Vec3 &amp;p_BS, const Vec3 &amp;forceInA, Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;bodyForcesInA) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInBodyTorque</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a8447d5095d5ad4825af9ae0cf925ad5f</anchor>
      <arglist>(const State &amp;state, ConstrainedBodyIndex bodyB, const Vec3 &amp;torqueInA, Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;bodyForcesInA) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a88fdde686279d159bc9ecef61cfaa30e</anchor>
      <arglist>(const State &amp;state, Array_&lt; Real &gt; &amp;multipliers) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcDecorativeGeometryAndAppend</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>af8269a724cb77b298abdc7acbeeb0d56</anchor>
      <arglist>(const State &amp;s, Stage stage, Array_&lt; DecorativeGeometry &gt; &amp;geom) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeTopology</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a99f1ba084b572abc6eb40e1f8d9ff2e7</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeModel</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>adaef15dfa453837e25f124cf56c7a4e9</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeInstance</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a30849e5e2a6972ba7f8d43e841869681</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeTime</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>af50b75ae1ed74a80f8923c7ce2ae7556</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizePosition</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a0088e0d29d10565fe32ccb4941f75a14</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeVelocity</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a01960c769f9b9011fed580d3bd6c2200</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeDynamics</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a7cca4e24f343623dc3a1816d45d40687</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeAcceleration</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a7d9b2ddaf0bb159115e95da1cb976ae5</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeReport</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ab5117afd79477db3a20a75c803175deb</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPositionErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ad5c47af5897f0d5827f8f70031dcf19e</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Transform, ConstrainedBodyIndex &gt; &amp;X_AB, const Array_&lt; Real, ConstrainedQIndex &gt; &amp;constrainedQ, Array_&lt; Real &gt; &amp;perr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPositionDotErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a5ad3a319511a9090af12074c6b01b492</anchor>
      <arglist>(const State &amp;state, const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;V_AB, const Array_&lt; Real, ConstrainedQIndex &gt; &amp;constrainedQDot, Array_&lt; Real &gt; &amp;pverr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPositionDotDotErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a1772dfc2ef9beadcc1ae8dc4a69349db</anchor>
      <arglist>(const State &amp;state, const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;A_AB, const Array_&lt; Real, ConstrainedQIndex &gt; &amp;constrainedQDotDot, Array_&lt; Real &gt; &amp;paerr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addInPositionConstraintForces</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a5f61701999a0b983d75bc1eb86e57956</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real &gt; &amp;multipliers, Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;bodyForcesInA, Array_&lt; Real, ConstrainedQIndex &gt; &amp;qForces) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcVelocityErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ac1a652c53c39b2b73937e250a35d953b</anchor>
      <arglist>(const State &amp;state, const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;V_AB, const Array_&lt; Real, ConstrainedUIndex &gt; &amp;constrainedU, Array_&lt; Real &gt; &amp;verr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcVelocityDotErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a6f08835ee1dbc0b3bb5fcf5874517672</anchor>
      <arglist>(const State &amp;state, const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;A_AB, const Array_&lt; Real, ConstrainedUIndex &gt; &amp;constrainedUDot, Array_&lt; Real &gt; &amp;vaerr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addInVelocityConstraintForces</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ac3e58b9941a8896373b157365c7e4578</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real &gt; &amp;multipliers, Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;bodyForcesInA, Array_&lt; Real, ConstrainedUIndex &gt; &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcAccelerationErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ad858507140b96505635cc9a0fef4fdf6</anchor>
      <arglist>(const State &amp;state, const Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;A_AB, const Array_&lt; Real, ConstrainedUIndex &gt; &amp;constrainedUDot, Array_&lt; Real &gt; &amp;aerr) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>addInAccelerationConstraintForces</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a256f32f746ae6cc92780764da2b028f9</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real &gt; &amp;multipliers, Array_&lt; SpatialVec, ConstrainedBodyIndex &gt; &amp;bodyForcesInA, Array_&lt; Real, ConstrainedUIndex &gt; &amp;mobilityForces) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Constraint::CustomImpl</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ac7fb2fe2eab3303de126b490b5f62637</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::NoSlip1D</name>
    <filename>classSimTK_1_1Constraint_1_1NoSlip1D.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>NoSlip1D</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a7b98544139ca2fb225b9e02678970454</anchor>
      <arglist>(MobilizedBody &amp;caseBodyC, const Vec3 &amp;P_C, const UnitVec3 &amp;n_C, MobilizedBody &amp;movingBody0, MobilizedBody &amp;movingBody1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoSlip1D</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a4b647639f195a941aa33ca79ee1acc66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContactPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a315885d1f68884aff9e39c814f744de9</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;point_C) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a9800ac7f8f3117b2866e202c9871c584</anchor>
      <arglist>(State &amp;state, const UnitVec3 &amp;direction_C) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getContactPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a25bb85e5bb316975bc372f692aedf8f8</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDirection</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a251841eda39dacbcf7104a078e163b0d</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>NoSlip1D &amp;</type>
      <name>setDirectionDisplayLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a4f8e04fb8a3ab92ac2d24ebd2861ff39</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>NoSlip1D &amp;</type>
      <name>setPointDisplayRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>ab8de72bbfca454669e9aadff8e76603b</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDirectionDisplayLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a5e2e18aaa6425e87791b885a8baf48cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPointDisplayRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a331cdf3eb54bd7a1696a9b5070bb7cd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NoSlip1D &amp;</type>
      <name>setDefaultContactPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>aa03c808cc6c7b94b43f68d141ae46f12</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NoSlip1D &amp;</type>
      <name>setDefaultDirection</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a6d8999c4cd00c3601b7db1008db151ea</anchor>
      <arglist>(const UnitVec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getCaseMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>acb368be5a2c9ead84a1b8b1957d3311e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getMovingBodyMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a733c03e9814acc5c67183dec7fd89f47</anchor>
      <arglist>(int which) const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDefaultDirection</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a6c57a0702673c2e9ac1f1015b9178250</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultContactPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a88f00df2e0d5816c82a6ac7efb0e281b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getVelocityError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a45a9f8c4244ab846bf37be47fd3817f8</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccelerationError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>a2e1b2b498484a5bd8dc24164cb1143e5</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMultiplier</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>ad7050d85a86def0b4c3b41f2c4c26295</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getForceAtContactPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1NoSlip1D.html</anchorfile>
      <anchor>abd6d6cc138fb4ead899a996cd6975c8b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::PointInPlane</name>
    <filename>classSimTK_1_1Constraint_1_1PointInPlane.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>PointInPlane</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>a6d7ac7764921b3775a5ebb5341a1a93e</anchor>
      <arglist>(MobilizedBody &amp;planeBody_B, const UnitVec3 &amp;defaultPlaneNormal_B, Real defaultHeight, MobilizedBody &amp;followerBody_F, const Vec3 &amp;defaultFollowerPoint_F)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInPlane</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>a9683c0bd1723907d382d9f28970c3336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointInPlane &amp;</type>
      <name>setPlaneDisplayHalfWidth</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ae9fff4d2d3d58702a4bab20e53ae2da0</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>PointInPlane &amp;</type>
      <name>setPointDisplayRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>a00e9a3b0986c1c7586c1aa141d89ebb6</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPlaneDisplayHalfWidth</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>a05662fa4ca3774fe1faef2daa0ead460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPointDisplayRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>aeb5d7fc6479467829ab5e2150df987bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PointInPlane &amp;</type>
      <name>setDefaultPlaneNormal</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>a89f92160538f98c8e972c7b8fe7c87e2</anchor>
      <arglist>(const UnitVec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>PointInPlane &amp;</type>
      <name>setDefaultPlaneHeight</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ad8f59998e07f201d0b70a7cce5fcadb3</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>PointInPlane &amp;</type>
      <name>setDefaultFollowerPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>a002345af6c733736c6d1b2532d80cdc3</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getPlaneMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ab1fee32d7fea7dbb195e777906bda54f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getFollowerMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ac4c7b9927407f756c74ae458e0a0f52b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDefaultPlaneNormal</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ac2a7efaaeec4794bff53cb329ecf4af9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultPlaneHeight</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ac1f07af18aa5b93ec4af6d606f1faaf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultFollowerPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ab12fe0737f7b465858c43b32dda5b38a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getPlaneNormal</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ada4160c39c7dd08d16efe5365e193c2a</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPlaneHeight</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ac6e13ecbfd1d7eb05d742516e9b2f196</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getFollowerPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ab4b477a3e51dfde84d98de701cf0c0a2</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPositionError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ad636575fa5450fe9450ae9eb3500b9a4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getVelocityError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>aeddae0d5d09e52d1f8da722f2b520174</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccelerationError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>ae57493c0973ba4536df2756214ebf83e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMultiplier</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>a9b33cbe1026ddf7a8fee4c327a74fb52</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getForceOnFollowerPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointInPlane.html</anchorfile>
      <anchor>a6260ed49f2514819b201045cc785a2d9</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::PointOnLine</name>
    <filename>classSimTK_1_1Constraint_1_1PointOnLine.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>PointOnLine</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>ad485eaace958edde7af8453d1fbd5d35</anchor>
      <arglist>(MobilizedBody &amp;lineBody_B, const UnitVec3 &amp;defaultLineDirection_B, const Vec3 &amp;defaultPointOnLine_B, MobilizedBody &amp;followerBody_F, const Vec3 &amp;defaultFollowerPoint_F)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointOnLine</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a8c29a471d9af24e70d09a9e72da49d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PointOnLine &amp;</type>
      <name>setLineDisplayHalfLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a063fe1d08d700ceb54312b03b8979306</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>PointOnLine &amp;</type>
      <name>setPointDisplayRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a4842784170c3573255d986a6e1c6f75d</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getLineDisplayHalfLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>aa6879812e0dba7b94da0504a46126a4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPointDisplayRadius</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a8a94a32a15f4e5e3c5e3b0a5e4e712c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PointOnLine &amp;</type>
      <name>setDefaultLineDirection</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>ae27e92f83844f5f238139e440ad17a3c</anchor>
      <arglist>(const UnitVec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>PointOnLine &amp;</type>
      <name>setDefaultPointOnLine</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a36d904876a8eb4627b0c9c0596e35ed0</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>PointOnLine &amp;</type>
      <name>setDefaultFollowerPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a301ebcd1565328b3b2af9e11e8b653bf</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getLineMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>aa7ecc912b6df30339956aca44ce09e34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getFollowerMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>ab56eb69a95ad66ee4bba05b51adcd3dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDefaultLineDirection</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a717a07c40565d1e2dfb5f23e3838fafa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultPointOnLine</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a37401a39a7f303afcc97bdcdf8e1a2d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultFollowerPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>ac138b9e28fcc83eb9da86ce6156a3ec3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getLineDirection</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a6d49630ce4254fea11a70d05865a2c4f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPointOnLine</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>aee65d1d9062d9fedbadd4338581751ac</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getFollowerPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>ab885c76ee143c0fab56f0fedacc8d16b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getPositionErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>ab40e7b42ed33254a3810f34424df7bb9</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getVelocityErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a287ca3f17a4b501652b6a7eef0b81c4e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getAccelerationErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a48849ac931635680a7a8a8242a490f8d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a09c05a35dfff41ed06a6d2c97b4ea0cc</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getForceOnFollowerPoint</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PointOnLine.html</anchorfile>
      <anchor>a96930b8f34180859fdc380e874b403eb</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::PrescribedMotion</name>
    <filename>classSimTK_1_1Constraint_1_1PrescribedMotion.html</filename>
    <base>SimTK::Constraint::Custom</base>
    <member kind="function">
      <type></type>
      <name>PrescribedMotion</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PrescribedMotion.html</anchorfile>
      <anchor>a7acf8bcccca7dc16480d1aab04f9379e</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;matter, const Function *function, MobilizedBodyIndex coordBody, MobilizerQIndex coordIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PrescribedMotion</name>
      <anchorfile>classSimTK_1_1Constraint_1_1PrescribedMotion.html</anchorfile>
      <anchor>aff9ba11a934bf3d8dc370e328770214b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::Rod</name>
    <filename>classSimTK_1_1Constraint_1_1Rod.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>Rod</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a36b36e134fe1eed95c22d41e53ed8ffc</anchor>
      <arglist>(MobilizedBody &amp;body1, MobilizedBody &amp;body2, Real defaultLength=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rod</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>af57484ad645b0a93a8a74f0601d2032e</anchor>
      <arglist>(MobilizedBody &amp;body1, const Vec3 &amp;defaultPoint1, MobilizedBody &amp;body2, const Vec3 &amp;defaultPoint2, Real defaultLength=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rod</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>ad4d1672d3338ae23ef4e9bb940e61fbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rod &amp;</type>
      <name>setDefaultPointOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>ac892311f64a6042351cacfdaba62620d</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Rod &amp;</type>
      <name>setDefaultPointOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a30064aeb3001def36d1e8b3b67324889</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Rod &amp;</type>
      <name>setDefaultRodLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>ae3891cc323b54f175c0f7941b5f7c979</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBody1MobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a8406f58cff0103ebbac547aafe621915</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBody2MobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a01f14972241df9ad69cc60050a86a892</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultPointOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>ad0548158a35065b7ec66dfb6941bb5df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultPointOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>abcf1843454b7fa87beb040f09fe82130</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultRodLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>ab292394452a31ff1724acb865ab7a9e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPointOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a3a7f3bbd4e0efb562740f4bfe16f0079</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPointOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a0ac1d7a11680c20d62592c925ddd910b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRodLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a5dc1e96f9896d1aaa40f9fd21e900592</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPositionError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>af19e832e2890b110c1e5b01e8142be11</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getVelocityError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a6d621112571e98c41429708129614c1e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccelerationError</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a488d4549c67c396da7971920f2e2077e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMultiplier</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>a970b0d83c6a46526ab325af8cdf5e2c2</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRodTension</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Rod.html</anchorfile>
      <anchor>aec89ab7ccd45cce2e9504e4139773f5e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::SpeedCoupler</name>
    <filename>classSimTK_1_1Constraint_1_1SpeedCoupler.html</filename>
    <base>SimTK::Constraint::Custom</base>
    <member kind="function">
      <type></type>
      <name>SpeedCoupler</name>
      <anchorfile>classSimTK_1_1Constraint_1_1SpeedCoupler.html</anchorfile>
      <anchor>abfef1d51622cf992b2ca6f29161dd289</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;matter, const Function *function, const Array_&lt; MobilizedBodyIndex &gt; &amp;speedBody, const Array_&lt; MobilizerUIndex &gt; &amp;speedIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeedCoupler</name>
      <anchorfile>classSimTK_1_1Constraint_1_1SpeedCoupler.html</anchorfile>
      <anchor>aa41cb6a7f8f76892f105d8c35614d2c3</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;matter, const Function *function, const std::vector&lt; MobilizedBodyIndex &gt; &amp;speedBody, const std::vector&lt; MobilizerUIndex &gt; &amp;speedIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeedCoupler</name>
      <anchorfile>classSimTK_1_1Constraint_1_1SpeedCoupler.html</anchorfile>
      <anchor>a502f4e2116fc484e6793adb424f88dff</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;matter, const Function *function, const Array_&lt; MobilizedBodyIndex &gt; &amp;speedBody, const Array_&lt; MobilizerUIndex &gt; &amp;speedIndex, const Array_&lt; MobilizedBodyIndex &gt; &amp;coordBody, const Array_&lt; MobilizerQIndex &gt; &amp;coordIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeedCoupler</name>
      <anchorfile>classSimTK_1_1Constraint_1_1SpeedCoupler.html</anchorfile>
      <anchor>ad6d96b73bdb9d143fd2adc31e12a9d77</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;matter, const Function *function, const std::vector&lt; MobilizedBodyIndex &gt; &amp;speedBody, const std::vector&lt; MobilizerUIndex &gt; &amp;speedIndex, const std::vector&lt; MobilizedBodyIndex &gt; &amp;coordBody, const std::vector&lt; MobilizerQIndex &gt; &amp;coordIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeedCoupler</name>
      <anchorfile>classSimTK_1_1Constraint_1_1SpeedCoupler.html</anchorfile>
      <anchor>ae5c8da5cca7e8062f8c20ee3dff6858a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Constraint::Weld</name>
    <filename>classSimTK_1_1Constraint_1_1Weld.html</filename>
    <base>SimTK::Constraint</base>
    <member kind="function">
      <type></type>
      <name>Weld</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>ab24dd1cc6e96f266d31b18ddff40065e</anchor>
      <arglist>(MobilizedBody &amp;body1, MobilizedBody &amp;body2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Weld</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a89c6f5b7bd57821fb021ba629ab28bf5</anchor>
      <arglist>(MobilizedBody &amp;body1, const Transform &amp;frame1, MobilizedBody &amp;body2, const Transform &amp;frame2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Weld</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a25517a09bafd9f0f9e97c539e6882f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Weld &amp;</type>
      <name>setAxisDisplayLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a8d028b3d43083b33170a602a972977ee</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAxisDisplayLength</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>ac1b486e3cab29331459de92a861e69c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Weld &amp;</type>
      <name>setDefaultFrameOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a32df43b798f9967c521803410d4006a1</anchor>
      <arglist>(const Transform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getDefaultFrameOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a7cbfe75d857639c19927229c270a8f88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Weld &amp;</type>
      <name>setDefaultFrameOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a204a99f76874943ac7571e3c1c169f67</anchor>
      <arglist>(const Transform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getDefaultFrameOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a19828c16da81c26e3013df600ba2378d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBody1MobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>acd1ac982d6544bc7ea8a26003876ac7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getBody2MobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a14156a0b85724c4bba69f52cbf7afe47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getFrameOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a0a462f1e5fc60245968901a4547fb9d9</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getFrameOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a9093df30f491eb8496f5c8c0c0713155</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec6</type>
      <name>getPositionErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>ac755fabefdfa2a2958ea28212441f4cb</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec6</type>
      <name>getVelocityErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a4bd645e9deaca61fc66101d07394da53</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec6</type>
      <name>getAccelerationErrors</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>ac60f32ac801229bc97e8c86f78884386</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec6</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a94ff0032a86208240f906ca10eb57c75</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getWeldReactionOnBody1</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a38e6fe5fce6e09643aa52a9cc45986f4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getWeldReactionOnBody2</name>
      <anchorfile>classSimTK_1_1Constraint_1_1Weld.html</anchorfile>
      <anchor>a3ad8abba04ca517b2682b38913f04b1b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactMaterial</name>
    <filename>classSimTK_1_1ContactMaterial.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactMaterial</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>afbbc6c4005d9b164f878166d30c24e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactMaterial</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a23cae0d9a00cdc82bf5acb0cf2bfac58</anchor>
      <arglist>(Real stiffness, Real dissipation, Real staticFriction, Real dynamicFriction, Real viscousFriction=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a01ff5b163cc1eb9440a82f4edb13c927</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getStiffness</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a0287924714bcbc38de87efc5c8ee8dfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getStiffness23</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a9ad1c04f42cf45cd02524aabb72e0614</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDissipation</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a3c725f73a3972ff245ab2ed3c160244b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getStaticFriction</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a2b48ac9d50322676ef618bb8a4959bcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDynamicFriction</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a6f84da9eec5eb9a4b2bac1237d41af58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getViscousFriction</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>ae78708d669a571fc27030ad3a468721f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContactMaterial &amp;</type>
      <name>setStiffness</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a1316e82b0872f0bda799b6851be709fc</anchor>
      <arglist>(Real stiffness)</arglist>
    </member>
    <member kind="function">
      <type>ContactMaterial &amp;</type>
      <name>setDissipation</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a8dcb056e83a7482cc903b59dbd3e9157</anchor>
      <arglist>(Real dissipation)</arglist>
    </member>
    <member kind="function">
      <type>ContactMaterial &amp;</type>
      <name>setFriction</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>ac8f735297f30f7a53dc9ed55b9e16845</anchor>
      <arglist>(Real staticFriction, Real dynamicFriction, Real viscousFriction=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a985a2d0148a51cdb1b8d9948ff8f762a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>calcPlaneStrainStiffness</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a3816557a6f340a79794252bd52597ba6</anchor>
      <arglist>(Real youngsModulus, Real poissonsRatio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>calcConfinedCompressionStiffness</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>a30a82ee4e665cdcd9e914ae515a5f470</anchor>
      <arglist>(Real youngsModulus, Real poissonsRatio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>calcDissipationFromObservedRestitution</name>
      <anchorfile>classSimTK_1_1ContactMaterial.html</anchorfile>
      <anchor>acf2c2358fbdb9f6ea6fff91252710798</anchor>
      <arglist>(Real restitution, Real speed)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactSurface</name>
    <filename>classSimTK_1_1ContactSurface.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactSurface</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>abcadab7e20639026e0a527d49c49384a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactSurface</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>af3abf770b695fdf4a4c39dbae7ba1a72</anchor>
      <arglist>(const ContactGeometry &amp;shape, const ContactMaterial &amp;material, Real thickness=0)</arglist>
    </member>
    <member kind="function">
      <type>ContactSurface &amp;</type>
      <name>setShape</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a82396b89a3330fb34f6df18973689d62</anchor>
      <arglist>(const ContactGeometry &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>ContactSurface &amp;</type>
      <name>setMaterial</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a4a75db4226bb53b492c9b5d62bed0e4b</anchor>
      <arglist>(const ContactMaterial &amp;material, Real thickness=0)</arglist>
    </member>
    <member kind="function">
      <type>ContactSurface &amp;</type>
      <name>setThickness</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>ab9e7c8d34d1533cd8e71f74caf04acbc</anchor>
      <arglist>(Real thickness)</arglist>
    </member>
    <member kind="function">
      <type>const ContactGeometry &amp;</type>
      <name>getShape</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a54d2a6821202b242399ea9490b5ab3c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ContactMaterial &amp;</type>
      <name>getMaterial</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a348a2997f2b4f6669957553846108615</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getThickness</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>abddceaf87f46b2fc54623d1bd96d7850</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContactGeometry &amp;</type>
      <name>updShape</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a2e805033f4ef63946d19c2b33c908c8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ContactMaterial &amp;</type>
      <name>updMaterial</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a192e049779fb0bb61832a3dba4938c09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ContactSurface &amp;</type>
      <name>joinClique</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a38a7928dfaa4321878f45cf0fc88d0d5</anchor>
      <arglist>(ContactCliqueId clique)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leaveClique</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a855effea9854ed66375ea673088ebaa9</anchor>
      <arglist>(ContactCliqueId clique)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSameClique</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a265fa1e9653da22aeea24b7e1635c4b7</anchor>
      <arglist>(const ContactSurface &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; ContactCliqueId, short &gt; &amp;</type>
      <name>getCliques</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a140ab06c1dae234e7fb4354dee4326ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>cliquesIntersect</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>a988e0fc64e365fefd94c01dc3638678a</anchor>
      <arglist>(const Array_&lt; ContactCliqueId, short &gt; &amp;a, const Array_&lt; ContactCliqueId, short &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactCliqueId</type>
      <name>createNewContactClique</name>
      <anchorfile>classSimTK_1_1ContactSurface.html</anchorfile>
      <anchor>af1aa459dd50ab2d9aba632c4e2c5e39c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTrackerSubsystem</name>
    <filename>classSimTK_1_1ContactTrackerSubsystem.html</filename>
    <base>SimTK::Subsystem</base>
    <member kind="function">
      <type></type>
      <name>ContactTrackerSubsystem</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a08a23f04201616315556bd80ce165a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactTrackerSubsystem</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>af592d40813ef3dea4c1a6a74fce307fd</anchor>
      <arglist>(MultibodySystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSurfaces</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a07cf67243a93a018f64c37260bf4c835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getMobilizedBody</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a9efae95cc50f9591bfd0626e44af6c6a</anchor>
      <arglist>(ContactSurfaceIndex surfIx) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactSurface &amp;</type>
      <name>getContactSurface</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a948286b58dff014437baa6225248abb8</anchor>
      <arglist>(ContactSurfaceIndex surfIx) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getContactSurfaceTransform</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a6c200d777319e35e170291837c87e62e</anchor>
      <arglist>(ContactSurfaceIndex surfIx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptContactTracker</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a04fa137a66419959c1b38f64e061adf5</anchor>
      <arglist>(ContactTracker *tracker)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContactTracker</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a06c8481f0ef1c24edee1b2262f2d9734</anchor>
      <arglist>(ContactGeometryTypeId surface1, ContactGeometryTypeId surface2) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactTracker &amp;</type>
      <name>getContactTracker</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a8aa91c7d8564b776afbebf2af08925b1</anchor>
      <arglist>(ContactGeometryTypeId surface1, ContactGeometryTypeId surface2, bool &amp;reverseOrder) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactSnapshot &amp;</type>
      <name>getPreviousActiveContacts</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a90beeb680ac8644cdd7c6e7ed8a5fb27</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactSnapshot &amp;</type>
      <name>getPreviousPredictedContacts</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>aeb91ae5cc711a555fc763b28276bd80b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactSnapshot &amp;</type>
      <name>getActiveContacts</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>ad6647bc695c731aa72062a570d429a3c</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactSnapshot &amp;</type>
      <name>getPredictedContacts</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a4048ec6a239df6bc1062d6ab02c7cd76</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>realizeActiveContacts</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>a7911a43e5f1183ebd93bf43b27195e31</anchor>
      <arglist>(const State &amp;state, bool lastTry, Real &amp;stepAdvice) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>realizePredictedContacts</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>ac413606a7e59ae1ce5c10057ddbed95f</anchor>
      <arglist>(const State &amp;state, bool lastTry, Real &amp;stepAdvice) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1ContactTrackerSubsystem.html</anchorfile>
      <anchor>acc08e12722003b698ead7aa1822c6cf4</anchor>
      <arglist>(ContactTrackerSubsystem, Subsystem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactSnapshot</name>
    <filename>classSimTK_1_1ContactSnapshot.html</filename>
    <member kind="function">
      <type></type>
      <name>ContactSnapshot</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>af00f623bd9e387e23cc5f5b64e485dcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>a94ebac814c8dd59ff54aa1c5492095ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>a4f487a9c6ef466e8d1fead49aac91990</anchor>
      <arglist>(Real time)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTimestamp</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>ab7de87ee6e5ddad10b46c810a51b4624</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptContact</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>a69f1629e084d47738eafa7e360d9662e</anchor>
      <arglist>(Contact &amp;contact)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContact</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>a547fb156273334c97d1dfeb0654fefd8</anchor>
      <arglist>(ContactId id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContact</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>a8a06ca5679fad86266d92432a24abcb0</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumContacts</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>addd6e9aaf50df67806465e6ae2d8c1db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>getContact</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>a65159950fab896228985e6c5ef7ba1cf</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>getContactById</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>aadf4581d26f05c13a899b85e7ae81ddf</anchor>
      <arglist>(ContactId id) const </arglist>
    </member>
    <member kind="function">
      <type>ContactId</type>
      <name>getContactIdForSurfacePair</name>
      <anchorfile>classSimTK_1_1ContactSnapshot.html</anchorfile>
      <anchor>afad51e038397eeb9abcb345ec8060d21</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorationSubsystem</name>
    <filename>classSimTK_1_1DecorationSubsystem.html</filename>
    <base>SimTK::Subsystem</base>
    <member kind="function">
      <type></type>
      <name>DecorationSubsystem</name>
      <anchorfile>classSimTK_1_1DecorationSubsystem.html</anchorfile>
      <anchor>a3a942d63a6ffd070e72101b7aa17b4e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecorationSubsystem</name>
      <anchorfile>classSimTK_1_1DecorationSubsystem.html</anchorfile>
      <anchor>ab6a4a9a5e86d7a1fd008b163b4f91888</anchor>
      <arglist>(MultibodySystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBodyFixedDecoration</name>
      <anchorfile>classSimTK_1_1DecorationSubsystem.html</anchorfile>
      <anchor>a00214b2de1e94765f5a048ed8ccf1d5c</anchor>
      <arglist>(MobilizedBodyIndex bodyNum, const Transform &amp;X_GD, const DecorativeGeometry &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRubberBandLine</name>
      <anchorfile>classSimTK_1_1DecorationSubsystem.html</anchorfile>
      <anchor>a5522596e26b5444b70f4f44ac2073423</anchor>
      <arglist>(MobilizedBodyIndex b1, const Vec3 &amp;station1, MobilizedBodyIndex b2, const Vec3 &amp;station2, const DecorativeLine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDecorationGenerator</name>
      <anchorfile>classSimTK_1_1DecorationSubsystem.html</anchorfile>
      <anchor>a430c978723a305b9ad3de67355c5bd03</anchor>
      <arglist>(Stage stage, DecorationGenerator *generator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorationSubsystem.html</anchorfile>
      <anchor>a60404e8e862c22962b5d295c0ccbacda</anchor>
      <arglist>(DecorationSubsystem, Subsystem)</arglist>
    </member>
    <member kind="function">
      <type>class DecorationSubsystemGuts &amp;</type>
      <name>updGuts</name>
      <anchorfile>classSimTK_1_1DecorationSubsystem.html</anchorfile>
      <anchor>a08a4ad9630c582755816ff01a8659af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DecorationSubsystemGuts &amp;</type>
      <name>getGuts</name>
      <anchorfile>classSimTK_1_1DecorationSubsystem.html</anchorfile>
      <anchor>a0285f4f8256406404cb66f79b89b70ba</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ElasticFoundationForce</name>
    <filename>classSimTK_1_1ElasticFoundationForce.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>ElasticFoundationForce</name>
      <anchorfile>classSimTK_1_1ElasticFoundationForce.html</anchorfile>
      <anchor>a00c9f1819c019a6d8d665d5541a69ad3</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, GeneralContactSubsystem &amp;contacts, ContactSetIndex contactSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBodyParameters</name>
      <anchorfile>classSimTK_1_1ElasticFoundationForce.html</anchorfile>
      <anchor>a480d2d13b6b962a88960f4e9a8117962</anchor>
      <arglist>(ContactSurfaceIndex surfIndex, Real stiffness, Real dissipation, Real staticFriction, Real dynamicFriction, Real viscousFriction)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTransitionVelocity</name>
      <anchorfile>classSimTK_1_1ElasticFoundationForce.html</anchorfile>
      <anchor>a443c0b74b145151a2c6792e50107d53a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransitionVelocity</name>
      <anchorfile>classSimTK_1_1ElasticFoundationForce.html</anchorfile>
      <anchor>a52c90b85685fc804a5e9adb98299f00f</anchor>
      <arglist>(Real v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1ElasticFoundationForce.html</anchorfile>
      <anchor>aed47ebe30280da0efba60b45ec1938e8</anchor>
      <arglist>(ElasticFoundationForce, ElasticFoundationForceImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force</name>
    <filename>classSimTK_1_1Force.html</filename>
    <base>PIMPLHandle&lt; Force, ForceImpl, true &gt;</base>
    <class kind="class">SimTK::Force::ConstantForce</class>
    <class kind="class">SimTK::Force::ConstantTorque</class>
    <class kind="class">SimTK::Force::Custom</class>
    <class kind="class">SimTK::Force::DiscreteForces</class>
    <class kind="class">SimTK::Force::GlobalDamper</class>
    <class kind="class">SimTK::Force::Gravity</class>
    <class kind="class">SimTK::Force::LinearBushing</class>
    <class kind="class">SimTK::Force::MobilityConstantForce</class>
    <class kind="class">SimTK::Force::MobilityDiscreteForce</class>
    <class kind="class">SimTK::Force::MobilityLinearDamper</class>
    <class kind="class">SimTK::Force::MobilityLinearSpring</class>
    <class kind="class">SimTK::Force::MobilityLinearStop</class>
    <class kind="class">SimTK::Force::Thermostat</class>
    <class kind="class">SimTK::Force::TwoPointConstantForce</class>
    <class kind="class">SimTK::Force::TwoPointLinearDamper</class>
    <class kind="class">SimTK::Force::TwoPointLinearSpring</class>
    <class kind="class">SimTK::Force::UniformGravity</class>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a9a8f205db825ec4590affd579023b19d</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a0287b31c4de6c165895213362f72e699</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabled</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a5b32ba1619e5761a1fe542482b31cb50</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledByDefault</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a9a60206965ae9b65e2d9de23c5fffebe</anchor>
      <arglist>(bool shouldBeDisabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabledByDefault</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a6591362634b1fca5b737d319659474bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcForceContribution</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a6a6c5e48e82116716cf1b8e10d904eb2</anchor>
      <arglist>(const State &amp;state, Vector_&lt; SpatialVec &gt; &amp;bodyForces, Vector_&lt; Vec3 &gt; &amp;particleForces, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcPotentialEnergyContribution</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a2fd7d145fd0d42fac0df7b258c467feb</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Force</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a2074f78e510fa5c4f39c9cedc2c608ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ForceIndex</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>ac4c746ea1607a9a5b5cb8e638e5502af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GeneralForceSubsystem &amp;</type>
      <name>getForceSubsystem</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a20149623ed8119af2474deb65f501d60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ForceIndex</type>
      <name>getForceIndex</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>a6e547fb3e7b8214e85bd25f644742753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Force</name>
      <anchorfile>classSimTK_1_1Force.html</anchorfile>
      <anchor>abd76ebcb7a78f34da951b243fb736ba6</anchor>
      <arglist>(ForceImpl *r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::ConstantForce</name>
    <filename>classSimTK_1_1Force_1_1ConstantForce.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>ConstantForce</name>
      <anchorfile>classSimTK_1_1Force_1_1ConstantForce.html</anchorfile>
      <anchor>a78538f864aa7b1cc2e930079f2460cf4</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;body, const Vec3 &amp;station, const Vec3 &amp;force)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantForce</name>
      <anchorfile>classSimTK_1_1Force_1_1ConstantForce.html</anchorfile>
      <anchor>a5c2487ecaafe5affeb12a4d6bde2b6a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1Force_1_1ConstantForce.html</anchorfile>
      <anchor>a8fa6b33d2bf6cae885f460f63a59ab78</anchor>
      <arglist>(ConstantForce, ConstantForceImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::ConstantTorque</name>
    <filename>classSimTK_1_1Force_1_1ConstantTorque.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>ConstantTorque</name>
      <anchorfile>classSimTK_1_1Force_1_1ConstantTorque.html</anchorfile>
      <anchor>a7c10a7dbe738935e2835bbc05bf5b4c6</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;body, const Vec3 &amp;torque)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantTorque</name>
      <anchorfile>classSimTK_1_1Force_1_1ConstantTorque.html</anchorfile>
      <anchor>a3f3799a1bbea8614f5ccf1ea4553c666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1Force_1_1ConstantTorque.html</anchorfile>
      <anchor>af128db402b23c1dec28d76ba7a97a325</anchor>
      <arglist>(ConstantTorque, ConstantTorqueImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::Custom</name>
    <filename>classSimTK_1_1Force_1_1Custom.html</filename>
    <base>SimTK::Force</base>
    <class kind="class">SimTK::Force::Custom::Implementation</class>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom.html</anchorfile>
      <anchor>a6b578e605c237395e49984ad5af569d0</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, Implementation *implementation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom.html</anchorfile>
      <anchor>a5cc80627de4699f94ff36f0c88865880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>getImplementation</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom.html</anchorfile>
      <anchor>aa50bbaa0c61117ffde36900755617068</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>updImplementation</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom.html</anchorfile>
      <anchor>a23b53aae388ed5c8c224796db3cee288</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::Custom::Implementation</name>
    <filename>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Implementation</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a7bfbf27612240b7b5bba241ae95b17eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>calcForce</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a0eaaa96987ef71cf0c4a92a292c9061b</anchor>
      <arglist>(const State &amp;state, Vector_&lt; SpatialVec &gt; &amp;bodyForces, Vector_&lt; Vec3 &gt; &amp;particleForces, Vector &amp;mobilityForces) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>calcPotentialEnergy</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>af3c6639089d068bacb00a9bba3fc6caa</anchor>
      <arglist>(const State &amp;state) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>dependsOnlyOnPositions</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aeb252acad11dbefeef0ef3ccced08479</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcDecorativeGeometryAndAppend</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a56bacd66d42a07747ad73cb5342d87aa</anchor>
      <arglist>(const State &amp;state, Stage stage, Array_&lt; DecorativeGeometry &gt; &amp;geometry) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeTopology</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>acfd85306e136d00fea56f9c3810c2dad</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeModel</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aa9ea9622373da11e1e5bf10bbebfa7b0</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeInstance</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a3f62f739c84423318b9b3701101ed277</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeTime</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a02587cbb39f035f2ac512a2c935260e4</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizePosition</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ae0fea68498fca9feec1c714073ea95aa</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeVelocity</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a9fec4976afa9c4056c3b63e0b26d25d0</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeDynamics</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ad3b4896015080d970c9ce99fd4509f59</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeAcceleration</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a80776ef689d7e46645e2e226003f2722</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeReport</name>
      <anchorfile>classSimTK_1_1Force_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>af084e8a0db1ed84ce5a18444c0d806f2</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::DiscreteForces</name>
    <filename>classSimTK_1_1Force_1_1DiscreteForces.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>DiscreteForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a760291b12a4272d6e73393b179a1cacd</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const SimbodyMatterSubsystem &amp;matter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a2c3ed4fa6f1ccfd394d01bb6a6881ca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a4dda99f1af1e33a61de24157c5a69d33</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllMobilityForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>af85137f290ec324f6cc09d19bdda574c</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllBodyForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a6c68d6c3e7d77cdee597af982b2cc9ea</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOneMobilityForce</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a96a4c79e1209de2053a1508cd0b8264d</anchor>
      <arglist>(State &amp;state, const MobilizedBody &amp;mobod, MobilizerUIndex whichU, Real force) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOneBodyForce</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a0305a15e584e27af583fc0c5243a7925</anchor>
      <arglist>(State &amp;state, const MobilizedBody &amp;mobod, const SpatialVec &amp;spatialForceInG) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addForceToBodyPoint</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a4247072c90d6ba0504c288ec578036e8</anchor>
      <arglist>(State &amp;state, const MobilizedBody &amp;mobod, const Vec3 &amp;pointInB, const Vec3 &amp;forceInG) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllMobilityForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a3e1ef0f040b7c8640f46736dc1648cf6</anchor>
      <arglist>(State &amp;state, const Vector &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllBodyForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>af3408ea6f478afd3435bdbd1b1a7db6e</anchor>
      <arglist>(State &amp;state, const Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneMobilityForce</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>a170096b8d2175a3a71046ee574625fc4</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;mobod, MobilizerUIndex whichU) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>getOneBodyForce</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>aa70c188a915042a09859a567d2ea621d</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;mobod) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getAllMobilityForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>afe30555b177145a8c5f1d0ebf60cd335</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; SpatialVec &gt; &amp;</type>
      <name>getAllBodyForces</name>
      <anchorfile>classSimTK_1_1Force_1_1DiscreteForces.html</anchorfile>
      <anchor>ab3c0da54791ca0bb12c10712453c02b4</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::GlobalDamper</name>
    <filename>classSimTK_1_1Force_1_1GlobalDamper.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>GlobalDamper</name>
      <anchorfile>classSimTK_1_1Force_1_1GlobalDamper.html</anchorfile>
      <anchor>ab85313d67380519ebe9c8133533800a9</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const SimbodyMatterSubsystem &amp;matter, Real damping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalDamper</name>
      <anchorfile>classSimTK_1_1Force_1_1GlobalDamper.html</anchorfile>
      <anchor>a3e6979fe4081ccb1d185cc4d11f4ced5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1Force_1_1GlobalDamper.html</anchorfile>
      <anchor>a1f0bd77b9ba1f77e642e63b958edbb11</anchor>
      <arglist>(GlobalDamper, GlobalDamperImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::Gravity</name>
    <filename>classSimTK_1_1Force_1_1Gravity.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>Gravity</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>afe20f061c70cab5ed8f8ee1476c27003</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const SimbodyMatterSubsystem &amp;matter, const UnitVec3 &amp;down, Real g, Real zeroHeight=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gravity</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>afa037b590c3fadf1c5f2a32a484d1243</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const SimbodyMatterSubsystem &amp;matter, const Vec3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gravity</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a2ec3ea5d25cfd80c1d2a119b04269e1a</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const SimbodyMatterSubsystem &amp;matter, Real g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gravity</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>acd3e9ba934baf18b17c081d2c9c82aa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Gravity &amp;</type>
      <name>setDefaultBodyIsExcluded</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a87d48d6b383ad4f0958414617c714f0f</anchor>
      <arglist>(MobilizedBodyIndex mobod, bool isExcluded)</arglist>
    </member>
    <member kind="function">
      <type>Gravity &amp;</type>
      <name>setDefaultGravityVector</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>aa2599ef99206e0555aecc6ba805d52ad</anchor>
      <arglist>(const Vec3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>Gravity &amp;</type>
      <name>setDefaultDownDirection</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a41e6387f3525e6887445bf55381518d3</anchor>
      <arglist>(const UnitVec3 &amp;down)</arglist>
    </member>
    <member kind="function">
      <type>Gravity &amp;</type>
      <name>setDefaultDownDirection</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a9c6ec878946dcba68ea8b9eb1eeaab13</anchor>
      <arglist>(const Vec3 &amp;down)</arglist>
    </member>
    <member kind="function">
      <type>Gravity &amp;</type>
      <name>setDefaultMagnitude</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a5af5df0e7c2284ce65ab357694310749</anchor>
      <arglist>(Real g)</arglist>
    </member>
    <member kind="function">
      <type>Gravity &amp;</type>
      <name>setDefaultZeroHeight</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>ae876615a8ba3162020d6c37076cb3f75</anchor>
      <arglist>(Real zeroHeight)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDefaultBodyIsExcluded</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a0ad686f5b30d3933a4e16bd5d889a1f0</anchor>
      <arglist>(MobilizedBodyIndex mobod) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getDefaultGravityVector</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>ac92dd84fc2b46754e5efc34287846e26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDefaultDownDirection</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>af56f94b47330506a257acddd407dd754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultMagnitude</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a7f1811fa1a54adec888457b77f2ddd5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultZeroHeight</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a19bffdc3274c504d30c4255bf9318ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Gravity &amp;</type>
      <name>setBodyIsExcluded</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>ad7cddda5a93470b89962c063a92cf353</anchor>
      <arglist>(State &amp;state, MobilizedBodyIndex mobod, bool isExcluded) const </arglist>
    </member>
    <member kind="function">
      <type>const Gravity &amp;</type>
      <name>setGravityVector</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a5546d9c3664debd086767111cdf7af46</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;gravity) const </arglist>
    </member>
    <member kind="function">
      <type>const Gravity &amp;</type>
      <name>setDownDirection</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a00c61ee94cf374194755eb97de65b7ed</anchor>
      <arglist>(State &amp;state, const UnitVec3 &amp;down) const </arglist>
    </member>
    <member kind="function">
      <type>const Gravity &amp;</type>
      <name>setDownDirection</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a5579ec1600db1eccfe46bf00bab3004a</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;down) const </arglist>
    </member>
    <member kind="function">
      <type>const Gravity &amp;</type>
      <name>setMagnitude</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a1c2029b89831ed12c04f86f4c7a751de</anchor>
      <arglist>(State &amp;state, Real g) const </arglist>
    </member>
    <member kind="function">
      <type>const Gravity &amp;</type>
      <name>setZeroHeight</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a5eae88fe08215bf5eb19f1b5dcb3356e</anchor>
      <arglist>(State &amp;state, Real hz) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBodyIsExcluded</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a02bfb2e2c7eaa5001b658d1eba670763</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mobod) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getGravityVector</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a4befd5cb903e902513cefd7f3b9ef1aa</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getDownDirection</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a300a3e51d66a038a328c4c11030ed9bf</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMagnitude</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>aad3dce1faa91b9282dab8032b1a3a422</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getZeroHeight</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a8cb94b6cd01a513968711eaccb603826</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPotentialEnergy</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>aab879d68c5fa45bafb50d94a6ed516f9</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; SpatialVec &gt; &amp;</type>
      <name>getBodyForces</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>a7cda7a3ce8baee0c2fadad8d3c8c9d7b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getBodyForce</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>ac156a835a4ae5505a9e2fc61c79543e7</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mobod) const </arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>getNumEvaluations</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>ae6b760c62747710a7d04db19fe465cf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForceCacheValid</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>ae44057c8239358ce9510caaf085f0dc9</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateForceCache</name>
      <anchorfile>classSimTK_1_1Force_1_1Gravity.html</anchorfile>
      <anchor>ac6a1671fa15527e67d7e35056c4db648</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::LinearBushing</name>
    <filename>classSimTK_1_1Force_1_1LinearBushing.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>LinearBushing</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a266f94c18106d52165644524c0d84247</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;body1, const Transform &amp;frameFOnB1, const MobilizedBody &amp;body2, const Transform &amp;frameMOnB2, const Vec6 &amp;stiffness, const Vec6 &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearBushing</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>aaaef5e828796deeba3eba86a9f49f67b</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;body1, const MobilizedBody &amp;body2, const Vec6 &amp;stiffness, const Vec6 &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearBushing</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>aeb46037ce1680d72052c3d727f473c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LinearBushing &amp;</type>
      <name>setDefaultFrameOnBody1</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>acf53a2e79a7b156cf16c182c006def29</anchor>
      <arglist>(const Transform &amp;X_B1F)</arglist>
    </member>
    <member kind="function">
      <type>LinearBushing &amp;</type>
      <name>setDefaultFrameOnBody2</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>acdf2582be6b25f2ab7c13598e68723c0</anchor>
      <arglist>(const Transform &amp;X_B2M)</arglist>
    </member>
    <member kind="function">
      <type>LinearBushing &amp;</type>
      <name>setDefaultStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a1e3d84d246eb92756105a555c9034252</anchor>
      <arglist>(const Vec6 &amp;stiffness)</arglist>
    </member>
    <member kind="function">
      <type>LinearBushing &amp;</type>
      <name>setDefaultDamping</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>abb1db309fc0320b417b2f0b8799e8223</anchor>
      <arglist>(const Vec6 &amp;damping)</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getDefaultFrameOnBody1</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a3e982c97db94aaeea8d759a3b142fe14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getDefaultFrameOnBody2</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>afc57d501bf7db1d4021cd68c71bf705e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getDefaultStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a467a655f4b909fa60fcf1015bf298763</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getDefaultDamping</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a242693e63a413ed11aa0dc967996f688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LinearBushing &amp;</type>
      <name>setFrameOnBody1</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>acf132b7c5a109f91e4341d7910555c6f</anchor>
      <arglist>(State &amp;state, const Transform &amp;X_B1F) const </arglist>
    </member>
    <member kind="function">
      <type>const LinearBushing &amp;</type>
      <name>setFrameOnBody2</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a854770bc2825617ddcf54a949b216cc2</anchor>
      <arglist>(State &amp;state, const Transform &amp;X_B2M) const </arglist>
    </member>
    <member kind="function">
      <type>const LinearBushing &amp;</type>
      <name>setStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a2d345977741e7f9436c4a25e18dd8790</anchor>
      <arglist>(State &amp;state, const Vec6 &amp;stiffness) const </arglist>
    </member>
    <member kind="function">
      <type>const LinearBushing &amp;</type>
      <name>setDamping</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>ac7a8735ff3fe78bc8619b39fd64e0349</anchor>
      <arglist>(State &amp;state, const Vec6 &amp;damping) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getFrameOnBody1</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a49e44f7a2802ad16f5305d3b7959c141</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getFrameOnBody2</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a6aa61aca35509e92f82ce4c15bfd3eda</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>aaf47ba22d92b77ec4ffc14e82f3e8d35</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getDamping</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a3626c638c6cd27866c18d67aaeb28e28</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>affe68ba9b732def3dd20b9ba6227d3fe</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getX_GF</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a2efecf8853b97f50e925dc372041f1e4</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getX_GM</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a0d76c914c37a9fa7e73e4b300219b164</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getX_FM</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a62b20cb61d0ae6a9507aa9175783e142</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a26c2e6d7dc78d655c726ac9e876b63bc</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getV_GF</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a3f89c34b80879accfe8dd9bc723fd180</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getV_GM</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>ac07e8c09ad8f712f176c9697d59bf180</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getV_FM</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a8b04f3e7a0dc2ce1c66447f97d488913</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getF</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>afdc9e70bac1b46f629c546e459d25f62</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getF_GM</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a4c330e40b198211a70d92b9fee088f44</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getF_GF</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a1ff792e1a33a6568222a3bb8c23bcd75</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPotentialEnergy</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a175643110ba030913cbc65cf2e3c8491</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPowerDissipation</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a4ae70fa8c7201376f44ef65ae5835b67</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDissipatedEnergy</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>ad2e56626d60be30108dcc6e484cc538b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDissipatedEnergy</name>
      <anchorfile>classSimTK_1_1Force_1_1LinearBushing.html</anchorfile>
      <anchor>a91dcb38d4ca56bc7f584968b3fb7d1ff</anchor>
      <arglist>(State &amp;state, Real energy) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::MobilityConstantForce</name>
    <filename>classSimTK_1_1Force_1_1MobilityConstantForce.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>MobilityConstantForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityConstantForce.html</anchorfile>
      <anchor>a90225e5e06486b737e129ae497b0114f</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, MobilizerUIndex whichU, Real defaultForce)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityConstantForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityConstantForce.html</anchorfile>
      <anchor>a0c28b5a2d6260eb201f58d8fcb96fa06</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, Real defaultForce)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityConstantForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityConstantForce.html</anchorfile>
      <anchor>a7d4644387ab86c0bc8d2d24e114b3ca8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilityConstantForce &amp;</type>
      <name>setDefaultForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityConstantForce.html</anchorfile>
      <anchor>a9fe8b62859e615232429b38fa4445aad</anchor>
      <arglist>(Real defaultForce)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityConstantForce.html</anchorfile>
      <anchor>a51be3d088ed07929f5dd4a9cb25f11ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityConstantForce.html</anchorfile>
      <anchor>a772119becb1a28c782d10b24336f6588</anchor>
      <arglist>(State &amp;state, Real force) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityConstantForce.html</anchorfile>
      <anchor>ac8793ccb9e0f8390a360f93e262e9e67</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityConstantForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityConstantForce.html</anchorfile>
      <anchor>a1f32eaf6d46b4a66542f33f666ea511a</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, int whichU, Real defaultForce)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::MobilityDiscreteForce</name>
    <filename>classSimTK_1_1Force_1_1MobilityDiscreteForce.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>MobilityDiscreteForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityDiscreteForce.html</anchorfile>
      <anchor>a6663c1d0021278294901727f21e8813e</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, MobilizerUIndex whichU, Real defaultForce=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityDiscreteForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityDiscreteForce.html</anchorfile>
      <anchor>aa44c7a8c20a2d394cec3c8e8e40847f8</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, Real defaultForce=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityDiscreteForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityDiscreteForce.html</anchorfile>
      <anchor>a7b77b7b4c7af40aa3a1faf63d920340b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilityDiscreteForce &amp;</type>
      <name>setDefaultMobilityForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityDiscreteForce.html</anchorfile>
      <anchor>a9cb9409b8fec722e66c5778a1ede6569</anchor>
      <arglist>(Real defaultForce)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultMobilityForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityDiscreteForce.html</anchorfile>
      <anchor>a74e6d61d5abb7e56700ab446ce74084c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMobilityForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityDiscreteForce.html</anchorfile>
      <anchor>abb44990d95f4fa368e69062e6327de40</anchor>
      <arglist>(State &amp;state, Real f) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMobilityForce</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityDiscreteForce.html</anchorfile>
      <anchor>a0991f28ebe48c00cc7cb449fe1b5832b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::MobilityLinearDamper</name>
    <filename>classSimTK_1_1Force_1_1MobilityLinearDamper.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>MobilityLinearDamper</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearDamper.html</anchorfile>
      <anchor>ac379f73a1d1d733eda19ba26d0006609</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, MobilizerUIndex whichU, Real defaultDamping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityLinearDamper</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearDamper.html</anchorfile>
      <anchor>aa88abc34fa60bde23514cc1bff8ebcd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilityLinearDamper &amp;</type>
      <name>setDefaultDamping</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearDamper.html</anchorfile>
      <anchor>a742eba0f2cf59e989e3720ef3bda83c7</anchor>
      <arglist>(Real defaultDamping)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultDamping</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearDamper.html</anchorfile>
      <anchor>a03b55772e46bf392740492646c66b707</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilityLinearDamper &amp;</type>
      <name>setDamping</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearDamper.html</anchorfile>
      <anchor>a5298e1b8442990180f5655c68d128819</anchor>
      <arglist>(State &amp;state, Real damping) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDamping</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearDamper.html</anchorfile>
      <anchor>ad4f7c6d35d225d21b171de8f1c35099f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityLinearDamper</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearDamper.html</anchorfile>
      <anchor>a34a11d88b133448e6411d2bc257057f2</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, int whichU, Real defaultDamping)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::MobilityLinearSpring</name>
    <filename>classSimTK_1_1Force_1_1MobilityLinearSpring.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>MobilityLinearSpring</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>a8b409daf2766139cec48a7f72fa3b35d</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, MobilizerQIndex whichQ, Real defaultStiffness, Real defaultQZero)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityLinearSpring</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>a8b871851ba2b6b4eee2a098716afec20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilityLinearSpring &amp;</type>
      <name>setDefaultStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>a453e931805895fb2b3e28d4ee2ec3288</anchor>
      <arglist>(Real defaultStiffness)</arglist>
    </member>
    <member kind="function">
      <type>MobilityLinearSpring &amp;</type>
      <name>setDefaultQZero</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>ae0508d9a229b4591bafd007bbb0da080</anchor>
      <arglist>(Real defaultQZero)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>afabfa5f0e1a7e2af4d57f675ac013084</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultQZero</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>ad57b8e8457081829d5f8d3f6456bbce2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilityLinearSpring &amp;</type>
      <name>setStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>a0b9a6d7d089daefbdbc42c08992ba595</anchor>
      <arglist>(State &amp;state, Real stiffness) const </arglist>
    </member>
    <member kind="function">
      <type>const MobilityLinearSpring &amp;</type>
      <name>setQZero</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>adb5c289821bbaaf7c7c476da149b108b</anchor>
      <arglist>(State &amp;state, Real qZero) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>aad67ab64c4f69e77e1362712074fae6d</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQZero</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>a9ce73b665c40886677b8ae9dab0ccf52</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityLinearSpring</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearSpring.html</anchorfile>
      <anchor>a452b7acf617830e9bad5f7de35631993</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, int whichQ, Real defaultStiffness, Real defaultQZero)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::MobilityLinearStop</name>
    <filename>classSimTK_1_1Force_1_1MobilityLinearStop.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>MobilityLinearStop</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>a23ce68bd789cb699367903a7d068fb18</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;mobod, MobilizerQIndex whichQ, Real defaultStiffness, Real defaultDissipation, Real defaultQLow=-Infinity, Real defaultQHigh=Infinity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilityLinearStop</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>aa9814dc30aeaa4d3acef35accb46c08d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilityLinearStop &amp;</type>
      <name>setDefaultBounds</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>aad7b55f3c67cfca41046e72098a5fad7</anchor>
      <arglist>(Real defaultQLow, Real defaultQHigh)</arglist>
    </member>
    <member kind="function">
      <type>MobilityLinearStop &amp;</type>
      <name>setDefaultMaterialProperties</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>ac16c366eed7de3fa560dfc86f1d0d847</anchor>
      <arglist>(Real defaultStiffness, Real defaultDissipation)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultLowerBound</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>a7f7b3dec2c6cd944ed599693a64aa8c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultUpperBound</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>aadb91e4efcf1a21580f2eb98b7fd1af1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>a055e9d25836c339e530905394c2f7a95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultDissipation</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>a55454763d6a80a3e843cdee4a3708e81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBounds</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>a4b6937d08110fc0ed012a6d77454435f</anchor>
      <arglist>(State &amp;state, Real qLow, Real qHigh) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterialProperties</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>ade6326bcb6ed5637907566008e393dfe</anchor>
      <arglist>(State &amp;state, Real stiffness, Real dissipation) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getLowerBound</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>a4266e16c3644c8447f728b75d14f1282</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getUpperBound</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>ad51fe96b572ce59eda3afe5606a1e7ca</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getStiffness</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>afb01c36f4cdf97457a3e2294a235a682</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDissipation</name>
      <anchorfile>classSimTK_1_1Force_1_1MobilityLinearStop.html</anchorfile>
      <anchor>adfd274b38a38d16dcd0f0a8cf2cccaee</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::Thermostat</name>
    <filename>classSimTK_1_1Force_1_1Thermostat.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>Thermostat</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a8bbfebcc4ec118b63c33b9bfcc5fedb0</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const SimbodyMatterSubsystem &amp;matter, Real boltzmannsConstant, Real bathTemperature, Real relaxationTime, int numExcludedDofs=6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thermostat</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a07f9ea63428fc65326f44cf5bf7e53c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Thermostat &amp;</type>
      <name>excludeMobilizedBody</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>ad61e901c0323476f8c8b900de09a3ed1</anchor>
      <arglist>(MobilizedBodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>Thermostat &amp;</type>
      <name>setDefaultNumChains</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>ac2b3a7f6de8b1c8a08e564b2b37075d2</anchor>
      <arglist>(int numChains)</arglist>
    </member>
    <member kind="function">
      <type>Thermostat &amp;</type>
      <name>setDefaultBathTemperature</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a370d31f56e836cbc054eee9fbacabb76</anchor>
      <arglist>(Real bathTemperature)</arglist>
    </member>
    <member kind="function">
      <type>Thermostat &amp;</type>
      <name>setDefaultRelaxationTime</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>af293f18c8b85ae159236e0a4ee1de1d7</anchor>
      <arglist>(Real relaxationTime)</arglist>
    </member>
    <member kind="function">
      <type>Thermostat &amp;</type>
      <name>setDefaultNumExcludedDofs</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>aa86359bc107549455e0d0d2708d0307a</anchor>
      <arglist>(int numExcludedDofs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultNumChains</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a0ac2e92b47904be6f7b03bdb3a45fbfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultBathTemperature</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>ae1a29139cce14ad6dea0f48e4b0e2bd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultRelaxationTime</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a4e62684ba829f233c83488b1e9c2c6b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultNumExcludedDofs</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>ab91fb47448127193676e08c6b807c25c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getBoltzmannsConstant</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a78dea945c1c148cf3057221ee11c7c75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Thermostat &amp;</type>
      <name>setNumChains</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a824ffc2516d6680d49efb1f2fd1233bd</anchor>
      <arglist>(State &amp;, int numChains) const </arglist>
    </member>
    <member kind="function">
      <type>const Thermostat &amp;</type>
      <name>setBathTemperature</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>ac38c51660a34338964b8847fd43897ca</anchor>
      <arglist>(State &amp;, Real Tb) const </arglist>
    </member>
    <member kind="function">
      <type>const Thermostat &amp;</type>
      <name>setRelaxationTime</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a1d0ade207472297c1afee8c893c2889f</anchor>
      <arglist>(State &amp;, Real t) const </arglist>
    </member>
    <member kind="function">
      <type>const Thermostat &amp;</type>
      <name>setNumExcludedDofs</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a159b3a1ba5815ce4a48c9c39b8792a79</anchor>
      <arglist>(State &amp;, int numExcludedDofs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChains</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>ace5c6a0781e54e0457e3104f30d1ba9e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getBathTemperature</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a4da5baf6ec1efc8b606b48c4e02a9463</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRelaxationTime</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a19045a05ebe7a9d708a869d4225950b6</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExcludedDofs</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a09461a22f6840ad7c8a0e62c287be1a9</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumThermalDofs</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a2c270e627d5ad7ea43822deb7abcd253</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getCurrentTemperature</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>af056299745b1af7d533c992854510f19</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeChainState</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a294d43edbea30be2471a17f505264419</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChainState</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>aa24e37425c1b03928ae31117a0f4f4e5</anchor>
      <arglist>(State &amp;, const Vector &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getChainState</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a2f4cf5be775ddf0b4bb322c0000cde34</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcBathEnergy</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a19857ae1f2bb22e2ef6ff00136441c33</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getExternalPower</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a28d4dcdca4793679fa2be70ff578ddf6</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getExternalWork</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a625da11ea4705f3b17ff47e10e037adf</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExternalWork</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>ae6045eb94dff91a4c5bfcc5c52b25fe1</anchor>
      <arglist>(State &amp;state, Real work) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSystemToBathTemperature</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>a927a2a58a7c94042966d9acdefbbf3e3</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemToTemperature</name>
      <anchorfile>classSimTK_1_1Force_1_1Thermostat.html</anchorfile>
      <anchor>af7e58a1b0d945853c3ec8aded6b86d0e</anchor>
      <arglist>(State &amp;, Real T) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::TwoPointConstantForce</name>
    <filename>classSimTK_1_1Force_1_1TwoPointConstantForce.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>TwoPointConstantForce</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointConstantForce.html</anchorfile>
      <anchor>a003e95ef6c1672cf63b11915f4927672</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;body1, const Vec3 &amp;station1, const MobilizedBody &amp;body2, const Vec3 &amp;station2, Real force)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoPointConstantForce</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointConstantForce.html</anchorfile>
      <anchor>a0800f0d67ce1ac72a26a5369bea693dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointConstantForce.html</anchorfile>
      <anchor>ac66f8dd2126333c4df477c8e24c98aed</anchor>
      <arglist>(TwoPointConstantForce, TwoPointConstantForceImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::TwoPointLinearDamper</name>
    <filename>classSimTK_1_1Force_1_1TwoPointLinearDamper.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>TwoPointLinearDamper</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointLinearDamper.html</anchorfile>
      <anchor>aaf9b2987c733004f119f2a1734efd3aa</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;body1, const Vec3 &amp;station1, const MobilizedBody &amp;body2, const Vec3 &amp;station2, Real damping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoPointLinearDamper</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointLinearDamper.html</anchorfile>
      <anchor>aa90cf702af24e7aa27fb015f6d4c6e3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointLinearDamper.html</anchorfile>
      <anchor>a9e151543a0930e00ef58b0d67af75ce8</anchor>
      <arglist>(TwoPointLinearDamper, TwoPointLinearDamperImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::TwoPointLinearSpring</name>
    <filename>classSimTK_1_1Force_1_1TwoPointLinearSpring.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>TwoPointLinearSpring</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointLinearSpring.html</anchorfile>
      <anchor>a9cf4e1da1e75eec605567eb1431c01f5</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const MobilizedBody &amp;body1, const Vec3 &amp;station1, const MobilizedBody &amp;body2, const Vec3 &amp;station2, Real k, Real x0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoPointLinearSpring</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointLinearSpring.html</anchorfile>
      <anchor>ad14a490bd3d329fe5328c7cb35eb7412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1Force_1_1TwoPointLinearSpring.html</anchorfile>
      <anchor>a9f0fea5fc3d83401897568447dbdac5c</anchor>
      <arglist>(TwoPointLinearSpring, TwoPointLinearSpringImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Force::UniformGravity</name>
    <filename>classSimTK_1_1Force_1_1UniformGravity.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>UniformGravity</name>
      <anchorfile>classSimTK_1_1Force_1_1UniformGravity.html</anchorfile>
      <anchor>a232cfbb379b3b2efba5bfe74c3045ff5</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, const SimbodyMatterSubsystem &amp;matter, const Vec3 &amp;g, Real zeroHeight=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniformGravity</name>
      <anchorfile>classSimTK_1_1Force_1_1UniformGravity.html</anchorfile>
      <anchor>a3c5ca21dbcd4598ab439b7a666b818f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getGravity</name>
      <anchorfile>classSimTK_1_1Force_1_1UniformGravity.html</anchorfile>
      <anchor>aad25ada415a1e562434fe665c6b40e6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravity</name>
      <anchorfile>classSimTK_1_1Force_1_1UniformGravity.html</anchorfile>
      <anchor>a2efaaf4e92284d1d2254dea7eb73e248</anchor>
      <arglist>(const Vec3 &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getZeroHeight</name>
      <anchorfile>classSimTK_1_1Force_1_1UniformGravity.html</anchorfile>
      <anchor>a544f12654115efbf53029f12aca11108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZeroHeight</name>
      <anchorfile>classSimTK_1_1Force_1_1UniformGravity.html</anchorfile>
      <anchor>aeb568b27813494c9aacadf10f56e5930</anchor>
      <arglist>(Real height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1Force_1_1UniformGravity.html</anchorfile>
      <anchor>ab7bcca3767e5eb9108d3e90a7fbecc67</anchor>
      <arglist>(UniformGravity, UniformGravityImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ForceSubsystem</name>
    <filename>classSimTK_1_1ForceSubsystem.html</filename>
    <base>SimTK::Subsystem</base>
    <class kind="class">SimTK::ForceSubsystem::Guts</class>
    <member kind="function">
      <type></type>
      <name>ForceSubsystem</name>
      <anchorfile>classSimTK_1_1ForceSubsystem.html</anchorfile>
      <anchor>a0c68acf7b051c56eb916162b90598729</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1ForceSubsystem.html</anchorfile>
      <anchor>a61b23709357b8cb10324d0f1fd1222d8</anchor>
      <arglist>(ForceSubsystem, Subsystem)</arglist>
    </member>
    <member kind="function">
      <type>Guts &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1ForceSubsystem.html</anchorfile>
      <anchor>a13f9a690cf8a3aba2d4d78489195b2f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Guts &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1ForceSubsystem.html</anchorfile>
      <anchor>aef8ab8605ebe5e1ef8fcf83945b8fec9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ForceSubsystem::Guts</name>
    <filename>classSimTK_1_1ForceSubsystem_1_1Guts.html</filename>
    <base>SimTK::Subsystem::Guts</base>
    <member kind="function">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1ForceSubsystem_1_1Guts.html</anchorfile>
      <anchor>a49dc3cd16e5d42b0b882acee4db32d33</anchor>
      <arglist>(const String &amp;name, const String &amp;version)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Guts</name>
      <anchorfile>classSimTK_1_1ForceSubsystem_1_1Guts.html</anchorfile>
      <anchor>a9b8a7ddee5bee6867cda51f753aa9411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MultibodySystem &amp;</type>
      <name>getMultibodySystem</name>
      <anchorfile>classSimTK_1_1ForceSubsystem_1_1Guts.html</anchorfile>
      <anchor>adfe668586cff77ca8162762590a40662</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>calcPotentialEnergy</name>
      <anchorfile>classSimTK_1_1ForceSubsystem_1_1Guts.html</anchorfile>
      <anchor>a9bc2c9984642e202a6231add5cf3087c</anchor>
      <arglist>(const State &amp;state) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DOWNCAST</name>
      <anchorfile>classSimTK_1_1ForceSubsystem_1_1Guts.html</anchorfile>
      <anchor>add121e04d86f759f42d473a0d66cca48</anchor>
      <arglist>(ForceSubsystem::Guts, Subsystem::Guts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::GeneralContactSubsystem</name>
    <filename>classSimTK_1_1GeneralContactSubsystem.html</filename>
    <base>SimTK::Subsystem</base>
    <member kind="function">
      <type></type>
      <name>GeneralContactSubsystem</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>a4bbd97d09b9a013130ce1a94eb2357f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralContactSubsystem</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>aca41b8d92521cfb60f613a08a1d183fe</anchor>
      <arglist>(MultibodySystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ContactSetIndex</type>
      <name>createContactSet</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>ae8f02ee65cd339d843c4208111fe6ad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumContactSets</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>aae619ffaab42d0f54d4114fcb7daf91d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBody</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>a4b169d998a9c1c37cad0a4e64e561640</anchor>
      <arglist>(ContactSetIndex index, const MobilizedBody &amp;body, const ContactGeometry &amp;geom, Transform transform)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBodies</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>a17fd73a458a33fdb2bdd984e49deefff</anchor>
      <arglist>(ContactSetIndex set) const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getBody</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>a8710bcf57250a0a7a8c5437b36b83a30</anchor>
      <arglist>(ContactSetIndex set, ContactSurfaceIndex index) const </arglist>
    </member>
    <member kind="function">
      <type>const ContactGeometry &amp;</type>
      <name>getBodyGeometry</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>aacff4b24eac8bd9c33b6f23ae3653ba4</anchor>
      <arglist>(ContactSetIndex set, ContactSurfaceIndex index) const </arglist>
    </member>
    <member kind="function">
      <type>ContactGeometry &amp;</type>
      <name>updBodyGeometry</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>a7fb88106e23fe51d3f1a939a3cc65a35</anchor>
      <arglist>(ContactSetIndex set, ContactSurfaceIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getBodyTransform</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>ab45378e1bd3e04fba3539f92830c1cfa</anchor>
      <arglist>(ContactSetIndex set, ContactSurfaceIndex index) const </arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>updBodyTransform</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>a38e7eae3cfc13c5b9bb31117b0671dd1</anchor>
      <arglist>(ContactSetIndex set, ContactSurfaceIndex index)</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Contact &gt; &amp;</type>
      <name>getContacts</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>aa7de3510ee122d56459872dadf476be0</anchor>
      <arglist>(const State &amp;state, ContactSetIndex set) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1GeneralContactSubsystem.html</anchorfile>
      <anchor>ae8847c22a39df91b8be3ee0cad0f0eb4</anchor>
      <arglist>(GeneralContactSubsystem, Subsystem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::GeneralForceSubsystem</name>
    <filename>classSimTK_1_1GeneralForceSubsystem.html</filename>
    <base>SimTK::ForceSubsystem</base>
    <member kind="function">
      <type></type>
      <name>GeneralForceSubsystem</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>aee13b16ddd14e04f02af61d38343184b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralForceSubsystem</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>a3875605f3b8643c92d27123d971b9908</anchor>
      <arglist>(MultibodySystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ForceIndex</type>
      <name>adoptForce</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>ae8120311498371a508b9340c2d72b9e8</anchor>
      <arglist>(Force &amp;force)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumForces</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>a41ced74d593df26f78a8c50b58e4ecd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Force &amp;</type>
      <name>getForce</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>a3beff468a4d1e8b2c3f17873b2a849a9</anchor>
      <arglist>(ForceIndex index) const </arglist>
    </member>
    <member kind="function">
      <type>Force &amp;</type>
      <name>updForce</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>ab2113cb940b70c4a5da724848271cbfa</anchor>
      <arglist>(ForceIndex index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForceDisabled</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>a206124ca36cfe74d966e1386883fe701</anchor>
      <arglist>(const State &amp;state, ForceIndex index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceIsDisabled</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>a327d23ee5b3da2caf98a0182627104d6</anchor>
      <arglist>(State &amp;state, ForceIndex index, bool shouldBeDisabled) const </arglist>
    </member>
    <member kind="function">
      <type>const MultibodySystem &amp;</type>
      <name>getMultibodySystem</name>
      <anchorfile>classSimTK_1_1GeneralForceSubsystem.html</anchorfile>
      <anchor>af3653931f2b2d077f9c139ebd4c76dcb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::HuntCrossleyContact</name>
    <filename>classSimTK_1_1HuntCrossleyContact.html</filename>
    <base>SimTK::ForceSubsystem</base>
    <member kind="function">
      <type></type>
      <name>HuntCrossleyContact</name>
      <anchorfile>classSimTK_1_1HuntCrossleyContact.html</anchorfile>
      <anchor>a7c4b4a9c53bcfe49fc75a9120157e41c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HuntCrossleyContact</name>
      <anchorfile>classSimTK_1_1HuntCrossleyContact.html</anchorfile>
      <anchor>ac784ef69a3f1717e1ddd845c41391ae2</anchor>
      <arglist>(MultibodySystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSphere</name>
      <anchorfile>classSimTK_1_1HuntCrossleyContact.html</anchorfile>
      <anchor>ae138b2c37e01e59b53527cdcd2e3ea11</anchor>
      <arglist>(MobilizedBodyIndex body, const Vec3 &amp;center, const Real &amp;radius, const Real &amp;stiffness, const Real &amp;dissipation)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addHalfSpace</name>
      <anchorfile>classSimTK_1_1HuntCrossleyContact.html</anchorfile>
      <anchor>a8df56b32eb4a25ec5d93f09325e0b2f8</anchor>
      <arglist>(MobilizedBodyIndex body, const UnitVec3 &amp;normal, const Real &amp;height, const Real &amp;stiffness, const Real &amp;dissipation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1HuntCrossleyContact.html</anchorfile>
      <anchor>a19003bd61e6d9e0dbda89945b64841a8</anchor>
      <arglist>(HuntCrossleyContact, ForceSubsystem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::HuntCrossleyForce</name>
    <filename>classSimTK_1_1HuntCrossleyForce.html</filename>
    <base>SimTK::Force</base>
    <member kind="function">
      <type></type>
      <name>HuntCrossleyForce</name>
      <anchorfile>classSimTK_1_1HuntCrossleyForce.html</anchorfile>
      <anchor>a72491d63b680b6df64f015d2a43f7ceb</anchor>
      <arglist>(GeneralForceSubsystem &amp;forces, GeneralContactSubsystem &amp;contacts, ContactSetIndex contactSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBodyParameters</name>
      <anchorfile>classSimTK_1_1HuntCrossleyForce.html</anchorfile>
      <anchor>adc80202a8e33be71e5e0c9b83dc4a1ca</anchor>
      <arglist>(ContactSurfaceIndex surfIndex, Real stiffness, Real dissipation, Real staticFriction, Real dynamicFriction, Real viscousFriction)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTransitionVelocity</name>
      <anchorfile>classSimTK_1_1HuntCrossleyForce.html</anchorfile>
      <anchor>ae8402e85f35834e313c472a57dbc0ef4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransitionVelocity</name>
      <anchorfile>classSimTK_1_1HuntCrossleyForce.html</anchorfile>
      <anchor>af2907c5b1457ca2723f734a417020fd0</anchor>
      <arglist>(Real v)</arglist>
    </member>
    <member kind="function">
      <type>ContactSetIndex</type>
      <name>getContactSetIndex</name>
      <anchorfile>classSimTK_1_1HuntCrossleyForce.html</anchorfile>
      <anchor>a8428d09e1f99332fb211f3694baf238c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_INSERT_DERIVED_HANDLE_DECLARATIONS</name>
      <anchorfile>classSimTK_1_1HuntCrossleyForce.html</anchorfile>
      <anchor>a81f7f1b8efc92b62d6775e3b5f0d0fe7</anchor>
      <arglist>(HuntCrossleyForce, HuntCrossleyForceImpl, Force)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::LocalEnergyMinimizer</name>
    <filename>classSimTK_1_1LocalEnergyMinimizer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>minimizeEnergy</name>
      <anchorfile>classSimTK_1_1LocalEnergyMinimizer.html</anchorfile>
      <anchor>ae3fd794e89a3c6aea20c4f3ef34edd2e</anchor>
      <arglist>(const MultibodySystem &amp;system, State &amp;state, Real tolerance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody</name>
    <filename>classSimTK_1_1MobilizedBody.html</filename>
    <base>PIMPLHandle&lt; MobilizedBody, MobilizedBodyImpl, true &gt;</base>
    <class kind="class">SimTK::MobilizedBody::Ball</class>
    <class kind="class">SimTK::MobilizedBody::BendStretch</class>
    <class kind="class">SimTK::MobilizedBody::Bushing</class>
    <class kind="class">SimTK::MobilizedBody::Custom</class>
    <class kind="class">SimTK::MobilizedBody::Cylinder</class>
    <class kind="class">SimTK::MobilizedBody::Ellipsoid</class>
    <class kind="class">SimTK::MobilizedBody::Free</class>
    <class kind="class">SimTK::MobilizedBody::FreeLine</class>
    <class kind="class">SimTK::MobilizedBody::FunctionBased</class>
    <class kind="class">SimTK::MobilizedBody::Gimbal</class>
    <class kind="class">SimTK::MobilizedBody::Ground</class>
    <class kind="class">SimTK::MobilizedBody::LineOrientation</class>
    <class kind="class">SimTK::MobilizedBody::Pin</class>
    <class kind="class">SimTK::MobilizedBody::Planar</class>
    <class kind="class">SimTK::MobilizedBody::Screw</class>
    <class kind="class">SimTK::MobilizedBody::Slider</class>
    <class kind="class">SimTK::MobilizedBody::SphericalCoords</class>
    <class kind="class">SimTK::MobilizedBody::Translation</class>
    <class kind="class">SimTK::MobilizedBody::Universal</class>
    <class kind="class">SimTK::MobilizedBody::Weld</class>
    <member kind="enumeration">
      <name>Direction</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4ad75a66393b9beb5383f437057b7d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Forward</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4ad75a66393b9beb5383f437057b7d07a44607131b8c0a58bfd8162b1fb869782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Reverse</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4ad75a66393b9beb5383f437057b7d07add3a7423b1b31ea2078d76dc383cdaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pin</type>
      <name>Torsion</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a3dceece097b7c4c4dde962f30ebaccea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pin</type>
      <name>Revolute</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ae5545344d05ad3521ce2a68f52eda16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Slider</type>
      <name>Prismatic</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a0f9ec1d7a7642b41ddf615f5be699d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Translation</type>
      <name>Cartesian</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a30f84fcd277bf27ec5783ba405cfde5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Translation</type>
      <name>CartesianCoords</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a318f2645fe1494eb8687d3d355b0f664</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BendStretch</type>
      <name>PolarCoords</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a78c70a0a5c5fdb9040c0cba94f2109cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ball</type>
      <name>Orientation</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a276fecee38470399e1683a93f4530742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ball</type>
      <name>Spherical</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa9a2f89ca8450002c01f8c09d4fe1088</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilizedBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a587e4f3edc99db7da5e6ff646a8805d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MobilizedBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aceab99766a6c1927f05a9282b5c106e8</anchor>
      <arglist>(MobilizedBodyImpl *r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a7f7324c42a57beedd7c577dbf14e2531</anchor>
      <arglist>(State &amp;state, Motion::Level level=Motion::Position) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockAt</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a37ac591feb4c08544ab17f2f7fa0d7b0</anchor>
      <arglist>(State &amp;state, Real value, Motion::Level level=Motion::Position) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockAt</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a310411deca445ac81d55f47b61a2496d</anchor>
      <arglist>(State &amp;state, const Vector &amp;value, Motion::Level level=Motion::Position) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockAt</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a24784973f1295316042dc2cd30d55760</anchor>
      <arglist>(State &amp;state, const Vec&lt; N &gt; &amp;value, Motion::Level level=Motion::Position) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>af140876d78c207e51dfb80297dd86394</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a5ca19bb03088e81314b9d81872b02e5b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Motion::Level</type>
      <name>getLockLevel</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a6ec6b9ad930bcac4fdc3d10b6f5576e3</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getLockValueAsVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aff678ef3c0bf656643574492d55b01d2</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody &amp;</type>
      <name>lockByDefault</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ac5b71338ce06176e41f11d9d113f4339</anchor>
      <arglist>(Motion::Level level=Motion::Position)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLockedByDefault</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aca64cbc146e75b7450991b5b6f5ac6bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Motion::Level</type>
      <name>getLockByDefaultLevel</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a44a9a8a76cfdd4d3a85ce75ca5bd1d47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getBodyTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a877368286148b4efbdb2d5e7f6904ac4</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation &amp;</type>
      <name>getBodyRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a5a0404ecdf9a8172bf22d2def7d79e0b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyOriginLocation</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a2e2d6882a3f7c42239bd6449cadf66bd</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getMobilizerTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a6be00463060a74c56863a179b0061f3a</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getBodyVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a136b1b973ae2d60e2bd09a19529c15a8</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyAngularVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ad07e64cc62fa2f76bd37894007abd378</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyOriginVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>af9911f4352e9224184e8dab962c7d8f0</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getMobilizerVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a16f87b4238c3efe0418275163bc258bc</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getBodyAcceleration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ab728f49034ee32dea4620f23a632a3f0</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyAngularAcceleration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a056be794b2e8d9c9d77124162d7b35f1</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyOriginAcceleration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a0bea21eaba5cb4db3751fbf3d0d8bc6e</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getMobilizerAcceleration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a79c7069df29ad92032816b5403aa6997</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const MassProperties &amp;</type>
      <name>getBodyMassProperties</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a2ecd25fe2c8f44a48db42ab92f80a690</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialInertia &amp;</type>
      <name>getBodySpatialInertiaInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a919bf69fc4449d163d04b867450b901f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getBodyMass</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a63398ad3cebfd110b2815a25201fd17d</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getBodyMassCenterStation</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a8cefb252884569addb85d934cd9ca620</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const UnitInertia &amp;</type>
      <name>getBodyUnitInertiaAboutBodyOrigin</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a6e492d01b892751aa6d82d73cd76cc22</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a6765463d0ad8f2e0bc84ddf3fb54746d</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a69952d293c85ea3642d972018cfc00dc</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aea0c851f977baae82c1c2355247685b7</anchor>
      <arglist>(State &amp;state, const Transform &amp;X_PF) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a525d09e7b28e1f08fd30128c549fe83d</anchor>
      <arglist>(State &amp;state, const Transform &amp;X_BM) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4dd37c7e26fc0d3af29bd39cbcc53977</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumU</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa0670418dc17ea36ae69d8a1ec42504c</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>QIndex</type>
      <name>getFirstQIndex</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a0ccd00b0e744058c564242f912214270</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>UIndex</type>
      <name>getFirstUIndex</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ab4ecf9620996412218499fa99f8a126f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Motion::Method</type>
      <name>getQMotionMethod</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>acb1b775de0ddef150089ac78fde3ba85</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Motion::Method</type>
      <name>getUMotionMethod</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a8b7364818e28d23abaf997e4357efb7c</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Motion::Method</type>
      <name>getUDotMotionMethod</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa9863cce1313097e6d446b9dc661e2fc</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a95a6e0e3edd73d690e01e109afd25bb1</anchor>
      <arglist>(const State &amp;state, int which) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneU</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a848c5bb901ca0a72a9d0f1eeb89783ca</anchor>
      <arglist>(const State &amp;state, int which) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getQAsVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a258623c5e835d49718c9b3dae063a7cf</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getUAsVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a74e8007f8925c60b99a84a2f2f973ac3</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa79c133af999645df8522032f7f8e911</anchor>
      <arglist>(const State &amp;state, int which) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getQDotAsVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a86018b5ade92c57d641beb65b8ca8fc9</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>addedad56051003dc25ff4c8fc661a188</anchor>
      <arglist>(const State &amp;state, int which) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a3c653abfcccb09d9176a38a088f0250d</anchor>
      <arglist>(const State &amp;state, int which) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getUDotAsVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>af14203212503b70930c104cf35aa45b1</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getQDotDotAsVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a63e9b3bf9124c207b254f4b45bf8c228</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getTauAsVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a0c098a7882568be9f1171d38d4206f10</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneTau</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ab48fce7013f9a3e63e320ca5d47cec01</anchor>
      <arglist>(const State &amp;state, MobilizerUIndex which) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOneQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>adf8e7bc0a62e38ccb9e867f635dbe993</anchor>
      <arglist>(State &amp;state, int which, Real v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOneU</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a87fd4564e60a150dbc3ebbe979912796</anchor>
      <arglist>(State &amp;state, int which, Real v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQFromVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a5b080dcb6c8bdb05e373fd7386b3de93</anchor>
      <arglist>(State &amp;state, const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUFromVector</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a127f82d17a6440392e604a103bfff5ef</anchor>
      <arglist>(State &amp;state, const Vector &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQToFitTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a5f926e05e89b9d8a157272b1512b32c9</anchor>
      <arglist>(State &amp;state, const Transform &amp;X_FM) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQToFitRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a47e2368d92372f485263d54eaee3ab1d</anchor>
      <arglist>(State &amp;state, const Rotation &amp;R_FM) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQToFitTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a831b84be9c28e51d85dc46aaa98e7531</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;p_FM) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUToFitVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a7c08ae9b8fe0f468d7d874d76022d19d</anchor>
      <arglist>(State &amp;state, const SpatialVec &amp;V_FM) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUToFitAngularVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a6456eff373a5cf775cd683de27544411</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;w_FM) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUToFitLinearVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ab9e470bca119537446a02f79680dc328</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;v_FM) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>getHCol</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa69c8e858f8d99f6677ed94e60c332e2</anchor>
      <arglist>(const State &amp;state, MobilizerUIndex ux) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>getH_FMCol</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a29c3388fb03ba24f5ae543dd173770bf</anchor>
      <arglist>(const State &amp;state, MobilizerUIndex ux) const </arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>findBodyTransformInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a38e9d5ec372c7502412e39ec6043302a</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>findBodyRotationInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a44bb12d2d6844023df97cff24d71549b</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findBodyOriginLocationInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4f1b290369cf503f4729b4bcd0f8aa4f</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;toBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findBodyVelocityInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4d82188ee012eda593dbe5bd4d7d6689</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findBodyAngularVelocityInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a3149c2ccfcf53d3c6d2f1da6e02ade0a</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findBodyOriginVelocityInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a9266f52fbc2390c278c4496a454594ef</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findBodyAccelerationInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a7bdf069f368b01b2c40a6dde309eca42</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findBodyAngularAccelerationInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a980e38c7e2e4f0da9aa47078cf8b33a4</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findBodyOriginAccelerationInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa03734a07495ebcf090b9a27a68461c7</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findMobilizerReactionOnBodyAtMInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4bc19dffd701936d44999571df13ba62</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findMobilizerReactionOnBodyAtOriginInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a51f297ca83ef03523984f5dc57ed1786</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findMobilizerReactionOnParentAtFInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ad512a9ba70777226e20cd478f3b92372</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findMobilizerReactionOnParentAtOriginInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a9108cf72177a2a8488ac652f0289bf5f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationLocationInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4cba41aaca4c7ffde96012433cbad8db</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;stationOnB) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationLocationInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a154c001e683ff81cd207db7677c002d4</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;stationOnB, const MobilizedBody &amp;toBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationVelocityInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aaea3a099f83c1721e9778b4ecc48df8e</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;stationOnB) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationVelocityInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>abe15ba865f8200758f6403d69898a627</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;stationOnBodyB, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationAccelerationInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ad63fa56fba245dea20dd1c558f938243</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;stationOnB) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationAccelerationInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a0c4b1e77bf8540e4f02be6ab1c2d30a7</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;stationOnBodyB, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findStationLocationAndVelocityInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa0204ec2a61c7539a85f0c79d2b4800c</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnB, Vec3 &amp;locationOnGround, Vec3 &amp;velocityInGround) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findStationLocationVelocityAndAccelerationInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a2ead96bfda2f3e7879d46e0e2b1c8575</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnB, Vec3 &amp;locationOnGround, Vec3 &amp;velocityInGround, Vec3 &amp;accelerationInGround) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findMassCenterLocationInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a24a54cb9ae23c2776f281bb2c66b4218</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findMassCenterLocationInAnotherBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa3b751d3d1e97d6a4953adead25f482f</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;toBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationAtGroundPoint</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a9abd25ff7099afe8eef241bb1e796f9b</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationInG) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationAtAnotherBodyStation</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ac5d8bbf4d1bf416cb0fb41c5952754d5</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;fromBodyA, const Vec3 &amp;stationOnA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationAtAnotherBodyOrigin</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a63f0f6b7bd56ef94cbd6e1e54cf57568</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;fromBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findStationAtAnotherBodyMassCenter</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ad24fa5ed7cd6e2f835b6bc5bee23a026</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;fromBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>findFrameTransformInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a174c4b66e4b65aac1a0a4d08544ed1ea</anchor>
      <arglist>(const State &amp;state, const Transform &amp;frameOnB) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findFrameVelocityInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ad875a1f313cb6bdb0fc2f6c11f858cd8</anchor>
      <arglist>(const State &amp;state, const Transform &amp;frameOnB) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>findFrameAccelerationInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a6df50ff36dffd8aa82a7379edeb6cb8b</anchor>
      <arglist>(const State &amp;state, const Transform &amp;frameOnB) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>expressVectorInGroundFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a4a5bca3a4ca67bfa7e3ae660f353b072</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;vectorInB) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>expressGroundVectorInBodyFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aaa32d7c974459ecb5acf90ab4dc1eaa0</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;vectorInG) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>expressVectorInAnotherBodyFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a3f57973c18df491b727df80a4aa8e0a4</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;vectorInB, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>MassProperties</type>
      <name>expressMassPropertiesInGroundFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a44026b68e505b7193b6211e1bb3292b9</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>MassProperties</type>
      <name>expressMassPropertiesInAnotherBodyFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>af552e3a4fda07b3e80448c02a82f2c48</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialMat</type>
      <name>calcBodySpatialInertiaMatrixInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a502978034abfca4e767d7b30c9f8e356</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Inertia</type>
      <name>calcBodyCentralInertia</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a27daeddf797146742c9f67b53d99c291</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex objectBodyB) const </arglist>
    </member>
    <member kind="function">
      <type>Inertia</type>
      <name>calcBodyInertiaAboutAnotherBodyStation</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a36c0e656d5315370004b3052bd3e5ce0</anchor>
      <arglist>(const State &amp;state, const MobilizedBody &amp;inBodyA, const Vec3 &amp;aboutLocationOnBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>calcBodyMomentumAboutBodyOriginInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>afc4029646b0e89372c37eb12a7f63c4c</anchor>
      <arglist>(const State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>calcBodyMomentumAboutBodyMassCenterInGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa4057ec7dbf36556c8633529f521457b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcStationToStationDistance</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a670bf0636c3fee6ab7c642fc2bdb13bf</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnBodyB, const MobilizedBody &amp;bodyA, const Vec3 &amp;locationOnBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcStationToStationDistanceTimeDerivative</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>adc856e321ebcd2a73abe8dae404bc721</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnBodyB, const MobilizedBody &amp;bodyA, const Vec3 &amp;locationOnBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcStationToStationDistance2ndTimeDerivative</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>af6b7270f1b4ee67d7ce39f5b7a7a1038</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnBodyB, const MobilizedBody &amp;bodyA, const Vec3 &amp;locationOnBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>calcBodyMovingPointVelocityInBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a2310ebac8eef484807289765f02ca90d</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnBodyB, const Vec3 &amp;velocityOnBodyB, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>calcBodyMovingPointAccelerationInBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a5e4ac1adfc161012b68803cf42bac406</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnBodyB, const Vec3 &amp;velocityOnBodyB, const Vec3 &amp;accelerationOnBodyB, const MobilizedBody &amp;inBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcMovingPointToPointDistanceTimeDerivative</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aea0ce43a4954a9b0d1b1f8c4120118a3</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnBodyB, const Vec3 &amp;velocityOnBodyB, const MobilizedBody &amp;bodyA, const Vec3 &amp;locationOnBodyA, const Vec3 &amp;velocityOnBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcMovingPointToPointDistance2ndTimeDerivative</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a667a7e9ff38a440c40a6edfe6e5be508</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;locationOnBodyB, const Vec3 &amp;velocityOnBodyB, const Vec3 &amp;accelerationOnBodyB, const MobilizedBody &amp;bodyA, const Vec3 &amp;locationOnBodyA, const Vec3 &amp;velocityOnBodyA, const Vec3 &amp;accelerationOnBodyA) const </arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>getBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a50504ba0523506307e866bf5a3c9a6b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Body &amp;</type>
      <name>updBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a9d923cd8142f9f22fd8c066bc123f5fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody &amp;</type>
      <name>setBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a6ed529dd784c1b31d0758dc108d99733</anchor>
      <arglist>(const Body &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a0397e80362252a12c1e1b82fad4119d1</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a23fdbd930e0d1b457b34f74bbea48f05</anchor>
      <arglist>(const DecorativeGeometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a318d42af0404b963baaf79aefe5ac2aa</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutboardDecorations</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a1691b7b83f03bab864809c57f09aa5bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorativeGeometry &amp;</type>
      <name>getOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a953490945c2f038d5863a2a69562d1bd</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>updOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ab72c9eeb5134c3f0592ff8ad9596c60a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aac4d45c5d01f527fe78d1cd87ae0ed12</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInboardDecorations</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a6332e7affc3bc5d08e03404217e1e10f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorativeGeometry &amp;</type>
      <name>getInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a9023214074ff6f08a66482a47ca18dac</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>updInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a2aafb9d7c6308942522cdbde6ccf1d06</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody &amp;</type>
      <name>setDefaultMassProperties</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a96ad8ad7a2ab01d1f972ac63b75177c4</anchor>
      <arglist>(const MassProperties &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>const MassProperties &amp;</type>
      <name>getDefaultMassProperties</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ac7cf261b33dd74faca04cf0df404387d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptMotion</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a8093a13f5455a64f3992ac46e60baff3</anchor>
      <arglist>(Motion &amp;ownerHandle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearMotion</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ad387e92c292c91370ae34e64d4fb1a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMotion</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aad0cdc23563e2ce3e79a6eff6028713f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Motion &amp;</type>
      <name>getMotion</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a45691e3b33e7c78f5118078565df5f6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa316ee0d30e68802bbb5c5e5f923b629</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa9ab782162cb3812c0d8210288290624</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>acdb13a977d8b395603bbb2bdc9b17b97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a3685fb7d4a869b5f155b1a8ff93d14f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a01b7797495da5ec793e3990ca55709e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>af57d3e2056111f2f266a5cac92a118cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getParentMobilizedBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a994d1afbed8dbddda0032b05e17bb21e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getBaseMobilizedBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ab36d77f2bba99bcc6960e85ff20aebe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SimbodyMatterSubsystem &amp;</type>
      <name>getMatterSubsystem</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ac775ea17a6b45616c8f4614d7f05039a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SimbodyMatterSubsystem &amp;</type>
      <name>updMatterSubsystem</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa31b3864498124e5f5a9874efe68ffd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSubsystem</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a3811f11ba5bc6c71d69089f8e44cae09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSameSubsystem</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a48d669565cc8b3280a9dcda76d436f74</anchor>
      <arglist>(const MobilizedBody &amp;mobod) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameMobilizedBody</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>adc702c31a60e1aa2c30bde5928df1ee3</anchor>
      <arglist>(const MobilizedBody &amp;mobod) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGround</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a91d2b1ce31d2517f54fe6ca017e12e77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelInMultibodyTree</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a88a9c7060d2eba76350683a5877b8e9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody &amp;</type>
      <name>cloneForNewParent</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a38dd85c33023cff8000542223937cc47</anchor>
      <arglist>(MobilizedBody &amp;parent) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneFromQPartition</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a8abdb29a5b69ee005c69f03492012cf6</anchor>
      <arglist>(const State &amp;state, int which, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updOneFromQPartition</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>acb4c37c9469de167f38bceaf61e61ac7</anchor>
      <arglist>(const State &amp;state, int which, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneFromUPartition</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>acf70b5c8c35ed2c4f98ea9ec497248d5</anchor>
      <arglist>(const State &amp;state, int which, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updOneFromUPartition</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>ae9467b6c619d89e1aa7e98894734840f</anchor>
      <arglist>(const State &amp;state, int which, Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOneMobilityForce</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a0aa98b6d48e4c17602da737be176d547</anchor>
      <arglist>(const State &amp;state, int which, Real f, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertQForceToUForce</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a0ac5f187e7ecd3ab750fd60f66a75010</anchor>
      <arglist>(const State &amp;state, const Array_&lt; Real, MobilizerQIndex &gt; &amp;fq, Array_&lt; Real, MobilizerUIndex &gt; &amp;fu) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBodyForce</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a77d73a0b77545b7929b5299399a1c543</anchor>
      <arglist>(const State &amp;state, const SpatialVec &amp;spatialForceInG, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyBodyTorque</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a2b6aeee0ce7fed8f55293a34f1c4d435</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;torqueInG, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyForceToBodyPoint</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>a86d41383618cfbc4d254bdcce82d0a73</anchor>
      <arglist>(const State &amp;state, const Vec3 &amp;pointInB, const Vec3 &amp;forceInG, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG) const </arglist>
    </member>
    <member kind="typedef">
      <type>MobilizedBody</type>
      <name>Mobod</name>
      <anchorfile>classSimTK_1_1MobilizedBody.html</anchorfile>
      <anchor>aa3ca9a5e09ca1368d7724daa9d7ff3fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Ball</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Ball.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Ball</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>ae57996f299424556b334c82f0da95071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a7c73e5024cf6b1c2b704bbdbd764654e</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>ab4fef9d6fd321c225e703fa4389c61ef</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a0c92be0a5bd4651998a8d33457a3eb7f</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>af5b8575a73367123fa91f11fca5426a2</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a02a8ed4531e3d56bd6459ce113c63a03</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>ad5543c04a40a41312a903055a38ce52b</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>ad5c92d6a24aed7d9aeb6d5e3c96a508f</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>setDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>afc6785be387e06514b6c378c1719009e</anchor>
      <arglist>(const Rotation &amp;R_FM)</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>getDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a487a11c294cddc1966aa19e943a07866</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>setDefaultRadius</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a819b98dc3dd066500a0f542fa64573fe</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultRadius</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a7bf2ff45c82d85c8f38d786a3d98ed7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a9dd644b8e65336a4e1f36512b4819056</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ball &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>aeaf042d31ac435f5854e72548869214f</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a695d1fe0a49a3a78dd69ecc36981e4fe</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>adc9b0b4b71c44aa8f7bf1f6e976de530</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a8c732e183535eba7e3fc4bea8ba81d19</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>ada8119b99015d4ddcaa226b7ae273d49</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a300795f760869207ea1119fd6bedacfe</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a024047ece64984662cc2de90e6b111bf</anchor>
      <arglist>(State &amp;, const Vec4 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a519f2f83395b28334dfe9a068c69511b</anchor>
      <arglist>(State &amp;, const Vec3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a2e112382e8666256a56afa10b270b1a8</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a5f1b6c977258c4b6a4dec8a23323dd71</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>abf2960609a26419d57df19618370f76f</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ball.html</anchorfile>
      <anchor>a207c233dc16e8c1c082e2fcf0717ba84</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::BendStretch</name>
    <filename>classSimTK_1_1MobilizedBody_1_1BendStretch.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>BendStretch</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1BendStretch.html</anchorfile>
      <anchor>a05fbe8362d84683c3028d728637ed63d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BendStretch</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1BendStretch.html</anchorfile>
      <anchor>a0f9e25340da8663c38ecc389b927df00</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BendStretch</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1BendStretch.html</anchorfile>
      <anchor>a2407bac1759dba742b4ce711667c3710</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>BendStretch &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1BendStretch.html</anchorfile>
      <anchor>abb6a3488466065d4bff27815784d2d12</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>BendStretch &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1BendStretch.html</anchorfile>
      <anchor>a9a37320c8f5fc48c2cb90add7bb28a8e</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>BendStretch &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1BendStretch.html</anchorfile>
      <anchor>a90f65d234aac645175c4ccae1e69f96f</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>BendStretch &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1BendStretch.html</anchorfile>
      <anchor>aa2c28a555d20fa4c9c666a1b132abacf</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>BendStretch &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1BendStretch.html</anchorfile>
      <anchor>aeb12ed7d8c021cbc5cc9cee7ae706fe6</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Bushing</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Bushing.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Bushing</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a773ccf78ab3a1d760ac1b6e175839bd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bushing</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a232fbdc9e57bd975923283ad68dbd106</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Bushing</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a84a18d04209db2150e08a8942b6ebe53</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Bushing &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a684dc45c8f90048bd9ab34e56b216752</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Bushing &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>ac7a9f5fc192100d7dde1315196a0afdf</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>Bushing &amp;</type>
      <name>setDefaultTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>ac0e3b43f6c5bf9f3008318af348bd58a</anchor>
      <arglist>(const Transform &amp;X_FM)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getDefaultTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a2687eaa37dcfdf7479aa7cc395cb0e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Bushing &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>aa75b9a03c24932fd75f71f2efa3ad671</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Bushing &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a6fe2dd50a391f1ef554d0d7a4cafca6a</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Bushing &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>ab5ac08fc23258a88bda7963e49d485f0</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a5438593be06ce6fae1c0e0e06e039bec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Bushing &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>aa2d9c1ead040752d404482b2ce32c01c</anchor>
      <arglist>(const Vec6 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>af24aeb38ac1eb2789a77ae385d1ad19f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>aa60fa096a9180d6ad0a683ac788d9d56</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>acc7c21c6d8aa024e298e21534c907c44</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a78b0fe7c28b59895f0472ec6f2e792b1</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>afb7405f76b1a63f464fdd17e649f005b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a82293f361a1114c1f7b0d7cc015e1d5b</anchor>
      <arglist>(State &amp;state, const Vec6 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>ab7c5a4919a6548a166518e4800346e36</anchor>
      <arglist>(State &amp;state, const Vec6 &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a8f86bb090897da23b5a0fc6e9a0d2da3</anchor>
      <arglist>(const State &amp;state, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>adac5fd9521b76023fe0f82e600e4f005</anchor>
      <arglist>(const State &amp;state, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec6 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a82c73244d5c65ec77dcb901e22678362</anchor>
      <arglist>(const State &amp;state, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec6 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Bushing.html</anchorfile>
      <anchor>a4deb8db1bc107172948ae76bf2925dee</anchor>
      <arglist>(const State &amp;state, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Custom</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Custom.html</filename>
    <base>SimTK::MobilizedBody</base>
    <class kind="class">SimTK::MobilizedBody::Custom::Implementation</class>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom.html</anchorfile>
      <anchor>ae4ebd2c30111f77334a07cef5d26c446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom.html</anchorfile>
      <anchor>a4c22e532ac866a8fa3138ec568bd0e04</anchor>
      <arglist>(MobilizedBody &amp;parent, Implementation *implementation, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom.html</anchorfile>
      <anchor>afe883ecc79e8ef9ddf525dd3b5723b37</anchor>
      <arglist>(MobilizedBody &amp;parent, Implementation *implementation, const Body &amp;bodyInfo, Direction direction=Forward)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>getImplementation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom.html</anchorfile>
      <anchor>a377a8eac1de1bb478dabd6090a1c85a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>updImplementation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom.html</anchorfile>
      <anchor>ab8dcb30af5ccf9b66dfe244742721f62</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Custom::Implementation</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</filename>
    <base>PIMPLHandle&lt; Implementation, ImplementationImpl &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Implementation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a5ab03db155da9aa8e5f969e6613bf0fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Implementation *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ac3c0f165813eb7491a4aaa17c6cfb9f8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>afd1c8f179855ba4b5c60b6885d1c9887</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;, int nu, int nq, int nAngles=0)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2850db71037610153135583ba0f3edf4</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ac03778d9f963f8b2d9bf889fe15a708d</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a4e13daf1b675ee04cd2339f8ddc959c4</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ae0439ba2dcb4b778ea0f8e4a3d14fad6</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a1358ffb48f0443818d30ac78afa63065</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getMobilizerTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a40a0c6b00a67848863503e6504a94043</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>getMobilizerVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a1b9d92031b918666128e197a0542ead7</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseEulerAngles</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a6999212221257f46895eb7a6d56b29f1</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateTopologyCache</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a970f782c765862cba774461b2c7fc9bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Transform</type>
      <name>calcMobilizerTransformFromQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a1443aac6089cc6f2c1e85c8b5aa4f4c2</anchor>
      <arglist>(const State &amp;s, int nq, const Real *q) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SpatialVec</type>
      <name>multiplyByHMatrix</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a3e218c380d12a9f4af73d5072cfc6034</anchor>
      <arglist>(const State &amp;s, int nu, const Real *u) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiplyByHTranspose</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a7d85e17cf561d35aba399e1b3a0c87b5</anchor>
      <arglist>(const State &amp;s, const SpatialVec &amp;F, int nu, Real *f) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SpatialVec</type>
      <name>multiplyByHDotMatrix</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a9263c8eed08cf33cd00f31fdb2301146</anchor>
      <arglist>(const State &amp;s, int nu, const Real *u) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiplyByHDotTranspose</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>af3e9247d1a717df881ed2654300ee9ef</anchor>
      <arglist>(const State &amp;s, const SpatialVec &amp;F, int nu, Real *f) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyByN</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a0038e9bc6b9f7337601ca2e085229549</anchor>
      <arglist>(const State &amp;s, bool transposeMatrix, int nIn, const Real *in, int nOut, Real *out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyByNInv</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a301c187b22f0366db831e3c4bc8a55d5</anchor>
      <arglist>(const State &amp;s, bool transposeMatrix, int nIn, const Real *in, int nOut, Real *out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyByNDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a4f680117b0024df633655911cda13cb0</anchor>
      <arglist>(const State &amp;s, bool transposeMatrix, int nIn, const Real *in, int nOut, Real *out) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setQToFitTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a69b034e9b66fe77603a5f514999b3621</anchor>
      <arglist>(const State &amp;, const Transform &amp;X_FM, int nq, Real *q) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUToFitVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a4a5622b63a472b2e2ca5275556521962</anchor>
      <arglist>(const State &amp;, const SpatialVec &amp;V_FM, int nu, Real *u) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcDecorativeGeometryAndAppend</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2f2612a5b9f913fcedaff2aa6cc22719</anchor>
      <arglist>(const State &amp;s, Stage stage, Array_&lt; DecorativeGeometry &gt; &amp;geom) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeTopology</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a4f47ca2f3772d58b58816d9ed37cf8f0</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeModel</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2114ad8d6a1dc4beb74a5862da38255b</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeInstance</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ad7b28bd19fe6d7836c3d31e8ddcef4e8</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeTime</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a917bb2733422da09a3208eda81e7ce5f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizePosition</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ac3d2d1525a8835dd2650db6a6b7eae1d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a075f9a6a6c9d7e9e5e36dcdd7a91077c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeDynamics</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2b0f9efdf0e933041b26b9f1869b765d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeAcceleration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ae128c1105be58d233d362417ff3fa35a</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeReport</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a7b540d77d7e23baff099655ef690963b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MobilizedBody::CustomImpl</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a2fe717a7b4a761f997dd581dff3f885f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Cylinder</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Cylinder.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Cylinder</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Cylinder.html</anchorfile>
      <anchor>a3781b83ed4facffaf104fec98342367f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cylinder</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Cylinder.html</anchorfile>
      <anchor>a9cf97e0954b07e5cf98374ddb5160fcb</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cylinder</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Cylinder.html</anchorfile>
      <anchor>ac2e5d8577df47bd758de40f438fd5775</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Cylinder &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Cylinder.html</anchorfile>
      <anchor>a8b2e6e74c4ff5e6784213ee94665e36f</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Cylinder &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Cylinder.html</anchorfile>
      <anchor>a1eec4b5e4b0f2eab8e4238f4d64f9b6a</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Cylinder &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Cylinder.html</anchorfile>
      <anchor>af1139f9e13dcbcf4145c26d9a13adce1</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Cylinder &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Cylinder.html</anchorfile>
      <anchor>af1bb203790c57212bda7565c5b44212c</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Cylinder &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Cylinder.html</anchorfile>
      <anchor>a97d782c201e7c1a263d27b7f0f9d36f5</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Ellipsoid</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Ellipsoid</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a3f47ae2658aa03961c301147d808b82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipsoid</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a6781b6b1db45f68168401bbeec138856</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, const Vec3 &amp;radii, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipsoid</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a71b7d5df9652116add56b70969313151</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, const Vec3 &amp;radii, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipsoid</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>aa7b655c70d4bd7dd6995a12888e58e04</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipsoid</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>abc29e79246c7e78ffd1999ed31107c0d</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Ellipsoid &amp;</type>
      <name>setDefaultRadii</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>ab218901ec85b7738f7701121888fddb3</anchor>
      <arglist>(const Vec3 &amp;radii)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultRadii</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a9a8652c6afc88bf616a79a35e03c87de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ellipsoid &amp;</type>
      <name>setDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a1b619db02b6c0f7bac56fcc4231c5088</anchor>
      <arglist>(const Rotation &amp;R_FM)</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>getDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>ae3ccd714a2d17b4f5c2d2584cd9da10e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ellipsoid &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a4670945bdf0f12ca6cf7aac11ea62e1b</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Ellipsoid &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>ac97b222a7c9074c219e566c53ff9f3fb</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Ellipsoid &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a467e33acb757e6eec8544f480b7fc366</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Ellipsoid &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>adac4ee83f3ae8d996c86ab4fb798b7f0</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Ellipsoid &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>ab480b6c0844fa970f0db048f62e7ac3a</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a897c68b438d5c5e137186ed722ad02b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion &amp;</type>
      <name>updDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a7d5ce4d89849a5e1db4d9449ce6f7324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ellipsoid &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>acdfe30f058032d8f72c4aef0cedf453a</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>aa9676af14407ad7ac13a8aa970aea1cc</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a3a0164610ac0314c587d4ec69176c6e2</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a0f75371dbb760998135d520f6e743270</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a67594c7113f545f28bcf7c50effef7e1</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a6b772984c786ef08ed473859da396647</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a5aef4d1fdf21ec760ff094ea6dffffe1</anchor>
      <arglist>(State &amp;, const Vec4 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a30a9e4176d7051c8fb04839b26b89364</anchor>
      <arglist>(State &amp;, const Vec3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>ac7e0d100a8f924dd981ea55ed4ef96b0</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a95f03e3c89d644f726696716a2d59ca9</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>ad7f72a325f7d36ec23be31d8c2193a62</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ellipsoid.html</anchorfile>
      <anchor>a72ce91d9d1bb5aa82cf27ca4e7ea51b9</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Free</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Free.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Free</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a4c0cbfeaf6e6dd28dc8caca6234215f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Free</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>aca45ae4de0cbd4c7db1547d6b98aeda1</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Free</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>aba2662c60e9c1a2fc923083e3949b9ef</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>aeac062cc3fb574620a24035ce11e679e</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a6e5e20f57c6dd9fd12592db97cdcfaa6</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>ad48d05a1e0716dc989379333dd11a0c5</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>aa771529a79602720ad4fc2bab8a39793</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a86f9547c3e0d38dbef398c2a1e88b3ff</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>setDefaultTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a693bc14e60c14a1f2d431d503f6c4b26</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>setDefaultQuaternion</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a120476f165b6aaebd4ec0cb95035e2e2</anchor>
      <arglist>(const Quaternion &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>setDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a43c626a5499b46a3413e221b865fbd9a</anchor>
      <arglist>(const Rotation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>setDefaultTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a3c8593d8018a0c3265434db62781b252</anchor>
      <arglist>(const Transform &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a39f0163e2551983fe9a42ebc5fc4ef14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getDefaultQuaternion</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>aa5a4fea3e648cc2efaee508af6badf0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>getDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>aae4c829a2608778386cdb518ea5a92b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>getDefaultTransform</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a323d589e5764490800b4142d24f38613</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec7 &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>aa6f43ba24ab019cf4af7f4338ec84421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Free &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a6551e413628bbd1c2df801c56e039ab6</anchor>
      <arglist>(const Vec7 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec7 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>ab8a3d4e7f58b36fcb2997c462391afd2</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec7 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a853cfdb09e57615c4dfa5d919a5f7e18</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec7 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>aa43011fdd4e10adc7dab81d76da6179d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a7d8e8f7de07cb0b67594620a83feb995</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a9c74dddec91eb838fac14b00a882c4e9</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a10491f021160a975d78da8d34fd70913</anchor>
      <arglist>(State &amp;, const Vec7 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a6ecee34ce8519edac867697ffc482873</anchor>
      <arglist>(State &amp;, const Vec6 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec7 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>af164c6af3f0fe17068c8c8e6df9d927b</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec6 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a7db4e559b306f319a365b3438cf70bd8</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec7 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>adb14e43b97a2006f36b634543702012f</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec6 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Free.html</anchorfile>
      <anchor>a41d63deeba0746158208d41278682bd8</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::FreeLine</name>
    <filename>classSimTK_1_1MobilizedBody_1_1FreeLine.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>FreeLine</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FreeLine.html</anchorfile>
      <anchor>ad44e2b4600bf74686c305396c292f0f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreeLine</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FreeLine.html</anchorfile>
      <anchor>a7c5b4ce4277c00e858c05465c7a38efc</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreeLine</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FreeLine.html</anchorfile>
      <anchor>a77b4df74c08af84672e560535902f1fc</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>FreeLine &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FreeLine.html</anchorfile>
      <anchor>a84fbde4a12fdb88776cf00118953bd81</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>FreeLine &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FreeLine.html</anchorfile>
      <anchor>a91a9bfae299993a1f2a41448022f3622</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>FreeLine &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FreeLine.html</anchorfile>
      <anchor>aed2dcecc1737a30274618617a7202884</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>FreeLine &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FreeLine.html</anchorfile>
      <anchor>a514c305c57485e8d8e6526e8d7bca669</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>FreeLine &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FreeLine.html</anchorfile>
      <anchor>a43749ead149dd401a248b9898165a081</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::FunctionBased</name>
    <filename>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</filename>
    <base>SimTK::MobilizedBody::Custom</base>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>a9adda34f0af15cc66e7f1e6e04858501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>a3de7c6ee3bc492e5fd132957c4ad8e1f</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, int nmobilities, const Array_&lt; const Function * &gt; &amp;functions, const Array_&lt; Array_&lt; int &gt; &gt; &amp;coordIndices, Direction direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>af94fd76215f538a46e77ae72aadb1929</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, int nmobilities, const std::vector&lt; const Function * &gt; &amp;functions, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;coordIndices, Direction direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>af343c4f952c27f3514018da17f5fefd4</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, int nmobilities, const Array_&lt; const Function * &gt; &amp;functions, const Array_&lt; Array_&lt; int &gt; &gt; &amp;coordIndices, Direction direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>ab986c15800610bc9fb9cf899af96b94f</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, int nmobilities, const std::vector&lt; const Function * &gt; &amp;functions, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;coordIndices, Direction direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>ab80d9362f30558feb4ad6b18fa8d6ffe</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, int nmobilities, const Array_&lt; const Function * &gt; &amp;functions, const Array_&lt; Array_&lt; int &gt; &gt; &amp;coordIndices, const Array_&lt; Vec3 &gt; &amp;axes, Direction direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>ab8d4c5c8f08f4ac766d81df1ede449f3</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, int nmobilities, const std::vector&lt; const Function * &gt; &amp;functions, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;coordIndices, const std::vector&lt; Vec3 &gt; &amp;axes, Direction direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>ae8ae5170c4f1736c06c9b65908594b7d</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, int nmobilities, const Array_&lt; const Function * &gt; &amp;functions, const Array_&lt; Array_&lt; int &gt; &gt; &amp;coordIndices, const Array_&lt; Vec3 &gt; &amp;axes, Direction direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionBased</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1FunctionBased.html</anchorfile>
      <anchor>a35369f2206adfc8131a40678ed108cb0</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, int nmobilities, const std::vector&lt; const Function * &gt; &amp;functions, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;coordIndices, const std::vector&lt; Vec3 &gt; &amp;axes, Direction direction=Forward)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Gimbal</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Gimbal.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Gimbal</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a8972d6b90e0ca233df134b248e7d9310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gimbal</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a212d1daccdf050af7d224a3d59ecb100</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gimbal</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a2c648ffa0fabddbf953e75688c28098e</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Gimbal &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>abaf51b721f54ae2a33d08dbff401584b</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Gimbal &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>aea8768a4e5829c6f88574ff198cb9f6f</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>Gimbal &amp;</type>
      <name>setDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>aa0dbc5d08cdbb3b9aeaf2dc540e11d20</anchor>
      <arglist>(const Rotation &amp;R_FM)</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>getDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>abb591e70352243c76be1a9b0d7576a80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Gimbal &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a02ba77334e8bb735953fcc4b6c2879e1</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Gimbal &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>afd8ae5b4aa4df9490290beded6c75ff5</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Gimbal &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a8edd98add5d43d7b8923fa714a37310c</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Gimbal &amp;</type>
      <name>setDefaultRadius</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a9300645eb3e81d5aa398363c8de77f98</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultRadius</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a0220b4c9129299289f4d92c1101c7a85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a6527aa3d4df2fb8bb0dbcc96e48cac94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Gimbal &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a6c94098265b541aef0d89efccc177600</anchor>
      <arglist>(const Vec3 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a02a8fafa6c22e49c1150a7abf89b7dd3</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>ad5bd34bd85c5e82b13e62d7298bca886</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a22795d8492a5e311cedf7e10c8620816</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a1582d36be355651ee398c5076ed7f432</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a79160a26142a4edda7cb7265563be922</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a8764b7684bd2948668d8a1fe2fe34121</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a378c037008f3b8cdf41f375dcabef693</anchor>
      <arglist>(State &amp;state, const Vec3 &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a5fec57dc38c5424733d3b7021d917783</anchor>
      <arglist>(const State &amp;state, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>ab462f3b22bfa1a73d25f85287002b4f9</anchor>
      <arglist>(const State &amp;state, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a31bc7804b981d39c6fddd3d960be29a1</anchor>
      <arglist>(const State &amp;state, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Gimbal.html</anchorfile>
      <anchor>a43873f03f2bfcbb3a772b7af863ad292</anchor>
      <arglist>(const State &amp;state, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Ground</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Ground.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Ground</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ground.html</anchorfile>
      <anchor>aab412a88542fe13d924b29719a5ee02f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Ground &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Ground.html</anchorfile>
      <anchor>adcab159448a36e1db451782a24c13e08</anchor>
      <arglist>(const Transform &amp;X_GD, const DecorativeGeometry &amp;artwork)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::LineOrientation</name>
    <filename>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>LineOrientation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a27913a779327254a6fd822b8c7cd22bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineOrientation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a4c6f462010612236495a3c38115eae58</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineOrientation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>aa48bcffefca607804da0e05d1dc0a6e0</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>LineOrientation &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>aa60d8f906f9952448bfd451079f3e85f</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>LineOrientation &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>aa296ae8b55c292860b82ee25384bc41e</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>LineOrientation &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a5eb61a862c5fdafb40f1992af05d7e4e</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>LineOrientation &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a53054cf49de3e30e52557a9ae6710b72</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>LineOrientation &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a7cba62136105168368e16b71777e6caf</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>LineOrientation &amp;</type>
      <name>setDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>ad1c39d3d721a8efc0149a2c2623039d4</anchor>
      <arglist>(const Rotation &amp;R_FM)</arglist>
    </member>
    <member kind="function">
      <type>Rotation</type>
      <name>getDefaultRotation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>abbe91036b2e005746c3b025ed15011e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a921961bc16cea95625a7c2cf84a36648</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LineOrientation &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>adc6a7630f1bea22e24b0ebf6a017f0d5</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a64e6c933ca0f43eb081eae5a73a60837</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>ae672232d4f7d88d4980f536a2026de42</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a22e730eb516ac5088cf097cf5225d552</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a617500d2ca1c93699a0c6b89eca0c9ce</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>ac8b0870e2b54fce13519db6db45cd3f5</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a8d00bd8a1331563cf6fd208a73d1a2dd</anchor>
      <arglist>(State &amp;, const Vec4 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a479ec35858fe5cb7f2b8024d02019a28</anchor>
      <arglist>(State &amp;, const Vec2 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a89c793b696f0262b55f8cada2cdcdc35</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a42eccaf04ea220ea949a9d9404667311</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>ad929af004ff36a176bb74176295ffb60</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1LineOrientation.html</anchorfile>
      <anchor>a884fdfa6b3e60ac3454cab3505decf7e</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Pin</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Pin.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Pin</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a9227c5cd311a9c750770a989726eb5a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pin</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a21aee3497ccbd524bf5cc203d88561b5</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pin</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a6caa4654e0e5525d5536ee621d39eb88</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Pin &amp;</type>
      <name>setDefaultAngle</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a6daf32d252d4d16007166cee6149596f</anchor>
      <arglist>(Real angleInRad)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultAngle</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a06a5cdb24218038cac5e267da8ba75e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngle</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>af57cfa79a192d5cc80637b4ca4eec837</anchor>
      <arglist>(State &amp;s, Real angleInRad)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAngle</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a51ed9184cd65a6c55157f68aac6aa389</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRate</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a48d7af8a0edc94b3abd16b5826f73983</anchor>
      <arglist>(State &amp;s, Real rateInRadPerTime)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRate</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>afcf14a99ec92aba36c4ffdba1fae2e63</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAppliedPinTorque</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a183fd87b3509e98ce576495963fae978</anchor>
      <arglist>(const State &amp;s, const Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyPinTorque</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a35747f06549ef3aca1ebc3f1e4bd92ca</anchor>
      <arglist>(const State &amp;s, Real torque, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>Pin &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>aa9016668491e08ee91c2abe083a9636c</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a85c7b10f184f0898901f9b625b6ff6fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>ab46acf6a55d83c79e0957005f1a92bd7</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>ab0ed22361bfd409a61c54bda3f52a424</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>ab2e81461f590d5e3d4f97967dbb2a322</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a6311a681794d64fb343dfb19c3b54775</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a4383f7839abea94a3693690d09ffa9f1</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>af352ad7be24027ce88465c29d03c0b20</anchor>
      <arglist>(State &amp;, Real) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a24030c9fbcae6d27aeb9cc2fb5f41cf9</anchor>
      <arglist>(State &amp;, Real) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>ad49b689256c51040041b59de72e44aa9</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>ab8b8440ff0cc29b2f70f3e49e408fdb0</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>abe470d2d688fb24a408334291e8a3a07</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a7d1087de7fe6986747d78fece7590b40</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Pin &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a91ccff6ab8bd8214cb92361e02e6a3d4</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Pin &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a8bd13f86529ba11a1436f647c7f82608</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Pin &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>a48d5e140ee38a976bf4529f523fd1cc6</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Pin &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>adb522874300805ca7e60a6c2b65ede41</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Pin &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Pin.html</anchorfile>
      <anchor>afd614dfc39917fc3d6b1e6112fe344e8</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Planar</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Planar.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Planar</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>ae595d69bd7800478c809b05bb4a49e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Planar</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a8e476ce50e450da7126efa5eb077d180</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Planar</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a89c4748f154572041ea3e6c0a9941d0c</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Planar &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>ae7a9f534598bf4d054a2b478742a2c28</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Planar &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a770381cafa08ca3c718561a378ceb388</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Planar &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a3066d949d69238060c312fc7f172ff00</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Planar &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>ab4d884de9c6a3c35c282f925e3ea842d</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Planar &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a4e977f9c160315a3e89b0810885c66b7</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>Planar &amp;</type>
      <name>setDefaultAngle</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a99d64a04b073f9719f9e1f3a8c9f31bd</anchor>
      <arglist>(Real a)</arglist>
    </member>
    <member kind="function">
      <type>Planar &amp;</type>
      <name>setDefaultTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a28643626adbbae248631a53185083e7c</anchor>
      <arglist>(const Vec2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultAngle</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a8735409e84c7d4e9e70ce8277b7af502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getDefaultTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>af52d101804bf0c187f7ec3658dce55ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngle</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>ad1b53e4da8fd3095fe0ae9c925d10a99</anchor>
      <arglist>(State &amp;s, Real a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a99ee5c382324ae09e195e97be65d1b18</anchor>
      <arglist>(State &amp;s, const Vec2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAngle</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a36214319307cea966d0f7bbeb12a4c05</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a038a394f081936dd0ef740928ba7f26c</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a59588b59e5d038076c373eaa12ac8c95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Planar &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a7abe4dea44865fdde70e3bbb12c9279a</anchor>
      <arglist>(const Vec3 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>afc8d3bf6d5d28424ba87364d4995113e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>aa4d2c87092b3399050d1a7bb8ce219a7</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>ad1fb72990933da87c51ff6895cde5d57</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a18d1a9f1fc0ed338013ae2327abec1bf</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a66e47ad7476aaeaa897ea0d937d8f625</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>abdf61dff91c72cbc6a0e3290a3ac5b92</anchor>
      <arglist>(State &amp;, const Vec3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a1e43f7616fa8c597e58b7b8de4d60468</anchor>
      <arglist>(State &amp;, const Vec3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>ae663b05bb091828473ddeb3ca7caae57</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a35b81a25368ab3cb3bd14a1f80faf83e</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>ad9c4e19a05d397a482aafe2e417860c8</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Planar.html</anchorfile>
      <anchor>a226f5da6455196878510e5fbf40bea84</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Screw</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Screw.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Screw</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>ac0962bd5a26af9a140ddc9ef27f8eab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Screw</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>ab78258fc13ef7e532427717c9779cf76</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Real pitch, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Screw</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>aeb8b0b2d6983c70dae188ab57643b4c5</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Real pitch, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Screw &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a36416746f9b8e899c29858cfda05fbbc</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Screw &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a2fa3275b696a763ab280e7330c6182dd</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Screw &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a426a2eb883ecc8c86a4ee101e1a60e7e</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Screw &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>aeb068a3d407dc0126560314332f1a2f2</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Screw &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>abacfc0c852666f1082b3321e60092f86</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>Screw &amp;</type>
      <name>setDefaultPitch</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>aa8fec5d77d368a1991e742012cbc7592</anchor>
      <arglist>(Real pitch)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultPitch</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a06f0450496db9909150d708633d8add4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Screw &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a6e4146176f0544f83ef8fb012a62e9c9</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a292455d2fef5bd65812632114165c82d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a0138602fda2540492d8b7e9ca486795f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a006c24ada4dfee35901bdb9a50837a83</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a64dedaab0ab06aec954abedb5704eca3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a73176ae493666747366e91341c975922</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>aaa7eabaeabeeb5dabdc72c61f49d86d4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>af5ed4bad53e3e14008e1953d9e538a42</anchor>
      <arglist>(State &amp;, Real) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a0d786cd030e7030c429b8aec8b141d1b</anchor>
      <arglist>(State &amp;, Real) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a0a7c29696dae14e4a9d3b2fe3873686e</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a7a04ee5b1e9368884650a185904dc004</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>aed693fea5aa0de252db1efcde673fb16</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Screw.html</anchorfile>
      <anchor>a270e66a8692625eb1263e5ad0201f565</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Slider</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Slider.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a6c705bd6c3383a524e04ade5596f25eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a749a22822f66ac2079f7d8c89f2c877f</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a08cbbefd489dd83d9ca4501b903de5c8</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>setDefaultLength</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>ab4310f1be5ed2bff1310c97381f4fc2b</anchor>
      <arglist>(Real length)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultLength</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>af84ac0749f274291d9e1d68a1deca873</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLength</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a53571fc1e53723a9e6db6289c7517982</anchor>
      <arglist>(State &amp;s, Real length)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getLength</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a5442746484c89102989d9e8d54a8b06e</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRate</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a0edf8f42c58b8168e91ee2b6b2a494cd</anchor>
      <arglist>(State &amp;s, Real rateInLengthPerTime)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRate</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a577f544de66b549cac3504ac8b71e3cf</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAppliedForce</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a4a52c84e2c99e90d0e9220faf9a34ed3</anchor>
      <arglist>(const State &amp;s, const Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyForce</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a52db62c76ba7ac7aee1409968c50267a</anchor>
      <arglist>(const State &amp;s, Real force, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>afd4444919da52625bd70017ac42de525</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a385e0ef524dd361cede628bab52d0a94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>abd7375d61cbdb08c50d625e6d41363f3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>ae3bf8dc73c38aaedeef84af8cef7ad40</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a17745797fd0a5999ab9d7e514de84ec4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a13811439695af0b91f57ea6d0794658a</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a580458824a61cfd4d381a29c24cb51b3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a09477afaed2aa1502ee445e4cf016155</anchor>
      <arglist>(State &amp;, Real) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a5982af8619976a4b95e73abb88fe8964</anchor>
      <arglist>(State &amp;, Real) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>ac425070608e8470c70d2b28dfb92a38a</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a3242d2e08bfc166b1de56deed1c10707</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>ae2d7a7ecf8428bd05c78a07ed6785e82</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a0e2cb86da7efd6f3b191a56304858016</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a269797e45b0df08854cb496683336488</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a9056ee7bf03b4d773fc87eb21ef4420c</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a14148ebf231f5e01dfb4f070162693b7</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a28d194da181133af1261f461865dd51a</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Slider.html</anchorfile>
      <anchor>a351e670a6a5ac95bf6664e4763bdb613</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::SphericalCoords</name>
    <filename>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>SphericalCoords</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>af844f48641848c5766d6b5653878685e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalCoords</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>ab799e5870a260d45ead7616fe53fc85d</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalCoords</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>aa2103d624294b44f40b99a8ad54a32ae</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalCoords</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a7b0ad53af3cca77861d811037ffdceb2</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Real azimuthOffset, bool azimuthNegated, Real zenithOffset, bool zenithNegated, CoordinateAxis radialAxis, bool radialNegated, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>af72e8c9a723f31aa2d87ac42ddfac5d2</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a71b96ce92d9de13882d7bea594584a13</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>aec4644c62f75a9101fa460116d94ebd8</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>aafcd7a354b1abf3bf9a9c3e69dc6215f</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>afc5283e7d99e88e40693a26ca7ddd2a6</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setDefaultAngles</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a264e0f2bb0e20ae34a01c36013c7d37e</anchor>
      <arglist>(const Vec2 &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setDefaultRadius</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>aadcd09b5951e9a622e9b78d426105d6c</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setRadialAxis</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>af3b95e6b63ef64a7ecd33a06db2883f1</anchor>
      <arglist>(CoordinateAxis)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setNegateAzimuth</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>adb59715cd84e0c4b7a0c8d90bc035368</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setNegateZenith</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>aafbc1c4580dcb240189adea3d64766ce</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setNegateRadial</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a8cb28971183ff9dbc8f259ad27c789f5</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getDefaultAngles</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a164f654fe487bd2b217fdb1f2e7910da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>aae20376c9978366d58f2b1734d835610</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>getRadialAxis</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>ac08d226ce851ce02f7a03dfb29b8b8be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAzimuthNegated</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a8548006059baff1f4c36e7d267142d6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZenithNegated</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>ac1603f7ee83ead0fe34dbf99f6b595bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRadialNegated</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>ae0a8bd55ecef483fca803510484cd3e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngles</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a14327df74c2228ec2f1614c4d62c02c6</anchor>
      <arglist>(State &amp;s, const Vec2 &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a81e5946e4b53fc7281cf228e6e283ef2</anchor>
      <arglist>(State &amp;s, Real r)</arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getAngles</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a43743cec996ea2c1552879f78e0bb157</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadius</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>aae97f8195d13b147e08387cf41b39323</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a0bce479b844b4c53297e80731a1dd5b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SphericalCoords &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a49e7022c87a99e838b39e68a57c18cdb</anchor>
      <arglist>(const Vec3 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a41370add3422064e5c7998a12ecde154</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a6f5cdbf47aab78c9ac521161397e9b65</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a19141732ff79ec489b92d4f0e8842a03</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>ac6627e75a026d1928777f1f513204fae</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>ae82c0e14e7ec71d01ac6b53ba90bcafa</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>af1135a47fac1c57ed102d01111baec38</anchor>
      <arglist>(State &amp;, const Vec3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>ae1b98eae6bfec43231856f45916f6a04</anchor>
      <arglist>(State &amp;, const Vec3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a5be15973924a6d3582c7e1075a6c4270</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a19f00b1d6690bd54b5bef0da57d88046</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a7a2b9f61fba2b7e7be70fe5f600058e6</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1SphericalCoords.html</anchorfile>
      <anchor>a7c3e377d44137739e835d3d57b018ae5</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Translation</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Translation.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a96d5c2b07156559ec15e70e83cfbec9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>af753538c171c1d6abf8b24d1dc2e87a8</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a31a9f05cee29563efdcab5ecf2c477fe</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Translation &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>af4f944a8a2b0467479f0f0d8f8b230df</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Translation &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a81144d67219184881408e60b8d471dd4</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Translation &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>aef7710aa0f5e4902f58df06feb6e135d</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Translation &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>aa5e65344a5ea41477f662bc47db711ac</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Translation &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a8b1d0aeb394aea38395696d33c9bc461</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type>Translation &amp;</type>
      <name>setDefaultTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a5cd67658ae46b888064921692178684d</anchor>
      <arglist>(const Vec3 &amp;p_FM)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a5c4232ce781d17b6de0441e9375a5af4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMobilizerTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>ad190c331f7289cb031df4b4c879d0e66</anchor>
      <arglist>(State &amp;s, const Vec3 &amp;p_FM) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMobilizerTranslation</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a6307c4beb5eeae29094f62a7240ac859</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMobilizerVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a98a38b8e51d7eea303b7ae9df077aab7</anchor>
      <arglist>(State &amp;s, const Vec3 &amp;v_FM) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMobilizerVelocity</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a77209fa4b66d8bd3babd73b8e4290ca3</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMobilizerAcceleration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>aaf8d8a3206bcee535fc5de6a4c64f324</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>ab6095560cd142c4979bb09133e3e6c6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Translation &amp;</type>
      <name>setDefaultQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a5060ba95d718ee84082b5885a1b5f302</anchor>
      <arglist>(const Vec3 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>adc2683d623239058b41ca079b3f09272</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a317032e2d8cd7cf1c49e2ebb9a319ab1</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>ad769cd0df17c5fd5747a421bbddbec5b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>abb9cd0e08878805e7a50127a1a031ae3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a332eb639e3f8b7c44cac1397fc87f02b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a8d4a40509fb0dfb07a571ee9d5f4a988</anchor>
      <arglist>(State &amp;, const Vec3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a8c4636f8d9112926bcd43d78e1a773b8</anchor>
      <arglist>(State &amp;, const Vec3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a7430b33bc59ea0f11c2d66b5b0c94189</anchor>
      <arglist>(const State &amp;, const Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>ad1acd75b797650c63de0a1a5fc8b63c6</anchor>
      <arglist>(const State &amp;, const Vector &amp;ulike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartQ</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a40cbd7c196afebcf974a08f79d3ace94</anchor>
      <arglist>(const State &amp;, Vector &amp;qlike) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updMyPartU</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Translation.html</anchorfile>
      <anchor>a9c03602ec77992b3f5a9093d11863943</anchor>
      <arglist>(const State &amp;, Vector &amp;ulike) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Universal</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Universal.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Universal</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Universal.html</anchorfile>
      <anchor>a692273ae185a447ebfeb063488ed744c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Universal</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Universal.html</anchorfile>
      <anchor>a8bc1a208dd0a72f675f1b52bc89d9b54</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Universal</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Universal.html</anchorfile>
      <anchor>ae1277481ced395cf4c232dcd27b0e0be</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo, Direction=Forward)</arglist>
    </member>
    <member kind="function">
      <type>Universal &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Universal.html</anchorfile>
      <anchor>a8579cd5f673e0bf30c355561410223e4</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Universal &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Universal.html</anchorfile>
      <anchor>aa6efc0aa1a19b2b81a6244874fab7e43</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Universal &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Universal.html</anchorfile>
      <anchor>ae65e7d8b77985d877e8b1658e0e29099</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Universal &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Universal.html</anchorfile>
      <anchor>a0dfa0e3c44c27a138931cb5f8db7041a</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Universal &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Universal.html</anchorfile>
      <anchor>aa1e6a8fd75623a56f79da387e587ad4d</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBody::Weld</name>
    <filename>classSimTK_1_1MobilizedBody_1_1Weld.html</filename>
    <base>SimTK::MobilizedBody</base>
    <member kind="function">
      <type></type>
      <name>Weld</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Weld.html</anchorfile>
      <anchor>ae00068b6c08541086e21ea03b911b5b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Weld</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Weld.html</anchorfile>
      <anchor>a57f8a7a3b4c53c77e079f52aeb8f2431</anchor>
      <arglist>(MobilizedBody &amp;parent, const Transform &amp;X_PF, const Body &amp;bodyInfo, const Transform &amp;X_BM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Weld</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Weld.html</anchorfile>
      <anchor>a7e454e016d9cf7fe861af37769e84aa1</anchor>
      <arglist>(MobilizedBody &amp;parent, const Body &amp;bodyInfo)</arglist>
    </member>
    <member kind="function">
      <type>Weld &amp;</type>
      <name>addBodyDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Weld.html</anchorfile>
      <anchor>ae966312467233ade654c637b55766538</anchor>
      <arglist>(const Transform &amp;X_BD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Weld &amp;</type>
      <name>addOutboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Weld.html</anchorfile>
      <anchor>a581a2ac65cb6098bd0abb4ea16f82e69</anchor>
      <arglist>(const Transform &amp;X_MD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Weld &amp;</type>
      <name>addInboardDecoration</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Weld.html</anchorfile>
      <anchor>a09a4da5d2e7485c6978d1b5b09765c37</anchor>
      <arglist>(const Transform &amp;X_FD, const DecorativeGeometry &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>Weld &amp;</type>
      <name>setDefaultInboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Weld.html</anchorfile>
      <anchor>a52b8335d8978db3d037f2a35b9ff4c2c</anchor>
      <arglist>(const Transform &amp;X_PF)</arglist>
    </member>
    <member kind="function">
      <type>Weld &amp;</type>
      <name>setDefaultOutboardFrame</name>
      <anchorfile>classSimTK_1_1MobilizedBody_1_1Weld.html</anchorfile>
      <anchor>ad7bb6bda5268cf65e340e8efd784bf98</anchor>
      <arglist>(const Transform &amp;X_BM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Motion</name>
    <filename>classSimTK_1_1Motion.html</filename>
    <base>PIMPLHandle&lt; Motion, MotionImpl, true &gt;</base>
    <class kind="class">SimTK::Motion::Custom</class>
    <class kind="class">SimTK::Motion::Sinusoid</class>
    <class kind="class">SimTK::Motion::Steady</class>
    <member kind="enumeration">
      <name>Level</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a621d231ddcfa2ced9edae83c05b7b7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoLevel</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a621d231ddcfa2ced9edae83c05b7b7a1a325b350a7bdf69fab347d2b9863c6e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Acceleration</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a621d231ddcfa2ced9edae83c05b7b7a1a943ac4d40bfc990c7cd493ea7a3f2b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velocity</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a621d231ddcfa2ced9edae83c05b7b7a1a8239c44e81d2a5c234e24fb98286db84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Position</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a621d231ddcfa2ced9edae83c05b7b7a1ab6205466dbcc889f3eb5cee0a51b38ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Method</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a35e4b496a9364ac7dbca3420815b86b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoMethod</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a35e4b496a9364ac7dbca3420815b86b7a2f0c1cd39da4e8eaf8b01ef3937254a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Zero</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a35e4b496a9364ac7dbca3420815b86b7acd80d604f9fdb52b21c023bdd89d47c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Discrete</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a35e4b496a9364ac7dbca3420815b86b7a125c3fe7f2241691e075cb5c276fc480</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Prescribed</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a35e4b496a9364ac7dbca3420815b86b7a04629fdea81072c7aae198db46e26150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Free</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a35e4b496a9364ac7dbca3420815b86b7a13070ba24d260edd1c602040d0f590a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Fast</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a35e4b496a9364ac7dbca3420815b86b7a17486a21b9be411d3b85d626f1d02e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Motion</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>aff85f37c6a15196c093d942d6a4de3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>getLevel</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>aa4622fa017f0481c38ce80401c605d59</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Method</type>
      <name>getLevelMethod</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>ac05951c2f5ed85e2cafc5499cb1d6ac3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a7073d07b0be0444cc6ba3585df322004</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a8d9acf5af46f131f4326656e0f13ab42</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabled</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>ac93c9543afaa6d22d06f1822391af674</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledByDefault</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>abb6473ba3acd911d37ea1b191751783a</anchor>
      <arglist>(bool shouldBeDisabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisabledByDefault</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>aa3d02fa636ff1143a1edf0ed9f15e630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getMobilizedBody</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a4eea18f89a374a5aa290f039aed0d7cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcAllMethods</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>afe0154802aaf3e0b0510c1c8ca80e93e</anchor>
      <arglist>(const State &amp;s, Method &amp;qMethod, Method &amp;uMethod, Method &amp;udotMethod) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>nameOfLevel</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a56f58d4a61a45bc9cb5f6e164e0b1222</anchor>
      <arglist>(Level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>nameOfMethod</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>a04e29ef76051218e96d46da1adca4066</anchor>
      <arglist>(Method)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Motion</name>
      <anchorfile>classSimTK_1_1Motion.html</anchorfile>
      <anchor>ab4b3093e33e5f38d288f9b41fd0e2327</anchor>
      <arglist>(MotionImpl *r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Motion::Custom</name>
    <filename>classSimTK_1_1Motion_1_1Custom.html</filename>
    <base>SimTK::Motion</base>
    <class kind="class">SimTK::Motion::Custom::Implementation</class>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom.html</anchorfile>
      <anchor>ad889272fa180146337c4e9beee51932b</anchor>
      <arglist>(MobilizedBody &amp;mobod, Implementation *implementation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Custom</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom.html</anchorfile>
      <anchor>a6f32104b67e5cdbade41ab39fb8d6ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>getImplementation</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom.html</anchorfile>
      <anchor>a1bc742da7420e4dc855ca73a3a97870a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>updImplementation</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom.html</anchorfile>
      <anchor>a65a6629aef2b900ebb3410e7bf0a827e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Motion::Custom::Implementation</name>
    <filename>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Implementation</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aa6f08f505484d77c11ac5d636fb76115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Implementation *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ae69eb117784370b33708e7fb1be54c8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Motion::Level</type>
      <name>getLevel</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a07cb10aa7a3b8b7f1ec5af946c0b5147</anchor>
      <arglist>(const State &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Motion::Method</type>
      <name>getLevelMethod</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a8a42599b36bfce971ec5451be75fc646</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPrescribedPosition</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a638d78dbb08a938bdde7bb27316f8c87</anchor>
      <arglist>(const State &amp;s, int nq, Real *q) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPrescribedPositionDot</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a57b2a31c04578ba447a650e51f10b54b</anchor>
      <arglist>(const State &amp;s, int nq, Real *qdot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPrescribedPositionDotDot</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a859da841f8fa5ebf9941c7cb276576ab</anchor>
      <arglist>(const State &amp;s, int nq, Real *qdotdot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPrescribedVelocity</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ac436d62ee9859dfd0408197a25f4df19</anchor>
      <arglist>(const State &amp;s, int nu, Real *u) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPrescribedVelocityDot</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a30fc0f5b7cd610bf37ec85057572c7a6</anchor>
      <arglist>(const State &amp;s, int nu, Real *udot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calcPrescribedAcceleration</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a98aba26f1465b2d5c98d519bcb5c3c63</anchor>
      <arglist>(const State &amp;s, int nu, Real *udot) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeTopology</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>acea5af9871b3eb9a2d7a5e3ddd0aa582</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeModel</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a0e30d9e6d91219211afcddb9f1886f41</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeInstance</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>afd8dfa7ce29ed3e75d36630a8822bceb</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeTime</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>a34295fa84c67dfb04deee2b257ae1965</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizePosition</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ad62cc5de8860463c24fe9e4aa9bdefd5</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeVelocity</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aac5e1b389b945527ad7d7979de00c2e9</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeDynamics</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>aa0339877790870c3d5daa9de7a05c1de</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeAcceleration</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>ab47201a3800cfcad283d9206e195975c</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeReport</name>
      <anchorfile>classSimTK_1_1Motion_1_1Custom_1_1Implementation.html</anchorfile>
      <anchor>acdb050e6911659f35c367cc725659dd0</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Motion::Sinusoid</name>
    <filename>classSimTK_1_1Motion_1_1Sinusoid.html</filename>
    <base>SimTK::Motion</base>
    <member kind="function">
      <type></type>
      <name>Sinusoid</name>
      <anchorfile>classSimTK_1_1Motion_1_1Sinusoid.html</anchorfile>
      <anchor>aab63dffe5a1df52262f0802d29f99720</anchor>
      <arglist>(MobilizedBody &amp;mobod, Motion::Level level, Real amplitude, Real rate, Real phase)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sinusoid</name>
      <anchorfile>classSimTK_1_1Motion_1_1Sinusoid.html</anchorfile>
      <anchor>a397463a874d5fb2f8259709c32ba4b69</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Motion::Steady</name>
    <filename>classSimTK_1_1Motion_1_1Steady.html</filename>
    <base>SimTK::Motion</base>
    <member kind="function">
      <type></type>
      <name>Steady</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>a956202b0eb408188a117d84b3a48dbf6</anchor>
      <arglist>(MobilizedBody &amp;mobod, Real u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Steady</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>a915fcc9662a28e3ff7c753a7297e80d1</anchor>
      <arglist>(MobilizedBody &amp;mobod, const Vec&lt; N &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Steady</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>ac4f44418e79398b144bd91d18ba9ff62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Steady &amp;</type>
      <name>setDefaultRate</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>a61b8265355197f881d53a8d80d0f1eb3</anchor>
      <arglist>(Real u)</arglist>
    </member>
    <member kind="function">
      <type>Steady &amp;</type>
      <name>setOneDefaultRate</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>ade854fb2d704a1bfa4d7217b1579d287</anchor>
      <arglist>(MobilizerUIndex, Real u)</arglist>
    </member>
    <member kind="function">
      <type>Steady &amp;</type>
      <name>setDefaultRates</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>abc85d4cb5391a8c0d2c73bd765a2acf3</anchor>
      <arglist>(const Vec&lt; N &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneDefaultRate</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>a0b3ca1e541fbe339f9a8923970ff22c2</anchor>
      <arglist>(MobilizerUIndex ux) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRate</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>ace7a363c33864d4d13b9a1629b58a57d</anchor>
      <arglist>(State &amp;state, Real u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOneRate</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>a578c23524e81fd904732d8691c8e055e</anchor>
      <arglist>(State &amp;state, MobilizerUIndex ux, Real u) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOneRate</name>
      <anchorfile>classSimTK_1_1Motion_1_1Steady.html</anchorfile>
      <anchor>a9c04f73149ae03ed494e4470878cb08a</anchor>
      <arglist>(const State &amp;state, MobilizerUIndex ux) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MultibodySystem</name>
    <filename>classSimTK_1_1MultibodySystem.html</filename>
    <base>SimTK::System</base>
    <member kind="function">
      <type></type>
      <name>MultibodySystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>aa0b3ad2dc562f44fda6510a085bf6983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultibodySystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>acc156e346c4851500f79c0ad8759dbe3</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addForceSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a72333f03f5167975ad93f8da68879021</anchor>
      <arglist>(ForceSubsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMatterSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>aa2b5b03a169189036d670594506b695b</anchor>
      <arglist>(SimbodyMatterSubsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const SimbodyMatterSubsystem &amp;</type>
      <name>getMatterSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>addb391d93c80b7e2488944736f357e33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SimbodyMatterSubsystem &amp;</type>
      <name>updMatterSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a4dd7d4cf99bce64b6208fc9978a94fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMatterSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a6017201578b859d688ac931a9b7141dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setDecorationSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>aade4c88877f967f4d9eadae3db79ceca</anchor>
      <arglist>(DecorationSubsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const DecorationSubsystem &amp;</type>
      <name>getDecorationSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>add152b3b46c47cb09f11f14fd167bb5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorationSubsystem &amp;</type>
      <name>updDecorationSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>af7cab11dee901c7d782c16d3c0467ef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDecorationSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a9f8c506e971941d89976a492a027408a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setContactSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a02e59f1bdd480a35a5e01f92c6bb6537</anchor>
      <arglist>(GeneralContactSubsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const GeneralContactSubsystem &amp;</type>
      <name>getContactSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a55f9f6371c2d350fd9addae7655fcb57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GeneralContactSubsystem &amp;</type>
      <name>updContactSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>aef561dd05047c3464485e1da32c802ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContactSubsystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a76d6c74238991a66564c3ce1bda1a9c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Real</type>
      <name>calcPotentialEnergy</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a588e0d602da0ce98b7d3c999f5f5e1be</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Real</type>
      <name>calcKineticEnergy</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a86f6deef2b02ce1594847574bf596adc</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcEnergy</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a273bde5ec140cee631f0e520aa0407d8</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; SpatialVec &gt; &amp;</type>
      <name>getRigidBodyForces</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a3f02a315d64a6c1f5dceebb228dd2cee</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; Vec3 &gt; &amp;</type>
      <name>getParticleForces</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>ac7dcb2ee3414bfb67ab14f036eca112e</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getMobilityForces</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a9b4a13c811e5700f0f9c6fdbf286a2dd</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; SpatialVec &gt; &amp;</type>
      <name>updRigidBodyForces</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a826269ec50ed3651e7867b284ef5eaef</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; Vec3 &gt; &amp;</type>
      <name>updParticleForces</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a00b4c9a181a505de670f6d0c8d39b785</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updMobilityForces</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a1c597d34391ef060bb18e51d1bb07959</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>ae8383adfe840949037b8c9c7db98304e</anchor>
      <arglist>(MultibodySystem, System)</arglist>
    </member>
    <member kind="function">
      <type>class MultibodySystemRep &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>aec41f7a4c5e6358d61a26443b2fd9ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MultibodySystemRep &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>a0e22543c23c03463e675b4072973cdf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MultibodySystem</name>
      <anchorfile>classSimTK_1_1MultibodySystem.html</anchorfile>
      <anchor>aaf65854a1a81392054318d424ace5e1c</anchor>
      <arglist>(MultibodySystemRep *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ObservedPointFitter</name>
    <filename>classSimTK_1_1ObservedPointFitter.html</filename>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>findBestFit</name>
      <anchorfile>classSimTK_1_1ObservedPointFitter.html</anchorfile>
      <anchor>a2d1447ef062c9cfc9338f77c078ef215</anchor>
      <arglist>(const MultibodySystem &amp;system, State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;bodyIxs, const Array_&lt; Array_&lt; Vec3 &gt; &gt; &amp;stations, const Array_&lt; Array_&lt; Vec3 &gt; &gt; &amp;targetLocations, Real tolerance=0.001)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>findBestFit</name>
      <anchorfile>classSimTK_1_1ObservedPointFitter.html</anchorfile>
      <anchor>ad22ff30e3486baab53582534d0714486</anchor>
      <arglist>(const MultibodySystem &amp;system, State &amp;state, const std::vector&lt; MobilizedBodyIndex &gt; &amp;bodyIxs, const std::vector&lt; std::vector&lt; Vec3 &gt; &gt; &amp;stations, const std::vector&lt; std::vector&lt; Vec3 &gt; &gt; &amp;targetLocations, Real tolerance=0.001)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>findBestFit</name>
      <anchorfile>classSimTK_1_1ObservedPointFitter.html</anchorfile>
      <anchor>ab9f3bb90fad45163a11535364225d2d6</anchor>
      <arglist>(const MultibodySystem &amp;system, State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;bodyIxs, const Array_&lt; Array_&lt; Vec3 &gt; &gt; &amp;stations, const Array_&lt; Array_&lt; Vec3 &gt; &gt; &amp;targetLocations, const Array_&lt; Array_&lt; Real &gt; &gt; &amp;weights, Real tolerance=0.001)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>findBestFit</name>
      <anchorfile>classSimTK_1_1ObservedPointFitter.html</anchorfile>
      <anchor>a7de13d14e1d849d794b05f234d1e50c4</anchor>
      <arglist>(const MultibodySystem &amp;system, State &amp;state, const std::vector&lt; MobilizedBodyIndex &gt; &amp;bodyIxs, const std::vector&lt; std::vector&lt; Vec3 &gt; &gt; &amp;stations, const std::vector&lt; std::vector&lt; Vec3 &gt; &gt; &amp;targetLocations, const std::vector&lt; std::vector&lt; Real &gt; &gt; &amp;weights, Real tolerance=0.001)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SimbodyMatterSubsystem</name>
    <filename>classSimTK_1_1SimbodyMatterSubsystem.html</filename>
    <base>SimTK::Subsystem</base>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubsystem</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a1b1f2127fdc50c1c92b5a20db22cd43f</anchor>
      <arglist>(MultibodySystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubsystem</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a4b5ec5c33a93af6d9e3a8ebc6bf37b51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimbodyMatterSubsystem</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ac49f39cefdaee87456ea572c72e1f1a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody &amp;</type>
      <name>getMobilizedBody</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>abca73afd312fc4fb59e912b35c928287</anchor>
      <arglist>(MobilizedBodyIndex) const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody &amp;</type>
      <name>updMobilizedBody</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a5142442d0d59524a47f604584040fdc1</anchor>
      <arglist>(MobilizedBodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>const MobilizedBody::Ground &amp;</type>
      <name>getGround</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a20c4cdac747e672314c6aeda0a59e876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody::Ground &amp;</type>
      <name>updGround</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a0851b330170f8e5a0700382ddf58bd22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MobilizedBody::Ground &amp;</type>
      <name>Ground</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a7776baa71fc6d342f3140284b56553fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Constraint &amp;</type>
      <name>getConstraint</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a8c97c52cb41b5be3aa6afe3915f9a331</anchor>
      <arglist>(ConstraintIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Constraint &amp;</type>
      <name>updConstraint</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a85ca8b7eb162893128a6abc69d522e62</anchor>
      <arglist>(ConstraintIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShowDefaultGeometry</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a19657abf3c40de3bc74bede59f8b1f7d</anchor>
      <arglist>(bool show)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getShowDefaultGeometry</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>af29ad8515731d75d3e039b6d381ae860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBodies</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>abd2d153469caadabcc34fcf60eb5e8c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstraints</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ad9348689e264c77ede60d222c7af8e00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMobilities</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9e27f2490487cb16c8aaf09f20fea70b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalQAlloc</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ad52e47b213f5b60130fd13b6d154a9a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalMultAlloc</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a68644d94051594f5593a94936cad5f49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>adoptMobilizedBody</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a59d3e416b8263877d3e599774554f78d</anchor>
      <arglist>(MobilizedBodyIndex parent, MobilizedBody &amp;child)</arglist>
    </member>
    <member kind="function">
      <type>ConstraintIndex</type>
      <name>adoptConstraint</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>adf98f3426a2778ba1db81c5d76bccce2</anchor>
      <arglist>(Constraint &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubsystem</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>af874cd8e7ca24c492042a0eef52ec9e8</anchor>
      <arglist>(const SimbodyMatterSubsystem &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>SimbodyMatterSubsystem &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a29e07d273b578e2d1ae9935de12da608</anchor>
      <arglist>(const SimbodyMatterSubsystem &amp;ss)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseEulerAngles</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a41930208004e6b3561c723c3cb5c3e47</anchor>
      <arglist>(State &amp;state, bool useEulerAngles) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseEulerAngles</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>af6a58f0c8f05f8f4416f78f9155ad726</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumQuaternionsInUse</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a6e504f192dc23ed1ba8493c2e10ff487</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingQuaternion</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>addf67b644769842ff2ffea1c917ed149</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mobodIx) const </arglist>
    </member>
    <member kind="function">
      <type>QuaternionPoolIndex</type>
      <name>getQuaternionPoolIndex</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a133d88d5d60d466e8aea3d57a581d868</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mobodIx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintIsDisabled</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a425f5ec3ca2e4e6aec7e03868acd5212</anchor>
      <arglist>(State &amp;state, ConstraintIndex constraintIx, bool shouldDisableConstraint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstraintDisabled</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aa38fc5183b998cff87a6b1c1060a98e8</anchor>
      <arglist>(const State &amp;, ConstraintIndex constraint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToEulerAngles</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a17c421e1c7e852aaac1ae445aab5254c</anchor>
      <arglist>(const State &amp;inputState, State &amp;outputState) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToQuaternions</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a315ae4d417d5ae95329a80f089402f25</anchor>
      <arglist>(const State &amp;inputState, State &amp;outputState) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcSystemMass</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aa469a927676fdb154d90534b853691b6</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>calcSystemMassCenterLocationInGround</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ab46d1cd48be3eaaf4b4643d0bcdc1875</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>MassProperties</type>
      <name>calcSystemMassPropertiesInGround</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>abe382caff073488febe9e9a92cdfbb2f</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Inertia</type>
      <name>calcSystemCentralInertiaInGround</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a0443924d9306417cac771ca85430d1f3</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>calcSystemMassCenterVelocityInGround</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a4d37fb1df3570860249e62310570e386</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>calcSystemMassCenterAccelerationInGround</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ae1d4611733f4b7dc9573cff5fb30c01b</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>calcSystemMomentumAboutGroundOrigin</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a6c5186727032683ee1c53fae6487c151</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>calcSystemCentralMomentum</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a63fcc8c4579ddd5860c16a27d2e88322</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcKineticEnergy</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a31b65eb7fe180fd0904eae57d476f35e</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyBySystemJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a3722e55e7b5923558bd3f1a0cf4a5f33</anchor>
      <arglist>(const State &amp;state, const Vector &amp;u, Vector_&lt; SpatialVec &gt; &amp;Ju) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForSystemJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a43d9b54ce86f55165488b2dd270d5995</anchor>
      <arglist>(const State &amp;state, Vector_&lt; SpatialVec &gt; &amp;JDotu) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForSystemJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a6bb52c632fcccf14d051ff1be99cdb66</anchor>
      <arglist>(const State &amp;state, Vector &amp;JDotu) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyBySystemJacobianTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ae2900f9febb57ef8deab114f37cb2342</anchor>
      <arglist>(const State &amp;state, const Vector_&lt; SpatialVec &gt; &amp;F_G, Vector &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcSystemJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a5563ca485168cb1c25d7ae34e27e8f2f</anchor>
      <arglist>(const State &amp;state, Matrix_&lt; SpatialVec &gt; &amp;J_G) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcSystemJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a26549e7484bfbe6eb8d7bc123e66259d</anchor>
      <arglist>(const State &amp;state, Matrix &amp;J_G) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9b9920681595a75c69e2ba77c25cb934</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;stationPInB, const Vector &amp;u, Vector_&lt; Vec3 &gt; &amp;JSu) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>multiplyByStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9c7930b8c008e0699398a05e8fc6cb62</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;stationPInB, const Vector &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByStationJacobianTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a314427ba46921a0f31787bf1278e6a9e</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;stationPInB, const Vector_&lt; Vec3 &gt; &amp;f_GP, Vector &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByStationJacobianTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a423ed4c2c53722921594aa7c4fc6ce17</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;stationPInB, const Vec3 &amp;f_GP, Vector &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a84cc002312ec1dda2a7382a214253095</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;stationPInB, Matrix_&lt; Vec3 &gt; &amp;JS) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a0f8546ca7e873b1d4377dd4b779f32ea</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;stationPInB, RowVector_&lt; Vec3 &gt; &amp;JS) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a7b5db37321e8a62ff542bfb822668f4e</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;stationPInB, Matrix &amp;JS) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a32199636039f7a63a6b4270b0f6a26be</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;stationPInB, Matrix &amp;JS) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a86f1d50eba0046eeb21f7df2e5c933cc</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;stationPInB, Vector_&lt; Vec3 &gt; &amp;JSDotu) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a423d7d33800cb6b62509dd15abbdc1f2</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;stationPInB, Vector &amp;JSDotu) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>calcBiasForStationJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aff992b923c429d78a922d71d15b8f491</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;stationPInB) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a4b7b4e350aabedbef00ff1ec35e81d3b</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;originAoInB, const Vector &amp;u, Vector_&lt; SpatialVec &gt; &amp;JFu) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>multiplyByFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a8b20283e113f7a36eba47b25c80f9cb8</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;originAoInB, const Vector &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByFrameJacobianTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ad7c49a55eba4badde996dd789bad1a8a</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;originAoInB, const Vector_&lt; SpatialVec &gt; &amp;F_GAo, Vector &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByFrameJacobianTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a19548c59a4769a51109ec7c57e65fd08</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;originAoInB, const SpatialVec &amp;F_GAo, Vector &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a741150aaf33c1b667067b11f3cb59657</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;originAoInB, Matrix_&lt; SpatialVec &gt; &amp;JF) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9502959cb6062ea34dfff2bdcba570fc</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;originAoInB, RowVector_&lt; SpatialVec &gt; &amp;JF) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9e5e88fa9c29c900d479bc52cd7fe659</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;originAoInB, Matrix &amp;JF) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aeace3f635f35b438f32b217a4fd85b75</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;originAoInB, Matrix &amp;JF) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a8cc4e782538d519014c70b83d4a6e984</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;originAoInB, Vector_&lt; SpatialVec &gt; &amp;JFDotu) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a242d51ecff031b7b74e9beada96be6f7</anchor>
      <arglist>(const State &amp;state, const Array_&lt; MobilizedBodyIndex &gt; &amp;onBodyB, const Array_&lt; Vec3 &gt; &amp;originAoInB, Vector &amp;JFDotu) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialVec</type>
      <name>calcBiasForFrameJacobian</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a180d39d0a828fd7dcaf39581fd2ed309</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex onBodyB, const Vec3 &amp;originAoInB) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByM</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a343dc68594d7afe04762db67a3ca68a9</anchor>
      <arglist>(const State &amp;state, const Vector &amp;a, Vector &amp;Ma) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByMInv</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aeb30ad8dd2dfd5981de9681fa8ac7f43</anchor>
      <arglist>(const State &amp;state, const Vector &amp;v, Vector &amp;MinvV) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcM</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>af297a2c82bb19a9deae10bb8f873f9f9</anchor>
      <arglist>(const State &amp;, Matrix &amp;M) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcMInv</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a564e87359d2689137a43f85c3e861690</anchor>
      <arglist>(const State &amp;, Matrix &amp;MInv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcProjectedMInv</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>af567d109f8e6705eaa9835b9309c6f03</anchor>
      <arglist>(const State &amp;s, Matrix &amp;GMInvGt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveForConstraintImpulses</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ad7316d38fe5ba9237cab137011b10c21</anchor>
      <arglist>(const State &amp;state, const Vector &amp;deltaV, Vector &amp;impulse) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByG</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a90a34ce745cbf5a0bf34f4a62d9ddb2e</anchor>
      <arglist>(const State &amp;state, const Vector &amp;ulike, Vector &amp;Gulike) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByG</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ae939c33c0491867cecc55d0c0748441b</anchor>
      <arglist>(const State &amp;state, const Vector &amp;ulike, const Vector &amp;bias, Vector &amp;Gulike) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForMultiplyByG</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9d7d060109d5f1ca2090d23e2d40db57</anchor>
      <arglist>(const State &amp;state, Vector &amp;bias) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcG</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9ccc3ce0e76fbc65aeb480ef73d603db</anchor>
      <arglist>(const State &amp;state, Matrix &amp;G) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForAccelerationConstraints</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a070ff72001adf5714ec1e55851404f1b</anchor>
      <arglist>(const State &amp;state, Vector &amp;bias) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByGTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a3d2451d87d7cae837062cd9a036bf698</anchor>
      <arglist>(const State &amp;state, const Vector &amp;lambda, Vector &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a0f04f21d4d1fe85c830f71d60995a799</anchor>
      <arglist>(const State &amp;, Matrix &amp;Gt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByPq</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aea5e1f8641e547ae8bd317202236bfdc</anchor>
      <arglist>(const State &amp;state, const Vector &amp;qlike, Vector &amp;PqXqlike) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByPq</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aa88a493efe683e24eb5bfeb2aca32bf3</anchor>
      <arglist>(const State &amp;state, const Vector &amp;qlike, const Vector &amp;biasp, Vector &amp;PqXqlike) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBiasForMultiplyByPq</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ace41900bbf22180dc66b632db4198af2</anchor>
      <arglist>(const State &amp;state, Vector &amp;biasp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPq</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>afee56d346a7f0adeffe19b5b951d51b5</anchor>
      <arglist>(const State &amp;state, Matrix &amp;Pq) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByPqTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a8e1f93e8ed0f1366cb24adc34ecc2b5c</anchor>
      <arglist>(const State &amp;state, const Vector &amp;lambdap, Vector &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPqTranspose</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>abf054922c552ad0182c6fce5839473a4</anchor>
      <arglist>(const State &amp;state, Matrix &amp;Pqt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcP</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a67ee9e954c61bb99aab23a8a2e32f17c</anchor>
      <arglist>(const State &amp;state, Matrix &amp;P) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPt</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aef93085ae7c818d764d8d756a46aa578</anchor>
      <arglist>(const State &amp;state, Matrix &amp;Pt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByN</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a8717059cf2dcdcc7686b74d0f98aa3d7</anchor>
      <arglist>(const State &amp;s, bool transpose, const Vector &amp;in, Vector &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNInv</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a6005e93b49eea745739c9df64cab7223</anchor>
      <arglist>(const State &amp;s, bool transpose, const Vector &amp;in, Vector &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNDot</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a2ca55c9a4bd3d333ca6759af882f38a1</anchor>
      <arglist>(const State &amp;s, bool transpose, const Vector &amp;in, Vector &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcAcceleration</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>acaa2e2826c3aa20edd38ef295619f219</anchor>
      <arglist>(const State &amp;state, const Vector &amp;appliedMobilityForces, const Vector_&lt; SpatialVec &gt; &amp;appliedBodyForces, Vector &amp;udot, Vector_&lt; SpatialVec &gt; &amp;A_GB) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcAccelerationIgnoringConstraints</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a90bb781704ba58833f69bb86432339a7</anchor>
      <arglist>(const State &amp;state, const Vector &amp;appliedMobilityForces, const Vector_&lt; SpatialVec &gt; &amp;appliedBodyForces, Vector &amp;udot, Vector_&lt; SpatialVec &gt; &amp;A_GB) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcResidualForceIgnoringConstraints</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9402191ff489fae227969ed43db05df0</anchor>
      <arglist>(const State &amp;state, const Vector &amp;appliedMobilityForces, const Vector_&lt; SpatialVec &gt; &amp;appliedBodyForces, const Vector &amp;knownUdot, Vector &amp;residualMobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcResidualForce</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>adbefe95f61bdad30776f742345fa1fce</anchor>
      <arglist>(const State &amp;state, const Vector &amp;appliedMobilityForces, const Vector_&lt; SpatialVec &gt; &amp;appliedBodyForces, const Vector &amp;knownUdot, const Vector &amp;knownLambda, Vector &amp;residualMobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCompositeBodyInertias</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a7b1da0e232e11cadd1bf32d4f94035df</anchor>
      <arglist>(const State &amp;state, Array_&lt; SpatialInertia, MobilizedBodyIndex &gt; &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcBodyAccelerationFromUDot</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a94d275630d490646b6eed0c1ed392c6d</anchor>
      <arglist>(const State &amp;state, const Vector &amp;knownUDot, Vector_&lt; SpatialVec &gt; &amp;A_GB) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcConstraintForcesFromMultipliers</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a6cae3da23f051dc8116fbf0e054dd302</anchor>
      <arglist>(const State &amp;state, const Vector &amp;multipliers, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcMobilizerReactionForces</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>adc629077769b8c767bd1bc160787d4af</anchor>
      <arglist>(const State &amp;state, Vector_&lt; SpatialVec &gt; &amp;forcesAtMInG) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getMotionMultipliers</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aa4d35b2738498ac63c76961af27b9881</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>calcMotionErrors</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>af80a52a3ac50dced558fe486cd3a4db2</anchor>
      <arglist>(const State &amp;state, const Stage &amp;stage) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findMotionForces</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>adf85cff428267680387a3a61e178ddbf</anchor>
      <arglist>(const State &amp;state, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getConstraintMultipliers</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ae6c2def3b10fe13eef67d374db29b3e1</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findConstraintForces</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a2a977620eb35c8e3ac371f1ede3d257f</anchor>
      <arglist>(const State &amp;state, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcMotionPower</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a1e4a10a720a71b3c0eff679ef566569e</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcConstraintPower</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a0663411853688e1a14beb0713f8e8de4</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTreeEquivalentMobilityForces</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a1e9a32a3ff754e9d7b75644deeb5c818</anchor>
      <arglist>(const State &amp;, const Vector_&lt; SpatialVec &gt; &amp;bodyForces, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcQDot</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a6afc8df58f92fc6dd15658b8a735c830</anchor>
      <arglist>(const State &amp;s, const Vector &amp;u, Vector &amp;qdot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcQDotDot</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a45137921388b175b5a17330bef09b599</anchor>
      <arglist>(const State &amp;s, const Vector &amp;udot, Vector &amp;qdotdot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInStationForce</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a3202bd0a85f219c8475a427533cce9b2</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex bodyB, const Vec3 &amp;stationOnB, const Vec3 &amp;forceInG, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInBodyTorque</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aafee133053a0230fd545f90793acea4d</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mobodIx, const Vec3 &amp;torqueInG, Vector_&lt; SpatialVec &gt; &amp;bodyForcesInG) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInMobilityForce</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a69b7d894990d382a20bd1820618ea261</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mobodIx, MobilizerUIndex which, Real f, Vector &amp;mobilityForces) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeCompositeBodyInertias</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a0467f617de57e966bc3c141094037ff4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeArticulatedBodyInertias</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ab91faf31bae6a4bea3ae495b887a473d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; QIndex &gt; &amp;</type>
      <name>getFreeQIndex</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9c9ead398fe406f45fae30e6ab2e61ce</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; UIndex &gt; &amp;</type>
      <name>getFreeUIndex</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a11061f1dccb350c19cb0c5ea37e834bb</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; UIndex &gt; &amp;</type>
      <name>getFreeUDotIndex</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a9a3c42b7bc0d03be0b76bdccb8d603d2</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; UIndex &gt; &amp;</type>
      <name>getKnownUDotIndex</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a79597b03f1bd6a4c5224f0d28d6970f4</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packFreeQ</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a315a7440c705f22c00172bb29cac7ff6</anchor>
      <arglist>(const State &amp;s, const Vector &amp;allQ, Vector &amp;packedFreeQ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackFreeQ</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>afcee048d2447180e24fb95db49da4871</anchor>
      <arglist>(const State &amp;s, const Vector &amp;packedFreeQ, Vector &amp;unpackedFreeQ) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packFreeU</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a4cdaf133ed39188b6cfcfe3ab787bbaf</anchor>
      <arglist>(const State &amp;s, const Vector &amp;allU, Vector &amp;packedFreeU) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackFreeU</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>af35844913602b0b4c99b0dd0e9f8ea60</anchor>
      <arglist>(const State &amp;s, const Vector &amp;packedFreeU, Vector &amp;unpackedFreeU) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialInertia &amp;</type>
      <name>getCompositeBodyInertia</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aae984d90b307ca3dbbcd98feba14e429</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mbx) const </arglist>
    </member>
    <member kind="function">
      <type>const ArticulatedInertia &amp;</type>
      <name>getArticulatedBodyInertia</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ae7c76cf4f87af5661178f67cfdaa987a</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mbx) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getGyroscopicForce</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a0fd2f8985d689b25c5b8bbc8e6c66d1c</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mbx) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getMobilizerCoriolisAcceleration</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a8eb9d41d15bf1c36dfae3abf64d03cc6</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mbx) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getTotalCoriolisAcceleration</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>abcf1b13d1c0b400dd41a77a80c840d30</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mbx) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getMobilizerCentrifugalForces</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a980895e021f861e730f6c1021581c498</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mbx) const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getTotalCentrifugalForces</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a98b55fad58c0968702ae7c1d92238bcc</anchor>
      <arglist>(const State &amp;state, MobilizedBodyIndex mbx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcMobilizerReactionForcesUsingFreebodyMethod</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a47d5161f2fe40dbb8f10efa00af7dac9</anchor>
      <arglist>(const State &amp;state, Vector_&lt; SpatialVec &gt; &amp;forcesAtMInG) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateCompositeBodyInertias</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>abbc7059ae4e3f28a79ff3827a6f62615</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateArticulatedBodyInertias</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>af86d27998b2b85e3ff1ede658d8ad459</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a05e7167b00a9570218e3b45a03e558e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; Vec3 &gt; &amp;</type>
      <name>getAllParticleLocations</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a7486d4d34ef0982ec41a690b6ed69407</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; Vec3 &gt; &amp;</type>
      <name>getAllParticleVelocities</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ae381fcbc2bfd0abe2423a312412569c7</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getParticleLocation</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>affe6bd028e997de598d994f5b982b969</anchor>
      <arglist>(const State &amp;s, ParticleIndex p) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getParticleVelocity</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a50c78ab6c6491600feec4368ec72ef05</anchor>
      <arglist>(const State &amp;s, ParticleIndex p) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updAllParticleMasses</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a21c21918140352352f314410065463ee</anchor>
      <arglist>(State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllParticleMasses</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a049f0dca3c1e1bc3d1dff875232d480f</anchor>
      <arglist>(State &amp;s, const Vector &amp;masses) const </arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; Vec3 &gt; &amp;</type>
      <name>updAllParticleLocations</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a6fd4a9b89ec9b84d471a2ec5522d9884</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; Vec3 &gt; &amp;</type>
      <name>updAllParticleVelocities</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a24d88498b6264888cd1a96e35c06c06a</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updParticleLocation</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a90ee991274e97d76f1ab1d9f4e5e8e57</anchor>
      <arglist>(State &amp;s, ParticleIndex p) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>updParticleVelocity</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ac0d79e2ae7f878ad8cbe95c34fc1c9e0</anchor>
      <arglist>(State &amp;s, ParticleIndex p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleLocation</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ab25e295b1ce7f7a3cac8464f612ae4e1</anchor>
      <arglist>(State &amp;s, ParticleIndex p, const Vec3 &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleVelocity</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a5bd7fd868b468dc276778b6151198f0a</anchor>
      <arglist>(State &amp;s, ParticleIndex p, const Vec3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllParticleLocations</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a323defc86dc3b64003ebc5f30e6adbea</anchor>
      <arglist>(State &amp;s, const Vector_&lt; Vec3 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllParticleVelocities</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>aae6a6215af63f530fa402596ef2b268f</anchor>
      <arglist>(State &amp;s, const Vector_&lt; Vec3 &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getAllParticleMasses</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ac57c2b4575f9fe88698d1dfcbf991e41</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; Vec3 &gt; &amp;</type>
      <name>getAllParticleAccelerations</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a4d079d6d020dbfd06e74625bae0c28ba</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getParticleAcceleration</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>a24aa7dd470a3f94f88f90369698f5ff7</anchor>
      <arglist>(const State &amp;s, ParticleIndex p) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubsystem.html</anchorfile>
      <anchor>ada91148391d89bcdcfd812c91cf16fbb</anchor>
      <arglist>(std::ostream &amp;, const SimbodyMatterSubsystem &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SimbodyMatterSubtree</name>
    <filename>classSimTK_1_1SimbodyMatterSubtree.html</filename>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubtree</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a09a64212bea91d9e45b8505c52dd9856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubtree</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>ae820f0722e120c55263dcb449a0d424f</anchor>
      <arglist>(const SimbodyMatterSubtree &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SimbodyMatterSubtree &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>ac898a388ef45018d3e8f5520303dd2cc</anchor>
      <arglist>(const SimbodyMatterSubtree &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimbodyMatterSubtree</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>abad5cb8cf5d6c0e8844dd36bccbfae20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubtree</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>ae460c2e3212a0a72f2a9af306d790550</anchor>
      <arglist>(const SimbodyMatterSubsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubtree</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a0eedc6e7709b3ae4d7a9d504ff07848f</anchor>
      <arglist>(const SimbodyMatterSubsystem &amp;, const Array_&lt; MobilizedBodyIndex &gt; &amp;terminalBodies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimbodyMatterSubsystem</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a86a3a102d70721d818a7f2510b0279ed</anchor>
      <arglist>(const SimbodyMatterSubsystem &amp;matter)</arglist>
    </member>
    <member kind="function">
      <type>const SimbodyMatterSubsystem &amp;</type>
      <name>getSimbodyMatterSubsystem</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>ad9f66cfd9be63bbacfa171309feb278b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a811572b16c23bfd7bf8d3538d94bcc55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SimbodyMatterSubtree &amp;</type>
      <name>addTerminalBody</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a875bf9861e8a77828b1bc9ba28aa097e</anchor>
      <arglist>(MobilizedBodyIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeTopology</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a154222f2cbc984d48c2afc3fbdff18a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubtreeBodies</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>abaaa92c7be376a760f673ad8871eeb9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MobilizedBodyIndex</type>
      <name>getAncestorMobilizedBodyIndex</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a1da9fa1beefa351be7ad207c228f1ce2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; MobilizedBodyIndex &gt; &amp;</type>
      <name>getTerminalBodies</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a7d4a1666ed5ae7fe6aba51ad0e431edf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; MobilizedBodyIndex &gt; &amp;</type>
      <name>getAllBodies</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a82b6e3a0859747d6d49275d56fb98a78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SubtreeBodyIndex</type>
      <name>getParentSubtreeBodyIndex</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a3710ee85927e4fde0a7c5ff99f37a189</anchor>
      <arglist>(SubtreeBodyIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; SubtreeBodyIndex &gt; &amp;</type>
      <name>getChildSubtreeBodyIndices</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>ab9fce448744cb61efec6f10b58a633cc</anchor>
      <arglist>(SubtreeBodyIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSubtreeResults</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a49e7e28a1c30a1c24ca1b05376886744</anchor>
      <arglist>(const State &amp;, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompatibleSubtreeResults</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>af26255bdea7fcb6e71d4e996f3cd109e</anchor>
      <arglist>(const SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyPositionsFromState</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>aa58d778a7400b295384b9f80b1ba4701</anchor>
      <arglist>(const State &amp;, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcPositionsFromSubtreeQ</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a3d54afbb9f9064d443626ae034766def</anchor>
      <arglist>(const State &amp;, const Vector &amp;subQ, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perturbPositions</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a17a3880dcf0cc5e642d71560b6729a5e</anchor>
      <arglist>(const State &amp;, SubtreeQIndex subQIndex, Real perturbation, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyVelocitiesFromState</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a3688fb4d91fcc9f9e6501bb6112eaa2a</anchor>
      <arglist>(const State &amp;, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcVelocitiesFromSubtreeU</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>afa5db6d25ed588fcede47aeab08ec829</anchor>
      <arglist>(const State &amp;, const Vector &amp;subU, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcVelocitiesFromZeroU</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a3b880c45c30b034393942ea9349aff28</anchor>
      <arglist>(const State &amp;, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perturbVelocities</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a4d32617a76b2d70e4563e6cd5aa4ff01</anchor>
      <arglist>(const State &amp;, SubtreeUIndex subUIndex, Real perturbation, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyAccelerationsFromState</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a9811d4c3f39d7e6fee32c5f464258c96</anchor>
      <arglist>(const State &amp;, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcAccelerationsFromSubtreeUDot</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a697133190885f368656e3788f1270ea3</anchor>
      <arglist>(const State &amp;, const Vector &amp;subUDot, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcAccelerationsFromZeroUDot</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a44957ea7663e3f7425ab8870b8c931f2</anchor>
      <arglist>(const State &amp;, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perturbAccelerations</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtree.html</anchorfile>
      <anchor>a80fb38ac4a881deac8720c9a91f48b3d</anchor>
      <arglist>(const State &amp;, SubtreeUIndex subUDotIndex, Real perturbation, SimbodyMatterSubtreeResults &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SimbodyMatterSubtreeResults</name>
    <filename>classSimTK_1_1SimbodyMatterSubtreeResults.html</filename>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubtreeResults</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a6f8ea70dc234337b936a724243898a55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimbodyMatterSubtreeResults</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>acdf0d8a86f81b649709d30227dc23a4f</anchor>
      <arglist>(const SimbodyMatterSubtreeResults &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SimbodyMatterSubtreeResults &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a122cf6113212202cc29df11abc7c9ffc</anchor>
      <arglist>(const SimbodyMatterSubtreeResults &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimbodyMatterSubtreeResults</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a360c8f3a43976d2220223f5dc8661b65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a8faeefbbb38f1576c93d85dc99bc66f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reallocateBodies</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>aacc15b3b690f24529280e99231cfcfa8</anchor>
      <arglist>(int nBodies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMobilities</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a3643fd466915ea9752eaa6b4bca00220</anchor>
      <arglist>(SubtreeBodyIndex, QIndex qStart, int nq, UIndex uStart, int nu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeModel</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a53be2ba470c9e4b0f0c0c3d1c72c6615</anchor>
      <arglist>(const Vector &amp;stateQ, const Vector &amp;stateU)</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getStage</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a496baa56aa3d01e8ac89c82f82e4c574</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubtreeBodies</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a939a5ff6ea587d7e4eee29cf48c5b675</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubtreeQs</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a582161a57053291f66a344b2039b3b1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubtreeUs</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>ac8aa9ae608272bb0d23e9366ec05221b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getSubtreeQ</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a6a78b83d08441193ea22880e8abe4a7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getSubtreeBodyTransform</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a9e15d6ed9520daaab9679879d0fc5779</anchor>
      <arglist>(SubtreeBodyIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getSubtreeU</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>adb66ccac0cc0c97850713f1c2337120f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getSubtreeBodyVelocity</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a6d5b8b43735355f3ba2576e8a472bcbd</anchor>
      <arglist>(SubtreeBodyIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getSubtreeUDot</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a0cedb4799d6fd9e24aca3bb97cc797f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SpatialVec &amp;</type>
      <name>getSubtreeBodyAcceleration</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>ab980771410cc9c14d5011066cb49f885</anchor>
      <arglist>(SubtreeBodyIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; QIndex &gt; &amp;</type>
      <name>getQSubset</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a6d47201eec8c53f1bb7163cc83e15e15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; UIndex &gt; &amp;</type>
      <name>getUSubset</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a60c7490f6a2c056ae24ce43140cd3169</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findSubtreeBodyQ</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a6df1532570cfcfcbbeb16f11d26f0495</anchor>
      <arglist>(SubtreeBodyIndex, SubtreeQIndex &amp;qStart, int &amp;nq) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findSubtreeBodyU</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a8c88ebef7d8b80f9a392491c8179069f</anchor>
      <arglist>(SubtreeBodyIndex, SubtreeUIndex &amp;uStart, int &amp;nu) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SimbodyMatterSubtree</name>
      <anchorfile>classSimTK_1_1SimbodyMatterSubtreeResults.html</anchorfile>
      <anchor>a82c092b3e774a59eeebfb2c060e805c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::TextDataEventReporter</name>
    <filename>classSimTK_1_1TextDataEventReporter.html</filename>
    <base>SimTK::PeriodicEventReporter</base>
    <class kind="class">SimTK::TextDataEventReporter::UserFunction</class>
    <member kind="function">
      <type></type>
      <name>TextDataEventReporter</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter.html</anchorfile>
      <anchor>adfb9772c9523f97e5e9e6e2fbe73d125</anchor>
      <arglist>(const System &amp;system, UserFunction&lt; Real &gt; *function, Real reportInterval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextDataEventReporter</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter.html</anchorfile>
      <anchor>a50b0407d55715f15b8207fb75161e116</anchor>
      <arglist>(const System &amp;system, UserFunction&lt; Vector &gt; *function, Real reportInterval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TextDataEventReporter</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter.html</anchorfile>
      <anchor>ae653201c787cab1202fd86353263518c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleEvent</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter.html</anchorfile>
      <anchor>aa90c4e7ad338a87563cf0d8c9c6f8d92</anchor>
      <arglist>(const State &amp;state) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const TextDataEventReporterRep &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter.html</anchorfile>
      <anchor>a66d60fa869e76cb56a27def55eb8f7fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TextDataEventReporterRep &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter.html</anchorfile>
      <anchor>a7c8b768046cb5953d6473ecf88875f2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TextDataEventReporterRep *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter.html</anchorfile>
      <anchor>a9e5b2ef8ef007a8436ecc220d8819730</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::TextDataEventReporter::UserFunction</name>
    <filename>classSimTK_1_1TextDataEventReporter_1_1UserFunction.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UserFunction</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter_1_1UserFunction.html</anchorfile>
      <anchor>a05fb4518c5ff58fd76c188945e66fb9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>evaluate</name>
      <anchorfile>classSimTK_1_1TextDataEventReporter_1_1UserFunction.html</anchorfile>
      <anchor>a8f5a75ee1f197b1a2cc852fdd70ffa5d</anchor>
      <arglist>(const System &amp;system, const State &amp;state)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Visualizer</name>
    <filename>classSimTK_1_1Visualizer.html</filename>
    <class kind="class">SimTK::Visualizer::FrameController</class>
    <class kind="class">SimTK::Visualizer::InputListener</class>
    <class kind="class">SimTK::Visualizer::InputSilo</class>
    <class kind="class">SimTK::Visualizer::Reporter</class>
    <member kind="enumeration">
      <name>Mode</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>afd8266999e706427db3f86fd6bf5e1df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PassThrough</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>afd8266999e706427db3f86fd6bf5e1dfa3d08d3124b9a41ed4bf1001fb3945faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Sampling</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>afd8266999e706427db3f86fd6bf5e1dfacac8428a0755b59f32d1702beca298c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealTime</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>afd8266999e706427db3f86fd6bf5e1dfad5b12e033b09d5ff0f56ac6a0f5eb2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BackgroundType</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a13db911885a105cd52fcaa1e342a116c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GroundAndSky</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a13db911885a105cd52fcaa1e342a116cadfe537bdd4fd0521416186eafd1f6d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SolidColor</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a13db911885a105cd52fcaa1e342a116ca99e78d2d2b0f0283fd9a9926c23b0503</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>PredefinedMenuIds</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>aef99590d4ecb7e2a71a8445535c7baf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ViewMenuId</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>aef99590d4ecb7e2a71a8445535c7baf4aefd24e8e12c41a88e9a79d33813f466e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Visualizer</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a2fa1656e1330799158cd4e79c3c691a7</anchor>
      <arglist>(const MultibodySystem &amp;system)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Visualizer</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>adce4d00d855be5f96acd95b093bb7fc6</anchor>
      <arglist>(const MultibodySystem &amp;system, const Array_&lt; String &gt; &amp;searchPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Visualizer</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>af7479f7a462facdb530f0aa680e27752</anchor>
      <arglist>(const Visualizer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a39331c62556af6604d39ed391058b36f</anchor>
      <arglist>(const Visualizer &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Visualizer</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ae1897199b934f7d4ee6c093f8cd79d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>aad6638d8c01a4708dd6b0cfb3a35954b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>setShutdownWhenDestructed</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a1062248b48323ec246fb3aefc7404679</anchor>
      <arglist>(bool shouldShutdown)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getShutdownWhenDestructed</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a72742128413bec5792813d25962b2e77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>setBackgroundType</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ab9e087795c7a13d918c36cca5a533133</anchor>
      <arglist>(BackgroundType background)</arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setBackgroundColor</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>acc228500de96bb1a886f18c14fbd01d1</anchor>
      <arglist>(const Vec3 &amp;color) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setShowShadows</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a02fb09fe0edfc6f5b7abff9b7c7628a7</anchor>
      <arglist>(bool showShadows) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setShowFrameRate</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a96a78818c0096f6bf07a4e687289f415</anchor>
      <arglist>(bool showFrameRate) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setShowSimTime</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a8a19bfb9b3a20da779a12270e8d41b26</anchor>
      <arglist>(bool showSimTime) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setShowFrameNumber</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>aaa2effb78f2d0a810f83c843ad8bdae3</anchor>
      <arglist>(bool showFrameNumber) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setWindowTitle</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>af3a716389c9d62c2a077d9b96c2ffbae</anchor>
      <arglist>(const String &amp;title) const </arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>setSystemUpDirection</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>aee05232a5237ba10a542b763e8a1ca54</anchor>
      <arglist>(const CoordinateDirection &amp;upDirection)</arglist>
    </member>
    <member kind="function">
      <type>CoordinateDirection</type>
      <name>getSystemUpDirection</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a4bb7439a3917b2815cebe41ed48238e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>setGroundHeight</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ac013d1a2258856858c4e8987e3bbc0c3</anchor>
      <arglist>(Real height)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getGroundHeight</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a3c4a2b38899e21d47ffe817e04f902fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMode</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a9e6b75a502a48c8fe4ede920a80b2be0</anchor>
      <arglist>(Mode mode)</arglist>
    </member>
    <member kind="function">
      <type>Mode</type>
      <name>getMode</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a1433e9dfd5335dba6f4827a86a01b18a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>setDesiredFrameRate</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ae329a6f0ad67e19f51e63a9bd21a262f</anchor>
      <arglist>(Real framesPerSec)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDesiredFrameRate</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a1c185a8f68b64f8033d5ed1fcc220171</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>setRealTimeScale</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ab004681a9ca7cd832d2afe258dbcb294</anchor>
      <arglist>(Real simTimePerRealSecond)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRealTimeScale</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a551ff608c772ffe4d835afcff2b1ca95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>setDesiredBufferLengthInSec</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a15620021b8077d38d876349b3501797a</anchor>
      <arglist>(Real bufferLengthInSec)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDesiredBufferLengthInSec</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a7934edb4afda5fa09d53ac5becf47ec3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getActualBufferLengthInSec</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a676222dbe46581ee35ca9205f5291e3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getActualBufferLengthInFrames</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a015bafa034cb7c7c5afe585e45d64f7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addInputListener</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a9f08445073b3fb0e041816fd0d2326f4</anchor>
      <arglist>(InputListener *listener)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInputListeners</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a852b111b08a0c058ea1e2542dac3bba9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InputListener &amp;</type>
      <name>getInputListener</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a0234e4f6477b8084c345b7b9565d7d73</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>InputListener &amp;</type>
      <name>updInputListener</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ac920e51033163b7e667e284f4f6d0742</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFrameController</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ad241b9f7565d2bd980a4bf973709f28a</anchor>
      <arglist>(FrameController *controller)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFrameControllers</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a9c07e4bb8c4839b48f14893daf6fd64e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FrameController &amp;</type>
      <name>getFrameController</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>aac076d7061f45d61b753a3ca1e84d6d7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>FrameController &amp;</type>
      <name>updFrameController</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a16f61348b2bed86fdb25b28d40c3ba84</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>aa7d845e509fb456ac493a9c2f2b2ba3f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flushFrames</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a6886d7a9cc05fe649e28503c7068432a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawFrameNow</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a4d1e3733dc3fd4ddb8065b1adba9ae46</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>addMenu</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a3939bbfe663c4b0436bd12baa6d2c270</anchor>
      <arglist>(const String &amp;title, int id, const Array_&lt; std::pair&lt; String, int &gt; &gt; &amp;items)</arglist>
    </member>
    <member kind="function">
      <type>Visualizer &amp;</type>
      <name>addSlider</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a1e2cb9ddc47715b23a8acacaa846e70d</anchor>
      <arglist>(const String &amp;title, int id, Real min, Real max, Real value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDecoration</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ab04fd3965a2154118560272bade59580</anchor>
      <arglist>(MobilizedBodyIndex mobodIx, const Transform &amp;X_BD, const DecorativeGeometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDecorations</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a8301a4fa30447d558f1d0837969e71d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorativeGeometry &amp;</type>
      <name>getDecoration</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>af0dd2d2f5187390747ad0c2888c20d9b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>updDecoration</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>af629e0c0237a4e46aa4db1534125907b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addRubberBandLine</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a1e9f8e9562127d941e90dfbe380f4608</anchor>
      <arglist>(MobilizedBodyIndex b1, const Vec3 &amp;station1, MobilizedBodyIndex b2, const Vec3 &amp;station2, const DecorativeLine &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRubberBandLines</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a12d330daaf28e983df4ef7353d80b13c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorativeLine &amp;</type>
      <name>getRubberBandLine</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a4ba46cdd458aff5ad3700622e6e2a073</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>updRubberBandLine</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>af657e82ed87408e415eaf3d9cb693490</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDecorationGenerator</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>aa0a16da7373caf84f2a698dfa8532204</anchor>
      <arglist>(DecorationGenerator *generator)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDecorationGenerators</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ab83c18f92be16434bcf971472e801944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorationGenerator &amp;</type>
      <name>getDecorationGenerator</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a999099cc1b28a96798856c9317ed927e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>DecorationGenerator &amp;</type>
      <name>updDecorationGenerator</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a4be22dc4a94eb853063e9e6730b20ce2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setCameraTransform</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>af65dfdeb0ddec259b26ad63d1acabac9</anchor>
      <arglist>(const Transform &amp;X_GC) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>zoomCameraToShowAllGeometry</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>adcb4618504fc0c8b30be4430280423b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>pointCameraAt</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a9ee005ca34cf8778a9ca3f0247880052</anchor>
      <arglist>(const Vec3 &amp;point, const Vec3 &amp;upDirection) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setCameraFieldOfView</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a5e85676d721c6049f2dfecf0f5a45a91</anchor>
      <arglist>(Real fov) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setCameraClippingPlanes</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a4444de80cffca583be8126274efbb509</anchor>
      <arglist>(Real nearPlane, Real farPlane) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setSliderValue</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>afbe1291d575be66bd67e4309e4d31de7</anchor>
      <arglist>(int slider, Real value) const </arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>setSliderRange</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ad448699326b88bf1506a4caf908044b8</anchor>
      <arglist>(int slider, Real newMin, Real newMax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpStats</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a56dcf9bbe943df8d930e7e4bac8da203</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearStats</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a1f37b24b560ad75a74617cf559bb7a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; InputListener * &gt; &amp;</type>
      <name>getInputListeners</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ab34f3cf027c1cc0695eb75c0cfc0d6ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; FrameController * &gt; &amp;</type>
      <name>getFrameControllers</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a9d31e32af79ab66cc5639d285f03e488</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MultibodySystem &amp;</type>
      <name>getSystem</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ad36d0ff6df996657019ec166a517192c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefCount</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>a08d8fd2622de789c0ffa283a00584904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Impl</name>
      <anchorfile>classSimTK_1_1Visualizer.html</anchorfile>
      <anchor>ae708b2c3f144ba0c31bb444c4efe8ccf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Visualizer::FrameController</name>
    <filename>classSimTK_1_1Visualizer_1_1FrameController.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>generateControls</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1FrameController.html</anchorfile>
      <anchor>a29ed4b608dbd2a0b04ed8b7da7376378</anchor>
      <arglist>(const Visualizer &amp;viz, const State &amp;state, Array_&lt; DecorativeGeometry &gt; &amp;geometry)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FrameController</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1FrameController.html</anchorfile>
      <anchor>aea59a5917e2ae5541188e7004cdced2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Visualizer::InputListener</name>
    <filename>classSimTK_1_1Visualizer_1_1InputListener.html</filename>
    <member kind="enumeration">
      <name>Modifier</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a93b0adb12021df37dfb71b063d1a6412</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ShiftIsDown</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a93b0adb12021df37dfb71b063d1a6412aac6a61448ad8f7a2d6876d70c3418e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ControlIsDown</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a93b0adb12021df37dfb71b063d1a6412a02ec15be55564ae18626d5697bfa65b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AltIsDown</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a93b0adb12021df37dfb71b063d1a6412acbe644921f90fee66a77599cf26db5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsSpecialKey</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a93b0adb12021df37dfb71b063d1a6412a771e624046b9daf479b4c3d1487b3da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>KeyCode</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyControlC</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596eacabe62d211f1ff941b39265f584b1f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyBeep</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea41ba6461fe780384094cd6240d36994f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyBackspace</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea71e8aa0e9a18f10c41b0bf689202f79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyTab</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea42f27d53abfec290d67c489fc775c16b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyLF</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea0dddff185419026f92e3ef93f38ba787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyReturn</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596eadde0f957cc6714625e3aee596e91b87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyEnter</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea9e4131a8daeeb0705c1c3aee9c10f421</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyEsc</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea721c81b95606033bbbfd4968adf21337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyDelete</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea46eaae848a8c3660fca65c0897bf75e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF1</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea051ca7ff218145f5ba3cf318202e48b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF2</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea81d33ca552b976e36432a3abc763609d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF3</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea8fa493f0381fbde927a61ae1565bcf49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF4</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea922405b7e654fdc4f1ff56c4b6ac98e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF5</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea6fad6cd2e472b704b70f61e5bc54ce78</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF6</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea71d6d283648224ae81a883080d32b7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF7</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596eadf95d1dc58bb6fa65ba84c602afddd14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF8</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596eac57b2749f1b504cc342f1b3fd21c542a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF9</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea99ebcdc2e1964b44569d9a002a3420ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF10</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea9b03a4ac6c8fb3f14a8e258197428299</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF11</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea3b2e1de5e5e8c7214a3ce0e377000856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyF12</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596eaef47d37c5e3567901dc7f74ff394febc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyLeftArrow</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea997d874ffb15d712469b631f49b1b7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyUpArrow</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596eafa3fe84d601573d14585232b66d65620</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyRightArrow</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596eab23f6ea891589c60d0d96b8903d5dd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyDownArrow</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea68f57a3e5b67a1ef7783f4cfd66dc1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyPageUp</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea65a03884b79816365d7e2d7a53c45199</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyPageDown</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea3447dd11f190968e3fe746c00eecddce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyHome</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea5e63da8fab7ca3c825e7fc61d24d3d6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyEnd</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea8aa6e28c595ec82acec0a1e4fc4f5ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyInsert</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>afdf1032150c14cf6bbc6b6cd4ee8596ea8ba0bd5f40ea43eddfce4347940c91bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputListener</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a443993246b8ef4c1ce45880398c7cdc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyPressed</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>ad73885d721fd80ed92b16d342c21e01d</anchor>
      <arglist>(unsigned key, unsigned modifiers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>menuSelected</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a37b21fde4c4b9177f4c84c14795081e3</anchor>
      <arglist>(int menu, int item)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sliderMoved</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a33c4bf3d5b720025ea2ef327f1692bc5</anchor>
      <arglist>(int slider, Real value)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>SpecialKeyOffset</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputListener.html</anchorfile>
      <anchor>a3076228ad2db911047d3ebca071786b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Visualizer::InputSilo</name>
    <filename>classSimTK_1_1Visualizer_1_1InputSilo.html</filename>
    <base>SimTK::Visualizer::InputListener</base>
    <member kind="function">
      <type></type>
      <name>InputSilo</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>a38c8eae9396680a1722c23fbc2ed7679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputSilo</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>a21a921f6e8340aaae8d9498e2c4b9686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnyUserInput</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>ad3f6291639e1e4bbe5925ef890f5d07d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitForAnyUserInput</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>affead6312b023d476eb1f45fdf811815</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>takeKeyHit</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>a9f46fd92d0bdfb04fff97bc5aaec7c55</anchor>
      <arglist>(unsigned &amp;key, unsigned &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitForKeyHit</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>a67031f2e92874d90a97748d4b6248424</anchor>
      <arglist>(unsigned &amp;key, unsigned &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>takeMenuPick</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>a4d1b3ad69db6ec46d3ef111e1b06ebf9</anchor>
      <arglist>(int &amp;menu, int &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitForMenuPick</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>a8d2a7d9dff88241bf8575441a1b0b81c</anchor>
      <arglist>(int &amp;menu, int &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>takeSliderMove</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>a3007dc2fd54baefbc5b70334ffd174be</anchor>
      <arglist>(int &amp;slider, Real &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitForSliderMove</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>afa31bec760845d2317786be75af6d128</anchor>
      <arglist>(int &amp;slider, Real &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1InputSilo.html</anchorfile>
      <anchor>a77636bca2813e4a7d419ff7bff9c48bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Visualizer::Reporter</name>
    <filename>classSimTK_1_1Visualizer_1_1Reporter.html</filename>
    <base>SimTK::PeriodicEventReporter</base>
    <member kind="function">
      <type></type>
      <name>Reporter</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1Reporter.html</anchorfile>
      <anchor>ab595d0010d0392f0b91f16a76341b3cf</anchor>
      <arglist>(const Visualizer &amp;viz, Real reportInterval=Infinity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reporter</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1Reporter.html</anchorfile>
      <anchor>a8f34d654b307f1abef843b99449fb9c1</anchor>
      <arglist>(const MultibodySystem &amp;sys, Real reportInterval=Infinity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Reporter</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1Reporter.html</anchorfile>
      <anchor>a539cc7c27f03c507d641a87fb96829f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Visualizer &amp;</type>
      <name>getVisualizer</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1Reporter.html</anchorfile>
      <anchor>a90535d37143d04682ccaa83eec53a076</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1Reporter.html</anchorfile>
      <anchor>a2080c59e65e56ac0375ea61544702bd3</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1Reporter.html</anchorfile>
      <anchor>aec69f746987f04146d030471e5ab5247</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1Reporter.html</anchorfile>
      <anchor>ab8fbcd22320f96299f5e2a49c355c12d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Impl *</type>
      <name>impl</name>
      <anchorfile>classSimTK_1_1Visualizer_1_1Reporter.html</anchorfile>
      <anchor>a21c3baaab43a47153fd4c1018e4d2e5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixBase</name>
    <filename>classSimTK_1_1MatrixBase.html</filename>
    <templarg>ELT</templarg>
    <class kind="struct">SimTK::MatrixBase::EltResult</class>
    <member kind="enumvalue">
      <name>NScalarsPerElement</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a10f3db7f79f96221a391fc6af025723ea51f4d206789ffabf4750550842701883</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CppNScalarsPerElement</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a10f3db7f79f96221a391fc6af025723ea5224952515dddf876c6206dbdd85e94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ELT</type>
      <name>E</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a53da4b2d58a4105d6e67f4d2a50f9ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TNeg</type>
      <name>ENeg</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a24f706c3fd35dda44ac6365d97baacd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TWithoutNegator</type>
      <name>EWithoutNegator</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a0b7ab906ff460ff2ac057effbe117399</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TReal</type>
      <name>EReal</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aca7c47fd934b48799d3990436ec8044a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TImag</type>
      <name>EImag</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>af03a90b6ffcecd86f6b9b98c6c14a7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TComplex</type>
      <name>EComplex</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a390621ed16223e619e8a7da1d06e0c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::THerm</type>
      <name>EHerm</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>afbaa01d996eb0c8e7de5b96e0027ebdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TPosTrans</type>
      <name>EPosTrans</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a52f3316f9c9c970bfb490e989f1d191e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TAbs</type>
      <name>EAbs</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>afb674b635ff7d42ed09d174217762090</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TStandard</type>
      <name>EStandard</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a7779f39173f171bca445b27586c55083</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TInvert</type>
      <name>EInvert</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aba82ef0978afa38fac58bd1e369795b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TNormalize</type>
      <name>ENormalize</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aada742f59a9aec96887c0b0076c58848</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TSqHermT</type>
      <name>ESqHermT</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad09c4dc759b7d583a7a89a05030e7736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TSqTHerm</type>
      <name>ESqTHerm</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a24c8189ec7e5cee1adb75b0968b46eeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::Scalar</type>
      <name>EScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>abf38e54cd0c0a29f61855f4689b65db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::Number</type>
      <name>ENumber</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a15fc8075882e5ca44fc90a1328fb1510</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::StdNumber</type>
      <name>EStdNumber</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a4f22d6a4b79b47d67a92338aff7b9b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::Precision</type>
      <name>EPrecision</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a4a0b15456497febb47d96a4fcb495737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::ScalarNormSq</type>
      <name>EScalarNormSq</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3b2e58cf3ddc57202a297334ede7c8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalar</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aeac6547b8cf1845f9666518d4ec0647e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ENumber</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a66cdbde0291b859e92c3c71a152ef0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EStdNumber</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aec917ba5d73bb99dd3a6443afa769c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EPrecision</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a14b33b696c710bc6d8074e849cd087b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalarNormSq</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab8dad48f10328aadbb934907b6e59dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; E &gt;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a9535fb85f85ee222c8fdee6ca27bd500</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; ENeg &gt;</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5f90f2ee15cb0208291acedc29cc3250</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; EWithoutNegator &gt;</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a791a291d7b1d8f74ac9a77c636f1997b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; EReal &gt;</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a246fdb4eb01908158a87f0f636602e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; EImag &gt;</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a811c1174a01ab65315d18cfe8028c533</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; EComplex &gt;</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a226ea4ce04a7b7930faffc573542e96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; EHerm &gt;</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a1ce80c30f9b3017aef91e50e560a6dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; E &gt;</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a7cb67cd26913889aafec9ce47bb458f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; EAbs &gt;</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad827203e1774b72b5049012be8745fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; EStandard &gt;</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aef1e18796e9da184a34f9942d154070c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; EInvert &gt;</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a1f113b9151298911507bb5adaf0e9c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; ENormalize &gt;</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>acf8c3602194b23900b747979511f4bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; ESqHermT &gt;</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ac27dc2e3ee43e004f363d4ccf78cc99c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; ESqTHerm &gt;</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>abf776b5540d1ab19d59ec92066088107</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const MatrixCommitment &amp;</type>
      <name>getCharacterCommitment</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a278393d9ffb4405b99b14a10b86af779</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixCharacter &amp;</type>
      <name>getMatrixCharacter</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a826a3245c92b8eb84996de507925c886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commitTo</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ae3eb8aff198f7d9602fc0784f10bcf08</anchor>
      <arglist>(const MatrixCommitment &amp;mc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5dc07633091f02d29598694d61298b0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5cefad67f5ff7824df3ad71b11480f14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>nelt</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a73064ed950b34df286a73e45daa185fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizeable</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aa24d8e2b5138079d66ff4e1d4521d352</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ac92c2cb67e75b0523b5a9ad9743538eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad968b0278d94dc7417433f7740e1894f</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a7548fb04791f255ec831fd2479e4611e</anchor>
      <arglist>(const MatrixCommitment &amp;commitment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a1cd8e12d518c9ab3c77d434cfa452404</anchor>
      <arglist>(const MatrixCommitment &amp;commitment, int m, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3211e43a4b6223495dd00e32d570af4b</anchor>
      <arglist>(const MatrixBase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>adfdfa951aa9c18fff961dc96c91a53e9</anchor>
      <arglist>(const TNeg &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>copyAssign</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>abba2d1fef7d77f17587cc6a579bb86d4</anchor>
      <arglist>(const MatrixBase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a7f8ef4272172ab968e573c6eab42167a</anchor>
      <arglist>(const MatrixBase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>viewAssign</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>af1b64b2958b65dcf9a11dfbb6d0833a8</anchor>
      <arglist>(const MatrixBase &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aec31b98e6aeb4cc1e276dba163216b6e</anchor>
      <arglist>(const MatrixCommitment &amp;commitment, int m, int n, const ELT &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a67ad604f4ce0564f0a8f1420ad74ceea</anchor>
      <arglist>(const MatrixCommitment &amp;commitment, int m, int n, const ELT *cppInitialValuesByRow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>af73ae67a21ff2be12d612e84aa1255bf</anchor>
      <arglist>(const MatrixCommitment &amp;commitment, MatrixHelper&lt; Scalar &gt; &amp;source, const typename MatrixHelper&lt; Scalar &gt;::ShallowCopy &amp;shallow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ae38c53fb5257017a5f9e857497b723d0</anchor>
      <arglist>(const MatrixCommitment &amp;commitment, const MatrixHelper&lt; Scalar &gt; &amp;source, const typename MatrixHelper&lt; Scalar &gt;::ShallowCopy &amp;shallow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>afd0c923ca9b98c73b31806bd98ba2f9d</anchor>
      <arglist>(const MatrixCommitment &amp;commitment, const MatrixHelper&lt; Scalar &gt; &amp;source, const typename MatrixHelper&lt; Scalar &gt;::DeepCopy &amp;deep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aa21fc423392cb4d7a592b615f8b5b677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a9cbeeaaab6a43496438a110dc394fe7e</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aec26e5cb38733f718b55f4a380147ffa</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab47d3a384eef8bb79aba8d359bfa3d14</anchor>
      <arglist>(const MatrixBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad97fd2839985234f2692b62469390627</anchor>
      <arglist>(const MatrixBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab52eeb8ca03f02ef63f42cc31316a6c0</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a00ade68dd18d52395bd437c7b045fee8</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad9d687a6ce5b60a906db5603f541f993</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a786aa795f9a08d1590f56b4d4e657580</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a81675fed4995105b53c7e6339081deba</anchor>
      <arglist>(const ELT &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>scalarAssign</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad0e013d7b8cc205d87b4656d773f779c</anchor>
      <arglist>(const S &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>scalarAddInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5cd74485e2389829596ad0916b3a4a16</anchor>
      <arglist>(const S &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>scalarSubtractInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a6a7664566f2f32b4d05ce29b3d47c733</anchor>
      <arglist>(const S &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>scalarSubtractFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a92594b7841dab5d1e295a9a63a12a1a6</anchor>
      <arglist>(const S &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>scalarMultiplyInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ae1b8bb6259a7c9a8cb3e8ee8030cb69e</anchor>
      <arglist>(const S &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>scalarMultiplyFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ae1c09aab9c1f893f767bddec87cca37b</anchor>
      <arglist>(const S &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>scalarDivideInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ac5cadc7d0f86ebb7f97d8a288fddc2a0</anchor>
      <arglist>(const S &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>scalarDivideFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a527595f4fcbc80c7092146182c022208</anchor>
      <arglist>(const S &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>rowScaleInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a03dab9ad4199dfa7a1dfe56ef0e69844</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowScale</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3913163ce52c5caa6c6fbccb07f65b8a</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;r, typename EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Mul</type>
      <name>rowScale</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a66533f3a84a2dad502bd4013df829262</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>colScaleInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>afdbbcd82cb755644f9fc37b65423bccc</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colScale</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a9b4a63ce7cc9dae17140ed9774d4fdbc</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;c, typename EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Mul</type>
      <name>colScale</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab012727ca297204066d1589c21ef83ce</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>rowAndColScaleInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a36025394269346525fd148bf495eec63</anchor>
      <arglist>(const VectorBase&lt; ER &gt; &amp;r, const VectorBase&lt; EC &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowAndColScale</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5d1d816e3e46f699d63aabc4ebd2de2b</anchor>
      <arglist>(const VectorBase&lt; ER &gt; &amp;r, const VectorBase&lt; EC &gt; &amp;c, typename EltResult&lt; typename VectorBase&lt; ER &gt;::template EltResult&lt; EC &gt;::Mul &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; typename VectorBase&lt; ER &gt;::template EltResult&lt; EC &gt;::Mul &gt;::Mul</type>
      <name>rowAndColScale</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab3dab4529615643857f92f0352cb8b63</anchor>
      <arglist>(const VectorBase&lt; ER &gt; &amp;r, const VectorBase&lt; EC &gt; &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseAssign</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a70fa8f83f517870a7a0fef6102119744</anchor>
      <arglist>(const S &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseAssign</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5d903ba1859ff7ed67a2da9c1dd1d61f</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseInvertInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a1caa228b5a00920a3d0638f88f864ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseInvert</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a8ffde1c05e2f05910a21885be2e897e0</anchor>
      <arglist>(MatrixBase&lt; typename CNT&lt; E &gt;::TInvert &gt; &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; typename CNT&lt; E &gt;::TInvert &gt;</type>
      <name>elementwiseInvert</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ade355eae1c325e1041b45eebb58a8552</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseAddScalarInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a85c7b0e2d0c5ed375808e1b49832dece</anchor>
      <arglist>(const S &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseAddScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a454ac313366bdaed21d220aa0ec1aeab</anchor>
      <arglist>(const S &amp;s, typename EltResult&lt; S &gt;::Add &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; S &gt;::Add</type>
      <name>elementwiseAddScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>abf60926abf673dddf7b5cf17d74b2496</anchor>
      <arglist>(const S &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseSubtractScalarInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad652ec307d7b9c74a1432955c9eae9df</anchor>
      <arglist>(const S &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseSubtractScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a772711f99a4845c0e101c9dc3872e984</anchor>
      <arglist>(const S &amp;s, typename EltResult&lt; S &gt;::Sub &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; S &gt;::Sub</type>
      <name>elementwiseSubtractScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a903e1cdd453bf76fd95746c9cb772eef</anchor>
      <arglist>(const S &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseSubtractFromScalarInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a25d2fb5ff88cf960f347ab269ce3fd6e</anchor>
      <arglist>(const S &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseSubtractFromScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>abb6095bde79d0bd81ca9770c785f7705</anchor>
      <arglist>(const S &amp;, typename MatrixBase&lt; S &gt;::template EltResult&lt; E &gt;::Sub &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; S &gt;::template EltResult&lt; E &gt;::Sub</type>
      <name>elementwiseSubtractFromScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab50f2861c6688771f3ecec46d286a6b4</anchor>
      <arglist>(const S &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseMultiplyInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a0f4a2b2f50590b09d4894101ed5c0f66</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a7718a50c905dc3090e05c419cab652b0</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;, typename EltResult&lt; EE &gt;::Mul &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Mul</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab81df8fc12d1f82e1ac50b1c0236f1b8</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseMultiplyFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a4ddca2932256e684dba59ea3afd03628</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab6effcd06d0e969a5be160ff6c503a75</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;, typename MatrixBase&lt; EE &gt;::template EltResult&lt; E &gt;::Mul &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; EE &gt;::template EltResult&lt; E &gt;::Mul</type>
      <name>elementwiseMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3780cf86c704170bde3f795bb0ed9339</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseDivideInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a38d8e4d6de3b8f374143805935957aed</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a2b2713854282369de9976eb0c7d6a371</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;, typename EltResult&lt; EE &gt;::Dvd &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Dvd</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a808fef4a2a3bac4254fcdfb1758b5718</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>elementwiseDivideFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ac941592a3d3e7f873509f6c0c0f82c85</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivideFromLeft</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a7fa92318ab86f2adf13db1bc35858231</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;, typename MatrixBase&lt; EE &gt;::template EltResult&lt; E &gt;::Dvd &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; EE &gt;::template EltResult&lt; EE &gt;::Dvd</type>
      <name>elementwiseDivideFromLeft</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a114d5f836fa25140b3271fad6957d233</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>setTo</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ae809764e21847f2d57360bf7dcce3670</anchor>
      <arglist>(const ELT &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>setToNaN</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a411d858539ba9657a6d7df816c25962f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>setToZero</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a4205740b4219ab3cf349f6041955e9cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>row</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a37a8be146db3adbd1c5102d247a56618</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>updRow</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ac2db5ac68d9f9eafce52aea0267d0fc1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>col</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a829addec29c412057a7cada9bbb8d0d5</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>updCol</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a306933df4d6f7d3b4d0130a5b595a75f</anchor>
      <arglist>(int j)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a56e0a9e86901404b159cbd74c068d182</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3d557ba0ddaf7a2d2c4391ffa4f170ac</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a96f5c5c2a51b73099bad88e91616d8b8</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a7d62de5a11032e9a7e715ac1bbefb067</anchor>
      <arglist>(int j)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; ELT &gt;</type>
      <name>block</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aec48d6495dbd962e258061b533887ead</anchor>
      <arglist>(int i, int j, int m, int n) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; ELT &gt;</type>
      <name>updBlock</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a2fe6561ed4b3f13f3c7919757eefe5f8</anchor>
      <arglist>(int i, int j, int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aff2cf60fc22c0c8b5461d4fcd30481fd</anchor>
      <arglist>(int i, int j, int m, int n) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a8b685b00754ebedd62efa63713216534</anchor>
      <arglist>(int i, int j, int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; EHerm &gt;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad7adaae53b8a46d6493cb7b6f476d17f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; EHerm &gt;</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a4487e9237fa733cf6160258658b71e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; EHerm &gt;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a295d9ad3aff8998276e13d2c6b0ea980</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; EHerm &gt;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab2a0fbb0667bda9be98cd91fe0180ca5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>diag</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aebcabee63b1026fadbcdf22c0641d85e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>updDiag</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a9e2639b228aa0fb5b9a99225616c6917</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>diag</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a89cfea6ce9c4b13ba19972e3eaa86867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a346b82aeb4e9e4001752228d5ca42064</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a89617b29e294a094a24e6586187e2e0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a72347d228d4f2fb899a5c34c4e0f9255</anchor>
      <arglist>(const char *msg=0) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>matmul</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a59b2ce8fdcd597b92b2339b324e8a632</anchor>
      <arglist>(const StdNumber &amp;beta, const StdNumber &amp;alpha, const MatrixBase&lt; ELT_A &gt; &amp;A, const MatrixBase&lt; ELT_B &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>getElt</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5da877e571b0175ecce695fc30dd4450</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>ELT &amp;</type>
      <name>updElt</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5c16e803ebffc3ce7dbd5bd875332630</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>af660c238d6e40fa845811a62e26f4409</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>ELT &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a12db765ce4a9e676cb1fcf40b8d7c96e</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAnyElt</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5620851dcfdbd375487c25b93b7b3656</anchor>
      <arglist>(int i, int j, ELT &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>ELT</type>
      <name>getAnyElt</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a879ba36abf1dac770281df9962132cc3</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aba38c5a590c17f11a146d565b103adbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a13e36ef35159391efb24427777af6581</anchor>
      <arglist>(TAbs &amp;mabs) const </arglist>
    </member>
    <member kind="function">
      <type>TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a6c2ff74732e3bf2d4e3f445fc10e97a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TStandard</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a545124d2181aaa60e95742a2f956008d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>normSqr</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a4317cf0607bb04f43752863bdc80bcff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; ScalarNormSq &gt;::TSqrt</type>
      <name>norm</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a0f1926d8f0024f5c888bcd87b981e2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; ScalarNormSq &gt;::TSqrt</type>
      <name>normRMS</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>af0e56031f846156c8f0500ba32be0a4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; ELT &gt;</type>
      <name>colSum</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a2869141314c34c9951a89b5730f71b4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; ELT &gt;</type>
      <name>sum</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>afcf214e602589d77c8de9d3f39b42a3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; ELT &gt;</type>
      <name>rowSum</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>abb2e90a742b18d892298f8bb73f484fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixBase &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a61a296e829f3c7f422f6c6d171fa2bb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3743463ae70f583452306401a70c55d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>updNegate</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a0c737b31995cd35d1833064d7877a202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ad384f92a425b11abe67e5d41ac218998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a79a4f85f3131dbcb8e49068fa21b41d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>negateInPlace</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aaefd736eab64feb0845512e2ab8fd722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>resize</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3deb6e59a6634a6de293f65f751ca5c3</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase &amp;</type>
      <name>resizeKeep</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3c186776b53dba79a8912ebd0d6a1aef</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockShape</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ace055d2bb3263e8de3a0a81e60b7f386</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlockShape</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a330a22b749c1949696d7964f4c1b08f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MatrixView_&lt; ELT &gt; &amp;</type>
      <name>getAsMatrixView</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a14e4e8163ff5c99fbb48cf7f3b0e498a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixView_&lt; ELT &gt; &amp;</type>
      <name>updAsMatrixView</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a71a8175eff1fb73823c979754857acb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix_&lt; ELT &gt; &amp;</type>
      <name>getAsMatrix</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a5b69c4530307b84236afcb94a9033e3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix_&lt; ELT &gt; &amp;</type>
      <name>updAsMatrix</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aefd3f277d14da9ffcae8eab35aea6749</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorView_&lt; ELT &gt; &amp;</type>
      <name>getAsVectorView</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a54a7cad9088fcaf6c3e3f8c159b76be9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt; &amp;</type>
      <name>updAsVectorView</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab6ad005938256900be1ec2a7f10f8f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; ELT &gt; &amp;</type>
      <name>getAsVector</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aa3b36b42b12ab278cd09c2fdf62ccea2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; ELT &gt; &amp;</type>
      <name>updAsVector</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a6bc577bf0accb4091aa0f693a070438d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorBase&lt; ELT &gt; &amp;</type>
      <name>getAsVectorBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aee558c74acf2d530dfadd00e965a36ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; ELT &gt; &amp;</type>
      <name>updAsVectorBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a8330951943cbcd625ddc8b5803706131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowVectorView_&lt; ELT &gt; &amp;</type>
      <name>getAsRowVectorView</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ae4a6c2ea4bcf6a1026fc32fca68571ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt; &amp;</type>
      <name>updAsRowVectorView</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a6a77998748b7c2f72b9aa76546fae18c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowVector_&lt; ELT &gt; &amp;</type>
      <name>getAsRowVector</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a749f8a17f775a3bf899e613b06bb4440</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RowVector_&lt; ELT &gt; &amp;</type>
      <name>updAsRowVector</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a082907f84aa779b12dc5f207bbcb91ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowVectorBase&lt; ELT &gt; &amp;</type>
      <name>getAsRowVectorBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a18043acef033794f56c2077c2934ad5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; ELT &gt; &amp;</type>
      <name>updAsRowVectorBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>af6d07a76b71c0a9d5d4787bb5a57bb06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNScalarsPerElement</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aef7d03d332f5c0dffacbfec4668ff3c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPackedSizeofElement</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a05eb49bc0f3b1bc561d2fb347440c4b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContiguousData</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a2201766d67cf228784b99b59bc659c3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>getContiguousScalarDataLength</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a2c3d5e2b1e32c5789de5b3580e165393</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>getContiguousScalarData</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a8b5b52fdc560d1f8a68da8a5134b9fd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>updContiguousScalarData</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a23c35f43fc87546abababeb20218e97d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceContiguousScalarData</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a9368233b7d0e4c4574185923d059edc3</anchor>
      <arglist>(Scalar *newData, ptrdiff_t length, bool takeOwnership)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceContiguousScalarData</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a96d13810a0acd22278d04fcf4e7c44cc</anchor>
      <arglist>(const Scalar *newData, ptrdiff_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapOwnedContiguousScalarData</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ae76775fa0fa3029813f0ec532699d418</anchor>
      <arglist>(Scalar *newData, ptrdiff_t length, Scalar *&amp;oldData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aa1eeeb1c62d64d460687ae152ba0ace3</anchor>
      <arglist>(MatrixHelperRep&lt; Scalar &gt; *hrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowScale</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a9c60e5e3717722f0217be43df79f202d</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v, typename MatrixBase&lt; ELT &gt;::template EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colScale</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a60917dd94b285924fde887d19f285c9d</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v, typename MatrixBase&lt; ELT &gt;::template EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseAddScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a10ebc5636b66f24ff06aa3f7c66456e1</anchor>
      <arglist>(const S &amp;s, typename MatrixBase&lt; ELT &gt;::template EltResult&lt; S &gt;::Add &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseSubtractScalar</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>af144453d6560ffb7b86668345e38faa7</anchor>
      <arglist>(const S &amp;s, typename MatrixBase&lt; ELT &gt;::template EltResult&lt; S &gt;::Sub &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a4beca58e939d2f805cd7b628a80f0151</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;r, typename MatrixBase&lt; ELT &gt;::template EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a89ed714c58d0745ffb625d9722d2534b</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;r, typename MatrixBase&lt; ELT &gt;::template EltResult&lt; EE &gt;::Dvd &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>aa847ad8a301f034fbc50f4bc464134da</anchor>
      <arglist>(const MatrixCommitment &amp;commitment, const MatrixCharacter &amp;character, int spacing, const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a05535b01f5e52c88a2825c48a85121cb</anchor>
      <arglist>(const MatrixCommitment &amp;commitment, const MatrixCharacter &amp;character, int spacing, Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const MatrixHelper&lt; Scalar &gt; &amp;</type>
      <name>getHelper</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ac15f0c779998eedf954b6082dcf9cc83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MatrixHelper&lt; Scalar &gt; &amp;</type>
      <name>updHelper</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>ab0b5fb77104a9414a36e9e5a25c7f161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MatrixBase</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a797d712c14cdda3b4ad37e6e68089c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1MatrixBase.html</anchorfile>
      <anchor>a3cd25fada47d3640252f637783d5f8d4</anchor>
      <arglist>(std::ostream &amp;o, const MatrixBase&lt; E &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::MatrixBase::EltResult</name>
    <filename>structSimTK_1_1MatrixBase_1_1EltResult.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>MatrixBase&lt; typename CNT&lt; E &gt;::template Result&lt; P &gt;::Mul &gt;</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1MatrixBase_1_1EltResult.html</anchorfile>
      <anchor>ade56f535b2a41dedef9d646d3432b301</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; typename CNT&lt; E &gt;::template Result&lt; P &gt;::Dvd &gt;</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1MatrixBase_1_1EltResult.html</anchorfile>
      <anchor>af9b612c32e36ef7d74c9865965e2d7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; typename CNT&lt; E &gt;::template Result&lt; P &gt;::Add &gt;</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1MatrixBase_1_1EltResult.html</anchorfile>
      <anchor>a0021e0304f1865eaa909a4100de125ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixBase&lt; typename CNT&lt; E &gt;::template Result&lt; P &gt;::Sub &gt;</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1MatrixBase_1_1EltResult.html</anchorfile>
      <anchor>a46045162e6e83abc8891b2fa32dfe6b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::VectorBase</name>
    <filename>classSimTK_1_1VectorBase.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::MatrixBase</base>
    <class kind="struct">SimTK::VectorBase::EltResult</class>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ab3e50afe7f45b0b92a31b277fd6f7767</anchor>
      <arglist>(const VectorBase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aa5d283bc7262c51d39b17316ea35e35a</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a7c4850d5fa2513bd5ffb513581a7f0bd</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a5fe1d43924c65f1812be376a31b257b1</anchor>
      <arglist>(const VectorBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>af30e5c9696a90425dace8823acb4ad73</anchor>
      <arglist>(const VectorBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>af2fd28ce525257fbbc28a4fb6d6f06f1</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ac2c1fb2695aa0636a93eeb83c54505b1</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a6ac28436085409568b4b9b5713f18c4f</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ad915f80782905cdc37038516d9ba7e7a</anchor>
      <arglist>(const ELT &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>rowScaleInPlace</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a80e44850e2cf8a254d8d2251887d11d3</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowScale</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a39e853894f209b55536cdb86e5a15cd9</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v, typename EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Mul</type>
      <name>rowScale</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a6dd109327d2f5221406b56c1b3051dcc</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; ScalarNormSq &gt;::TSqrt</type>
      <name>normRMS</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a5faba0e538f6dac75769f01be55fba79</anchor>
      <arglist>(int *worstOne=0) const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; ScalarNormSq &gt;::TSqrt</type>
      <name>weightedNormRMS</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>afab6c0c9336f7ec8ca83ee94ce94e81d</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;w, int *worstOne=0) const </arglist>
    </member>
    <member kind="function">
      <type>EAbs</type>
      <name>normInf</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>acf69321c99b0108cd516b09f79e261e6</anchor>
      <arglist>(int *worstOne=0) const </arglist>
    </member>
    <member kind="function">
      <type>EAbs</type>
      <name>weightedNormInf</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a5bb0f99f9576b7923241b5e0a85d1400</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;w, int *worstOne=0) const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>elementwiseInvertInPlace</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>af8465e415dfdcd73a14eec25c8502cf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseInvert</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aebf6f45db88ec2fe653dd6307fd6926c</anchor>
      <arglist>(VectorBase&lt; typename CNT&lt; ELT &gt;::TInvert &gt; &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; typename CNT&lt; ELT &gt;::TInvert &gt;</type>
      <name>elementwiseInvert</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a1a75ab6af3880a017af6073914dea6e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>elementwiseMultiplyInPlace</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ab14eba83b169c976a859f0c93b4f79bb</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a9265e58c28bacecfc5033440e5a35095</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v, typename EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Mul</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a96785d5b25d674342b10e8a10a461849</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>elementwiseMultiplyFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a43bda5522535f5c937844382b22442da</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a4b18bda2ce8ae510caf7a617d5da99b7</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v, typename VectorBase&lt; EE &gt;::template EltResult&lt; ELT &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; EE &gt;::template EltResult&lt; ELT &gt;::Mul</type>
      <name>elementwiseMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a58fe7530e57172786047c373f40de298</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>elementwiseDivideInPlace</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a445c731475828caa7acd7839fced5700</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a4be28c05245bf5738794c7f765e4c7a2</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v, typename EltResult&lt; EE &gt;::Dvd &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Dvd</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a4cfbc2085bbac33e1a9c6853fee810a3</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>elementwiseDivideFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a8cd00ff7b0122b8de5edb8bf3a1bcb84</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivideFromLeft</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ac7ee6e67a840ce50a3a9f26e0b623262</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v, typename VectorBase&lt; EE &gt;::template EltResult&lt; ELT &gt;::Dvd &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>VectorBase&lt; EE &gt;::template EltResult&lt; ELT &gt;::Dvd</type>
      <name>elementwiseDivideFromLeft</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aa32a2c56337697a87059e6b8deaed047</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Vector_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a216e5e7ee8d8f47943d85e04db84485b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Vector_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aadcd8dcd7aee7a4ed2e483cf2a448ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const VectorView_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aa4283484e214e6209414ecc7dfdc228f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator VectorView_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a24e318b2cc86129835a9f22f9d2f3a8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Matrix_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a67d8b0aa40bf379369f480568b9df75e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Matrix_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a40c49d5b7f4f4b377787e045d5c84a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const MatrixView_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>abf7b71498d44190f62b8d68d9121ae61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MatrixView_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aeadfb2d032ea1a5b94763be747d3038a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a99eed9df1911f3d03fdccd0adeeac8e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a61202eae25d8416e3c2b5f682148018f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ae684b76a43d3dc40252c7290610a47d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>nelt</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a6773347b2e42bf92f81896cbd7777680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>af75f0ff8364c62b38591360b3cd90c2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a4c03117827a0a863104555beda20b685</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>ELT &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>abe95e931dcd241457eee530d46a8c249</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ac374e9993c57eb53ba956347b7ab339d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>ELT &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ad7756a3b2432e012fc12aa0498ef2eed</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a3e5d44380a27801bc2ee8108908d5ba7</anchor>
      <arglist>(int i, int m) const </arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>af438f1cd8d58a2713db7040ee68ca66c</anchor>
      <arglist>(int i, int m)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>index</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ad269ae679bb4e05d93a59433635f9b2f</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;indices) const </arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>updIndex</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a1e4be6d391c1c2f98d776b3651cabd66</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a6310fe091b0f7cf4c8611606698d3aa2</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;indices) const </arglist>
    </member>
    <member kind="function">
      <type>VectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>accd7fb43ab93fbc15d5a94a1c8139006</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>THerm</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>acf5aad66add0106ba122de5eab1b7a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a6bb7487d80dfee605da8d391044eaa61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>THerm</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aa45961bed817dc7128677c3cb7b0afdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a9b2b5f9ca2e634d2c63d4dae49d829d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorBase &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a7df9d2f86b45db162719ee42b7e56b62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a97c66a3b5c3d8a86aad21b1dae691ac6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>updNegate</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a591b092f1a505719c95562a4d739f962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a7c24b593bfbfb42b334667ae8e1560f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a33547dbb2c64864f7b960ddccfba986e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>resize</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ab322d124610da9bfffe449d330b79684</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>VectorBase &amp;</type>
      <name>resizeKeep</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aec970517d5458ed9334f71963e7ae354</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a18b16803fa30497c15fed2bc61544eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ELT</type>
      <name>sum</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a1d25183b82b5bc629ca3ff0508578913</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorIterator&lt; ELT, VectorBase&lt; ELT &gt; &gt;</type>
      <name>begin</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>afcdf26b048897f0150e0fd7918ebafb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorIterator&lt; ELT, VectorBase&lt; ELT &gt; &gt;</type>
      <name>end</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a59d4f868a382a5b3068fdd787fb31a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ab25125c985662bbb95a2cddb7e84c6ed</anchor>
      <arglist>(int m=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a9a9adc0ef8d0d65c1841ea5cc0ae2811</anchor>
      <arglist>(const VectorBase &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>aead0109b6e3b889e02ca161e9bb3d00c</anchor>
      <arglist>(const TNeg &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>abbc37dfd0d99236383fb1b6e8105f28c</anchor>
      <arglist>(int m, const ELT &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a96a8747ec9db82aee663741474bc5b07</anchor>
      <arglist>(int m, const ELT *cppInitialValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ac3a95e8fc112315e33bc88958a32c64f</anchor>
      <arglist>(int m, int stride, const Scalar *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ad0fe69d24d342323c54df74df46c8a58</anchor>
      <arglist>(int m, int stride, Scalar *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>ae56c99df6521b5e93fe1be3fa27f099a</anchor>
      <arglist>(MatrixHelper&lt; Scalar &gt; &amp;h, const typename MatrixHelper&lt; Scalar &gt;::ShallowCopy &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>abc9854d6810e2b3aa8913b87d8faef32</anchor>
      <arglist>(const MatrixHelper&lt; Scalar &gt; &amp;h, const typename MatrixHelper&lt; Scalar &gt;::ShallowCopy &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a5c6533504da5742f986419bed10a3ef0</anchor>
      <arglist>(const MatrixHelper&lt; Scalar &gt; &amp;h, const typename MatrixHelper&lt; Scalar &gt;::DeepCopy &amp;d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VectorBase</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a7c816a56ba34450985f05e4fe884b6f7</anchor>
      <arglist>(MatrixHelperRep&lt; Scalar &gt; *hrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1VectorBase.html</anchorfile>
      <anchor>a5fc110531b25f8df1b0109dc92299bb1</anchor>
      <arglist>(std::ostream &amp;o, const VectorBase&lt; E &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::VectorBase::EltResult</name>
    <filename>structSimTK_1_1VectorBase_1_1EltResult.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>VectorBase&lt; typename CNT&lt; ELT &gt;::template Result&lt; P &gt;::Mul &gt;</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1VectorBase_1_1EltResult.html</anchorfile>
      <anchor>a0219a197743fed878106f103684b0338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorBase&lt; typename CNT&lt; ELT &gt;::template Result&lt; P &gt;::Dvd &gt;</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1VectorBase_1_1EltResult.html</anchorfile>
      <anchor>a164c05938f459273f2bbab0c8fb04ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorBase&lt; typename CNT&lt; ELT &gt;::template Result&lt; P &gt;::Add &gt;</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1VectorBase_1_1EltResult.html</anchorfile>
      <anchor>a115c59fe73d6f4bcab726e4a6801d400</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorBase&lt; typename CNT&lt; ELT &gt;::template Result&lt; P &gt;::Sub &gt;</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1VectorBase_1_1EltResult.html</anchorfile>
      <anchor>a1a2c73f449580fd5513be0418385be65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RowVectorBase</name>
    <filename>classSimTK_1_1RowVectorBase.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::MatrixBase</base>
    <class kind="struct">SimTK::RowVectorBase::EltResult</class>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a71535e31a134ccbee48265553fcae491</anchor>
      <arglist>(const RowVectorBase &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a1ed9a3887fd133dfc812955c7a64adf1</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a9a5a7ef2d1adcb3430b2e1d29218dcf3</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a8d1c24fb2cc257b6deb4bfa54790b9f4</anchor>
      <arglist>(const RowVectorBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a2f30f2dbb6f424ec9a5bbf3d236c01ca</anchor>
      <arglist>(const RowVectorBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a498db43061b82debea5c4ec1b8b74b7e</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a83e5f0ae9637ca01238f080e018f1686</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a8a3b26cb40ff48d4268d2db493106f4a</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a18ce3d50159636e622a9de522d8ab6d5</anchor>
      <arglist>(const ELT &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>colScaleInPlace</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a579ca56371a446f33dcce6c0ac95c469</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colScale</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>af24da520edabaf382b72012036a78a1a</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v, typename EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Mul</type>
      <name>colScale</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a5b829a47de477c9472a70e86a4e9b7a5</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>elementwiseMultiplyInPlace</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a7d7f6c34fcbfb526e393f27c2bfb6f18</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>af55831ef4b32cacc4a26c01d1d963d7a</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;v, typename EltResult&lt; EE &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Mul</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a7b1dde50135db9cdb4e22aca7c9c24ec</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>elementwiseMultiplyFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ad64058cf93769b404b017e9027415a0a</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>aab2d3b61e864c7d7508f7f1cee20ac2a</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;v, typename RowVectorBase&lt; EE &gt;::template EltResult&lt; ELT &gt;::Mul &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; EE &gt;::template EltResult&lt; ELT &gt;::Mul</type>
      <name>elementwiseMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ab41d8b053fb35951f63c3070bbc9b25f</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>elementwiseDivideInPlace</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a2bff5cb1a466ef0b51c109b3e6d24491</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a639a5172fa8ba7f0626fe4bc26c32a63</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;v, typename EltResult&lt; EE &gt;::Dvd &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; EE &gt;::Dvd</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>abc3b052fbc0a8ceea3ede2dabd73b0ba</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>elementwiseDivideFromLeftInPlace</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>aab97af230039d79948edc24b27572b39</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivideFromLeft</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>af57b036d468cc813d6c946256a1f6389</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;v, typename RowVectorBase&lt; EE &gt;::template EltResult&lt; ELT &gt;::Dvd &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase&lt; EE &gt;::template EltResult&lt; ELT &gt;::Dvd</type>
      <name>elementwiseDivideFromLeft</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a630de86a385bbe57443ffae00df00b9e</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RowVector_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>abd1e93f1c3773d7a4eed773a9a58ffcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RowVector_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a16f6c71ea0cbcf35685575c5785aefc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RowVectorView_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>afcad26cd81d4eb7f1a8691a85c416878</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RowVectorView_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ad1b89986e75bfa407cf5143a7e74ef59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Matrix_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ac39ca0152899ada74815e25caa2f4c59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Matrix_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>aa8d9fadfbd1a4d6e2dd0443710b5dcbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const MatrixView_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a5bdced51300865675c6efef2dafbaf2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MatrixView_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>acfde534a28a07574e8d29213b941f742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>afdaf425577b53b36c187317932df5cff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a502ea02261ead9a32f646b097bb716de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a356a5cf0dc0b547aaeee4bb131a8df74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>nelt</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ac164f0883fe52d4cf6a6943f66381e3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ac4002f5e313fe9aa96f84376eafc10bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a2213eb1d9beef6d71a07bd0a9d16354b</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>ELT &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a7d555895152eef14745140a99672737d</anchor>
      <arglist>(int j)</arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ae3eb84ebcf9b6589d0f7ff3438a254ee</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>ELT &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a16f3803da8224e40d516a2cacfa27e03</anchor>
      <arglist>(int j)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ae53de5b42fd409d3bc36ca14a640f099</anchor>
      <arglist>(int j, int n) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a730e24dd35c5ae6984a70bf9ec5c589b</anchor>
      <arglist>(int j, int n)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>index</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>afb440e970f667af8e0ef3aedb3cbaa84</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;indices) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>updIndex</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a78a950932aabf72fdb411149d1287e59</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a7206a0bce53efaee06fe25b578acc3cb</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;indices) const </arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_&lt; ELT &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a322062bd012cbdb352756b8c501773cd</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>THerm</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a40e27e0421b0abf6f3fb5088adb73480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a696d2445025db05c72069bfbf5073336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>THerm</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a60c3300c2c88979d34c285ca9299ed42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ae1733683a350239387001343c90ac5e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowVectorBase &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a5c4f33c7db27edf0ad4be925f0bfb404</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>aefe28c1506599f40d359900a6ac2618b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>updNegate</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a91b6f3b5953364ba90e42f59ffebaa1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a3ffe76b3b2116101d15e0c07f73578a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a8375cbd98bed4a68420aee15aa87ce99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>resize</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>aee97f5368bdbdd04a56f47902825b7d6</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorBase &amp;</type>
      <name>resizeKeep</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a681c7aab5eef93ae740a7ca945dc6424</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>aaca3c3d3bd43896b2172d0039b35770f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ELT</type>
      <name>sum</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a29e72753b14f0fb6d33d50e2168c5271</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VectorIterator&lt; ELT, RowVectorBase&lt; ELT &gt; &gt;</type>
      <name>begin</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ade7b3662d2e71b4d4bd5a71e892e47ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorIterator&lt; ELT, RowVectorBase&lt; ELT &gt; &gt;</type>
      <name>end</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>ae758b09f557eef0a27debfbd7936f2e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>aaed662bf065bfe27ff06e8aadfdf32d0</anchor>
      <arglist>(int n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a141a3c713ba0ca8c45d67268aff1a9bf</anchor>
      <arglist>(const RowVectorBase &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a9d5b037bc927db11528b72c33298ebc0</anchor>
      <arglist>(const TNeg &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a8b9667fcc3f1500b75fd5604f74cf626</anchor>
      <arglist>(int n, const ELT &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a5e89922ffb83bbd12d598f17a31ca7ec</anchor>
      <arglist>(int n, const ELT *cppInitialValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>abdb202d6d855e9ad71e8ffaf56d012ad</anchor>
      <arglist>(int n, int stride, const Scalar *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a5b42d4ae233edfc1c184133e98bd1a60</anchor>
      <arglist>(int n, int stride, Scalar *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a6696a96d3584425e49f71c6cfce8a959</anchor>
      <arglist>(MatrixHelper&lt; Scalar &gt; &amp;h, const typename MatrixHelper&lt; Scalar &gt;::ShallowCopy &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a82870a5380e1132e8a4f3037984ad04d</anchor>
      <arglist>(const MatrixHelper&lt; Scalar &gt; &amp;h, const typename MatrixHelper&lt; Scalar &gt;::ShallowCopy &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>aa16def964cf22ccb1496f46afda697ec</anchor>
      <arglist>(const MatrixHelper&lt; Scalar &gt; &amp;h, const typename MatrixHelper&lt; Scalar &gt;::DeepCopy &amp;d)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RowVectorBase</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>a658e11c6a05aa89c234d9b6babe5e30b</anchor>
      <arglist>(MatrixHelperRep&lt; Scalar &gt; *hrep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1RowVectorBase.html</anchorfile>
      <anchor>abdd29fd2c7ab13b6aac1c60f400a6336</anchor>
      <arglist>(std::ostream &amp;o, const RowVectorBase&lt; E &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::RowVectorBase::EltResult</name>
    <filename>structSimTK_1_1RowVectorBase_1_1EltResult.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>RowVectorBase&lt; typename CNT&lt; ELT &gt;::template Result&lt; P &gt;::Mul &gt;</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1RowVectorBase_1_1EltResult.html</anchorfile>
      <anchor>ae5454bf639876483ed51e2744c67032a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorBase&lt; typename CNT&lt; ELT &gt;::template Result&lt; P &gt;::Dvd &gt;</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1RowVectorBase_1_1EltResult.html</anchorfile>
      <anchor>ad6d14dfed39f2877b825f98ed913dfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorBase&lt; typename CNT&lt; ELT &gt;::template Result&lt; P &gt;::Add &gt;</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1RowVectorBase_1_1EltResult.html</anchorfile>
      <anchor>a45f558c69dfbc77c1876f04becb6b0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowVectorBase&lt; typename CNT&lt; ELT &gt;::template Result&lt; P &gt;::Sub &gt;</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1RowVectorBase_1_1EltResult.html</anchorfile>
      <anchor>acff812e84a9e7dab434ad580184d7108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixView_</name>
    <filename>classSimTK_1_1MatrixView__.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::MatrixBase</base>
    <member kind="function">
      <type></type>
      <name>MatrixView_</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>ae3c8c371297b4078e2a87af2394fcef4</anchor>
      <arglist>(MatrixHelperRep&lt; S &gt; *hrep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixView_</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a151540508eac0bd80dfb0f359de2ce7a</anchor>
      <arglist>(const MatrixView_ &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>add6f893d9448e6466aae6b17f8de42bd</anchor>
      <arglist>(const MatrixView_ &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixView_</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>afbb2acef35abf5e0a85bfa42c03dc770</anchor>
      <arglist>(DeadMatrixView_&lt; ELT &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a6ada247ccab111654ea125890d69809a</anchor>
      <arglist>(DeadMatrixView_&lt; ELT &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixView_</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a897f12dc19bb39d2747b8e589089c356</anchor>
      <arglist>(const MatrixHelper&lt; S &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixView_</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a85627d12bb94bf35cf839a9516f0335d</anchor>
      <arglist>(MatrixHelper&lt; S &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a8c4f91b3790cd828a70b10594dfb835d</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a4783981b163667ee725ef0f298cc2c0b</anchor>
      <arglist>(const ELT &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a18d5f4de7650102104ba14a0bcd2e8eb</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>aecf9aebf3f93e3371610f425c4cf3593</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a93826672c7c9dfcdf3407a3c3a875b12</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a33e3a68b80ebfaf44f0a631c4e67524b</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a042018825e23a8fdd4e7ff9bc04f2510</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a23cfaca27cdc1cadf89755211baa2485</anchor>
      <arglist>(const ELT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MatrixView_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a49614bd61972a15fe34686b2f682ecdb</anchor>
      <arglist>(const ELT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Matrix_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>abeb1ffe1fb007260dfb8db3178764853</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Matrix_&lt; ELT &gt; &amp;</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a27e125856821ee6bf7793233404c9681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1MatrixView__.html</anchorfile>
      <anchor>a276764f828bccc07858f7f1f8fd0a5ea</anchor>
      <arglist>(std::ostream &amp;o, const MatrixView_&lt; E &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DeadMatrixView_</name>
    <filename>classSimTK_1_1DeadMatrixView__.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::MatrixView_</base>
    <member kind="function">
      <type></type>
      <name>DeadMatrixView_</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>ab6d1393de8dad9a5f1d4c2abcbb2cb95</anchor>
      <arglist>(MatrixHelperRep&lt; S &gt; *hrep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeadMatrixView_</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a1c3142b361b3d94b0e23c28f05e9c63e</anchor>
      <arglist>(const Base &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>ae324729debff8d0a4c89c83219808bf8</anchor>
      <arglist>(const Base &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeadMatrixView_</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>ac300efbbdfea8e18715d101960e1199e</anchor>
      <arglist>(const MatrixHelper&lt; S &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeadMatrixView_</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>aa8ace011439fb7cb0cb8023ba8dd73c3</anchor>
      <arglist>(MatrixHelper&lt; S &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a12d700a919ed580f0ac822136b22250b</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a816d01aaa9860724dc3c3aaecac07fdf</anchor>
      <arglist>(const ELT &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a566bec6cdc4b1d53fcd39542bcaff3c8</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a96f7566b2c4151071a3ac325fb7f8ef8</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a7571e094d35ee9799bcc8e12387756f7</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>ab94099207fe05b3c73263882a59c8293</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a9b51b8fcf566077ef6dea2e6d2fd02a7</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a5f93a03602cd09dffea311248850b52b</anchor>
      <arglist>(const ELT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>DeadMatrixView_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1DeadMatrixView__.html</anchorfile>
      <anchor>a50129300a4aba632f46040690db407d2</anchor>
      <arglist>(const ELT &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Matrix_</name>
    <filename>classSimTK_1_1Matrix__.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::MatrixBase</base>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a1340029a75d6ecb7ecdab79ef88c3e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a5b650d2d54bd9a39089ef10db8b209ed</anchor>
      <arglist>(const MatrixCommitment &amp;mc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a5687a1f3fb9819f0b831eac23418e5e3</anchor>
      <arglist>(const Matrix_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a3082de6071867a06fb0a2ed728bcc74f</anchor>
      <arglist>(const Matrix_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a06efa9eef0818e1f71323411610d7e16</anchor>
      <arglist>(const Base &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a29d2f61d15cb119bbf331e3d98a5cc92</anchor>
      <arglist>(const BaseNeg &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a5413931427bdc0ad29e5e7c21cba33a3</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>aedfba40c692c15c3569fb40cc245fa52</anchor>
      <arglist>(int m, int n, const ELT *cppInitialValuesByRow)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>aa6a564adb6a3ba2cfd2dd56614177736</anchor>
      <arglist>(int m, int n, const ELT &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>af6706d5371fbe60e93731eec7e938185</anchor>
      <arglist>(int m, int n, int leadingDim, const S *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a3e970d202037509f5815f2f0b39c078f</anchor>
      <arglist>(int m, int n, int leadingDim, S *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix_</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a078a64e5247217c6911849a9f15908e3</anchor>
      <arglist>(const Mat&lt; M, N, ELT, CS, RS &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>ac7ae8c2f5165e76e3391ad1d6b80225c</anchor>
      <arglist>(const ELT &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>aa02d3921f994ff3099fd8dcc4c5cf296</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a9320e6cec27586972b5dae94011bebdd</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>afa4be4073a7b2fc262804385136a0824</anchor>
      <arglist>(const MatrixBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a9e4cb3d0a757873ec1c5cf3d23d1d9b7</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>aa2bc85851b93e663a94a7a1262e3c6ec</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a422ba1f59d913ba2a45eb81e6868b41b</anchor>
      <arglist>(const ELT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a0a7a6905700f984787e1bed4a4932948</anchor>
      <arglist>(const ELT &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>aed6c70799a58819fd4c5404831edd1c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>updNegate</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a8a5215645f765ab54d14e6a7c32f8809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a3334ef254caede4868815f9eb325088e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>adff95c1f6dbeccf727ff9f0916772f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a107250c9561e49d394f8e8cc3eea5ae7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>get</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a3d26c772d0a023c27fc2bba09d6fda9e</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>ada406e469da46e0b3b7ece38418b4dec</anchor>
      <arglist>(int i, int j, const ELT &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a6098dfb6a9227f84f6058a8cda321393</anchor>
      <arglist>(std::ostream &amp;o, const Matrix_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1Matrix__.html</anchorfile>
      <anchor>a6eb4f91f56faeeb334e7b839ba1c8fc3</anchor>
      <arglist>(std::ostream &amp;o, const MatrixBase&lt; T &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::VectorView_</name>
    <filename>classSimTK_1_1VectorView__.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::VectorBase</base>
    <member kind="function">
      <type></type>
      <name>VectorView_</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a7999d22aca9b391df3a55179727fc933</anchor>
      <arglist>(MatrixHelperRep&lt; S &gt; *hrep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorView_</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a5d2071b6ac924a2d21d93324d8fb530c</anchor>
      <arglist>(const VectorView_ &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a5bdc334a363c4fe0c7322087570d4770</anchor>
      <arglist>(const VectorView_ &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorView_</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a3d912c29fe7f5dee8415c19a0dabc73d</anchor>
      <arglist>(const MatrixHelper&lt; S &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorView_</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>ae454f960cd991f78a567eb7de0cb3a4c</anchor>
      <arglist>(MatrixHelper&lt; S &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a403f9e1d53ed4e2a332c04cd657cbfd9</anchor>
      <arglist>(const Base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>aac79fa18f4202e39a35296e47e5f7469</anchor>
      <arglist>(const ELT &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>ad99f00fa098302b5ce2bb003e309af22</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a83f67076069190447ae2fed1e0277fb8</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a9fbb0ac45ee6aa6985ec3d0922e3fcc4</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>ab65f4c097198ad4a71040482ec368d23</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a10b4b54599f91466bf2dc2defa97e134</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a3783c37f87f12e8e68dc0ad9faf210d9</anchor>
      <arglist>(const ELT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>VectorView_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>aac75de6f498fda4383b6e6cb34224978</anchor>
      <arglist>(const ELT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a668c2f0a99611163d8536f808c32f9c3</anchor>
      <arglist>(std::ostream &amp;o, const VectorView_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>fillVectorViewFromStream</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a7b0d2532e7954fb5b06c8809de397484</anchor>
      <arglist>(std::istream &amp;in, VectorView_&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSimTK_1_1VectorView__.html</anchorfile>
      <anchor>a3473a4b3142afb8e0e76e4479816900d</anchor>
      <arglist>(std::istream &amp;in, VectorView_&lt; T &gt; &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Vector_</name>
    <filename>classSimTK_1_1Vector__.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::VectorBase</base>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a0da739dfed2a74e5a5ad08806f0f86be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>ae9d4ebc1995a5764ed8b57616584bec4</anchor>
      <arglist>(const Vector_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a658639ce1bb2f6a114114c86fbb459bc</anchor>
      <arglist>(const Base &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>abf625ce4d52454dbcf3d961dbe20460c</anchor>
      <arglist>(const BaseNeg &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a4d9b951cea60616779b5d6c49405b15e</anchor>
      <arglist>(const Vector_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a2266e31bbc8069f9470624a695ec98f4</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a12a6d63d9cc5ef29b6923f4f62c8dbe8</anchor>
      <arglist>(int m, const ELT *cppInitialValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>af77d5aaa1aaa4f5d080de7845d83cc84</anchor>
      <arglist>(int m, const ELT &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a5f7c0d4982b83a76f32109214fc738b2</anchor>
      <arglist>(int m, const S *cppData, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>aee0909fd3820d0733675b41e4147edc0</anchor>
      <arglist>(int m, S *cppData, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a63dc98c357bde243db0811fc23f1377f</anchor>
      <arglist>(int m, int stride, const S *data, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a4ac648713b60a3ecb3b08e6f9bf30d3f</anchor>
      <arglist>(int m, int stride, S *data, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector_</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a8df38f8e3f94a554bf8b4628f42c28de</anchor>
      <arglist>(const Vec&lt; M, ELT &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>add40d2781b11e23c314d37aec5a61953</anchor>
      <arglist>(const ELT &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>ad55e03e493dbea876b75878d3ef4295f</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a239496b15bcbef5f1c6c8ada496b22be</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a89f6144403a7f284c7db832c555391f8</anchor>
      <arglist>(const VectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a369803b83b5bac678713eae1fcb0c2f8</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>ad14c5e9ae1fe825eba98f2b83e170c76</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a59473840d0c563f5a4ed657e884ea48f</anchor>
      <arglist>(const ELT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vector_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a8fe792dfb8943a594f59db46d9afacd9</anchor>
      <arglist>(const ELT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a7e482e377ad340a5b49a576fb8837746</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>get</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>ae8ec6fdf20f6be99b265bd05bb0c88fe</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>abc5e3398ac8f5e7a9c07d5b3275b4802</anchor>
      <arglist>(int i, const ELT &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a5065a0176d09cb7448c598d16ea6801e</anchor>
      <arglist>(std::ostream &amp;o, const Vector_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>ad9ec8f055b206166ed9846ab6de5262e</anchor>
      <arglist>(std::ostream &amp;o, const VectorBase&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>readVectorFromStream</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a94bbcf2a0098534062ed208a028b1ea9</anchor>
      <arglist>(std::istream &amp;in, Vector_&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>fillVectorFromStream</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>ac0cf6d3e1886a13b85d393c7368fb36d</anchor>
      <arglist>(std::istream &amp;in, Vector_&lt; T &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSimTK_1_1Vector__.html</anchorfile>
      <anchor>a8aa26f0bf1369241c746fc94df397c03</anchor>
      <arglist>(std::istream &amp;in, Vector_&lt; T &gt; &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RowVectorView_</name>
    <filename>classSimTK_1_1RowVectorView__.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::RowVectorBase</base>
    <member kind="function">
      <type></type>
      <name>RowVectorView_</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>aede1b4a35296eecd1333b733361bd5a9</anchor>
      <arglist>(MatrixHelperRep&lt; S &gt; *hrep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorView_</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a64ab7a4b54a688317de01084a22dfd01</anchor>
      <arglist>(const RowVectorView_ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>ab647be655e47b50cd7c0d99aba1c1d29</anchor>
      <arglist>(const RowVectorView_ &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorView_</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a2e41b07d375d6106cb4ce1a3f4536550</anchor>
      <arglist>(const MatrixHelper&lt; S &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVectorView_</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a2220e0bb2d7f3bd2ca5d23d951d24bc7</anchor>
      <arglist>(MatrixHelper&lt; S &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a0c47302c8f8fdb85a1f67ae99ae48bdd</anchor>
      <arglist>(const Base &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>aadfe1abbed2e1593de35c1ffdd3f17c8</anchor>
      <arglist>(const ELT &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a5e5c18bac6b77e1ef6773b12aaf70a4e</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a8bb4f2f90e5e18fdfa61ebdef68033f3</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a9c434b2c64e1fecfa4137cdd8c11e1b5</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>ade611ebf04cb5fe813743dbcc9d97788</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a9d071cfe7a5907e9302e6f75f5a524e4</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>ad96ce8a4038cc6c9fbe48cc24b2566f0</anchor>
      <arglist>(const ELT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVectorView_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>a0046b47f84a0a9b4185203c19f3333a3</anchor>
      <arglist>(const ELT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1RowVectorView__.html</anchorfile>
      <anchor>acf2dbf21cf05371a1c07ae7f925b14f2</anchor>
      <arglist>(std::ostream &amp;o, const RowVectorView_&lt; E &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RowVector_</name>
    <filename>classSimTK_1_1RowVector__.html</filename>
    <templarg>ELT</templarg>
    <base>SimTK::RowVectorBase</base>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a2df6c068e68b3df3c629a8893f0caa91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>aa450d9e89b4818b3aec440aed51ac474</anchor>
      <arglist>(const RowVector_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a607b75577db54932f6dcf7332476179f</anchor>
      <arglist>(const Base &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a53e2b6e448a011441b197d56cff0b8f5</anchor>
      <arglist>(const BaseNeg &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>af03d3026088aae4c371e656b4d598e39</anchor>
      <arglist>(const RowVector_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a211ec9a15edf723376737b2a8641adb0</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>ae5782383ccc2a85b021d6831643b5b74</anchor>
      <arglist>(int n, const ELT *cppInitialValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>ac7b0c2bf873b26506d51211665636659</anchor>
      <arglist>(int n, const ELT &amp;initialValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a9614bac93e44c7760591de7a02a5b402</anchor>
      <arglist>(int n, const S *cppData, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>ae6faf71568ffe5a32d164ad881693def</anchor>
      <arglist>(int n, S *cppData, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a366564b45639af8ec5935b8a717de387</anchor>
      <arglist>(int n, int stride, const S *data, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>af0b8034d2a63edfa7e71a8d047e97b59</anchor>
      <arglist>(int n, int stride, S *data, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector_</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>aae22426d407bf56898789e186fdcef46</anchor>
      <arglist>(const Row&lt; M, ELT &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a3ad1dbfde79084d067ad2d22ceb9d371</anchor>
      <arglist>(const ELT &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>aa96d4872084099117b8d25c781894a86</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>af0a7b0a031445a1c9fd2411a3ad68246</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>aeb6cb164bd05a2fbe292cf9f7cf31ae0</anchor>
      <arglist>(const RowVectorBase&lt; EE &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a530045979376828ccd52bda14ccdea83</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a2216d72756f4dcf65fe3272fd35c0808</anchor>
      <arglist>(const StdNumber &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a44b620028f63ebcb1704101d027b0e1a</anchor>
      <arglist>(const ELT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>RowVector_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a15bfabef2ab84a048fe8ad1d0f782959</anchor>
      <arglist>(const ELT &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>a94a04a316d9e4c6d17b77abff8ec220f</anchor>
      <arglist>(std::ostream &amp;o, const RowVector_&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1RowVector__.html</anchorfile>
      <anchor>aa6c2a1e8008d1d7419959518e8c9e0a6</anchor>
      <arglist>(std::ostream &amp;o, const RowVectorBase&lt; T &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::VectorIterator</name>
    <filename>classSimTK_1_1VectorIterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ELT</type>
      <name>value_type</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a808881e80e9688d859afb7d46c008201</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>aadef62e408393043c727aec00f6346b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ELT &amp;</type>
      <name>reference</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>afdf6f672cd83e9e9fde229dbbc21837c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ELT *</type>
      <name>pointer</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>aba0b0a336962e4fab660c4b3c834851d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>af82ffd6c2bcabc3f007ffb179e6f9c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorIterator</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a5caa48e1efa5d385ba4c527677846460</anchor>
      <arglist>(VECTOR_CLASS &amp;vector, ptrdiff_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorIterator</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>ac9724ab59d9737a1c425f41993000458</anchor>
      <arglist>(const VectorIterator &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type>VectorIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a26719916cfeab173ab02d90469314d5e</anchor>
      <arglist>(const VectorIterator &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type>ELT &amp;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a0cb9c9b9207b1c89ec828c8a8ee1dcc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ELT &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a827e445c79397d2e73827873b0d1b011</anchor>
      <arglist>(ptrdiff_t i)</arglist>
    </member>
    <member kind="function">
      <type>VectorIterator</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a39535a3e65e8a3647d31720ad9527f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorIterator</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a0d24dfc813af18704c58389dd7577024</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>VectorIterator</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>aaef7f2e910511823a3495a72c94335a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorIterator</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a047b0f45e3468be424f9ede00264d14f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a192acc74f900ebe6dbd6ace0964d7815</anchor>
      <arglist>(VectorIterator iter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>aa206eabd1c500f317d716813a22de46d</anchor>
      <arglist>(VectorIterator iter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>aae0b79681002acfd120f2ae6e946c40c</anchor>
      <arglist>(VectorIterator iter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a9277903fc85d12230af5013d57c18308</anchor>
      <arglist>(VectorIterator iter) const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>ab05a29a24d7cc70d0f535fc78de31f66</anchor>
      <arglist>(VectorIterator iter) const </arglist>
    </member>
    <member kind="function">
      <type>VectorIterator</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>ac2be02e627d10f406ded43dadc386098</anchor>
      <arglist>(ptrdiff_t n) const </arglist>
    </member>
    <member kind="function">
      <type>VectorIterator</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a0bf542cdf8ae2f626df3cd7140872406</anchor>
      <arglist>(ptrdiff_t n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a5059cea13978c37a484347d40773ea4a</anchor>
      <arglist>(VectorIterator iter) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1VectorIterator.html</anchorfile>
      <anchor>a97bec8d13f3cbfa272075931de65a9a5</anchor>
      <arglist>(VectorIterator iter) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixStructure</name>
    <filename>classSimTK_1_1MatrixStructure.html</filename>
    <class kind="struct">SimTK::MatrixStructure::Mask</class>
    <member kind="enumeration">
      <name>Structure</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoStructure</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca7e6af0cb3f677f41e9f7209d2b68e807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Matrix1d</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca62849ef3622af5c5520609308673d1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Zero</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94cafabdd21ba63f21bee9ce58ddaff08b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Identity</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94cab78f2ab161fe0cae01e900b44fa98dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Permutation</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca005d89fda20e8728fb2a539748d43080</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RepeatedDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca3c5189bcf54490dc124906d6a54ebdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Diagonal</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94cad621289ec323ba3e3f04fe985b844ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BiDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94cabd1ce70db0bec59c641bba44591d82d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TriDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca2ecb44ae4b1722c5229338d723d71139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BandedSymmetric</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca219579445f34cc514241bcfbaaf8fb5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BandedHermitian</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca54414ea815e542136b31ea097f38872c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Banded</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca1e3889a02ff4caeb0798086a1e0ecca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Triangular</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca6b40159f9e15561223d4b26fca3813f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QuasiTriangular</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca45499ad92e39f555a3fe12b74575be0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hessenberg</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94caac028c27d2a99fa6d31329452c5b6578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Symmetric</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94cab88fade762b7dbb09230cf8b481c4ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hermitian</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca9dcfba5fb5b2047b915d41a9e76ad526</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SkewSymmetric</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94cad19f353395b63535f553b3ecfa76dd05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SkewHermitian</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94caaa7d96ae0c22885e19d91dcd5dceda1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Full</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a13fd248ce3911af81bd833adf501f94ca8583e24831db1f22d699a26aa92393b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Position</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a1b4c2b704a3a4fefd212e96f090fcb22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoPosition</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a1b4c2b704a3a4fefd212e96f090fcb22a1704497714d8a9cd1e6b8f8e80670825</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a1b4c2b704a3a4fefd212e96f090fcb22a02b986651a93bbfbba4a8cb6654b8837</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a1b4c2b704a3a4fefd212e96f090fcb22aee8d9f96078c8c31e314f02842b36dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DiagValue</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a9f72540e0dc4ac1ba4870f2cd72c19b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoDiagValue</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a9f72540e0dc4ac1ba4870f2cd72c19b9a65ec1a94f47cec8eba507d9b1fcbb523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StoredDiag</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a9f72540e0dc4ac1ba4870f2cd72c19b9a97c9839deeb6cc307d42cc5fd8ac2c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZeroDiag</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a9f72540e0dc4ac1ba4870f2cd72c19b9a40968b6bab4b1b086306459dd6eb664e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitDiag</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a9f72540e0dc4ac1ba4870f2cd72c19b9afa24f8715c0d25cb34596850039d1ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>StructureMask</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>af2436da3019dcb9b7a071093eaacb701</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>PositionMask</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>ae5e34c4ecd6233bc84749cdbb353162f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>DiagValueMask</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>ac39f1c731933a76efbfe30486b550d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MatrixStructure &amp;</type>
      <name>setMissingAttributes</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a48aa5e304d43f2654e80219c8b21025b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a458f45886e59982c3a176aa9c1a4c65b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixStructure</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a44526ae4f0848eb0e0b9e79c83eb7f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixStructure</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>ac6c14dfafcdd6f9b3c277b1222bc114f</anchor>
      <arglist>(Structure s, Position p=NoPosition, DiagValue d=NoDiagValue)</arglist>
    </member>
    <member kind="function">
      <type>Mask</type>
      <name>mask</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a34c28ceba5cafdf5a83ce80bbf136550</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Structure</type>
      <name>getStructure</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a6e4e12e9ada8b8104b040d591bd3f999</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Position</type>
      <name>getPosition</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>aa0b624672f647bc5ccc412d82f78c539</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DiagValue</type>
      <name>getDiagValue</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>abb9dabd88400faee13268344a71b0294</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixStructure &amp;</type>
      <name>setStructure</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a12eee2de111ea10f2769c61e4986eb53</anchor>
      <arglist>(Structure s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixStructure &amp;</type>
      <name>setPosition</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>adc25020e18cf38e5acd6e37ceca66270</anchor>
      <arglist>(Position p)</arglist>
    </member>
    <member kind="function">
      <type>MatrixStructure &amp;</type>
      <name>setDiagValue</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a1400db0c26d64662f2983ad48dc9e933</anchor>
      <arglist>(DiagValue d)</arglist>
    </member>
    <member kind="function">
      <type>MatrixStructure &amp;</type>
      <name>set</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>afeacb246d5e1f62c28aff20b42b380f2</anchor>
      <arglist>(Structure s, Position p, DiagValue d)</arglist>
    </member>
    <member kind="function">
      <type>MatrixStructure &amp;</type>
      <name>setToNone</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>ad5253a987afca3d9231fc3949fde75a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a90257de6650b434d50498d75d2f5225f</anchor>
      <arglist>(Structure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StructureMask</type>
      <name>calcStructureMask</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a11846626d34d0128aeef93e6443ac5e4</anchor>
      <arglist>(Structure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a1e9591b18a692e8b5f15e8a443e0f981</anchor>
      <arglist>(Position)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PositionMask</type>
      <name>calcPositionMask</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a842c8a7e003eed6650acc4a5de0d9567</anchor>
      <arglist>(Structure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>ad2641a658e1602a2f05e805475fa7326</anchor>
      <arglist>(DiagValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiagValueMask</type>
      <name>calcDiagValueMask</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a7dfd4a6fecfd44f5436e063936ded826</anchor>
      <arglist>(Structure)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const StructureMask</type>
      <name>AnyStructure</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a9a6323c3ca3692744ce2339a9bd65514</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const StructureMask</type>
      <name>UncommittedStructure</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a7b5a83c48203b9d4d4d723d75c9fb2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PositionMask</type>
      <name>AnyPosition</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a8d3af0ee4e9931cd3c5106e72557795a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PositionMask</type>
      <name>UncommittedPosition</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>a744e80a6ec524a5486ff7bf92b564b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DiagValueMask</type>
      <name>AnyDiagValue</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>afd1b084c8a852ee72c16039b0995552e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DiagValueMask</type>
      <name>UncommittedDiagValue</name>
      <anchorfile>classSimTK_1_1MatrixStructure.html</anchorfile>
      <anchor>ad5cc8c0f9b685a2c7f1ee26907f2b919</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::MatrixStructure::Mask</name>
    <filename>structSimTK_1_1MatrixStructure_1_1Mask.html</filename>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>a6fe52c856884743740985acad9b1207f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>a22bd2fcc47acc8f30943151b93e61aef</anchor>
      <arglist>(StructureMask sm, PositionMask pm, DiagValueMask dm)</arglist>
    </member>
    <member kind="function">
      <type>Mask &amp;</type>
      <name>setToUncommitted</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>a34293f76295cadc5a6a5eee2edcf1d20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncommitted</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>aed1d4da031cecf9766f0676d3be05f95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfiedBy</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>a87e06d9d552aa680d3a658a67cf4556c</anchor>
      <arglist>(Structure str, Position pos, DiagValue diag) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfiedBy</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>a9f54f967878d0ee4d1b03f92ac038b28</anchor>
      <arglist>(const MatrixStructure &amp;actual) const </arglist>
    </member>
    <member kind="variable">
      <type>StructureMask</type>
      <name>structure</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>a34d801eb9ac1bd1969d79274db7e11e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PositionMask</type>
      <name>position</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>a4ac0d619582ea27d9fc5bdff93225503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DiagValueMask</type>
      <name>diagValue</name>
      <anchorfile>structSimTK_1_1MatrixStructure_1_1Mask.html</anchorfile>
      <anchor>aca634e8a8a5e89ab66eab181e29acb96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixStorage</name>
    <filename>classSimTK_1_1MatrixStorage.html</filename>
    <class kind="struct">SimTK::MatrixStorage::Mask</class>
    <member kind="enumeration">
      <name>Packing</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoPacking</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2a5e5c4f41ab8ef78ea05810e6180e33ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Full</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2a81b9922d94ffcc89a8448eea07a52956</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TriInFull</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2ad820c450900a0e9b5102f8b3be31c222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TriPacked</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2a2b2ff989c1cd0436ab0b179f2708c414</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Banded</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2a0bf19db4ab2d990104141826ccc90481</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Vector</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2ac093ce5a8feae763a18097eba9cb0c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2a7668507d299ba4684c825279a5dc1bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Permutation</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89830f515bc2e837f9656e187e471ab2ab8b830cab0ac2a96f8c10ef95407f7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Placement</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>abd24ef897131835e92078d2b34592d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoPlacement</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>abd24ef897131835e92078d2b34592d31af44a3fe89cfa7c8da085c2e341c3948d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>abd24ef897131835e92078d2b34592d31af9a7f42b795b1209d9f32776298c30a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>abd24ef897131835e92078d2b34592d31a985acf218ce83877d17a5b81afae4e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Order</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>adb07428dc5db90bb918b39301d092fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoOrder</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>adb07428dc5db90bb918b39301d092feda671b4b4848618f5c39afe18d443432e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColumnOrder</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>adb07428dc5db90bb918b39301d092feda03764da188b733945b4abd7cf92050ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowOrder</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>adb07428dc5db90bb918b39301d092feda7de3d07843c1f348be6d96aa824dfeb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Diagonal</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a6bf3e4b815c27ca40e3c5dcc080ca3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoDiag</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a6bf3e4b815c27ca40e3c5dcc080ca3a7a7d07c54ea1f1d83b68f2e907836a1e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StoredDiag</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a6bf3e4b815c27ca40e3c5dcc080ca3a7ac5ec6a6bb7952ea3d02fc305862a7fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AssumedDiag</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a6bf3e4b815c27ca40e3c5dcc080ca3a7a9e6d5cc02b9f05a921f8235973d06708</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>PackingMask</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a9e148191f8b233b959cb21777a709710</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>PlacementMask</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a89e617f4b4755459d5fb79b21d4a3c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>OrderMask</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a29bbd5d6e847d01f6497b7d011a234ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>DiagonalMask</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a429582a375a70e1c041607e07cda39e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a01025f0a2182ed7103d29cdb32c50449</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mask</type>
      <name>mask</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a6e6754d9843db587c4a4071aabdaab79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixStorage</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>adc2daaa8e48c997c3f0f50bf2bb0c6ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixStorage</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a935ecb224b742137bc62676f620bcde0</anchor>
      <arglist>(Packing pk, Placement pl=NoPlacement, Order o=NoOrder, Diagonal d=NoDiag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixStorage</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a074f94ae151fcec6a296caecba0542cd</anchor>
      <arglist>(Packing pk, Order o)</arglist>
    </member>
    <member kind="function">
      <type>MatrixStorage &amp;</type>
      <name>setMissingAttributes</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a77a29a041fbf1057dbec8643407e188d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixStorage &amp;</type>
      <name>setToNone</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a0e056ff9d4b080e19bebb553e2d162dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixStorage &amp;</type>
      <name>setPacking</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>aa8979452172148d15090615a53e14dc4</anchor>
      <arglist>(Packing p)</arglist>
    </member>
    <member kind="function">
      <type>MatrixStorage &amp;</type>
      <name>setPlacement</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a6d3ce98d604b6f182658f77b6b0fe2f2</anchor>
      <arglist>(Placement p)</arglist>
    </member>
    <member kind="function">
      <type>MatrixStorage &amp;</type>
      <name>setOrder</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>af72b0afb2d08f1e5641b616324acc14e</anchor>
      <arglist>(Order o)</arglist>
    </member>
    <member kind="function">
      <type>MatrixStorage &amp;</type>
      <name>setDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a5ed8dee2b6bc57b9234d8ee129b5770d</anchor>
      <arglist>(Diagonal d)</arglist>
    </member>
    <member kind="function">
      <type>Packing</type>
      <name>getPacking</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a4abb28f9653fe982349ac6adb1a01ea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Placement</type>
      <name>getPlacement</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a3b776b73d438f4e1432171468506b67f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Order</type>
      <name>getOrder</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a57fe5a8383657135d2566e06fb6a3ce7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Diagonal</type>
      <name>getDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>afb8985f8cebf25befecace9f0ef5b65b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>aba1a59c1c331373acb814ee4c9bb116a</anchor>
      <arglist>(Packing)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a35de5f4f2cab2b7297772a03665c2c2f</anchor>
      <arglist>(Placement)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a609a5b8dab709332b06d7ef9be66abb4</anchor>
      <arglist>(Order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a24710cfcec9f1dfd97422917abdd285f</anchor>
      <arglist>(Diagonal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixStorage</type>
      <name>calcDefaultStorage</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a4990e4ee1c40787b0fd89d24e10e5bc5</anchor>
      <arglist>(const MatrixStructure &amp;, const MatrixOutline &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PackingMask</type>
      <name>AllPacking</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a4a35f35a8a4ace0fec9b5e6cee1dee33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PackingMask</type>
      <name>UncommittedPacking</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>aa82e5a83977501c61b7eed5542ce2734</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PlacementMask</type>
      <name>AllPlacement</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a424d606cb49278500375ff2fb8eac9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PlacementMask</type>
      <name>UncommittedPlacement</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a9253d1779226db62ba54e13b5c204ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OrderMask</type>
      <name>AllOrder</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a8e2a848b7032896b3920c479d2d6b5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OrderMask</type>
      <name>UncommittedOrder</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>a090d168852d4e2b13067c06e27209ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DiagonalMask</type>
      <name>AllDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>ab8fed95b72ef30d8f15c453425724790</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DiagonalMask</type>
      <name>UncommittedDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixStorage.html</anchorfile>
      <anchor>ab4ec3ce33f5342893c6d94ad8a3785a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::MatrixStorage::Mask</name>
    <filename>structSimTK_1_1MatrixStorage_1_1Mask.html</filename>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>ac9a19a3a4a5f0b112399fab89ca96684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>afb9a85ae803861c3f05731788466b4f1</anchor>
      <arglist>(PackingMask pkm, PlacementMask plm, OrderMask om, DiagonalMask dm)</arglist>
    </member>
    <member kind="function">
      <type>Mask &amp;</type>
      <name>setToUncommitted</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>afecc7292689ac69917f8c4b2ba347032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncommitted</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>ae1e555d3e807a596eab8301a870170c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfiedBy</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>a6bd48c537ce67eb28a27bf55d41f23aa</anchor>
      <arglist>(Packing pack, Placement place, Order ord, Diagonal diag) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfiedBy</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>aee1f8ae46cd3a51c14c5e7b5aab709f4</anchor>
      <arglist>(const MatrixStorage &amp;actual) const </arglist>
    </member>
    <member kind="variable">
      <type>PackingMask</type>
      <name>packing</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>a1a6bea6d2a55fd3b9bb56838150cd62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PlacementMask</type>
      <name>placement</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>a44ebc2aa85cfbc4de436e4373d734462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OrderMask</type>
      <name>order</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>a9483a8ceb3e35db5788b2370da5202b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DiagonalMask</type>
      <name>diagonal</name>
      <anchorfile>structSimTK_1_1MatrixStorage_1_1Mask.html</anchorfile>
      <anchor>a5c2582c155cb8accf0ec047b63d84526</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixOutline</name>
    <filename>classSimTK_1_1MatrixOutline.html</filename>
    <class kind="struct">SimTK::MatrixOutline::Mask</class>
    <member kind="enumeration">
      <name>Outline</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoOutline</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71a8f540b5ef4e0e66ba0d8b1691d6a792d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71aa36bc4b0ee7fa1eb111ef7cafbc78484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Column</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71aa7050973dd556c9b3316bf0d1978e707</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Row</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71af0c21552e254272995236176a78efbbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Square</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71aa0d7611befc8817e13124491d6246370</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Wide</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71aa951007f49f08a7879ec02fcf7357ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Tall</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71a1ed2b1cdf61835dad40273704c5a7c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Rectangular</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a6d387251ec5188a35a0168ac6e23ea71a74bf77e084fc663e185d1d25688d0452</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>OutlineMask</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>afeac5538e4082e4e11467c96d3ec10a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a03965f686ba113de006ab02aa2094f40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOutline</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a4dbb09b1689c378b47dd81e5f10149c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOutline</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a3f50b639655afdf7af2d30a4ef5ea01b</anchor>
      <arglist>(Outline outline)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOutline &amp;</type>
      <name>setToNone</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a97296f845038f9bbeca27a7c99004e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mask</type>
      <name>mask</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a07adabbc309bf61154130e2d70a030a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSizeOK</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a4ea8475a6cfdd429b895a72b58b5c2ff</anchor>
      <arglist>(int m, int n) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMinimumSize</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a93b61e0f2ab9ebd597ab9705017a8c41</anchor>
      <arglist>(int &amp;m, int &amp;n) const </arglist>
    </member>
    <member kind="function">
      <type>Outline</type>
      <name>getOutline</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a7fb60ca39730d2387b299be9365a8f68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>aeaa72cb6fd7b7d7a29c80f523d789e81</anchor>
      <arglist>(Outline)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OutlineMask</type>
      <name>calcMask</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a0905d399ddf583cb8e37a13eb5de3eee</anchor>
      <arglist>(Outline)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixOutline</type>
      <name>calcFromSize</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a9d78bc1aa9468cc6fd3dd3bd338cf9cc</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OutlineMask</type>
      <name>AnyOutline</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a5ac0bc4486adb0aed23aaddcc36fda8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const OutlineMask</type>
      <name>UncommittedOutline</name>
      <anchorfile>classSimTK_1_1MatrixOutline.html</anchorfile>
      <anchor>a99243e6ac3659eab1a210c8d3c229fe0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::MatrixOutline::Mask</name>
    <filename>structSimTK_1_1MatrixOutline_1_1Mask.html</filename>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>structSimTK_1_1MatrixOutline_1_1Mask.html</anchorfile>
      <anchor>aa8764db13a46367bb09bea685c8ef011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>structSimTK_1_1MatrixOutline_1_1Mask.html</anchorfile>
      <anchor>a35ed656cd5e9695ebc32e178b826d364</anchor>
      <arglist>(OutlineMask mask)</arglist>
    </member>
    <member kind="function">
      <type>Mask &amp;</type>
      <name>setToUncommitted</name>
      <anchorfile>structSimTK_1_1MatrixOutline_1_1Mask.html</anchorfile>
      <anchor>a719c1ec3a0570e051b0992fdf69642de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncommitted</name>
      <anchorfile>structSimTK_1_1MatrixOutline_1_1Mask.html</anchorfile>
      <anchor>a08889e7810b35761b34846224f85885e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfiedBy</name>
      <anchorfile>structSimTK_1_1MatrixOutline_1_1Mask.html</anchorfile>
      <anchor>ad3886cd6a3088a9803aa1b283130a0df</anchor>
      <arglist>(const MatrixOutline &amp;actual) const </arglist>
    </member>
    <member kind="variable">
      <type>OutlineMask</type>
      <name>outline</name>
      <anchorfile>structSimTK_1_1MatrixOutline_1_1Mask.html</anchorfile>
      <anchor>a6ce9818212964efccbe4f0351878da73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCondition</name>
    <filename>classSimTK_1_1MatrixCondition.html</filename>
    <class kind="struct">SimTK::MatrixCondition::Mask</class>
    <member kind="enumeration">
      <name>Condition</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a2e2351b735b209278190c25fe1f10664</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownCondition</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a2e2351b735b209278190c25fe1f10664accccdecb3d8cdacf9f65da5817d6999b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Orthogonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a2e2351b735b209278190c25fe1f10664af836c105aaf94ede97a2b086c4c82fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PositiveDefinite</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a2e2351b735b209278190c25fe1f10664a95260653d0125a8327963cea5d10fe7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WellConditioned</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a2e2351b735b209278190c25fe1f10664a30462ba596a8049d8a96a1a31c345725</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullRank</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a2e2351b735b209278190c25fe1f10664ab16f7c8883887e8a39ba9c3556f72f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Singular</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a2e2351b735b209278190c25fe1f10664ac14f5e846cb124a82ecd20ef9a0d1308</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Diagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a6951237018b6081e5ae676e127af4274</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a6951237018b6081e5ae676e127af4274af0d8c079272a3f59413ed898ec201d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZeroDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a6951237018b6081e5ae676e127af4274a822811052d676a18787faf370f9653b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a6951237018b6081e5ae676e127af4274a61ffbacb4f4f5062613fdfbe3ca15785</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a6951237018b6081e5ae676e127af4274a21fee39e969ad2620a8b4eefbd4023c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImaginaryDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a6951237018b6081e5ae676e127af4274a4a0546d6eaaa24eae71528c7e6d3c69a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>ConditionMask</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>ae267184af0cd1265fd79947c6b20a9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>DiagonalMask</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a289a3f72996b998b623b11d45c2c1f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>aa26dc9c22095ff189c875f67d7bafc21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixCondition</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a90cb40d910eae134bbc767f1b17d0f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixCondition</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a3b722ab2313c5014828ce3bac2a10328</anchor>
      <arglist>(Condition cond, Diagonal diag=UnknownDiagonal)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCondition &amp;</type>
      <name>setToNone</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a43291b9112fa46d831d120709b8eeda4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mask</type>
      <name>mask</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a2bc36c14569e89503e38f33de8db46e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Condition</type>
      <name>getCondition</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a4954a0f7eb2286616b8647afc0b44005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Diagonal</type>
      <name>getDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a6e6759e9e1b3e7cc9f0c94e6a2df0660</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixCondition &amp;</type>
      <name>setCondition</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a4ba7e5a49fc057050fea97126b36aa7e</anchor>
      <arglist>(Condition c)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCondition &amp;</type>
      <name>setDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a1fd8b76d3b64dc85512cc5b956f781dc</anchor>
      <arglist>(Diagonal d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>abd4f8ff89e828f7ddd3d132b117c8d5b</anchor>
      <arglist>(Condition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>ae1922b443314946211e7e38dcb0d0990</anchor>
      <arglist>(Diagonal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConditionMask</type>
      <name>calcMask</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a7a7d60834d21db12b81413b1a39423a2</anchor>
      <arglist>(Condition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiagonalMask</type>
      <name>calcMask</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>af3b509e71d438392e8ea14336c7de911</anchor>
      <arglist>(Diagonal)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ConditionMask</type>
      <name>AnyCondition</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a5c217a00d4c848715eaae288082b66cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ConditionMask</type>
      <name>UncommittedCondition</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>ae9ede243aae0e68fd985e881b156a3c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DiagonalMask</type>
      <name>AnyDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>ad534daf52f425d880308d7ef270a9fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DiagonalMask</type>
      <name>UncommittedDiagonal</name>
      <anchorfile>classSimTK_1_1MatrixCondition.html</anchorfile>
      <anchor>a7e2a0950ce09b57529db16634a0c7c19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::MatrixCondition::Mask</name>
    <filename>structSimTK_1_1MatrixCondition_1_1Mask.html</filename>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>structSimTK_1_1MatrixCondition_1_1Mask.html</anchorfile>
      <anchor>a1d8af4fba3accfd0855fa6f553401df7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>structSimTK_1_1MatrixCondition_1_1Mask.html</anchorfile>
      <anchor>a80d01dfe0cc84556d02db25415114877</anchor>
      <arglist>(ConditionMask cmask, DiagonalMask dmask)</arglist>
    </member>
    <member kind="function">
      <type>Mask &amp;</type>
      <name>setToUncommitted</name>
      <anchorfile>structSimTK_1_1MatrixCondition_1_1Mask.html</anchorfile>
      <anchor>a7b40a6c8615d34c1c3ad08169f170688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncommitted</name>
      <anchorfile>structSimTK_1_1MatrixCondition_1_1Mask.html</anchorfile>
      <anchor>a1681ce812bcd6f3ddd88aaacfdddbb49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfiedBy</name>
      <anchorfile>structSimTK_1_1MatrixCondition_1_1Mask.html</anchorfile>
      <anchor>a65ad3924c8b87e60d29a4511f0b77606</anchor>
      <arglist>(const MatrixCondition &amp;actual) const </arglist>
    </member>
    <member kind="variable">
      <type>ConditionMask</type>
      <name>condition</name>
      <anchorfile>structSimTK_1_1MatrixCondition_1_1Mask.html</anchorfile>
      <anchor>a2f9235ec883bc4e8ff4c51ff76152427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DiagonalMask</type>
      <name>diagonal</name>
      <anchorfile>structSimTK_1_1MatrixCondition_1_1Mask.html</anchorfile>
      <anchor>ac9597c35e65cc9a46bc090210350851e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCharacter</name>
    <filename>classSimTK_1_1MatrixCharacter.html</filename>
    <class kind="class">SimTK::MatrixCharacter::LapackFull</class>
    <class kind="class">SimTK::MatrixCharacter::Mask</class>
    <class kind="class">SimTK::MatrixCharacter::RowVector</class>
    <class kind="class">SimTK::MatrixCharacter::Vector</class>
    <member kind="function">
      <type></type>
      <name>MatrixCharacter</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a9ccc626f37c9b41895139f55dcce634f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setToNone</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a9fd06fc8f4494493629c173b4bbca39f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a900a218c5ecd8bd0070c81b4a15859d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>ac831b56379cf666642b1fc45e8274688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; int, int &gt;</type>
      <name>getSize</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a325f7bdc068c65fa335aad7d63a8ffc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>nelt</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a717648ff665ca48fa8958d6d01fb6b20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLowerBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a20adb31b20c9a7acd052587c154f696e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpperBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a51863ccc3116c20ec3cae70363621fbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; int, int &gt;</type>
      <name>getBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>ae60430682336a97f90a922919b5221cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixStructure &amp;</type>
      <name>getStructure</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a14161ca80c435e796fbab0f24f18affb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixStorage &amp;</type>
      <name>getStorage</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>aff94dc7b7a0eccd0dc73a9e27fa812af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixOutline &amp;</type>
      <name>getOutline</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>ab754de1840ed3209854ecc5a17a5f772</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixCondition &amp;</type>
      <name>getCondition</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>ae55b2049d41646ab923410ca22a46fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixStructure &amp;</type>
      <name>updStructure</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a060617b7a973017a9039a4b404826a1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixStorage &amp;</type>
      <name>updStorage</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>ae11ca5a6be64a7a20aeca7e62f8fa679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixOutline &amp;</type>
      <name>updOutline</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>ad1040580ed80ed034257218d7418d9db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixCondition &amp;</type>
      <name>updCondition</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a506676eca4b3b1fcb71138f4b23aaf69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setStructure</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>ae58351eade8632b1e74538c01f7a46fe</anchor>
      <arglist>(const MatrixStructure &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setStorage</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a58744774f8f7a93974b5f3038ba91ef6</anchor>
      <arglist>(const MatrixStorage &amp;sa)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setOutline</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a11883399e61887f29d3ff17b1ef13f1c</anchor>
      <arglist>(const MatrixOutline &amp;oa)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setCondition</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a236994ce8af443950bdc24940ca89611</anchor>
      <arglist>(const MatrixCondition &amp;ca)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setActualSize</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a9a121313d030898fb6d9b2a8dd299211</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setActualNumRows</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>aa9b5b02933bf65479430e65725f79cfe</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setActualNumCols</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a8b7b97fee88bc922e7e864a9b2904dfa</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a8d0fcc7f6fd7f4d3554e4f397294de97</anchor>
      <arglist>(int lb, int ub)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setLowerBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a31aae239ac0684b7252b3bbd128dd131</anchor>
      <arglist>(int lb)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter &amp;</type>
      <name>setUpperBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a380992fdf986d9b001fc4e8b1160462c</anchor>
      <arglist>(int ub)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MatrixCharacter</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a48805edfea4538dd92fa8467f703d1a9</anchor>
      <arglist>(int m, int n, int lb, int ub, MatrixStructure structure, MatrixStorage storage, MatrixCondition condition)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nr</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>ad52333b0fb1910f2808789c94d6cdfef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nc</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a3373fee8d6d81a5cdc9fe57dba75e381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lband</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a48f3d8063baf4b5510a6a9298b11ae0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>uband</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a57dcb296ae34a2e223b35c6d9d505b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixStructure</type>
      <name>structure</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a9fef22d16e28e3b641d555600ddef43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixStorage</type>
      <name>storage</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a1a761741e0c406b69f0089995d7d501b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixOutline</type>
      <name>outline</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>abb5718b63ad22cbe2bbc722a5f2b8996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixCondition</type>
      <name>condition</name>
      <anchorfile>classSimTK_1_1MatrixCharacter.html</anchorfile>
      <anchor>a96b9be3457fde28b794c17057d398150</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCharacter::LapackFull</name>
    <filename>classSimTK_1_1MatrixCharacter_1_1LapackFull.html</filename>
    <base>SimTK::MatrixCharacter</base>
    <member kind="function">
      <type></type>
      <name>LapackFull</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1LapackFull.html</anchorfile>
      <anchor>a99073fc6b1bfbd8e8cdd7451c099caaf</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCharacter::Mask</name>
    <filename>classSimTK_1_1MatrixCharacter_1_1Mask.html</filename>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>SizeMask</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a8962cf6bf45641dcd923add17e5d9436</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mask</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a5f147b4e65fa29a0461fc119dfae7577</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizeable</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a3ee04ef9c1c2fede603413dbd613ef3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullyResizeable</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a496f08c630f579465fc228ea0f211f8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumRowsLocked</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>aa0a7d606210e32cc75f057a78af9a9e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumColsLocked</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>ae303609e618f1cd4253a085dc7afd5e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumRowsMask</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>ae7d2d115d48426e947ea9033345c5752</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumColsMask</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a1d05adc4937c33f364e7088e0542e9dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getLowerBandwidthMask</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>ac6461dbae29bd1130301cc4fdbd7781f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getUpperBandwidthMask</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a9f938773435a1809c10d56ab0a671e64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultNumRows</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a4517897fd38cd175cfd1529dbfb8a582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultNumCols</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>abcc1fd1d91c999b5ce7c7c906a09f062</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerBandwidthLocked</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>adf66468ecdc7fcd29b42de426089c075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperBandwidthLocked</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a08a803f7f0a43baec7a2241a029dbf50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultLowerBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>af1662a7b973d8cd81c30c37f84980a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultUpperBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>ab97285a6b31068120329ea0a8eea8e67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mask &amp;</type>
      <name>setToUncommitted</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>adef2ffad277d658f07cfae6e50c4eba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncommitted</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>ab98255c33249b766b7bc802c2bd122aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfiedBy</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>acf7b805c47572891fad0c1296e8d79d9</anchor>
      <arglist>(const MatrixCharacter &amp;actual) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSizeOK</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a802c04d53faa3ea57efcc0c7bfeecaa3</anchor>
      <arglist>(int m, int n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBandwidthOK</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a5387a134a75f6c0cf0503f25c04c4b3d</anchor>
      <arglist>(int lower, int upper) const </arglist>
    </member>
    <member kind="variable">
      <type>SizeMask</type>
      <name>nr</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a0d0d9a3793e9fabb0e7267ce326d8a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SizeMask</type>
      <name>nc</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a4d8f3aee0358c596d7b04d01511e9fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SizeMask</type>
      <name>lband</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a1d5af28dcb29699aef354ba3e9f34f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SizeMask</type>
      <name>uband</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a654ed9c43208784fe04c5fa7c82b0e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixStructure::Mask</type>
      <name>structure</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a64d80351cc4c3127c59dc0cacc04b776</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixStorage::Mask</type>
      <name>storage</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a69b1f6669488baf4d82d6534aeb98697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixOutline::Mask</type>
      <name>outline</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>aab568e3ec72fa45d544b5af0c07bcf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixCondition::Mask</type>
      <name>condition</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a441ea782a335f866cf2e109004e8bebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SizeMask</type>
      <name>SizeUncommitted</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>aa4d48c65fdd4e081efc9ea3019e1290c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MatrixCommitment</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Mask.html</anchorfile>
      <anchor>a363fe0e0db7e983ce052c7ba7ac7d1c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCharacter::RowVector</name>
    <filename>classSimTK_1_1MatrixCharacter_1_1RowVector.html</filename>
    <base>SimTK::MatrixCharacter</base>
    <member kind="function">
      <type></type>
      <name>RowVector</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1RowVector.html</anchorfile>
      <anchor>abbfaf0add5850deceff31e169223e3c9</anchor>
      <arglist>(int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCharacter::Vector</name>
    <filename>classSimTK_1_1MatrixCharacter_1_1Vector.html</filename>
    <base>SimTK::MatrixCharacter</base>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSimTK_1_1MatrixCharacter_1_1Vector.html</anchorfile>
      <anchor>a65fe58b73c271df9b397b47d6ee87b16</anchor>
      <arglist>(int m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCommitment</name>
    <filename>classSimTK_1_1MatrixCommitment.html</filename>
    <class kind="class">SimTK::MatrixCommitment::Hermitian</class>
    <class kind="class">SimTK::MatrixCommitment::RowVector</class>
    <class kind="class">SimTK::MatrixCommitment::SkewHermitian</class>
    <class kind="class">SimTK::MatrixCommitment::SkewSymmetric</class>
    <class kind="class">SimTK::MatrixCommitment::Symmetric</class>
    <class kind="class">SimTK::MatrixCommitment::Triangular</class>
    <class kind="class">SimTK::MatrixCommitment::Vector</class>
    <member kind="function">
      <type></type>
      <name>MatrixCommitment</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a1cb3d01d1503a18e84e28a6b49335950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixCommitment</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a70fba8c3190d677b8858689709091d6f</anchor>
      <arglist>(const MatrixStructure &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitSize</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aaca712c4429d40987c398f4c235e5996</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitNumRows</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ae013a447627737aa88a6a769a4180a06</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitNumCols</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a23f2684aebc042b3eb9cf485f77e8e6b</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a4f315bbee0c0e3e43131eff7c0d30919</anchor>
      <arglist>(int lb, int ub)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitLowerBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ad31b25b960253fdccb993870b163ab5b</anchor>
      <arglist>(int lb)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitUpperBandwidth</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a76c066dade209aac8d053f7822bfb51e</anchor>
      <arglist>(int ub)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitStructure</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a23460497ea85e50c948ae0951692df2b</anchor>
      <arglist>(const MatrixStructure &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitStorage</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a9c461158ec668792743941a69c8772eb</anchor>
      <arglist>(const MatrixStorage &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitOutline</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ac4b70b0734a9c5f9f1ed8e07969f3e5a</anchor>
      <arglist>(const MatrixOutline &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCommitment &amp;</type>
      <name>commitCondition</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a5ae393361314559aab113d2b395e2c8e</anchor>
      <arglist>(const MatrixCondition &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter</type>
      <name>calcDefaultCharacter</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a7a193561193c3d81e1a63797a9f147eb</anchor>
      <arglist>(int minNumRows, int minNumCols) const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixStructure &amp;</type>
      <name>getStructureCommitment</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a856dfb5d3ff10bd94e56dfad748d2a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixStorage &amp;</type>
      <name>getStorageCommitment</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aa5d9e88c9d64c117f877decddfa467e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixOutline &amp;</type>
      <name>getOutlineCommitment</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ad5039dc35443182e4732b411152e0f7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixCondition &amp;</type>
      <name>getConditionCommitment</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a1c350716e7edd9f08af1847e0a8db544</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixStructure::Mask &amp;</type>
      <name>getStructureMask</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a1fd4d6f1cb53c54b6546d83dff40594d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixStorage::Mask &amp;</type>
      <name>getStorageMask</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aa1ec798d828982ee254b296cfdd6222e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixOutline::Mask &amp;</type>
      <name>getOutlineMask</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a5539ac1bb4ece4df040bdf553b1afcda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixCondition::Mask &amp;</type>
      <name>getConditionMask</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aa15b4287c44024e9afd05614657fba01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter::Mask::SizeMask</type>
      <name>getNumRowsMask</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ac48248ffd36511a667e874f9bc0d4476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter::Mask::SizeMask</type>
      <name>getNumColsMask</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>acb3185762919f924bb71f4080ad31833</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter::Mask::SizeMask</type>
      <name>getLowerBandwidthMask</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ab47d6237b2bcc765fac16f9c80566f6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixCharacter::Mask::SizeMask</type>
      <name>getUpperBandwidthMask</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aec50d0691eb30034196459c7b066de36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultNumRows</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a17d64d5a0364e60914886bb29b5a7a4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultNumCols</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a92f6b96944e764cce7ac1678efe1afde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSizeOK</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a94e0e0ec52e43431167524006ca3e0e3</anchor>
      <arglist>(int m, int n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSizeOK</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aab9f5e50629bceae88497e3b23a79341</anchor>
      <arglist>(const std::pair&lt; int, int &gt; &amp;mn) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBandwidthOK</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ac6af0d9cf0409b311a04d3932a16a0c0</anchor>
      <arglist>(int lower, int upper) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfiedBy</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a63e31ea66f42277c424ab798dbf18639</anchor>
      <arglist>(const MatrixCharacter &amp;actual) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStructureOK</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a6719c18802178f91179758037d5ba78a</anchor>
      <arglist>(const MatrixStructure &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStorageOK</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a7c8066b04ee326fb6242f3568f03876a</anchor>
      <arglist>(const MatrixStorage &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutlineOK</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aacca7832edf1460c1f36c0f7d7a0991c</anchor>
      <arglist>(const MatrixOutline &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConditionOK</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>abc82edc38d5a5bd9a421825994cab952</anchor>
      <arglist>(const MatrixCondition &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizeable</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a13faf585d77b6b3bb0a6cc4582a52715</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullyResizeable</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a9717306b1509a18902c9e971eba4fd87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumRowsLocked</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a962e81f9a476b8ad078f4394dfb9ff79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumColsLocked</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>af9eddd80ad4d2c50e95b543577586a99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStructureCommitted</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aa49298da5d68484be56344ecaf0f1502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStorageCommitted</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a1e076816c296f200ef7e10a42f9589ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutlineCommitted</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a03c1fef22c231908f2f69eca19e26660</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConditionCommitted</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>aee83039c7ab6112ed8efbfc21d504381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ab151820ce8e4ba52fc935c193028c571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MatrixCommitment</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ad79b55bd25a94eb602adb898245ada84</anchor>
      <arglist>(const MatrixStructure &amp;structure, const MatrixStorage &amp;storage, const MatrixOutline &amp;outline, const MatrixCondition &amp;condition)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixStructure</type>
      <name>structure</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>ac2dad914cfbb5b13a8325b06d93a56eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixStorage</type>
      <name>storage</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a444d419e5179e2eb00c41d9d06761e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixOutline</type>
      <name>outline</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a7a81a713bf89dbec1390332ae8b2a6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixCondition</type>
      <name>condition</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a13676fdf41e0ccde2e9e80c7ccad5138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixCharacter::Mask</type>
      <name>masks</name>
      <anchorfile>classSimTK_1_1MatrixCommitment.html</anchorfile>
      <anchor>a4fd53b7c9ed3130fe32a3b8c752f052d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCommitment::Hermitian</name>
    <filename>classSimTK_1_1MatrixCommitment_1_1Hermitian.html</filename>
    <base>SimTK::MatrixCommitment</base>
    <member kind="function">
      <type></type>
      <name>Hermitian</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1Hermitian.html</anchorfile>
      <anchor>a28de013ff295ecf31abc8a78f91e0142</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCommitment::RowVector</name>
    <filename>classSimTK_1_1MatrixCommitment_1_1RowVector.html</filename>
    <base>SimTK::MatrixCommitment</base>
    <member kind="function">
      <type></type>
      <name>RowVector</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1RowVector.html</anchorfile>
      <anchor>a9a1bfd7911e170eda104a7f9f97c8e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RowVector</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1RowVector.html</anchorfile>
      <anchor>a18e13c08756f0385b93c2090b56b9ecb</anchor>
      <arglist>(int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCommitment::SkewHermitian</name>
    <filename>classSimTK_1_1MatrixCommitment_1_1SkewHermitian.html</filename>
    <base>SimTK::MatrixCommitment</base>
    <member kind="function">
      <type></type>
      <name>SkewHermitian</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1SkewHermitian.html</anchorfile>
      <anchor>a0d528bf0b93f9d8b7e479c8a1a09606d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCommitment::SkewSymmetric</name>
    <filename>classSimTK_1_1MatrixCommitment_1_1SkewSymmetric.html</filename>
    <base>SimTK::MatrixCommitment</base>
    <member kind="function">
      <type></type>
      <name>SkewSymmetric</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1SkewSymmetric.html</anchorfile>
      <anchor>a93e30f3489b7b001bcb0306ad3b2bfe3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCommitment::Symmetric</name>
    <filename>classSimTK_1_1MatrixCommitment_1_1Symmetric.html</filename>
    <base>SimTK::MatrixCommitment</base>
    <member kind="function">
      <type></type>
      <name>Symmetric</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1Symmetric.html</anchorfile>
      <anchor>accd8634d3fb501f91e537d5dbff26456</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCommitment::Triangular</name>
    <filename>classSimTK_1_1MatrixCommitment_1_1Triangular.html</filename>
    <base>SimTK::MatrixCommitment</base>
    <member kind="function">
      <type></type>
      <name>Triangular</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1Triangular.html</anchorfile>
      <anchor>ac05935875bca17463952503cb4050c58</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixCommitment::Vector</name>
    <filename>classSimTK_1_1MatrixCommitment_1_1Vector.html</filename>
    <base>SimTK::MatrixCommitment</base>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1Vector.html</anchorfile>
      <anchor>adadd327cd9964bc837792640d7a413b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classSimTK_1_1MatrixCommitment_1_1Vector.html</anchorfile>
      <anchor>aca1b22a857fe7da8a8939f8348190bcd</anchor>
      <arglist>(int m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixHelper</name>
    <filename>classSimTK_1_1MatrixHelper.html</filename>
    <templarg>S</templarg>
    <class kind="class">SimTK::MatrixHelper::DeepCopy</class>
    <class kind="class">SimTK::MatrixHelper::DiagonalView</class>
    <class kind="class">SimTK::MatrixHelper::ShallowCopy</class>
    <class kind="class">SimTK::MatrixHelper::TransposeView</class>
    <member kind="typedef">
      <type>CNT&lt; S &gt;::Number</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a208ae90629fca1e5020b9e743d089774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; S &gt;::StdNumber</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a23a457ceba60d48f7e18a30b4a96decc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; S &gt;::Precision</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a8d9473e2a08da6d8121a647b486d7b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ab201165ee91c16d75ad24224abf08055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>aa2d495dee9d9c111777bf8f6b8f8d493</anchor>
      <arglist>(int esz, int cppEsz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a354e3208f3925da460d6b7af47a5968f</anchor>
      <arglist>(int esz, int cppEsz, const MatrixCommitment &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a758de91c4ab1febbd11349a5b40a86a4</anchor>
      <arglist>(int esz, int cppEsz, const MatrixCommitment &amp;, int m, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>afc1149a834af109824eb29344bcaa45d</anchor>
      <arglist>(const MatrixCommitment &amp;, const MatrixHelper &amp;source, const DeepCopy &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a74b535f1c99544feed671901094fdd78</anchor>
      <arglist>(const MatrixCommitment &amp;, const MatrixHelper&lt; typename CNT&lt; S &gt;::TNeg &gt; &amp;source, const DeepCopy &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a9fdcc8583a48d05e56ab4bb5d6a5eab8</anchor>
      <arglist>(int esz, int cppEsz, const MatrixCommitment &amp;, const MatrixCharacter &amp;, int spacing, const S *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ac5dcadcd171aff6a86ebaa221d65adb0</anchor>
      <arglist>(int esz, int cppEsz, const MatrixCommitment &amp;, const MatrixCharacter &amp;, int spacing, S *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a30f5ffaf859e529f50d68157280ffac7</anchor>
      <arglist>(const MatrixCommitment &amp;, const MatrixHelper &amp;, int i, int j, int nrow, int ncol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a0337ac7058cd183c7b813514c24ade84</anchor>
      <arglist>(const MatrixCommitment &amp;, MatrixHelper &amp;, int i, int j, int nrow, int ncol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a456a73329763f1a3aeca52cb60a5fe3a</anchor>
      <arglist>(const MatrixCommitment &amp;, const MatrixHelper&lt; typename CNT&lt; S &gt;::THerm &gt; &amp;, const TransposeView &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>aa42154b6931e08b13eea1ad0e164d87a</anchor>
      <arglist>(const MatrixCommitment &amp;, MatrixHelper&lt; typename CNT&lt; S &gt;::THerm &gt; &amp;, const TransposeView &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a9696432833dd01f3aa7649905b0e8213</anchor>
      <arglist>(const MatrixCommitment &amp;, const MatrixHelper &amp;, const DiagonalView &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a6a4cc25ba0a5f382b4627eea05cd45b7</anchor>
      <arglist>(const MatrixCommitment &amp;, MatrixHelper &amp;, const DiagonalView &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a56fd1eb419a5de6a7f6420e0e8ea3e1b</anchor>
      <arglist>(const MatrixCommitment &amp;, const MatrixHelper &amp;, int n, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ad55bd632a2fb4aa784a0c013a64eb48a</anchor>
      <arglist>(const MatrixCommitment &amp;, MatrixHelper &amp;, int n, const int *indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a941aae5d3aa719f966df493d81612119</anchor>
      <arglist>(const MatrixCommitment &amp;mc, const MatrixHelper &amp;h, const Array_&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a08d03c3298ab8c7c74ca3074e65f41d7</anchor>
      <arglist>(const MatrixCommitment &amp;mc, MatrixHelper &amp;h, const Array_&lt; int &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a714151566d54b039e0e60d0ddf9d1757</anchor>
      <arglist>(const MatrixCommitment &amp;, const MatrixHelper &amp;source, const ShallowCopy &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a7a2e6d2682a6f4d052e917fa479fb387</anchor>
      <arglist>(const MatrixCommitment &amp;, MatrixHelper &amp;source, const ShallowCopy &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MatrixHelper &amp;</type>
      <name>copyAssign</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ae580f021ec6dbc13800ddcfc40989d63</anchor>
      <arglist>(const MatrixHelper &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>MatrixHelper &amp;</type>
      <name>negatedCopyAssign</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a265fe7adb86a3231479c5e4114f28f96</anchor>
      <arglist>(const MatrixHelper&lt; typename CNT&lt; S &gt;::TNeg &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MatrixHelper &amp;</type>
      <name>readOnlyViewAssign</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a229d6e36b463c651c49783af5c59895b</anchor>
      <arglist>(const MatrixHelper &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>MatrixHelper &amp;</type>
      <name>writableViewAssign</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a518e8f60face3eeaf31033f096b18767</anchor>
      <arglist>(MatrixHelper &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a3a7b5e604100802e4c8ab3b3fe92d7a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClear</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a7257f22aeb6ca20cc945c3bc0b3bb73f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const S *</type>
      <name>getElt</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ad8d419196d8992be5ecf10f1bbf7ad29</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>updElt</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a949af7b2295ef662a6f11a77e0722354</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const S *</type>
      <name>getElt</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ae8b606f8e2cab6a6706c09bcebd4448a</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>updElt</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a70841afdf01e2f0934c0c0a93dee686b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAnyElt</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ab2d0a2efa81b947f01f34ba7a2307b15</anchor>
      <arglist>(int i, int j, S *value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAnyElt</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a4a825c1f090b4673ae5351e1ceab4606</anchor>
      <arglist>(int i, S *value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sum</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>af9d85fd2087bbbaa8d8367af626f4371</anchor>
      <arglist>(S *eltp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>colSum</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a0eb654122e35ec8c6957394ee84975ae</anchor>
      <arglist>(int j, S *eltp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rowSum</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>abb8a5090304f0db655ff744fd878ddfd</anchor>
      <arglist>(int i, S *eltp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIn</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ad9fbb7b3c60b8628a2ba351e64138292</anchor>
      <arglist>(const MatrixHelper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addIn</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a4d460e313bc425e413dbbd12d2003930</anchor>
      <arglist>(const MatrixHelper&lt; typename CNT&lt; S &gt;::TNeg &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subIn</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a551b6f71e5d18e31917730b18e6ee700</anchor>
      <arglist>(const MatrixHelper &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subIn</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ad6b83db1665ea2f33c6cd25e3e06408e</anchor>
      <arglist>(const MatrixHelper&lt; typename CNT&lt; S &gt;::TNeg &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWith</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a45c5c0ed9a8c13e3d02704b225cfa293</anchor>
      <arglist>(const S *eltp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyInByRowsFromCpp</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>abd565f8ad32dd6f28154b37a76a590b1</anchor>
      <arglist>(const S *elts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillWithScalar</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>aec4bf6aaba685de089e5d50535d86d51</anchor>
      <arglist>(const StdNumber &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleBy</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ab3f2d0f549fa46e36f7cdb176cb7ea18</anchor>
      <arglist>(const StdNumber &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertInPlace</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>aa77fda1b2231333230e152d5f1bf9212</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a2f26e284ab53201d5bb8702fd34ed21e</anchor>
      <arglist>(const char *msg=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matmul</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ab85ac6dd80b079f78037618d2256a7f7</anchor>
      <arglist>(const StdNumber &amp;beta, const StdNumber &amp;alpha, const MatrixHelper&lt; SA &gt; &amp;A, const MatrixHelper&lt; SB &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a6b397cba689654b5de78ef4e5a85c0a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a4ba32d315a34b68388f02bb347e0e594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>nelt</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a07398bcad4f47c6b87bc036a8ea1df74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a014b0bfa0d0bc74aaa25ee40c1008758</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a7a0a2c8e88b992217efedbf0b560955a</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeKeep</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a50e51bb3c20f525223a85833777150e2</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockShape</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>ae069034cc0222d3748e2b07757db2f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlockShape</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>aa665589b20912b0ab211cc2fc28a9e21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MatrixCommitment &amp;</type>
      <name>getCharacterCommitment</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>aebb1aac58d7ad71db7eb04f6150f9027</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixCharacter &amp;</type>
      <name>getMatrixCharacter</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a1f84060e74d34b96848468e624bcae87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commitTo</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a89d809f3cf8ec38cc539c873f1be7827</anchor>
      <arglist>(const MatrixCommitment &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasContiguousData</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a21d1b67707ddf4b7c7f994224b203f5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ptrdiff_t</type>
      <name>getContiguousDataLength</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a195367e85888e80faa519494f86d7ec4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const S *</type>
      <name>getContiguousData</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a68897b16ab92c0954297bcd9b2c6fd4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>S *</type>
      <name>updContiguousData</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a34ee35179eb7163ea003b9953a93a7f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceContiguousData</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>aedb2f313993a262c68f93255eb5d0ebd</anchor>
      <arglist>(S *newData, ptrdiff_t length, bool takeOwnership)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceContiguousData</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>aafaff348746c9bca66d24b22b9f39980</anchor>
      <arglist>(const S *newData, ptrdiff_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapOwnedContiguousData</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a96e84b49fd8cabc13c1e55a9dfb6396e</anchor>
      <arglist>(S *newData, ptrdiff_t length, S *&amp;oldData)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixHelperRep&lt; S &gt; &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a48a5239f7b65c9afb1ca76540402bdb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixHelperRep&lt; S &gt; &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a25084fa808b8c46a7524ac463ad18d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRep</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a6bfb2fd641b8ca826766502f41d7fc1b</anchor>
      <arglist>(MatrixHelperRep&lt; S &gt; *hrep)</arglist>
    </member>
    <member kind="function">
      <type>MatrixHelperRep&lt; S &gt; *</type>
      <name>stealRep</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a62a02ad801a8bbbb19ca05918831e1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteRepIfOwner</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a1fa3e22399c094c4e1554fd5d9f68914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceRep</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a53b5fed51d0b5a15b087059ffb81646f</anchor>
      <arglist>(MatrixHelperRep&lt; S &gt; *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHelper</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a7fb37afbb87943958c5b310d68dc77fe</anchor>
      <arglist>(MatrixHelperRep&lt; S &gt; *)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MatrixHelper&lt; typename CNT&lt; S &gt;::TNeg &gt;</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>af09baf932e251bcae5cbe9c1786ca0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MatrixHelper&lt; typename CNT&lt; S &gt;::THerm &gt;</name>
      <anchorfile>classSimTK_1_1MatrixHelper.html</anchorfile>
      <anchor>a47253fecf01914c0eec5c142c2202fcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixHelper::DeepCopy</name>
    <filename>classSimTK_1_1MatrixHelper_1_1DeepCopy.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixHelper::DiagonalView</name>
    <filename>classSimTK_1_1MatrixHelper_1_1DiagonalView.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixHelper::ShallowCopy</name>
    <filename>classSimTK_1_1MatrixHelper_1_1ShallowCopy.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::MatrixHelper::TransposeView</name>
    <filename>classSimTK_1_1MatrixHelper_1_1TransposeView.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorationGenerator</name>
    <filename>classSimTK_1_1DecorationGenerator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>generateDecorations</name>
      <anchorfile>classSimTK_1_1DecorationGenerator.html</anchorfile>
      <anchor>ab14aa9bd74881aa75696d8edcca74831</anchor>
      <arglist>(const State &amp;state, Array_&lt; DecorativeGeometry &gt; &amp;geometry)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecorationGenerator</name>
      <anchorfile>classSimTK_1_1DecorationGenerator.html</anchorfile>
      <anchor>a8e1ee374c2fe2787b65172c10a3c46f1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeGeometry</name>
    <filename>classSimTK_1_1DecorativeGeometry.html</filename>
    <member kind="enumeration">
      <name>Representation</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a142c12528e572a362c2b0535686cd50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DrawPoints</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a142c12528e572a362c2b0535686cd50aab7a708765dfcf4a2590a64be457bbf57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DrawWireframe</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a142c12528e572a362c2b0535686cd50aad68e0dd410181919c697926c9a2f0b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DrawSurface</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a142c12528e572a362c2b0535686cd50aab0f76349aaa0c5a9801f5da2cb2efbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DrawDefault</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a142c12528e572a362c2b0535686cd50aa536388589e8c6c6b8697fc5611c61533</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecorativeGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a08d3bc47b9ba2319c210b4f74307fc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DecorativeGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a52f0876b4d465efea4bf14b50965c9e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecorativeGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a26cbb4b2eac96982aade23a1c3cc0578</anchor>
      <arglist>(const DecorativeGeometry &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a095d8053049bdfe31953be3be2dcd37c</anchor>
      <arglist>(const DecorativeGeometry &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a4244e8c761950ac647318dad7be8be90</anchor>
      <arglist>(int bodyId)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a76a1490ecdff473a9721cbd99f97b814</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a7c7c650207ead17f9652d97e6b4b9cac</anchor>
      <arglist>(void *userRef)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a78e85935162fcbf06843c3abd1fd534c</anchor>
      <arglist>(const Transform &amp;X_BG)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>ade3f109baf107843febaa385b2af5188</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>acc4b34bfe6f971363ebc4e005c0896a3</anchor>
      <arglist>(const Vec3 &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setScale</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a2d13e1b880741f01f92f3d8358972b1a</anchor>
      <arglist>(Real scale)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>aedfe91c662dd58d963824105ddb58054</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>ac020fe0238b29709da4488d551572941</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a180373537fc86866717e96d197160459</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getResolution</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a33d045b3850a84cc06a3c1764caa1fab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a089c0ff9b36ea07e5678a95c17972acd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a8b1dec3bf7741ee07d02f14f75fcb8db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a16512306b4ef4ee2db5d960bcf453c40</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>ae7956a655a19a256f83a592f63af88f6</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a9a29d96bbea501da79677628fc3cd399</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getColor</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a0f4ba8831a09c2e3d19425fd449c3614</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a1ca597dacf429213265dc4508960fb62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a23af9f31f8f657c0db366a5c26641a8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setFaceCamera</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>af81e849060d81fd8ed1a672cfd291c3e</anchor>
      <arglist>(int shouldFace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFaceCamera</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a27543f380dd78121cca515d5fe411f00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>aabe432c78c04344546e2cbdaaeff9a88</anchor>
      <arglist>(const Representation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Representation</type>
      <name>getRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a6336f2902e31bba299d8135499f067db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>implementGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a92264820ba9f6a2dc3ba320a558956b7</anchor>
      <arglist>(DecorativeGeometryImplementation &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwnerHandle</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a5c040d26b545ba30652229d7c421b64f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyHandle</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a853e3d2cd61748270f3a0b9387b84212</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecorativeGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>ac47537bf2297e24484671c75d49fa4af</anchor>
      <arglist>(class DecorativeGeometryRep *r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRep</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>ae2dd66e6098f95f849b9c079ae55650a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorativeGeometryRep &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a3f0fedec83dfbd08fbe09a678d9ae513</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometryRep &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a21357155bd7180a04d9804459dcd5161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DecorativeGeometryRep *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1DecorativeGeometry.html</anchorfile>
      <anchor>a9af704101943c6e8b4fd858b1afd9979</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativePoint</name>
    <filename>classSimTK_1_1DecorativePoint.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativePoint</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>a8a4a148aa85ffd0917ffb832a9ba74b6</anchor>
      <arglist>(const Vec3 &amp;p=Vec3(0))</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setPoint</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>af4ec3da72124198a63b17d233e689d11</anchor>
      <arglist>(const Vec3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPoint</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>adbab4f6c13f7c344f23fa63553f7653b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>a895b5d1b29b0f7612868ae52d526b36d</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>a730963a9007c8220c73d8019b5211e93</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>ae421dfff5cd8003549f10ec989cde608</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>ad77a3aea692b1ee4e3ca9ae53a407695</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>a2fe26d51417c2a8a772639e8cda916ba</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>a0c4dfaa8034d297ade3bf6e1a871bf14</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>a05d8c925b4f5c2214a1ff45b24d952eb</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>ac11610403a84c0f5688ef691ddef14fd</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>a798a20eade4293f7d06b47c5d33123d8</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativePoint &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>a1b13f89697d083d3676eae95e30c9d93</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativePoint.html</anchorfile>
      <anchor>ad83ad39a0cb5015759c596858df75493</anchor>
      <arglist>(DecorativePoint, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeLine</name>
    <filename>classSimTK_1_1DecorativeLine.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeLine</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a1b2b4d804c18894c3adb28ee19f11fb5</anchor>
      <arglist>(const Vec3 &amp;p1=Vec3(0), const Vec3 &amp;p2=Vec3(1))</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setPoint1</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>af50a4b6c0fac851b35ceddbdbb747db7</anchor>
      <arglist>(const Vec3 &amp;p1)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setPoint2</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a69427de6715ec748272fb2ac8d99bb73</anchor>
      <arglist>(const Vec3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setEndpoints</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a31df1cf9413e67e0480b6998f2cd94cc</anchor>
      <arglist>(const Vec3 &amp;p1, const Vec3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>ab3ff8dabff5785b78f5c6bfb83ffa4e9</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a1bb5f2b8ee61e5aae7c70dc630e2ce01</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>ab16c19f58b35f235d098a39553c01f83</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a496d042c96528cf8c6ce65f6608cb385</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a9638c34f224c1ee6951f062cd95177be</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>acfc4f72d398cdfb1d00d7a47137a4b3a</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a331f57956c3a3346f4ab990ef483d2b0</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>aaf1f7cf914b161e38b544c46077287b2</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a05f5026d4677254de2c3bec5fef9d5eb</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeLine &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a73710bc0797fdc7945ee330e4c759f38</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPoint1</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a134b580a1707986bb50ccc74ca1f4007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPoint2</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a8ad777f8d71b6ee3b28f335f137672ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeLine.html</anchorfile>
      <anchor>a012c80348b6724f38f4d995563a4c7fa</anchor>
      <arglist>(DecorativeLine, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeCircle</name>
    <filename>classSimTK_1_1DecorativeCircle.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeCircle</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a5a3f77de50d3ee45ff7da7affc26c70c</anchor>
      <arglist>(Real radius=0.5)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setRadius</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a2ac506f43121e3ffd202c7140c167802</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadius</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a85ea9cb34c7c8aade1d9856e45b09e95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>ab3cb49a0d7ea9fddc911428327b5bc43</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a655036bdc023cf705ece3c68339c983b</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a1c9b0dabd35748fa2c23cc6ad7ec79e3</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a107efe7190c712871db7597f9b578d70</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a452ac20e475efe9012c2975f87773e1f</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a7f7edeee4a8199c974e4f3112683d8fa</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>acaa0fa365a2b8bc11ad151cf30e4e021</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>a9efd20822bd897b0e5ab68a35290de18</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>afe83a0f1ca7c9c12b396a7023dea3591</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCircle &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>ad49b482c2f8220e175d7e1d65fc017e2</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeCircle.html</anchorfile>
      <anchor>adbf92317612200ad445bea49f4caaaa2</anchor>
      <arglist>(DecorativeCircle, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeSphere</name>
    <filename>classSimTK_1_1DecorativeSphere.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeSphere</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a358c1583ae4b79d1b8b2fc7fd6632969</anchor>
      <arglist>(Real radius=0.5)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setRadius</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a198285609331a7782713d9c41b0ccc16</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadius</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>ab77e0f4ba312f98e73c1f37c85f6f7b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>ac7482128bf9d970b086c99b1cf4c3498</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a90ea1929f8f19d14c16272a9655be9ea</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a8ccd9692f0e1740d2262e1cfc1ea3e8f</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a9448afc8fcd2cd2fcc838b049935658b</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>ac1e29d2566e46ad3b90761dbc81a42b5</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>ac94c9d3e634982e567a573579cbb9df7</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>abac46b636d391a9128d0b55befd0266f</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a3090aae2c76eeae19b62a7087fa393b9</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a09decf59f944b3373d5c3e9f8e1854cc</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeSphere &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a228d9189c7f75587c5e33250ba429cb1</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeSphere.html</anchorfile>
      <anchor>a0e8ffe72d4674c81073fae05258c18cb</anchor>
      <arglist>(DecorativeSphere, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeEllipsoid</name>
    <filename>classSimTK_1_1DecorativeEllipsoid.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeEllipsoid</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>add651003bab0cf4bab1224ee5283e762</anchor>
      <arglist>(const Vec3 &amp;radii=Vec3(Real(0.5), Real(1/3.), Real(0.25)))</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setRadii</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a071ac86636eb3fea475d58428cbf364f</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getRadii</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a5ce7e22ec7e0d990cc2a612c9bec536a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a2bce626424997c1a4dac297cc6d2b8c9</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a2f9569e06cafe83b70c4e54c414c2ec0</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a36f78f97347ad9dfe4f1f7fd0e0a6077</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a301f7904d83267886d6d4cbc564df1cf</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a0fee51de75f01efe849d283449204062</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>abe4d13858a9893bfeced455d7bf12585</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>ac4d648c34105145a03a309ca7850a1da</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>ae129cea144c559930929c7f8c5492798</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a4a9b776c378ffcac9c38dce0e239da3c</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeEllipsoid &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>aa2aa41a366608fc818f358e974ced623</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeEllipsoid.html</anchorfile>
      <anchor>a907a8c6452011ad4c1bc331baddff43c</anchor>
      <arglist>(DecorativeEllipsoid, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeBrick</name>
    <filename>classSimTK_1_1DecorativeBrick.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeBrick</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>a4a1d83335e3f878bed76d7a933cb2216</anchor>
      <arglist>(const Vec3 &amp;halfLengths=Vec3(Real(0.5)))</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setHalfLengths</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>af5d00ed1af0ea3e71b545bfcc10595e5</anchor>
      <arglist>(const Vec3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getHalfLengths</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>a996db5a601af5a2b018eeb4b2ab6567f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>ae7524051729e6059bb7ac5ffab83f483</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>ac28635a58c38655e4a26125e6cc85878</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>a595de6b074a146f7f92577f419f200a3</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>aab8683d29fa28207b89bcdbbece31ea1</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>a7aba881c76bc1d6431b8d76b34d3471e</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>ab086dbed13d8da8a9c7e63408d1ad203</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>a0d4e85ad4aafa48c60f6725d5b8e6d73</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>a02a84e39af1b9e1a9a16392884f6dd62</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>aeb32c88abb8d869a2cb04160d6d64dbe</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeBrick &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>a9009a65158c47f00c09bd59553a88602</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeBrick.html</anchorfile>
      <anchor>a993781de21c8ba3452a6944330b9e27d</anchor>
      <arglist>(DecorativeBrick, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeCylinder</name>
    <filename>classSimTK_1_1DecorativeCylinder.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeCylinder</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>aaf8c71ae3e11906416a6661dab9e9320</anchor>
      <arglist>(Real radius=0.5, Real halfHeight=0.5)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setRadius</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a875fbc4f80e923f9dbf157d9125cdab9</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setHalfHeight</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a313c645d4cc1b44e8f1bffca02fef190</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadius</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a4f7c8a737ab2674ec17e5c39181e71ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getHalfHeight</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>acfceb0febbcfa412c056ebff1d243a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a9cf799c172323f68ae682641f20063f2</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a15a23002794c6fbe9f8688e7c10ac429</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a74d25968a02fed9ebccbc67a5987385f</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a5f0277dbe569c34b85eb572f8b75c306</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a78454cc0e2a99df0b075723e6c4bdc0e</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a56492a4f59d9a9d25db9d4fc9667cdef</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>addfe70e19fff3d4f8c547378e94f5491</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a2a573440b1f7b80324059bd9a5304802</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a71c89636c748e8fd75df6e05490af58b</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeCylinder &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>a4519db857366df28cfa3bc787e9d0d3c</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeCylinder.html</anchorfile>
      <anchor>ab53bbeb13880e53d31c0e8588bcc1803</anchor>
      <arglist>(DecorativeCylinder, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeFrame</name>
    <filename>classSimTK_1_1DecorativeFrame.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeFrame</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a87c7482b414915589dbf4d1df38d2728</anchor>
      <arglist>(Real axisLength=1)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setAxisLength</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a1caf488dce13d29a79593b88c1f8957d</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAxisLength</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a0c77bf169915bc64605067e6c0bd0d0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>ade8d928eb530b4dc8f787df9f9de5383</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a1abffacc72423c3fb9071e13a731a03d</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a20a736a951608310753bf7986a55efc8</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a89d660fad06c503e09ed4e05b6fe6d92</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a6e32e0fdb13658870f0f94911c70b2c4</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a160b2cb0e4e5af4e13cb44d112f2d2d7</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a4f608cb49e7523cdd0f9d5a4a4b5a8f8</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a1553afc8e484dfa11fdc5c8a7a375dc7</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>adb9a895927375195c4ad5c806f534765</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeFrame &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a50806860849e774a799dda8376989de6</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeFrame.html</anchorfile>
      <anchor>a75c384d722490559950118b6a09650a6</anchor>
      <arglist>(DecorativeFrame, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeText</name>
    <filename>classSimTK_1_1DecorativeText.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeText</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a5dd2e968626b57d398eaee231db48609</anchor>
      <arglist>(const std::string &amp;label=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setText</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>abd6cd11f78695fdbbbe42da46a61b18d</anchor>
      <arglist>(const std::string &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getText</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>aacda1391658d958b80997bea2f9b7e7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setIsScreenText</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>aa68a73894ccdf6479f4a334da153c69c</anchor>
      <arglist>(bool isScreen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsScreenText</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a586ba5e3c46d054ed37020dcd9bae527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a31f31383a76f025161babb07ac249fac</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a8c304ed818b596151905a8aaa58ef5b3</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>ad2076865f812c72e38253162835fbda0</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a8aec3cf5a8ce5f24d87ffad981eddf30</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a203b8df189af80dac281f10ef149b761</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>aba4d5255f494b01da13c4e9f59317558</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a7ffb7e024ab729a30d67bd5e0f85496d</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a55f14ce4e974907cf1d10507b06c6390</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>ab51be618e38278598681c257857f90e7</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeText &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>a37d90da14dd6f5034116010ab6c92d9e</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeText.html</anchorfile>
      <anchor>ab95763cc589440bba13134a91105bf18</anchor>
      <arglist>(DecorativeText, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeMesh</name>
    <filename>classSimTK_1_1DecorativeMesh.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>DecorativeMesh</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>a7d5e119325e557e4fcfcbd9052c71194</anchor>
      <arglist>(const PolygonalMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>const PolygonalMesh &amp;</type>
      <name>getMesh</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>ad08b95a53ee6b7888d0153537d96fadc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>a39d333caa3350b54da91d8bf73d61621</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>a002ce0465128cace6de9bac1671bff35</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>a4571c574ea25d4fc7737eee9f5035974</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>ae55e6c69e80f4b2c5577efe3dd218233</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>a6ec7920cd67a7f3cffb5d010a9b3233c</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>ac338948553d256a750b10864ee7631ac</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>a4c89d4a0457a640c5d88f75e3d8150ed</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>a997a006aa3ef974e896d5140b1e44e6b</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>afe34194680fcb3403104ecf9e7877b52</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>DecorativeMesh &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>aeea96f07a4516627f65d9b74e92da286</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1DecorativeMesh.html</anchorfile>
      <anchor>a4e6f4c146be9c424f23c9d8e872dd38c</anchor>
      <arglist>(DecorativeMesh, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Decorations</name>
    <filename>classSimTK_1_1Decorations.html</filename>
    <base>SimTK::DecorativeGeometry</base>
    <member kind="function">
      <type></type>
      <name>Decorations</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>aa894e8aa7c2866432293fbb7aea09500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Decorations</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>a9c0f35e438217915dbf4afa368abea44</anchor>
      <arglist>(const DecorativeGeometry &amp;decoration)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>addDecoration</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>ab617e0a43c0dc89fb7a60848142131fb</anchor>
      <arglist>(const DecorativeGeometry &amp;decoration)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>addDecoration</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>aac5a5b330a60c7985fd2f4b9034354d6</anchor>
      <arglist>(const Transform &amp;placement, const DecorativeGeometry &amp;decoration)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDecorations</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>a3da0e6bb524647c3b4aef4f591e6d843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DecorativeGeometry &amp;</type>
      <name>getDecoration</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>aa9c626cc572971bcb9bfb2fa51c7716a</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setBodyId</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>ae8cdf4c81832033c63786faa097f626c</anchor>
      <arglist>(int b)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setIndexOnBody</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>acbcd5826bafea759bedd4db0232bb87b</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setUserRef</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>a5aa05164b48e142ee264f3b1e3a8efcd</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>ae552cdacb4d93d22756562c0f06c5387</anchor>
      <arglist>(const Transform &amp;X_BD)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setResolution</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>ac408c69a3cd5fa6870f764d38da1ee30</anchor>
      <arglist>(Real r)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setScaleFactors</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>ac980d5443e7ebc37ff2c3e4ab6b64885</anchor>
      <arglist>(const Vec3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setColor</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>a47cdcdc3de3bc40b2cc0a12d5dba9f77</anchor>
      <arglist>(const Vec3 &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setOpacity</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>a7bc3d7cf6528f8e87778f0c4183f82fd</anchor>
      <arglist>(Real o)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setLineThickness</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>ab54b2d402a23b681e233b9117d9e2116</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>Decorations &amp;</type>
      <name>setRepresentation</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>a7d0884b6110ddba6454aaf9ed967dc9a</anchor>
      <arglist>(const Representation &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_PIMPL_DOWNCAST</name>
      <anchorfile>classSimTK_1_1Decorations.html</anchorfile>
      <anchor>a7d061b384b6009d6b437f6ca637b778d</anchor>
      <arglist>(Decorations, DecorativeGeometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DecorativeGeometryImplementation</name>
    <filename>classSimTK_1_1DecorativeGeometryImplementation.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecorativeGeometryImplementation</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>a64f33643b8ce3f98addc4c9436d95b0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementPointGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>a7c02ff8279f36cf74b73063939c58b99</anchor>
      <arglist>(const DecorativePoint &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementLineGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>a06b564147c49fe1118fa7eb33d55e5b9</anchor>
      <arglist>(const DecorativeLine &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementBrickGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>a281b27f693c7bc673721cbc8199c34e3</anchor>
      <arglist>(const DecorativeBrick &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementCylinderGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>af8a7f8c3bf324346f44234a7812f959a</anchor>
      <arglist>(const DecorativeCylinder &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementCircleGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>a8c4a5446154beafdde648f5308fb63b5</anchor>
      <arglist>(const DecorativeCircle &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementSphereGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>ab3c28a0ee94ca1bf16398deb86f9b9fc</anchor>
      <arglist>(const DecorativeSphere &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementEllipsoidGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>afbefd6cf75500df8cc9bff4a1d43e0fb</anchor>
      <arglist>(const DecorativeEllipsoid &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementFrameGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>aca89df8627f2a2d5adb2158a11390b0a</anchor>
      <arglist>(const DecorativeFrame &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementTextGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>a32dfc7b978406199cfbdf11594a9699b</anchor>
      <arglist>(const DecorativeText &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>implementMeshGeometry</name>
      <anchorfile>classSimTK_1_1DecorativeGeometryImplementation.html</anchorfile>
      <anchor>a4ccfb9ab66168dac356266985a94e0b0</anchor>
      <arglist>(const DecorativeMesh &amp;)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PolygonalMesh</name>
    <filename>classSimTK_1_1PolygonalMesh.html</filename>
    <base>PIMPLHandle&lt; PolygonalMesh, PolygonalMeshImpl, true &gt;</base>
    <member kind="function">
      <type></type>
      <name>PolygonalMesh</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>aac330de389edb84d5b58883ee9bba660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a62d11f81d7cd223541e46460b05acc60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFaces</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a68ca5135b3fdeea0c6eed21b80fa48b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVertices</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>ab75dee2df1e105d772f16db7234aad9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getVertexPosition</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>aa7d7ecd0264d2df9c957be97f6205584</anchor>
      <arglist>(int vertex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVerticesForFace</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a576269d858c2d3c2707c8a50ed2f78a1</anchor>
      <arglist>(int face) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFaceVertex</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a5b8d9ffd70746fad4591c924fafd30be</anchor>
      <arglist>(int face, int vertex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>affe42b27d45d306bcc4bfca824fe329a</anchor>
      <arglist>(const Vec3 &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFace</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a56fd6d1c18db6f92dea3e47112a64008</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>PolygonalMesh &amp;</type>
      <name>scaleMesh</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a5ee89d84a08cdce5e4053f907c5be8ab</anchor>
      <arglist>(Real scale)</arglist>
    </member>
    <member kind="function">
      <type>PolygonalMesh &amp;</type>
      <name>transformMesh</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a883e60fbda837ef8a2426373b9f7e2c1</anchor>
      <arglist>(const Transform &amp;X_AM)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadObjFile</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a3fb5b67a2b9b157ef29566cd1e2c0f64</anchor>
      <arglist>(std::istream &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadVtpFile</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>aa38a14ee7940a812219defc048ba7bce</anchor>
      <arglist>(const String &amp;pathname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolygonalMesh</type>
      <name>createSphereMesh</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a0b962555490e190b9b86aff5daa4c3a6</anchor>
      <arglist>(Real radius, int resolution=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolygonalMesh</type>
      <name>createBrickMesh</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a1906cc4855972d1862ba166aa15dcf0f</anchor>
      <arglist>(const Vec3 &amp;halfDims, int resolution=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolygonalMesh</type>
      <name>createCylinderMesh</name>
      <anchorfile>classSimTK_1_1PolygonalMesh.html</anchorfile>
      <anchor>a230bdd061c57b20cbe951ab8b0a939d3</anchor>
      <arglist>(const UnitVec3 &amp;axis, Real radius, Real halfLength, int resolution=1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits</name>
    <filename>structSimTK_1_1ArrayIndexTraits.html</filename>
    <templarg>X</templarg>
    <member kind="typedef">
      <type>X::size_type</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits.html</anchorfile>
      <anchor>a8a52ff7e685e2a6fa1d715475fbffa12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::difference_type</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits.html</anchorfile>
      <anchor>a3f2218d2538016278c51f8f9d8be5dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits.html</anchorfile>
      <anchor>a005352314ba62448f8710051b705a058</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; unsigned &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01_4.html</filename>
    <member kind="typedef">
      <type>unsigned</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01_4.html</anchorfile>
      <anchor>a237891bd7f929131cd54a075aef041f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01_4.html</anchorfile>
      <anchor>a92755f7b8f71d7f788ac3b3892c99a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01_4.html</anchorfile>
      <anchor>a11132e679112ee1777cd4fab980b341d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; int &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01int_01_4.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01int_01_4.html</anchorfile>
      <anchor>afde47749cdf6e194508e9234407ad5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01int_01_4.html</anchorfile>
      <anchor>a0cbfd69e41b78ac4d0e9a67004c8c4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01int_01_4.html</anchorfile>
      <anchor>a7a3a13b354bac114584e1a02a82ace3d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; unsigned long &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01long_01_4.html</filename>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>aa0c86d06bfbdcd8262d179c0c662fe62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>aa36691c69e90e74446a61ded3eb5b723</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>ac5dc6c1139a80228c95f508dd7ecf163</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; long &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01long_01_4.html</filename>
    <member kind="typedef">
      <type>long</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01long_01_4.html</anchorfile>
      <anchor>a4de344582b66ebf7bef70bb5a9da9277</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01long_01_4.html</anchorfile>
      <anchor>aaada77b6f4e48fe9ee121c9c4e1caaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01long_01_4.html</anchorfile>
      <anchor>ae44d787df4a5ba666f43d194c0215704</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; unsigned short &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01short_01_4.html</filename>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>a71dce75055a49d2cbf54dd1de777edb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>a58a32c3e4253c940c99aa014e798a00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01short_01_4.html</anchorfile>
      <anchor>acf6192072469dca3780b721cc4a981f7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; short &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01short_01_4.html</filename>
    <member kind="typedef">
      <type>short</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01short_01_4.html</anchorfile>
      <anchor>a77dd0e0f74deef3d4eca9254f1ae6017</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01short_01_4.html</anchorfile>
      <anchor>af0295eaf3ca3d79193ea696968850f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01short_01_4.html</anchorfile>
      <anchor>afab77af3b16dd9977ab409fd2601bfe3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; unsigned char &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01char_01_4.html</filename>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a17285dc617d4731b7f729a37e4de61d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a06d96a9443666f4f12e86e9042a35a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a2e135768b603bf3f9507407311ec03fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; signed char &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01signed_01char_01_4.html</filename>
    <member kind="typedef">
      <type>signed char</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01signed_01char_01_4.html</anchorfile>
      <anchor>a6c77303cfe1d36a8ca954c3933d98b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01signed_01char_01_4.html</anchorfile>
      <anchor>a2aa8b8a5ffc69fb1acb1da5230b9df17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01signed_01char_01_4.html</anchorfile>
      <anchor>a1d80007656ae3873ba9680ef5e31da33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; char &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01char_01_4.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01char_01_4.html</anchorfile>
      <anchor>a3359cb6a136351f8ce61b747abc4c20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01char_01_4.html</anchorfile>
      <anchor>a0f6455f10953fda1f7cb4a6261b01dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01char_01_4.html</anchorfile>
      <anchor>a34ab3f60b213b95502557342008a5333</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; bool &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01bool_01_4.html</filename>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01bool_01_4.html</anchorfile>
      <anchor>ae07264e17c0084344c53066c39c31b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01bool_01_4.html</anchorfile>
      <anchor>a74fd1c12aa1b5357e7dc30d263c2aa4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01bool_01_4.html</anchorfile>
      <anchor>ad08329b074a87b01bcc8c17cdfc4425e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; unsigned long long &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01long_01long_01_4.html</filename>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a7b602db6607df96209684528695772d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a24047fa1c0e3058c2b62f5019893f372</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>aa78755a0eb5e94e59e4cb17330f97bc3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::ArrayIndexTraits&lt; long long &gt;</name>
    <filename>structSimTK_1_1ArrayIndexTraits_3_01long_01long_01_4.html</filename>
    <member kind="typedef">
      <type>long long</type>
      <name>size_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01long_01long_01_4.html</anchorfile>
      <anchor>a63463de30930d8e0eb4b06090f040565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long</type>
      <name>difference_type</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01long_01long_01_4.html</anchorfile>
      <anchor>a3e50f35657d6bafe0a4560ffbc96d004</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>max_size</name>
      <anchorfile>structSimTK_1_1ArrayIndexTraits_3_01long_01long_01_4.html</anchorfile>
      <anchor>a63eb3c3105e144e7ba26623dd7bfac93</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ArrayViewConst_</name>
    <filename>classSimTK_1_1ArrayViewConst__.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a39bda86e859db1597f4d49d8037d0660</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>index_type</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>af92bca96f3089b5f0d4133fce9c7cded</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a2825bef320398cbf8d8f2e2b8631632e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a7fdc551f402dc69766e819733ee6f08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>aacce6f572b1deffcefa3f3aae5263b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a460302f601c4a2c2d63837cb1e5d875a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a416a8bff8ad197d4dfb2d41866acbd23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_iterator</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a76215b9c0677fca5706f11038f496963</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a4b566573f0b94c804a6b6e0514c78bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>ab26d002d51080ddd32f8899e5ea3ea40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexTraits&lt; X &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>abaaff64afd3daaed43f1acecbe2bbfe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexTraits&lt; X &gt;::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a1f604d5e70ddbe7eb0bf9a80a236951e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexPackType&lt; size_type &gt;::packed_size_type</type>
      <name>packed_size_type</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>af01fd47de6bffe601337c1ef0a45e88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayViewConst_</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a6008f8ca816619f1b4a67c94027a2d59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayViewConst_</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a5412fa0b837f5e090f343180b2dbcdc8</anchor>
      <arglist>(const ArrayViewConst_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayViewConst_</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>aba351ab4073da6f9d4c13855b039df6b</anchor>
      <arglist>(const T *first, const T *last1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayViewConst_</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>acbb823ad8bafa05dae5c1a06b426c4a8</anchor>
      <arglist>(const std::vector&lt; T, A &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const ArrayView_&lt; T, X &gt; &amp;</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a00cef62772e0c408bd3e0529417b8948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Array_&lt; T, X &gt; &amp;</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a306a0b84ff4f9dd8981c5a978e2750f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>ace600fbc0738888ceef29cc7c0846643</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayViewConst_</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a5f34fb008e433a59e3957ab27b811839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a4571082d90592c7b0f6761140e11edb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a4dff9e3f09bd7f0ca14dec2861a626ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>ad45ba916abcb168e7337b80890c8d68c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a3df09ea748ac2750e730981e7563526f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>allocated</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a3c1c27ea8ca7b9f3411d438693fd8a2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwner</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a30c40081730e9681d6102972f42904f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>afa06a13341105ac7773a9c6bcd6a851c</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>at</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a4b5d31ec735550ba4b262b8e5f387020</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getElt</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a2af8a30f98edabfef434169ac33831e2</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>front</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a14d5eed816397cc84bc47af96645e554</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>back</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a26683b980dcd87bafd5c6446d8f8b25b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayViewConst_</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>ab1816a17c6b643eb0967f954cdd96635</anchor>
      <arglist>(index_type index, size_type length) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayViewConst_</type>
      <name>getSubArray</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a288833be443e0f02d958f5cfe74312ba</anchor>
      <arglist>(index_type index, size_type length) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cbegin</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>ac3e34902f0533ffbda435880fd8ce34b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cend</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a0664dc29fe9f3d2d3f38433774d9c3a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>begin</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a0f8cb9dedb2d0710570621910a016108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>end</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a6349807c889c1155e01d429e264b08e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>aaca9a931016a896c03b783f7a5bb2824</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a4736f16ae05ebee9e34077072496436b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a4de43406f71aed2fc534da92c4005256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a6e0d66ba65094d8b6cf75922d846ff3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cdata</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>a4b2cf338eaf2590b4085bfb110470388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>classSimTK_1_1ArrayViewConst__.html</anchorfile>
      <anchor>aa9f2581b552a2df91b8f2b7f9abae43d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ArrayView_</name>
    <filename>classSimTK_1_1ArrayView__.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <base>SimTK::ArrayViewConst_</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aeb29ff328a71341945e442234f50e253</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>index_type</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ae79baa909a71d2f8c75b1120776ccca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a3950fd72f5f77716f823f8c0a9a87974</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ad6e8dabb125276c7fcdaa215b23f808f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ab4b4b454ffabc27881011e3dcfea4014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a611de0d81f0e43b256704e817d63ae47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a6566e08689eb53ae89a2b000ed4a4140</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_iterator</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a14185eed75d43f044775a366c02590c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a704e9c961a4621efd1bfe21bf099ca77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ac1232d267e9b8c139cca1512b412a6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexTraits&lt; X &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ab6e901cbddbca41c54b22c6216ac804b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexTraits&lt; X &gt;::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>abad962ee7e4110ac6c20bdfa340f81dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexPackType&lt; size_type &gt;::packed_size_type</type>
      <name>packed_size_type</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a9536141dcc61cfc646bb1f2062e5e558</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayView_</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aa8e89ce2da1f241ae70e38cfe63ba980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayView_</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ad1ddf75311833fc599a934c3f3d5a57d</anchor>
      <arglist>(const ArrayView_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayView_</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a8e6104f869055379b0fbd146aeefa919</anchor>
      <arglist>(T *first, const T *last1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayView_</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a176653cfecc6ee9dd5cbb08f53725a34</anchor>
      <arglist>(std::vector&lt; T, A &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Array_&lt; T, X &gt; &amp;</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aee82e038ccd001ede9b1104969fdfa3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Array_&lt; T, X &gt; &amp;</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a6ef7f785e236628b37192a5380d0a479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a7848acb2e30474663b3d708e80f2b6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayView_</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a509b38ff0b42a6ff6b38cd3b26f4096f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a1a3e84580379c69d92ab24d96fa6c180</anchor>
      <arglist>(const ArrayView_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a7f8826e1792377e63d47b9c9a3c53584</anchor>
      <arglist>(const ArrayViewConst_&lt; T2, X2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>acb5dc46e5a1126a8e30882e53a86c62d</anchor>
      <arglist>(const ArrayView_&lt; T2, X2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a45bc77b91b7751a909ca6524346c9e8d</anchor>
      <arglist>(const Array_&lt; T2, X2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a68daffa0f934e5f3d6f75adcb5d93367</anchor>
      <arglist>(const std::vector&lt; T2, A2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a29e6a21ecbf455765267d5d12bde8628</anchor>
      <arglist>(const T &amp;fillValue)</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_ &amp;</type>
      <name>fill</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a1dbebca5377888478d004f882a6c24e2</anchor>
      <arglist>(const T &amp;fillValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a06a7d28c5d7a0586b39260b4a167f10c</anchor>
      <arglist>(size_type n, const T &amp;fillValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a39312ebedf1ce457f129b39c69d4515a</anchor>
      <arglist>(const T2 *first, const T2 *last1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>afb5c2516d03bb21d24ea4e87af777136</anchor>
      <arglist>(const Iter &amp;first, const Iter &amp;last1)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a1802aff86a94788eab5bf63e5fd704df</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a943c9a87081523151ddbf1d22a853e4e</anchor>
      <arglist>(index_type i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>at</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a99cae4892293f33c0ffb5e615beda7a5</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>at</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ab93f3650f5d31037f0051431eb02b57b</anchor>
      <arglist>(index_type i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getElt</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ae9514b4dc81e3aee1fcf2d5b8acc3973</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>updElt</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a538c58736523ef56cafe9d926ec6e8f5</anchor>
      <arglist>(index_type i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>front</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a95912a09cf7bd29259ef8d4473720424</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>front</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a1c3c26db7d7178a3e3c0b4603c7d0fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>back</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a0460ec7ea1179ddf927e473d5bae34e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>back</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>abf707303e5e68fb5147fa36862c2bc57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ab89285bb25b06bc6a1b53fca6e63e3b7</anchor>
      <arglist>(index_type index, size_type length)</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_</type>
      <name>updSubArray</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a33b3799cc9d10a4e4a6781292f7bdc15</anchor>
      <arglist>(index_type index, size_type length)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cbegin</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aab22f2833fec6ab0cf54c865e4b982b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>begin</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ad4365a113f327e918eaeb4e82aefdb0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>begin</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aa468711f19b67b25232650df6eeea608</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cend</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>add24067da9c7c229cdbd78f368191936</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>end</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ab7c075d504a14643b27c226d20d5807d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>end</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ace5b2a07f725b6e943d45ad786bf02cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a444e0272a509be58aa47bd4a661924ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aa4d11403e60b499d439790bde90ffaeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>add040a16da503b139f280a9e1a41c61d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aba2e82bd573b9e0fe365f76e929f92c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aee6852373084f7377944ead91c6f1ab4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a70fe28b711d20b58b18f5ad1bce34145</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cdata</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a1e0ee8a10102bcd47f53fe0e6c28d64c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a7a6a58e82529049f52e953a347aeb30e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a318481efdb8fd67f17e28e67cc8cce24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a2f916862f035a63e2406b6c47c57a2f3</anchor>
      <arglist>(std::istream &amp;in, ArrayView_&lt; T, X &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFormatted</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aa87616be589a0d76e0461c1d7c869e91</anchor>
      <arglist>(std::istream &amp;in, ArrayView_&lt; T, X &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>fillArrayViewFromStream</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a3c0c0d7769abbfe61b560361afe19f03</anchor>
      <arglist>(std::istream &amp;in, ArrayView_&lt; T, X &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>acc7c28435897527058bfecae5e2f407a</anchor>
      <arglist>(std::istream &amp;in, ArrayView_&lt; T, X &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>af93f8c651dab26b475900d4b768ae926</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aa35a88ad9923d73872f79308600821f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>ab75af4aca965b5170efc9b38956cac7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a51052b7d71f1ba291a6a1dcfbafa6e80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>allocated</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>aa573c73360997d8e1beb0a22f6b8452f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwner</name>
      <anchorfile>classSimTK_1_1ArrayView__.html</anchorfile>
      <anchor>a9aa22264fa554e99c1266d9404404e32</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Array_</name>
    <filename>classSimTK_1_1Array__.html</filename>
    <templarg>T</templarg>
    <templarg>X</templarg>
    <base>SimTK::ArrayView_</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ac67020459c021a6a6e076839105b1dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>index_type</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a3aed3ed93a6d406a35da0225352694b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>adfe40f48092df9a7deafe32ef1ec39fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a1e344836dca88d0070ee505da9a628bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ae5efd5cd3092babe7a107b8efa664204</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a3e967f4929d463e32202d34158f3e22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a05144fefe932d1c76e2e0dcaedddcd03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_iterator</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a47a140d8babac3edb92ff620e77245d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a9a9e2010641fb5df3c7e47c62a6db774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a96b19c88ae09eec0ff5288e8e824d498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexTraits&lt; X &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a7ed205f5372aad3ca9a8366441b16913</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexTraits&lt; X &gt;::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a3a5ca3b32f612044bed7552b7dc96164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayIndexPackType&lt; size_type &gt;::packed_size_type</type>
      <name>packed_size_type</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ab1b7dc77f42cab3244ec808e5d4d3ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>adc75b3e8df6112d5ea6fd77ad024bcc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a7a9e625487e34b5255619a492514926d</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ad758f8ef3bb565989a22c5456a34f3b6</anchor>
      <arglist>(size_type n, const T &amp;initVal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a730175ab17a18e5d87974ea97c712e3e</anchor>
      <arglist>(const InputIter &amp;first, const InputIter &amp;last1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a782b385c4c710cf60fc4205371c7d5cc</anchor>
      <arglist>(const T2 *first, const T2 *last1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a40d3d7fccc13d4d892ce52ebccdf4acc</anchor>
      <arglist>(const std::vector&lt; T2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>afe60949157ed425b6b81b7ff0e11ca29</anchor>
      <arglist>(const Array_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>af66a2741c555a387d09742b9a5517314</anchor>
      <arglist>(const Array_&lt; T2, X2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a53d115efe0bc7dafba02b3d04562dd92</anchor>
      <arglist>(T *first, const T *last1, const DontCopy &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a3331ee7155535eeac08b7297da16ebe3</anchor>
      <arglist>(std::vector&lt; T, A &gt; &amp;v, const DontCopy &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Array_</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ad55d3b71e2acdaa0f2bb8be2617c894f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array_ &amp;</type>
      <name>deallocate</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a67bc6c09d3ea513dfba42a5dfc42cd38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a136a03677c28d7ee697df7e09b7aa2e2</anchor>
      <arglist>(size_type n, const T &amp;fillValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a66cc4a2796075ec7a3097bcc6d616bab</anchor>
      <arglist>(const T &amp;fillValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a1614ce819a2a4221c0a072ffbc2a0935</anchor>
      <arglist>(const T2 *first, const T2 *last1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ab0fbbed70bc0fdb3ec5c188193503bb8</anchor>
      <arglist>(const Iter &amp;first, const Iter &amp;last1)</arglist>
    </member>
    <member kind="function">
      <type>Array_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a17aa8ec53fbbd5af9d8311040b4e215a</anchor>
      <arglist>(const Array_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Array_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a31782606c119d1db301ef14a930abd22</anchor>
      <arglist>(const Array_&lt; T2, X2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Array_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>abada82afde9d55dbde8b44052ce1fda1</anchor>
      <arglist>(const std::vector&lt; T2, A &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a4c544ef3a4eee81c7580699e793e0f92</anchor>
      <arglist>(Array_ &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array_ &amp;</type>
      <name>adoptData</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ac5671ab71d22a14e65a149feea9c577a</anchor>
      <arglist>(T *newData, size_type dataSize, size_type dataCapacity)</arglist>
    </member>
    <member kind="function">
      <type>Array_ &amp;</type>
      <name>adoptData</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a37550aafe7e3c54f9604ff80479153e9</anchor>
      <arglist>(T *newData, size_type dataSize)</arglist>
    </member>
    <member kind="function">
      <type>Array_ &amp;</type>
      <name>shareData</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a3e51e9d13453755cb0cce47af007d3c7</anchor>
      <arglist>(T *newData, size_type dataSize)</arglist>
    </member>
    <member kind="function">
      <type>Array_ &amp;</type>
      <name>shareData</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aa780ca6f8edd609cd461b0a90fbbca64</anchor>
      <arglist>(T *first, const T *last1)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a00d92f7cb1c2c6ad7d8ff7267a67ee0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aa7f29e36968740e433a451cb82774046</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a41c0aa10d7095ff4a6c385a5f408b170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a7d905825b941637a97453cba165f0feb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a3ef48cf9aac351db79f747c2ddd23bf4</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ab839b023c760816f9580d4feea2c9136</anchor>
      <arglist>(size_type n, const T &amp;initVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a18b9cb15ea07f2da45d9b45a8f12429e</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aad5af2017b0c5a1a2160104d98a59294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>allocated</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ab09f12c0986ba2025ece82fa7fe5df41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwner</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a82f384696e84727ee28902212fc95a1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cbegin</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a1f009675fdf90d112f15279b35da6688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>begin</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a8b25d6dc2485899425d6a4c96d574ed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>begin</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ab87a252bd681eeb8d9e4075343263f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cend</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a3758a3dc3ecebc1eeea89d389c049253</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>end</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a06a9152d785cb3d350e624d53d49af08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>end</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a5a12efc66437667e7af14e54747433ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crbegin</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>af9f884619b7afeb2c4e31be0ac9a5c96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a09a9b5657f95c864088caa629bbb14c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aab002eb8f193aea7d6b4ab3683ff89aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>crend</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a936220808b01ffe9e5080cf97cf67409</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>af6614217a1df42b91aa38cb3ea7ec61d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a5973f198607a6531235df6877ab9979d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>cdata</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ace9ac236751f99b1663c504ae87d3a2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>data</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aecd7415f4c933c8c572d93b486193c26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>af05128fb7611eb19f884b1e742878277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ac6db339c90590b6a6c230c2ebaa63141</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a52dc3c8d6816f2cc3d9e42caa2688993</anchor>
      <arglist>(index_type i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>at</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ab62d24dae1b22b621da114318134d55e</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>at</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aa8a43460f045aeb40cc0e1ca44aacbc1</anchor>
      <arglist>(index_type i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getElt</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a9e442e44a784734db4d3750c24d17ac1</anchor>
      <arglist>(index_type i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>updElt</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aa17ec9fa947bdc8b7aa75a0d09b36214</anchor>
      <arglist>(index_type i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>front</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a8d24987c3a2d57c2ceb5e0d3f15f73b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>front</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a3e306ed9d706676046787b8f8c049480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>back</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a251212be7a0d7adaa5f9f72d8a694a64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>back</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>af001d2418473e4e149969b0aea2ac96a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayViewConst_&lt; T, X &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a88a623121405c9896be85477f4cb4953</anchor>
      <arglist>(index_type index, size_type length) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayViewConst_&lt; T, X &gt;</type>
      <name>getSubArray</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a8471d7b2c924d3704fbd54ab10451c19</anchor>
      <arglist>(index_type index, size_type length) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayView_&lt; T, X &gt;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a9cbd317755142dd7707305ba1dd36c4b</anchor>
      <arglist>(index_type index, size_type length)</arglist>
    </member>
    <member kind="function">
      <type>ArrayView_&lt; T, X &gt;</type>
      <name>updSubArray</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a223502957a0d38152ea9bda9ac194829</anchor>
      <arglist>(index_type index, size_type length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a8a1771c28a26738d4e217ec67586f9c8</anchor>
      <arglist>(SimTK::Array_&lt; T, X &gt; &amp;a1, SimTK::Array_&lt; T, X &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a015cef5d8e534e632955fcca6ea444f8</anchor>
      <arglist>(std::ostream &amp;o, const Array_&lt; T, X &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeFormatted</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a6abedbcfc5b21bd9fa859208247aec72</anchor>
      <arglist>(std::ostream &amp;o, const Array_&lt; T, X &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a8575e59ff1ed3dcb8e52d7dd44ebb426</anchor>
      <arglist>(std::ostream &amp;o, const ArrayViewConst_&lt; T, X &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a6b300ce2032c6315983114f0b7e84e92</anchor>
      <arglist>(std::istream &amp;in, Array_&lt; T, X &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFormatted</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a65a8a24c48ad3dff0c852095f0347941</anchor>
      <arglist>(std::istream &amp;in, Array_&lt; T, X &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>readArrayFromStream</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a0a452cab4756ae07c3ab22c155eb1b15</anchor>
      <arglist>(std::istream &amp;in, Array_&lt; T, X &gt; &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::istream &amp;</type>
      <name>fillArrayFromStream</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a34546fb36b84171e76276a508121a3ce</anchor>
      <arglist>(std::istream &amp;in, Array_&lt; T, X &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>adbd40fd273bd41041bb7138a3268ca82</anchor>
      <arglist>(std::istream &amp;in, Array_&lt; T, X &gt; &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a1e25d47eeb9e34faa78ee38812b194d8</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aa79b082dbed61adf809400e05027c595</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a0e1218fae627e26b17ed948a62e87cc8</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ad80423b9a73fd93e07d8465c97e999af</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ac93cc22c503f9f75f1be2cbbb2c97714</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a8822b4815845e58a47af6b5720791698</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a39975ed123e3738da698ea6d0ddc7a4a</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const std::vector&lt; T2, A2 &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a5bef2d3446751e985a922ecb0681653c</anchor>
      <arglist>(const std::vector&lt; T1, A1 &gt; &amp;v1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a688f8af308de34d0431205f7d854aee3</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const std::vector&lt; T2, A2 &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a7d04f55c1a275128219e677a974254c9</anchor>
      <arglist>(const std::vector&lt; T1, A1 &gt; &amp;v1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>addbec0e1348a20404c060b9c5523544f</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const std::vector&lt; T2, A2 &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aa929813dea46bf41f7ffee7053566f86</anchor>
      <arglist>(const std::vector&lt; T1, A1 &gt; &amp;v1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a81e151401cab82f28a4d2f6c43bdaeb0</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const std::vector&lt; T2, A2 &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a1c9fc6fb86e0e02b422ea858ba216f94</anchor>
      <arglist>(const std::vector&lt; T1, A1 &gt; &amp;v1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ad057e98ddbd0b80ab053519caa9dd2ea</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const std::vector&lt; T2, A2 &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ad7d14e73a05783839ed5c679278764d4</anchor>
      <arglist>(const std::vector&lt; T1, A1 &gt; &amp;v1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ad6219dc0d49e5f4d40d4a5d7954c5adb</anchor>
      <arglist>(const ArrayViewConst_&lt; T1, X1 &gt; &amp;a1, const std::vector&lt; T2, A2 &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a463986b88adfd8319e9a2ddcb7b21d0e</anchor>
      <arglist>(const std::vector&lt; T1, A1 &gt; &amp;v1, const ArrayViewConst_&lt; T2, X2 &gt; &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a13b95bc701e5bd09dad7ee38e069b669</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a7b698ae20b857ce3de014b8996f3b1e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>raw_push_back</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a7ceb31ef48594914eaef9ddcec92791c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a54b5b478c9ac203ed767eadf7828ffcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>erase</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a52a656cb3128af0259d85978a61b7e01</anchor>
      <arglist>(T *first, const T *last1)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>erase</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a818361e237b91adc12d2122f119c579c</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>eraseFast</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>aea3f2ff76ae0b004c5e21c3aa170ebf6</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>af95f49692c338895df4ddc36752b4baa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>insert</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a7c6c04b85ed597b657f4cd244c02c52d</anchor>
      <arglist>(T *p, size_type n, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>insert</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a1de9710bd314b227b6d7fb9b1e2e5013</anchor>
      <arglist>(T *p, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>insert</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>a9e597a8ecd02706680bf8920c5a15f29</anchor>
      <arglist>(T *p, const T2 *first, const T2 *last1)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>insert</name>
      <anchorfile>classSimTK_1_1Array__.html</anchorfile>
      <anchor>ae2abd8e9d2146f344a88f96d1f839db0</anchor>
      <arglist>(T *p, const Iter &amp;first, const Iter &amp;last1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::AtomicInteger</name>
    <filename>classSimTK_1_1AtomicInteger.html</filename>
    <member kind="function">
      <type></type>
      <name>AtomicInteger</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>af5a01c58295964e6cb7ad5baefb1ff3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AtomicInteger</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a9e4cea5c99728826efe285433d104af3</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AtomicInteger</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>aeda30cbee7ec50bc4e0abf11405afa08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a07a53dab61540074f9b5f7a190e97fd3</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>ad69f212d1758e1fc38c7257a01701d70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a658d46c3b75b9f2d4aba7862027091ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>aa151728a9c590b3022d6ae403e4e4bbc</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a06320b1879dd57824f5e99ba2d523788</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>ab90e4f767df3076195c8f15d1c425c38</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a576a147c43bf20f4fc7105f7f8101139</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>afd802874569e90a59a99ecde3a158c96</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>ae357904a157b697787306130a3c02126</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a0157768f16e54b5c83eed5bdccd8e150</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator%=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a14a1217c5469755985120c304dafa54e</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a289d0b3d7e976523c9a0d1a24d835a51</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>acc4c303ec65816143b6810c2da9394f6</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator^=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a96c57b797d90b83fed382619b3e1448c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a574cd6ab822785686412b9eb3bfaa48e</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>AtomicInteger &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a7d8d95e3e390dbd1d139c35d6e8d897e</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a33f3a51d0673551fd9ee1612e92871c4</anchor>
      <arglist>(int value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1AtomicInteger.html</anchorfile>
      <anchor>a32295359f306039cad4dd63020920dcd</anchor>
      <arglist>(int value) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ClonePtr</name>
    <filename>classSimTK_1_1ClonePtr.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a16a8c3a419862297520e74155fd4c0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>af3e6d3d76470b070d45a3a4beef31d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a2c11fa076622a78c3fb373127fab6be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>ad3d1588443c3da737c946de12bc0361b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a70602a3b6ac1e5f0a2df150b5884db58</anchor>
      <arglist>(T *obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a9456c170aedf1325dcbadf42be03ba28</anchor>
      <arglist>(T **obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>aa8ea6f44eb60b971038a4946056fd0c0</anchor>
      <arglist>(const T *obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>ac82a7d8033a73eaf9c6bc8c64281418f</anchor>
      <arglist>(const T &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClonePtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>ab6092e49b1be6bce207dd7ab1808452a</anchor>
      <arglist>(const ClonePtr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>ClonePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>aa8eec35712ce729ec615228108a6ad97</anchor>
      <arglist>(const ClonePtr &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>ClonePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>aa5547e34394e185211dd5a409f8bc5f3</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ClonePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a8b5b458544dfad96d6c6defea10690b2</anchor>
      <arglist>(T *tp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClonePtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>aa7d6064326de8912e9f8ee3aa4de2fd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a299aa4cad7d0ceaf054d4603f00f7e8b</anchor>
      <arglist>(const ClonePtr &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a910b9e3ed62fe6d18389288e666b49d6</anchor>
      <arglist>(const ClonePtr &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a8cb795d2dd772e58067aab95da83d97e</anchor>
      <arglist>(const ClonePtr &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a0d4c3dea57017f743da0385bb57ccdd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>abb43d4dc23ac327ec89c038192c8c6a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a71838ede2793877177946dd6930816e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>ac19a4b7dd6f8f65a7055f9a19e919e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator&amp;</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>ae8d4a154b1360d4d084f1dea39c1c5bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator&amp;</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a31bc6b09679c334f866ce3dd24179486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>adafe4330a9ad4bd5d4544e4f1bbc3743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T &amp;</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a94c283e106abb67b99f7141faad5c4c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>ae5b0540e9acb55400855e14457e14c0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>updPtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a2affd4571d86749a952fec34ea9e50a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getPtr</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a6e55bd1df594a49fa211ea90ac62691c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>updRef</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a5d49dd7e39d9f503da3e73dd34f5d809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getRef</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a875d894ca025fed72d507888509286fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a0386ad8090115bff5c09f959c07c0a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a1c38628eb063363ef8940a61e907b33c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>release</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a4f7108fdb39208de4f4f636bf134c26c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a6f4c5d9dbff83aec5a788491c9c19f2b</anchor>
      <arglist>(T *tp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>ab890a2bb1812b948e32873511e6ef73c</anchor>
      <arglist>(T **tpp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a6b477079c1aba99699e17b0e7c23ddab</anchor>
      <arglist>(ClonePtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classSimTK_1_1ClonePtr.html</anchorfile>
      <anchor>a1bd0017918729bb7e11ed097a4ef61d7</anchor>
      <arglist>(SimTK::ClonePtr&lt; T &gt; &amp;p1, SimTK::ClonePtr&lt; T &gt; &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Function_</name>
    <filename>classSimTK_1_1Function__.html</filename>
    <templarg>T</templarg>
    <class kind="class">SimTK::Function_::Constant</class>
    <class kind="class">SimTK::Function_::Linear</class>
    <class kind="class">SimTK::Function_::Polynomial</class>
    <class kind="class">SimTK::Function_::Sinusoid</class>
    <class kind="class">SimTK::Function_::Step</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Function_</name>
      <anchorfile>classSimTK_1_1Function__.html</anchorfile>
      <anchor>ae8654deb6474bb2965a4b4d507f5c36d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1Function__.html</anchorfile>
      <anchor>a7290f75cb563a95e9ed91c29035e2cf0</anchor>
      <arglist>(const Vector &amp;x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function__.html</anchorfile>
      <anchor>adac4a2fcd2fe0962544f9a5943f6fd71</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const =0</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function__.html</anchorfile>
      <anchor>abe79f8ff04bb01da1c4d134936ccbdd9</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArgumentSize</name>
      <anchorfile>classSimTK_1_1Function__.html</anchorfile>
      <anchor>a4c5f65dbaeaac7a615834c42e6afe8e3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMaxDerivativeOrder</name>
      <anchorfile>classSimTK_1_1Function__.html</anchorfile>
      <anchor>aedf75a09148df97f1b7d448d63617f22</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Function_::Constant</name>
    <filename>classSimTK_1_1Function___1_1Constant.html</filename>
    <base>SimTK::Function_</base>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>classSimTK_1_1Function___1_1Constant.html</anchorfile>
      <anchor>a97a4de03eca7fee504ba87e00b7d5be4</anchor>
      <arglist>(T value, int argumentSize=1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1Function___1_1Constant.html</anchorfile>
      <anchor>a5fc9673e4c4d71263fcfd40c716f4dfb</anchor>
      <arglist>(const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Constant.html</anchorfile>
      <anchor>a4fd5fbdf8fc685c7fe35932810c7916b</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgumentSize</name>
      <anchorfile>classSimTK_1_1Function___1_1Constant.html</anchorfile>
      <anchor>a484ff782e67f2373c5fd9c95d8aeb3a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxDerivativeOrder</name>
      <anchorfile>classSimTK_1_1Function___1_1Constant.html</anchorfile>
      <anchor>afc2e7f94eb68292bced0957040be565b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Constant.html</anchorfile>
      <anchor>a9ebdad6ed4a88b73e1e62ed695815318</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Function_::Linear</name>
    <filename>classSimTK_1_1Function___1_1Linear.html</filename>
    <base>SimTK::Function_</base>
    <member kind="function">
      <type></type>
      <name>Linear</name>
      <anchorfile>classSimTK_1_1Function___1_1Linear.html</anchorfile>
      <anchor>accb5e62b4439d3e24be5ba344b505c48</anchor>
      <arglist>(const Vector_&lt; T &gt; &amp;coefficients)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1Function___1_1Linear.html</anchorfile>
      <anchor>ab4ffd4beb266de60e8481adeca906cc8</anchor>
      <arglist>(const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Linear.html</anchorfile>
      <anchor>a61c9652eeb9213f2eecdb085abcb3eb4</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgumentSize</name>
      <anchorfile>classSimTK_1_1Function___1_1Linear.html</anchorfile>
      <anchor>a105d57406e13cd1529eb0ff10a458423</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxDerivativeOrder</name>
      <anchorfile>classSimTK_1_1Function___1_1Linear.html</anchorfile>
      <anchor>a6e5c3356e7eee4721d65b699dfed6e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Linear.html</anchorfile>
      <anchor>a918da93fbc2522074d51e3d7bb6192f2</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Function_::Polynomial</name>
    <filename>classSimTK_1_1Function___1_1Polynomial.html</filename>
    <base>SimTK::Function_</base>
    <member kind="function">
      <type></type>
      <name>Polynomial</name>
      <anchorfile>classSimTK_1_1Function___1_1Polynomial.html</anchorfile>
      <anchor>a3d66c3a6183f55594f64fea4fcb75bab</anchor>
      <arglist>(const Vector_&lt; T &gt; &amp;coefficients)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1Function___1_1Polynomial.html</anchorfile>
      <anchor>a605df9940b2cdd3fe0ea405f78ab8518</anchor>
      <arglist>(const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Polynomial.html</anchorfile>
      <anchor>a15c62178833d0084c5c581d0d3713a63</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgumentSize</name>
      <anchorfile>classSimTK_1_1Function___1_1Polynomial.html</anchorfile>
      <anchor>a3f40c1eea9ef853b26f5c607cf8c1370</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxDerivativeOrder</name>
      <anchorfile>classSimTK_1_1Function___1_1Polynomial.html</anchorfile>
      <anchor>afce2cab6cd7c3be75188cd9b295154ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Polynomial.html</anchorfile>
      <anchor>a002b960728b7e0f21f65df681ee60d38</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Function_::Sinusoid</name>
    <filename>classSimTK_1_1Function___1_1Sinusoid.html</filename>
    <base>Function_&lt; Real &gt;</base>
    <member kind="function">
      <type></type>
      <name>Sinusoid</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>ada0799f9fd56162bf0343eba6adf18cf</anchor>
      <arglist>(Real amplitude, Real frequency, Real phase=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmplitude</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>a3f2ee74ea64b4a3309772dfa31490ec1</anchor>
      <arglist>(Real amplitude)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>adc546cb36b0429a11e0ea6f86f0a1418</anchor>
      <arglist>(Real frequency)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhase</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>a72bf48b0eb16b6901febff7e438e12fb</anchor>
      <arglist>(Real phase)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAmplitude</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>a077b0dd055a8d3365a86d675d7f77c2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getFrequency</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>ad933377c9e109b06170c924ca2fb3e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPhase</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>a56afee5feba2111aa9517a1d391546a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>a4e329187823433099ebcb18d3d74d723</anchor>
      <arglist>(const Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>aca18962df87ab930773e867629e39f17</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgumentSize</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>a65181ed16c465b4d73aa1a75f9865154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxDerivativeOrder</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>a3b44802c3947ac54179991e5495fab1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Sinusoid.html</anchorfile>
      <anchor>a41b1f4862a7169372abc7653116882f1</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Function_::Step</name>
    <filename>classSimTK_1_1Function___1_1Step.html</filename>
    <base>SimTK::Function_</base>
    <member kind="function">
      <type></type>
      <name>Step</name>
      <anchorfile>classSimTK_1_1Function___1_1Step.html</anchorfile>
      <anchor>a85cb6471dfd45067bab5265f8ce7e504</anchor>
      <arglist>(const T &amp;y0, const T &amp;y1, Real x0, Real x1)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1Function___1_1Step.html</anchorfile>
      <anchor>aaa00b3ce41fad3f08b962efe8a449cdf</anchor>
      <arglist>(const Vector &amp;xin) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Step.html</anchorfile>
      <anchor>a6235f7444d0a0be5b66d7f9676c04f53</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vector &amp;xin) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgumentSize</name>
      <anchorfile>classSimTK_1_1Function___1_1Step.html</anchorfile>
      <anchor>abf0a8223fea97f7a2b3de92e7a617d26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxDerivativeOrder</name>
      <anchorfile>classSimTK_1_1Function___1_1Step.html</anchorfile>
      <anchor>a236335630f4c5442da45607bbb5641a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Function___1_1Step.html</anchorfile>
      <anchor>a68c0e7a4eb4382c80775ffb0be118946</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Parallel2DExecutor</name>
    <filename>classSimTK_1_1Parallel2DExecutor.html</filename>
    <base>PIMPLHandle&lt; Parallel2DExecutor, Parallel2DExecutorImpl &gt;</base>
    <class kind="class">SimTK::Parallel2DExecutor::Task</class>
    <member kind="enumeration">
      <name>RangeType</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor.html</anchorfile>
      <anchor>a6d5f8d673b0c616e510505e8e9443ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullMatrix</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor.html</anchorfile>
      <anchor>a6d5f8d673b0c616e510505e8e9443ef6a2da7c3b3f3b163629aae0208a2955fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HalfMatrix</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor.html</anchorfile>
      <anchor>a6d5f8d673b0c616e510505e8e9443ef6a4c614ee98db3664e75c78d335890be4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HalfPlusDiagonal</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor.html</anchorfile>
      <anchor>a6d5f8d673b0c616e510505e8e9443ef6a6a746821b8b4906ba9a03a3c3308a24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parallel2DExecutor</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor.html</anchorfile>
      <anchor>a14836d34ebce1747870011e85045ad71</anchor>
      <arglist>(int gridSize, int numThreads=ParallelExecutor::getNumProcessors())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parallel2DExecutor</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor.html</anchorfile>
      <anchor>ac0fa985fd10b26084edfa12f51bd6e30</anchor>
      <arglist>(int gridSize, ParallelExecutor &amp;executor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor.html</anchorfile>
      <anchor>aaaae838e428ba6191c2b8c7c8b91882d</anchor>
      <arglist>(Task &amp;task, RangeType rangeType)</arglist>
    </member>
    <member kind="function">
      <type>ParallelExecutor &amp;</type>
      <name>getExecutor</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor.html</anchorfile>
      <anchor>add13ba61693f89c8d960ec181e6d3cf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Parallel2DExecutor::Task</name>
    <filename>classSimTK_1_1Parallel2DExecutor_1_1Task.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Task</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor_1_1Task.html</anchorfile>
      <anchor>a023e76f2542ff5367fe2cb4669bb6400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor_1_1Task.html</anchorfile>
      <anchor>a89d90945b0e7a5d561bca359fe73d238</anchor>
      <arglist>(int i, int j)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor_1_1Task.html</anchorfile>
      <anchor>a64f707e30e8bf721661ef3bae23ce4d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classSimTK_1_1Parallel2DExecutor_1_1Task.html</anchorfile>
      <anchor>af7e7e7d46f62f90e71c872dfa8035614</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ParallelExecutor</name>
    <filename>classSimTK_1_1ParallelExecutor.html</filename>
    <base>PIMPLHandle&lt; ParallelExecutor, ParallelExecutorImpl &gt;</base>
    <class kind="class">SimTK::ParallelExecutor::Task</class>
    <member kind="function">
      <type></type>
      <name>ParallelExecutor</name>
      <anchorfile>classSimTK_1_1ParallelExecutor.html</anchorfile>
      <anchor>a3536f4649b09a4e294aa24a0087ef5d9</anchor>
      <arglist>(int numThreads=getNumProcessors())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>execute</name>
      <anchorfile>classSimTK_1_1ParallelExecutor.html</anchorfile>
      <anchor>a017b6894f4a071db6fac80797fa13bf8</anchor>
      <arglist>(Task &amp;task, int times)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumProcessors</name>
      <anchorfile>classSimTK_1_1ParallelExecutor.html</anchorfile>
      <anchor>a1b472a424c6261b2302cc90b2f45b233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isWorkerThread</name>
      <anchorfile>classSimTK_1_1ParallelExecutor.html</anchorfile>
      <anchor>aebf8f8fc80e3eb96f4c2a71d10b4fde6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ParallelExecutor::Task</name>
    <filename>classSimTK_1_1ParallelExecutor_1_1Task.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Task</name>
      <anchorfile>classSimTK_1_1ParallelExecutor_1_1Task.html</anchorfile>
      <anchor>aa5991645ab236313f3f124dfb490db4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classSimTK_1_1ParallelExecutor_1_1Task.html</anchorfile>
      <anchor>a036ea48ad2ac01641a68a23bd7779707</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSimTK_1_1ParallelExecutor_1_1Task.html</anchorfile>
      <anchor>a6d79a14201882b1737c23330bc4bd23f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classSimTK_1_1ParallelExecutor_1_1Task.html</anchorfile>
      <anchor>a6b21cedb1cac4fe58c96cf5505b7a906</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ParallelWorkQueue</name>
    <filename>classSimTK_1_1ParallelWorkQueue.html</filename>
    <base>PIMPLHandle&lt; ParallelWorkQueue, ParallelWorkQueueImpl &gt;</base>
    <class kind="class">SimTK::ParallelWorkQueue::Task</class>
    <member kind="function">
      <type></type>
      <name>ParallelWorkQueue</name>
      <anchorfile>classSimTK_1_1ParallelWorkQueue.html</anchorfile>
      <anchor>a6080b84676cac510f944f108a51d32cb</anchor>
      <arglist>(int queueSize, int numThreads=ParallelExecutor::getNumProcessors())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTask</name>
      <anchorfile>classSimTK_1_1ParallelWorkQueue.html</anchorfile>
      <anchor>af53ee4143a8c16e42ba3e434cefecdd8</anchor>
      <arglist>(Task *task)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classSimTK_1_1ParallelWorkQueue.html</anchorfile>
      <anchor>ab54d5f787b9e1e9aa4afae49a824f5c9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ParallelWorkQueue::Task</name>
    <filename>classSimTK_1_1ParallelWorkQueue_1_1Task.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Task</name>
      <anchorfile>classSimTK_1_1ParallelWorkQueue_1_1Task.html</anchorfile>
      <anchor>ae2017a7e0a43a94da80ab7ed1788bd7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classSimTK_1_1ParallelWorkQueue_1_1Task.html</anchorfile>
      <anchor>aa8ee77b94f78d155db86d9f6d967f14d</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Pathname</name>
    <filename>classSimTK_1_1Pathname.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deconstructPathname</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>af0db4cdc8a3b23aab2635e0b7111b5c3</anchor>
      <arglist>(const std::string &amp;name, bool &amp;isAbsolutePath, std::string &amp;directory, std::string &amp;fileName, std::string &amp;extension)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getAbsolutePathname</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a845b3c5f154c28cfa54293a2bf648a72</anchor>
      <arglist>(const std::string &amp;pathname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getAbsoluteDirectoryPathname</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a4f06e70b3fd45d32957eaf19daaab2a3</anchor>
      <arglist>(const std::string &amp;dirPathname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>fileExists</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>af8b46dc30af2bce5cb0db10baa50e6d9</anchor>
      <arglist>(const std::string &amp;fileName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getDefaultInstallDir</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>aa576ebf3bc101d0d7bedabcc199ce6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>addDirectoryOffset</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a084a59219d24b31b1fbac6f2106a7d92</anchor>
      <arglist>(const std::string &amp;base, const std::string &amp;offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getInstallDir</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>ab5ebcfbaed51911bcfe8450c3888ff1e</anchor>
      <arglist>(const std::string &amp;envInstallDir, const std::string &amp;offsetFromDefaultInstallDir)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getThisExecutablePath</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a8e1d9d72e3285d6706da043e27f0360a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getThisExecutableDirectory</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a6ef0da67c8b68b26d235bd113488898e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getCurrentWorkingDirectory</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a4adff7e48ad8a092f96cf1da3af5edab</anchor>
      <arglist>(const std::string &amp;drive=&quot;&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getRootDirectory</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a4cb2c4007a69513f8dc736eb9e18231d</anchor>
      <arglist>(const std::string &amp;drive=&quot;&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getCurrentDriveLetter</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a775cb824113fe3e52b30f76c0d0c9b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getCurrentDrive</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a13f5c064521e8ced8dae794cbc5267a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>environmentVariableExists</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>af908776e0f27f159bd504305e7db8c73</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getEnvironmentVariable</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a6ee5811cebab0f5c168145d836a12dae</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getPathSeparator</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a936d17128aea528e7b3896aba10d672f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>getPathSeparatorChar</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>ae1baaca539bcbec5a61275ec41bbb8d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isPathSeparator</name>
      <anchorfile>classSimTK_1_1Pathname.html</anchorfile>
      <anchor>a89f41f0fd8819ab985a695a28b346d74</anchor>
      <arglist>(char c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Plugin</name>
    <filename>classSimTK_1_1Plugin.html</filename>
    <member kind="function">
      <type></type>
      <name>Plugin</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a9209fe65064914e2f9ae1a6a93cbb4e9</anchor>
      <arglist>(const std::string &amp;defaultPathname=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Plugin</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>ae210d6b862101a69dc64092cc777ad53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>ae9d82db1b7768a8d651d80a1b819ded5</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unload</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a372d253bbfde4b5d57e53855231668b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoaded</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a2f8a60e502d0bc69349449d80e940e7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getLoadedPathname</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a2bb7ccf36dd92540b1277a8a96e997d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLastErrorMessage</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a10f33beef32058d255d748af9f223ace</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSearchPath</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a6ae7f1283dc7419ff2019ff774e93659</anchor>
      <arglist>(const Array_&lt; std::string &gt; &amp;pathIn)</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; std::string &gt; &amp;</type>
      <name>getSearchPath</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>aeb30c06c285e882a57e032e9446041bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSearchDirectory</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a2b11aec4e32b0427b6a1029d09401107</anchor>
      <arglist>(const std::string &amp;directory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prependSearchDirectory</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a2f58afac7bdc53bd114d2562adab9f8c</anchor>
      <arglist>(const std::string &amp;directory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>loadPluginByFileName</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a54156e5b43d478d9abcb8c0b51afe836</anchor>
      <arglist>(const std::string &amp;name, std::string &amp;errMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>loadDebugOrReleasePlugin</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a38b079eb6561d0cc84b00277ad5a23c4</anchor>
      <arglist>(const std::string &amp;base, const std::string &amp;extension, std::string &amp;loadedFileName, std::string &amp;errMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>getSymbolAddress</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a7e23db4cfd3bbe0bfdd99e402640dfb2</anchor>
      <arglist>(void *handle, const std::string &amp;name, std::string &amp;errMsg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unloadPlugin</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a0790bb419c828fd5a540ed6fd9ccdd8c</anchor>
      <arglist>(void *handle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>deconstructLibraryName</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a04be6694801fa22e1d1ce249985c2103</anchor>
      <arglist>(const std::string &amp;name, bool &amp;isAbsolutePath, std::string &amp;directory, std::string &amp;libPrefix, std::string &amp;baseName, std::string &amp;debugSuffix, std::string &amp;extension)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getDynamicLibPrefix</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>af8eaa5eeb25d18ff23c01b62227920a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getDynamicLibExtension</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>af5600e5ff95764406f7324da73b350a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getDynamicLibDebugSuffix</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a9ad89ecf9b032b7ab4618a7f95ddf345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_defaultName</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a350766490efaad96f7083f7cffebb544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Array_&lt; std::string &gt;</type>
      <name>m_searchPath</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a18d299f19a494729be3694b500b1b204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_loadedPathname</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>af33cf80a1c442eadd9875e7cbb1d96ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>m_handle</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a86eba309571ba380d5460b8866b50e67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_lastMessage</name>
      <anchorfile>classSimTK_1_1Plugin.html</anchorfile>
      <anchor>a94f2a77972d52cf4d68edeb1bf86cc68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PIMPLHandle</name>
    <filename>classSimTK_1_1PIMPLHandle.html</filename>
    <templarg>HANDLE</templarg>
    <templarg>IMPL</templarg>
    <templarg>PTR</templarg>
    <member kind="typedef">
      <type>PIMPLHandle&lt; HANDLE, IMPL, PTR &gt;</type>
      <name>HandleBase</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a6b925b77482930c9ef55955fa1e48b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HandleBase</type>
      <name>ParentHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>ae31b0b3d07fe975bdbeb5c1642e8e9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>ab7d17772c38115b341ee2e12aeeac36f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwnerHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a3a6d9f8e49a5b828a9143b44a42e94f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a1cb05874b5a826344472105dbd649249</anchor>
      <arglist>(const HANDLE &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disown</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a53fc78d673f2db6a98f3bb4cdf14fd2f</anchor>
      <arglist>(HANDLE &amp;newOwner)</arglist>
    </member>
    <member kind="function">
      <type>PIMPLHandle &amp;</type>
      <name>referenceAssign</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a878ec0d1cdd705d051a485a89c32f6e9</anchor>
      <arglist>(const HANDLE &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>PIMPLHandle &amp;</type>
      <name>copyAssign</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a2de72469fd5f56985b944f696e9e79ae</anchor>
      <arglist>(const HANDLE &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a46a485a9ef857781b8029ffd829fa636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IMPL &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a66906a41755f8dae64f3bd945b949c74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMPL &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a3cea00ca400bace6ccb795e5ba54d4ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getImplHandleCount</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a0e940afd133cc244c156b54a177529bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PIMPLHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>ae66aa14c4a664f31d22289e2bb604441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PIMPLHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>aa9451ca6b7502c54447d10449662a483</anchor>
      <arglist>(IMPL *p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PIMPLHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a5cabb439c294d4b696f9ec0a9534b6e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PIMPLHandle</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a6f661f13ccfd6ca41d8a9fc3435e32e7</anchor>
      <arglist>(const PIMPLHandle &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PIMPLHandle &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a39c83a6a5f2b7fb96834981442d30f8d</anchor>
      <arglist>(const PIMPLHandle &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setImpl</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a59892732781a567f4ad30b982acb2c27</anchor>
      <arglist>(IMPL *p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasSameImplementation</name>
      <anchorfile>classSimTK_1_1PIMPLHandle.html</anchorfile>
      <anchor>a3666ec4c8e626e771aa5d058605fa840</anchor>
      <arglist>(const HANDLE &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PIMPLImplementation</name>
    <filename>classSimTK_1_1PIMPLImplementation.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PIMPLImplementation</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>ac5ee42c3bf420454b7d82707bae0a064</anchor>
      <arglist>(HANDLE *h=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHandleCount</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>aa4e803861af3265b5d1f672fea42350f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementHandleCount</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>a11661258d1766591d9eb7f8975c2d63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>decrementHandleCount</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>ac0e920fe6919620a17b4b0e7201958c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PIMPLImplementation</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>ac47067f8f52b9aa2acab095b9b24faed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PIMPLImplementation</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>adf04b28a629987f55fc1758d14e0bb38</anchor>
      <arglist>(const PIMPLImplementation &amp;)</arglist>
    </member>
    <member kind="function">
      <type>PIMPLImplementation &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>aa2961ea52f0d3ce20b79ed710dddd249</anchor>
      <arglist>(const PIMPLImplementation &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerHandle</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>a4c0a40635e220116dacf7b45fde1cd5d</anchor>
      <arglist>(HANDLE &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>removeOwnerHandle</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>a77b48badf632ae071b2886a61c5b3207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceOwnerHandle</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>a40ec0fc453b7f26346f540ee83b09e07</anchor>
      <arglist>(HANDLE &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOwnerHandle</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>a8d28e7727daff54f1dbf1bdd465a9c5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwnerHandle</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>ab6176ff2ce7a76486deaf56ba8e06295</anchor>
      <arglist>(const HANDLE &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>const HANDLE &amp;</type>
      <name>getOwnerHandle</name>
      <anchorfile>classSimTK_1_1PIMPLImplementation.html</anchorfile>
      <anchor>af56d6c2802fe9f1c3ce2afd0a1f12aff</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ReferencePtr</name>
    <filename>classSimTK_1_1ReferencePtr.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>acfa754609f3bd0da239932c1abe6393c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>afc96cbd0f3977bc66c6b4dc85c904e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>aa3bc2cf328cb84835e3cf13edb488e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferencePtr</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a8a4a78b56dde0a279a04eb2c53c79055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferencePtr</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a8d7839f4089295fc358ec6016251add5</anchor>
      <arglist>(T *tp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferencePtr</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a2002422169b77e31cf1acaea0351eb33</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferencePtr</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a3f11b3cd26138d33bea1560efcbcc97c</anchor>
      <arglist>(const ReferencePtr &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ReferencePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>ad8be04337c1db46084933f9e6a0afb43</anchor>
      <arglist>(const ReferencePtr &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>ReferencePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a7d02344e9f26f109465d4a2a1bf123ce</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ReferencePtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a8e6b44cc1613d73ae9032400c9fdb74c</anchor>
      <arglist>(T *tp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReferencePtr</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a1f307c505529687543b6f261ace81837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a143484933f1d883c3b814d39c9e68f92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a9d982a55a9857fcc3239e02190af68a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>ad36409ee653b0506c08b38936e4226b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a4b52e35d021a254e3a4931d8c1cdf1ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>ac6b6a5c2d2726009eadb781785924088</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>getRef</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a207d01f74b55814de8e2ea48b8c801f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>abf2bf6d41875c6af9fdfc15eb44205b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>ae0e4de9ca33ef1a7d9cd3e4040e49f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>release</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a93ae599f4b6e367dfb7c85463acf6834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a6ac00c607b9211b1f4f4d11f50f5b16f</anchor>
      <arglist>(T *tp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>a893c61d989b88189787be573fb002729</anchor>
      <arglist>(ReferencePtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classSimTK_1_1ReferencePtr.html</anchorfile>
      <anchor>ad46fd56b8a4654f2beebe971e1970a46</anchor>
      <arglist>(SimTK::ReferencePtr&lt; T &gt; &amp;p1, SimTK::ReferencePtr&lt; T &gt; &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::StableArray</name>
    <filename>classSimTK_1_1StableArray.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>StableArray</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a26e59d583a08be5989c0ffe80a564346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StableArray</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a1f1221ec4c93f4a2727060d8c7cab090</anchor>
      <arglist>(size_t z, const T &amp;ival=T())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StableArray</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a1c38c17d2ed6330a478f41a8ce8a7011</anchor>
      <arglist>(const StableArray &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>StableArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>aed6d8f7c0628623d470a193e7ca36d31</anchor>
      <arglist>(const StableArray &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StableArray</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>af5796eea2020d4d6d98677374523245c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>abfb065326c75ecd5ee99df53dbd74230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>aa3b9b60fcca1583efc16491fbb66436d</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>aaae269996f7c52a02b09fd176e24f405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nItems</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a5b8fefda1a2b9354721fc751dbbccdda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>aa835d715aa73e1a4a4148ab5608ee890</anchor>
      <arglist>(size_t newz, const T &amp;ival=T())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a2e1e768372e6315375768096b852895b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>aab964e9f4b1a3a9d80885a03832d99eb</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>aa47835afbf1b2fbe9562392677faf3f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAt</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>af63fac863083aedfc35e2ac3277665e5</anchor>
      <arglist>(size_t i, const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>findFreeSlot</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>aa1ca5df3b74a4248c64c14e46a9d89c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>findNextItem</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>af259fc05d91c42c3c699397f0f508fc4</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>insert</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>aa943dbe96c574d728be931db1c99dbfd</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a5dbc3d96ae2f952893b3c3183acc24fb</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>front</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>ae78d1f9b2e4f598614c803911bc05f43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>front</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a921621b3b48a8be712007bdd3466f666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>back</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a63982f9599a0148492bb41f73198bdc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>back</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a83149003397fd1c5ff5d5b401c1dce60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>a58ffe5d02f3035e8a5ad6adf031762c0</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1StableArray.html</anchorfile>
      <anchor>af82999b7d90ec1283511ca5c801ac22b</anchor>
      <arglist>(size_t i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::String</name>
    <filename>classSimTK_1_1String.html</filename>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a64983d458989c35cf02cd280f82b62f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a160e77e7ebbcdfbebb0437c037e6b31f</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a3ef840f961c72a1035ce15766aea24d3</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>aac4a920e0d92593598f68ab52ff93893</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a97a31905de1fc8e9b0636d25e8de578c</anchor>
      <arglist>(const String &amp;s, int start, int len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a99fe5ae0856a9ef1c7224c7248b97f8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a08ddb83eb80aa6bd30b0b16719bc3f72</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>abd5380a81431ecfffb06735410b9471c</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a4613b96cd01c8fa341040bfbf465cbc1</anchor>
      <arglist>(std::string::size_type i)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a0d88e1f27e46a9ee2f6c1f0caa719539</anchor>
      <arglist>(std::string::size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>aec032715648d39945555fc5dcb9f08fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>length</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a2c958c46583cf68a75f283700b6d614e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>ac8a22075ceea68d578ddab48a61c3221</anchor>
      <arglist>(int i, const char *fmt=&quot;%d&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>ad5792cffc0cb89eb4fa091e877744650</anchor>
      <arglist>(long i, const char *fmt=&quot;%ld&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a55d9e1240a95a65b7393a62effce88fa</anchor>
      <arglist>(long long i, const char *fmt=&quot;%lld&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a681308378466e441e73e3d344e715967</anchor>
      <arglist>(unsigned int s, const char *fmt=&quot;%u&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a34256730ef7c180f8fcafc7f09995500</anchor>
      <arglist>(unsigned long s, const char *fmt=&quot;%lu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>aea27756399a14b1afa25f7ee3da6dcd6</anchor>
      <arglist>(unsigned long long s, const char *fmt=&quot;%llu&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a312c44be067c20f0c75088dba562b7d0</anchor>
      <arglist>(float r, const char *fmt=&quot;%.7g&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a7c3c572e29abfd57ac81edc8ce9756b3</anchor>
      <arglist>(double r, const char *fmt=&quot;%.15g&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a800aafee32d8d2dd46a8dc1beb9c76e4</anchor>
      <arglist>(long double r, const char *fmt=&quot;%.20Lg&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>aaa54dab80d84ee18ade03051cc860cfa</anchor>
      <arglist>(std::complex&lt; float &gt; r, const char *fmt=&quot;%.7g&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>ad83a5b5fd69d7a5682ddeead127ffa0d</anchor>
      <arglist>(std::complex&lt; double &gt; r, const char *fmt=&quot;%.15g&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a3f23cda8b3dc9b2fd815287d05040eba</anchor>
      <arglist>(std::complex&lt; long double &gt; r, const char *fmt=&quot;%.20Lg&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>af972a16f4615a114721230af00e78c69</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>ae1c3122a261b2a809607040facdd7c07</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a2eaf813e283fad6e473b652d8b5da6f1</anchor>
      <arglist>(const negator&lt; T &gt; &amp;nt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a2a648abf0c24481edf339dce4e9c361f</anchor>
      <arglist>(const negator&lt; T &gt; &amp;nt, const char *fmt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a18020c7be1451a5bcfb0a862c358c009</anchor>
      <arglist>(const conjugate&lt; T &gt; &amp;ct)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>String</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a52564819b4971dde8fcbb2d43fe9ed93</anchor>
      <arglist>(const conjugate&lt; T &gt; &amp;ct, const char *fmt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertTo</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>abfa1276801b7d8c6a75972cdcd147a53</anchor>
      <arglist>(T &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertTo</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>af7ccf3a5dd945d36830393283cc5d2e3</anchor>
      <arglist>(T &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>convertTo</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>acf4f1c63ce7988279a735a8b3a56f7d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertToBool</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>aa0e65a0b06807184da714cda358ba075</anchor>
      <arglist>(bool &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertToFloat</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a8bd1d323afae170c64b29045bfeca681</anchor>
      <arglist>(float &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertToDouble</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>aafa1da8f7ce08f1abc85db31ac705f6b</anchor>
      <arglist>(double &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryConvertToLongDouble</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>ac1b24326ebe2983d9217e7e54d61dfd7</anchor>
      <arglist>(long double &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>toUpper</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a92244338b8a7cab2eca67e7af711375d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>toLower</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a64d093925e132e66099e12a0fd8ad1bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>trimWhiteSpace</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>abf5e487d2e6e8e28007477851001b3a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>replaceAllChar</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a223ffa7b805adfe438eb262cc6687bb5</anchor>
      <arglist>(char oldChar, char newChar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertStringTo</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a27763de93526ebb30c4d42f70a6ceada</anchor>
      <arglist>(const String &amp;in, T &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>convertStringTo</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a69283e479e1cc4c8f550be8bdcaa03a8</anchor>
      <arglist>(const String &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>replaceAllChar</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>acb16cd1aac5f52c058bf51711887224e</anchor>
      <arglist>(const std::string &amp;in, char oldChar, char newChar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toUpper</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>ae26bd0cd3a61fa456c5fafa2101f7cf3</anchor>
      <arglist>(const std::string &amp;in)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>toLower</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>a13c2ddd07a4194025d8e28416d4d4b5d</anchor>
      <arglist>(const std::string &amp;in)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>trimWhiteSpace</name>
      <anchorfile>classSimTK_1_1String.html</anchorfile>
      <anchor>ac2e7e636435e54b6a110ff7a37664f6c</anchor>
      <arglist>(const std::string &amp;in)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ThreadLocal</name>
    <filename>classSimTK_1_1ThreadLocal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ThreadLocal</name>
      <anchorfile>classSimTK_1_1ThreadLocal.html</anchorfile>
      <anchor>a896fbdf2aaaf0929b3e51c1f2eab3397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadLocal</name>
      <anchorfile>classSimTK_1_1ThreadLocal.html</anchorfile>
      <anchor>afd7fd1c7778cdd2d1a73a296b65bdc80</anchor>
      <arglist>(const T &amp;defaultValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadLocal</name>
      <anchorfile>classSimTK_1_1ThreadLocal.html</anchorfile>
      <anchor>aaa52064d2f462b0b6b747d36ef97273e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>upd</name>
      <anchorfile>classSimTK_1_1ThreadLocal.html</anchorfile>
      <anchor>ae2f28b3437637444456e64a6a9206e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>classSimTK_1_1ThreadLocal.html</anchorfile>
      <anchor>a62eac54ecf608a82184f9c529da35817</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::AbstractValue</name>
    <filename>classSimTK_1_1AbstractValue.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractValue</name>
      <anchorfile>classSimTK_1_1AbstractValue.html</anchorfile>
      <anchor>a9b9917e92b67b1afcde1b68e0345610e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractValue</name>
      <anchorfile>classSimTK_1_1AbstractValue.html</anchorfile>
      <anchor>a24a8add23f11dcf3d81077e359967622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getTypeName</name>
      <anchorfile>classSimTK_1_1AbstractValue.html</anchorfile>
      <anchor>a6b60ad1ef050d659a09d8454e95be5bf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual String</type>
      <name>getValueAsString</name>
      <anchorfile>classSimTK_1_1AbstractValue.html</anchorfile>
      <anchor>a2c914adf00ca1dbdaaaa732410c31c65</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isCompatible</name>
      <anchorfile>classSimTK_1_1AbstractValue.html</anchorfile>
      <anchor>a021cac449a52b44856b19f8855ef757e</anchor>
      <arglist>(const AbstractValue &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compatibleAssign</name>
      <anchorfile>classSimTK_1_1AbstractValue.html</anchorfile>
      <anchor>a92453e8b1321a256af3b597efb0f4f0c</anchor>
      <arglist>(const AbstractValue &amp;)=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1AbstractValue.html</anchorfile>
      <anchor>a07a293f5ccb747cace63716db8ea2454</anchor>
      <arglist>(const AbstractValue &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractValue *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1AbstractValue.html</anchorfile>
      <anchor>a39bb1b9a2a4bda5e2e7b7606992c795f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Value</name>
    <filename>classSimTK_1_1Value.html</filename>
    <templarg>T</templarg>
    <base>SimTK::AbstractValue</base>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a9d061b638b3bff1ccafd25826e5d5347</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>afd2bd6aba8e7f0d0bf43eec7990b876f</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a467260c8b0fd858e68449b80286f42c9</anchor>
      <arglist>(const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a7ace716c06ab883af34c06d111fec341</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a5a99df5729f7d3797e501ecfe3320757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T &amp;</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a0bf5915790c81d151f6e24ffad1e4240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>get</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>ae08ecb94d5d6f87af98b5d5fa2246430</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a42281a4cf2d7f74cdc704ad796d4dc9d</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>upd</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a53d178f2b8a56c49cd4d7e9e4c9f9ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompatible</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a029600365ab0d4336c324d0efbaa04ae</anchor>
      <arglist>(const AbstractValue &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compatibleAssign</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a40b127a4ef90911f4201c2f20e31f39e</anchor>
      <arglist>(const AbstractValue &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getTypeName</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>ae660362b4197da8317f836db21af2cbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getValueAsString</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a5e4cd8e4941e15180370757127bd8215</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a67f4a39c74b7e3ae5b54e8c2a62e9d32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_DOWNCAST</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a9d15233e011464387b425c34a875c048</anchor>
      <arglist>(Value, AbstractValue)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>thing</name>
      <anchorfile>classSimTK_1_1Value.html</anchorfile>
      <anchor>a5ba6f5327c655da5783bb4fb47f458ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml</name>
    <filename>classSimTK_1_1Xml.html</filename>
    <class kind="class">SimTK::Xml::Attribute</class>
    <class kind="class">SimTK::Xml::attribute_iterator</class>
    <class kind="class">SimTK::Xml::Comment</class>
    <class kind="class">SimTK::Xml::Element</class>
    <class kind="class">SimTK::Xml::element_iterator</class>
    <class kind="class">SimTK::Xml::Node</class>
    <class kind="class">SimTK::Xml::node_iterator</class>
    <class kind="class">SimTK::Xml::Text</class>
    <class kind="class">SimTK::Xml::Unknown</class>
    <member kind="enumeration">
      <name>NodeType</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoNode</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bca1ac71fe4a533a82860b70f93cb690a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ElementNode</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bca9e989384ca13f6904a03508b95daca5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TextNode</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bcafa3611893e7ad0de926231eca098bba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CommentNode</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bcac9c4cd9ab6736ab5bf6f18b751109727</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnknownNode</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bcac9b7672fa07db7c0f3890080f6ff8832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoJunkNodes</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bca9cd1e2482a4f2d4c2cb78a8ae0a93cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JunkNodes</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bca3745575a8cd6e85844d07f37be7e17e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AnyNodes</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7a166f7c2fb7f77beb467f74b3f766bca3c0570f6f18060a4551d3c183e91bbc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Xml</type>
      <name>Document</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a0fcdb969e738738b79de0e31825ac8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Xml</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>abbe5a3ed6b8ff412ce2e36ff9b0d9bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Xml</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a697125e016291a73196fc426fb23b66d</anchor>
      <arglist>(const String &amp;pathname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Xml</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a207ea14faa1957fabf892b5796ae55c9</anchor>
      <arglist>(const Xml::Document &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Xml::Document &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a494c2cafb8ba3000141b1d19171a344b</anchor>
      <arglist>(const Xml::Document &amp;souce)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Xml</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a62a5c4dff53014486815bea5842dedc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>acbae881ca3f2a8a980c745b724415700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Element</type>
      <name>getRootElement</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>af658576e98e402f8c8b02fd7a9bfade1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getRootTag</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a78b8b2b41c70f56892e87df3171d3788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootTag</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a1fade2e1c78914b098bb426190801ef0</anchor>
      <arglist>(const String &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTopLevelNodeAfter</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a1e64a15d8bb3de04580054a377411c97</anchor>
      <arglist>(const node_iterator &amp;afterThis, Node insertThis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertTopLevelNodeBefore</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>ae20a9fa8b105a5240e84a25d87e090b2</anchor>
      <arglist>(const node_iterator &amp;beforeThis, Node insertThis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseTopLevelNode</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a0228f501f4b48a1f8effe50b6f1af9eb</anchor>
      <arglist>(const node_iterator &amp;deleteThis)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>removeTopLevelNode</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a8336e611dccdc7501ae7d66863f8eb02</anchor>
      <arglist>(const node_iterator &amp;removeThis)</arglist>
    </member>
    <member kind="function">
      <type>node_iterator</type>
      <name>node_begin</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>aa9781ee20875a317341495a4cabe944a</anchor>
      <arglist>(NodeType allowed=AnyNodes)</arglist>
    </member>
    <member kind="function">
      <type>node_iterator</type>
      <name>node_end</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a4a6562804e39c61cbc3e307cc686c6d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getXmlVersion</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>adcd72cab6e8402e36082e3bd20af8b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getXmlEncoding</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>ae1d5c318bef02efa5e9138103adb4f4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getXmlIsStandalone</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a416af3af667e4bc51e51f90fbe851f89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXmlVersion</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a84fc538adac36b233cc14c400f9a21ca</anchor>
      <arglist>(const String &amp;version)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXmlEncoding</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>aec4c9ed30b36f9f4cd7891493917b74a</anchor>
      <arglist>(const String &amp;encoding)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXmlIsStandalone</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a100bba1c25bc97cc49daa43f912af883</anchor>
      <arglist>(bool isStandalone)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getNodeTypeAsString</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>aadf2186f772655f244a5fe116dc126a0</anchor>
      <arglist>(NodeType type)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>adeed202918b23025e38c1219d176d312</anchor>
      <arglist>(std::ostream &amp;o, const Xml::Document &amp;doc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setXmlCondenseWhiteSpace</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a108f40e6cfcb9e942681f9d576048a6f</anchor>
      <arglist>(bool shouldCondense)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isXmlWhiteSpaceCondensed</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>ab2a4a8485a23f2095e2f3dfef2fad98b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromFile</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>af4d072eaf38e8c34bd135416ef599120</anchor>
      <arglist>(const String &amp;pathname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToFile</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a82553cd8e89212779343ca40f813ce57</anchor>
      <arglist>(const String &amp;pathname) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromString</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a6ca19a1616e62cb50c86ccd7bc59d385</anchor>
      <arglist>(const String &amp;xmlDocument)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFromString</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a42d1b567ba88a5f490e02e9f02d2469f</anchor>
      <arglist>(const char *xmlDocument)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToString</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a9f93ae9b285db17fb8cfdc04d24fc6de</anchor>
      <arglist>(String &amp;xmlDocument, bool compact=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndentString</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a9e55d97926c7feba70324d0154c3ea39</anchor>
      <arglist>(const String &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getIndentString</name>
      <anchorfile>classSimTK_1_1Xml.html</anchorfile>
      <anchor>a7538e2ed9c571f3659df6da03f56abf9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::Attribute</name>
    <filename>classSimTK_1_1Xml_1_1Attribute.html</filename>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>acd8addd441555c07c120a5c2666f5722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>ace142844a47e5035ebd6e66372ecd2b1</anchor>
      <arglist>(const String &amp;name, const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attribute</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a3dea08ac4f49108371e14fb013094bb2</anchor>
      <arglist>(const Attribute &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Attribute &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a797c63934d68c2e6238867fc64d29072</anchor>
      <arglist>(const Attribute &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Attribute</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a1cd37a5e2f9b864a4f9bc37918859693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a73dd96ffa2cbe7b3fc45b94598f26b4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrphan</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>ab2ddfde245dad96dbec4b9df1077ccde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>ae18dfd0ae75fd9e2f33e5cd2c315a684</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a4d68b6c1aade2f9da74a639ec2ecc898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Attribute &amp;</type>
      <name>setName</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a3139279a2d9e2b78cffce2d0a02d964d</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Attribute &amp;</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a47a872774e4ffaa1f774d0ba6f432274</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a4f63fc275ac4a799d4176062305c049b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearOrphan</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a95c2fe23146618fde56386e368c420a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToString</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>aed91033040c160f0b2e9ac20129ba768</anchor>
      <arglist>(String &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>ab5857d5f5638b8a19a72be0de0797c45</anchor>
      <arglist>(const Attribute &amp;attr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a3e5f18329eb8eb83bc2788e5fa7ec8eb</anchor>
      <arglist>(const Attribute &amp;attr) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::attribute_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a4b98898efaa4929d401e6e609337f2c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Element</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>ad573bea5abccc16b7d355fda4a8a6ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1Xml_1_1Attribute.html</anchorfile>
      <anchor>a76e029e3f690acfad1564e4572d2973c</anchor>
      <arglist>(std::ostream &amp;o, const Xml::Attribute &amp;attr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::attribute_iterator</name>
    <filename>classSimTK_1_1Xml_1_1attribute__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>attribute_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>a7255b51294d41c3b958ff507d6042703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>attribute_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>a3ff1170e557c0dab6a6de44c56443a31</anchor>
      <arglist>(Attribute &amp;attr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>attribute_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>af2dd1fbc4694460ef449ca959633fe2a</anchor>
      <arglist>(const attribute_iterator &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~attribute_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>a4dc8dc347169a1f1e85da2e3c51d2387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>attribute_iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>aa9307c97c0a827ea68ac87797fa61d5d</anchor>
      <arglist>(const attribute_iterator &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>attribute_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>a4fa9a45de3c4f744acabc354fb8cafc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>attribute_iterator</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>acd030b7f64f61b6a72944ea7f2cffc1a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>attribute_iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>a0ea2e905e834b347e83f87dd3d3548d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>attribute_iterator</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>a807932304b4445e948461dcb267c3176</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Attribute &amp;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>abcfd47c630319e15ad978c8c5403f9a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Attribute *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>a2bffad8d95ef3b019b8df1374e7c25b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>ae9bf2efb2691a95eb909ddbf303dd59c</anchor>
      <arglist>(const attribute_iterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>ab9eda6becaabc6919ecbc208e4fc5120</anchor>
      <arglist>(const attribute_iterator &amp;other) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Element</name>
      <anchorfile>classSimTK_1_1Xml_1_1attribute__iterator.html</anchorfile>
      <anchor>ad573bea5abccc16b7d355fda4a8a6ff4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::Comment</name>
    <filename>classSimTK_1_1Xml_1_1Comment.html</filename>
    <base>SimTK::Xml::Node</base>
    <member kind="function">
      <type></type>
      <name>Comment</name>
      <anchorfile>classSimTK_1_1Xml_1_1Comment.html</anchorfile>
      <anchor>a51ee7d3b5113ce5a3dc193afe2763d61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Comment</name>
      <anchorfile>classSimTK_1_1Xml_1_1Comment.html</anchorfile>
      <anchor>a920e11dccf6b7ed94d10641657e3fba8</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>Comment</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Xml_1_1Comment.html</anchorfile>
      <anchor>a3a23a55dac862db0d9e7dc6d69d55414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isA</name>
      <anchorfile>classSimTK_1_1Xml_1_1Comment.html</anchorfile>
      <anchor>ad402bac32b6d3ee90d69a18d63389e4d</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Comment &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Comment.html</anchorfile>
      <anchor>a9072baae0541e2f681d2563f43104147</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Comment &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Comment.html</anchorfile>
      <anchor>a92ff8edaff37b8ea82b674b382d1827c</anchor>
      <arglist>(Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::Element</name>
    <filename>classSimTK_1_1Xml_1_1Element.html</filename>
    <base>SimTK::Xml::Node</base>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ace92fc2051430e6dc12eec23135bc409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ab436c4a5dd786608a8083cae30a93388</anchor>
      <arglist>(const String &amp;tagWord, const String &amp;value=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>aeeea0c8fd0fe18efb95f2907ac055451</anchor>
      <arglist>(const String &amp;tagWord, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Element</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>aaa31891cf84e151e7657630ef628fcd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getElementTag</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a6bffec933fcbf26da23323fe35eaf448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElementTag</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a6b5bf3c6e351f7dd9afa52fcff07af52</anchor>
      <arglist>(const String &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNodeBefore</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a4e79c09e3f397a48c65f40f86d113664</anchor>
      <arglist>(const node_iterator &amp;pos, Node node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNodeAfter</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a9bdc6b7182e6308f1bd9e08c830566b9</anchor>
      <arglist>(const node_iterator &amp;pos, Node node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseNode</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ac3822acf6439f7b502ef0d6778ede972</anchor>
      <arglist>(const node_iterator &amp;deleteThis)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>removeNode</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>afd5b6dd8506bfb5221631df7dad4de4d</anchor>
      <arglist>(const node_iterator &amp;removeThis)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValueElement</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>aae65d97f9b00e4418d5602e77bb5fb66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ab42eeb91fc1f6d3ad570d0db925870ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>updValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a6fbe1243e8e2e83ceb3925659181065d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a87d99f6f31da37e122ee14dcb7281238</anchor>
      <arglist>(const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a03fd52a31abb8f1626d7902c747b02d4</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValueAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a3250133e91118e41e46f925f05556cec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValueAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a665fafcd7535ac1db55c9ed81caea4c3</anchor>
      <arglist>(T &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getRequiredElementValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>af527410d9e2b0483da3b7384d8c497ec</anchor>
      <arglist>(const String &amp;tag) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getOptionalElementValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>aaeeab5895d7485590ab1fec6177c7a91</anchor>
      <arglist>(const String &amp;tag, const String &amp;def=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getRequiredElementValueAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>acd51b037e620848e76d1591cdb26a457</anchor>
      <arglist>(const String &amp;tag) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getOptionalElementValueAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a2bf04099eb57a7ce81de228ba6b2c034</anchor>
      <arglist>(const String &amp;tag, const T &amp;def) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttribute</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ab6545733fba05a6349cee654d8d2167b</anchor>
      <arglist>(const String &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttributeValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a8c04ffb38dc3e908fd559c7c542ad559</anchor>
      <arglist>(const String &amp;name, const String &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseAttribute</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a03e4d7a877ad3a514412e78e3efc6ce7</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getRequiredAttributeValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a65d6cb52b56efd3d9a1202ac827e1812</anchor>
      <arglist>(const String &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getRequiredAttributeValueAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a12c6820ae4a6507752eefd1ea960fd46</anchor>
      <arglist>(const String &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getOptionalAttributeValue</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ae54dacef8bea4acac95a89ce5aefb44d</anchor>
      <arglist>(const String &amp;name, const String &amp;def=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getOptionalAttributeValueAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a24d8bc6dc30f3d97af5a393a7b057b83</anchor>
      <arglist>(const String &amp;name, const T &amp;def) const </arglist>
    </member>
    <member kind="function">
      <type>Attribute</type>
      <name>getRequiredAttribute</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ad904c330f4cec26a4e5793bed0441445</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Attribute</type>
      <name>getOptionalAttribute</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>aacd827d22b75b6202b7461b2ab90ddeb</anchor>
      <arglist>(const String &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Attribute &gt;</type>
      <name>getAllAttributes</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a34d797fd21a8b3d851616dc8d00241a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>attribute_iterator</type>
      <name>attribute_begin</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a2e80bd8d9c3421ba9d1113579f9acf47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>attribute_iterator</type>
      <name>attribute_end</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ab4ba2c678473eaab3218db79e67e671c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasElement</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>af295f46c76adc5bbdfac98b6f1a80b82</anchor>
      <arglist>(const String &amp;tag) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNode</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a1495f916a3d8924d4ead80592c2034ce</anchor>
      <arglist>(NodeType allowed=AnyNodes) const </arglist>
    </member>
    <member kind="function">
      <type>Element</type>
      <name>getRequiredElement</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a1ee99cd86e3e413234c7b4bf9e2d5bf6</anchor>
      <arglist>(const String &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>Element</type>
      <name>getOptionalElement</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a3772785ece91bcccba9da75e89eecbdd</anchor>
      <arglist>(const String &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Element &gt;</type>
      <name>getAllElements</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>af9c43f8749c9def7a0b65136e8fc1329</anchor>
      <arglist>(const String &amp;tag=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Node &gt;</type>
      <name>getAllNodes</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a60f0a78da097f84bf67bef22bb5b5372</anchor>
      <arglist>(NodeType allowed=AnyNodes)</arglist>
    </member>
    <member kind="function">
      <type>element_iterator</type>
      <name>element_begin</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a8f9e8c86fb08bd3c0ffd397e0186acb0</anchor>
      <arglist>(const String &amp;tag=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>element_iterator</type>
      <name>element_end</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a7c1f3e8fced7b1bb5b081b9cb5af9fa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>node_iterator</type>
      <name>node_begin</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a9d3c5ff58a4653ffac14b19447f8c718</anchor>
      <arglist>(NodeType allowed=AnyNodes)</arglist>
    </member>
    <member kind="function">
      <type>node_iterator</type>
      <name>node_end</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>aad74f7074ef8b528f9e9ac5fed950790</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isA</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a569474bd297296231c6078cc050a8521</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Element &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>a869b394c523a22dc160a5990850457e3</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Element &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ad15f74e7946e1abb0026eff29803cbd2</anchor>
      <arglist>(Node &amp;node)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Node</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>aee787d4b6e5639c308b632173814ece7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::element_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1Element.html</anchorfile>
      <anchor>ad4ee202f3a1549ce45c613ddce919565</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::element_iterator</name>
    <filename>classSimTK_1_1Xml_1_1element__iterator.html</filename>
    <base>SimTK::Xml::node_iterator</base>
    <member kind="function">
      <type></type>
      <name>element_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>aff45a7e3df5957a36ed9044679b62158</anchor>
      <arglist>(const String &amp;tag=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>element_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>ac1b3cb4cb94ae89d5486b8e3ea85ec49</anchor>
      <arglist>(Element &amp;elt, const String &amp;tag=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>element_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>ad3f5eaa555b8dee104ffb0bdc543bbe9</anchor>
      <arglist>(const element_iterator &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>element_iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a778c1cf39fe2771886cfe20203989769</anchor>
      <arglist>(const element_iterator &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>element_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a5a57fc7a1d93f96e3969860f4e3d9e22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>element_iterator</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>abaea675d8316f97352b4ebfcf5409732</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>element_iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a2951df3a9174d53d6f229a09348a0b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>element_iterator</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a3b86b785154886aec9feac58d809b120</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Element &amp;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a4ac0e2a649a9a92ee36fa8a770a0d40f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a6242b99be499cc0924116bc95216488a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a546432bc9d8848c0563c3dd1cc145296</anchor>
      <arglist>(const element_iterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a48d046df23674ddf9e14df8a515c9dd3</anchor>
      <arglist>(const element_iterator &amp;other) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Xml</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>a6da91779d499b1ad3035fe196aecd99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Element</name>
      <anchorfile>classSimTK_1_1Xml_1_1element__iterator.html</anchorfile>
      <anchor>ad573bea5abccc16b7d355fda4a8a6ff4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::Node</name>
    <filename>classSimTK_1_1Xml_1_1Node.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a9523850db5f393008f00c3900fa753b8</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a50231fc82d308d4827cbb13f882747ee</anchor>
      <arglist>(const Node &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a6086556201f425213e56d7d35d5a770f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a37a4a32f7bcd56d7e045def2c0721504</anchor>
      <arglist>(const Node &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Node &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>ac73ad2654deb98cc0d755cedef628102</anchor>
      <arglist>(const Node &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Node</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a1bc94baed587a767bc743a6922a1caa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Node</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>ae54089650958823d1a7d070cf27c1741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>acc212921b30a4a7b95f339224b115b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearOrphan</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>af526ba1e54d03561336ec39eba5a3fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeType</type>
      <name>getNodeType</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a02af9c337d25add562a5b3dfd75c963c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getNodeTypeAsString</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a8b2d94932a97f4c5eb5bd28b20748f3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a8a08c6ea7d9b3362a5b2af3b7012d09a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTopLevelNode</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>aaa939cc4a494ad2f8117bc058171a3d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrphan</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>ab55413e3118a107e93cd58b1186ac99e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParentElement</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a0803126f86e88a10ffa31437115f5814</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Element</type>
      <name>getParentElement</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>aad45b2ef59c93d755edb25334f501a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getNodeText</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a0091f53a29b7082e51f8682ab8e36643</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToString</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a577c79035793ee0090d3826623535706</anchor>
      <arglist>(String &amp;out, bool compact=false) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Xml</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a6da91779d499b1ad3035fe196aecd99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Impl</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a93e46e94e7cf9a3d870ce5f7444f2899</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::node_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a66b9de807f55aaefbf3329e1da7874ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Comment</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>afc68234fdd04ea25b3b4906c59460129</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Unknown</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>ac058de0e0e9bc866bc00bb8e4fcb40d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Text</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a37512fe7e1bedb57d57ff5799cce6e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Element</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>ad573bea5abccc16b7d355fda4a8a6ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1Xml_1_1Node.html</anchorfile>
      <anchor>a80c0f5ebe69e44375f32f508ba2c19ce</anchor>
      <arglist>(std::ostream &amp;o, const Xml::Node &amp;xmlNode)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::node_iterator</name>
    <filename>classSimTK_1_1Xml_1_1node__iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>node_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>ab2a9a6c65745b4566c135d1798d5952e</anchor>
      <arglist>(NodeType allowed=AnyNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a32b1c149a0150bec8b3f9776a31dbc68</anchor>
      <arglist>(Node &amp;node, NodeType allowed=AnyNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>node_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a4876bd55430dd51448c65c99866f4c93</anchor>
      <arglist>(const node_iterator &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~node_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>acd37fea199a374c999599dbb1b0ea311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node_iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a1e07738d69309c7c2f3bf1fe2bb503c4</anchor>
      <arglist>(const node_iterator &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>node_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a39950ac7b09f80cec76da08b113b7b31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node_iterator</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a4506700dd33d106a7e28b6b596b63a1d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>node_iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>ac8f1cb7a78dae4b4ca1369e341c6e7d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>node_iterator</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>ae9daaa753e7f1bc001e7ab3e87e829af</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Node &amp;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a8dac34c8aa8dc5478aef0778dda6d1d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a594295636946c6d34f226572fc9bd923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node &amp;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>af5f05b4eaea6b00885dd6d4d6c1c528a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>af319b1939fa20ab20f30aefd5d228087</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>af36062e5a7c3e096fd803235769e4f69</anchor>
      <arglist>(const node_iterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>add8371f6a0e5bd8f565eab6f8bd52875</anchor>
      <arglist>(const node_iterator &amp;other) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>node_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a8cf7ec78fecc72f85f89e281615fe86e</anchor>
      <arglist>(TiXmlNode *tiNode, NodeType allowed=AnyNodes)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reassign</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a12355cc7cd03135e4678d30f1cd75a9c</anchor>
      <arglist>(TiXmlNode *tiNode)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Xml</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>a6da91779d499b1ad3035fe196aecd99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Node</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>aee787d4b6e5639c308b632173814ece7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::Element</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>ad573bea5abccc16b7d355fda4a8a6ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml::element_iterator</name>
      <anchorfile>classSimTK_1_1Xml_1_1node__iterator.html</anchorfile>
      <anchor>ad4ee202f3a1549ce45c613ddce919565</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::Text</name>
    <filename>classSimTK_1_1Xml_1_1Text.html</filename>
    <base>SimTK::Xml::Node</base>
    <member kind="function">
      <type></type>
      <name>Text</name>
      <anchorfile>classSimTK_1_1Xml_1_1Text.html</anchorfile>
      <anchor>aecf6e2a0e6d1b0d72b474b6cb3687557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Text</name>
      <anchorfile>classSimTK_1_1Xml_1_1Text.html</anchorfile>
      <anchor>ac3040d0982a71317c1e21222938010e3</anchor>
      <arglist>(const String &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>Text</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Xml_1_1Text.html</anchorfile>
      <anchor>abe6337057cd404b9229b59d24d818df8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getText</name>
      <anchorfile>classSimTK_1_1Xml_1_1Text.html</anchorfile>
      <anchor>ae3257749cade2995c66ca7789fc0ddc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String &amp;</type>
      <name>updText</name>
      <anchorfile>classSimTK_1_1Xml_1_1Text.html</anchorfile>
      <anchor>a751fb94757f9758c3d11cc808d84c4ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isA</name>
      <anchorfile>classSimTK_1_1Xml_1_1Text.html</anchorfile>
      <anchor>a295b549ac6f1e732580554699d5a9ab2</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Text &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Text.html</anchorfile>
      <anchor>ae1cff70393af7135fd2f812835b827a5</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Text &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Text.html</anchorfile>
      <anchor>a4eff2e1157c2fc1b0acbf3eb8c840a42</anchor>
      <arglist>(Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Xml::Unknown</name>
    <filename>classSimTK_1_1Xml_1_1Unknown.html</filename>
    <base>SimTK::Xml::Node</base>
    <member kind="function">
      <type></type>
      <name>Unknown</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>ab4c34efd76b61edef0b9653c833b3af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unknown</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>a72932532c6df80587b42e3f0136f77d8</anchor>
      <arglist>(const String &amp;contents)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unknown</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>ab2a727090c6d782e3f3d7f5a4b9c94cc</anchor>
      <arglist>(Element &amp;element, const String &amp;contents)</arglist>
    </member>
    <member kind="function">
      <type>Unknown</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>a9a5523d224d433bed3cf6363df3d4cbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getContents</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>a718310dfaf8e676b2269c01e5e24262f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContents</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>a440ae336b8c2eee6e050c564f7edf218</anchor>
      <arglist>(const String &amp;contents)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isA</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>a5f3067975c5d26c13abe117a1cc636fa</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Unknown &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>ab07d8bc42478e10bcc11001de15921d4</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Unknown &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Xml_1_1Unknown.html</anchorfile>
      <anchor>a979e10d702c3a4260b1bd5313bc4fc72</anchor>
      <arglist>(Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Lapack</name>
    <filename>classSimTK_1_1Lapack.html</filename>
    <member kind="function">
      <type>void</type>
      <name>gemm</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a86d28e57cc60a18a7465f239c8db43c3</anchor>
      <arglist>(char transa, char transb, int m, int n, int k, const float &amp;alpha, const float a[], int lda, const float b[], int ldb, const float &amp;beta, float c[], int ldc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemm</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a60f4eb4547b9819d59071ca2e4bf1fcd</anchor>
      <arglist>(char transa, char transb, int m, int n, int k, const double &amp;alpha, const double a[], int lda, const double b[], int ldb, const double &amp;beta, double c[], int ldc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemm</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a01fcb42e248b18f1fcc8472194c5c54f</anchor>
      <arglist>(char transa, char transb, int m, int n, int k, const complex&lt; float &gt; &amp;alpha, const complex&lt; float &gt; a[], int lda, const complex&lt; float &gt; b[], int ldb, const complex&lt; float &gt; &amp;beta, complex&lt; float &gt; c[], int ldc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gemm</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a964d8148c6071b9314943a997bf2da95</anchor>
      <arglist>(char transa, char transb, int m, int n, int k, const complex&lt; double &gt; &amp;alpha, const complex&lt; double &gt; a[], int lda, const complex&lt; double &gt; b[], int ldb, const complex&lt; double &gt; &amp;beta, complex&lt; double &gt; c[], int ldc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getri</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>aa9f457f968283519605e68698c38fd7d</anchor>
      <arglist>(int n, float a[], int lda, const int ipiv[], float work[], int lwork, int &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getri</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>abd15dbd1dc727ecc4ae6d35490b63f95</anchor>
      <arglist>(int n, double a[], int lda, const int ipiv[], double work[], int lwork, int &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getri</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a3060378bb63f410ba5c319612a99f6af</anchor>
      <arglist>(int n, complex&lt; float &gt; a[], int lda, const int ipiv[], complex&lt; float &gt; work[], int lwork, int &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getri</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a5614a32d74a32ec007f10479d1d82572</anchor>
      <arglist>(int n, complex&lt; double &gt; a[], int lda, const int ipiv[], complex&lt; double &gt; work[], int lwork, int &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getrf</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>aca688f0003e5d251e5127d37b078a5ca</anchor>
      <arglist>(int m, int n, float a[], int lda, int ipiv[], int &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getrf</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>aebdcd36838e61bcad5bfbb62b16a7783</anchor>
      <arglist>(int m, int n, double a[], int lda, int ipiv[], int &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getrf</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>af0a57ea1a597b76d600d5155a3115617</anchor>
      <arglist>(int m, int n, complex&lt; float &gt; a[], int lda, int ipiv[], int &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getrf</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a742b77e299a928057b6e3b986ec20480</anchor>
      <arglist>(int m, int n, complex&lt; double &gt; a[], int lda, int ipiv[], int &amp;info)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gemm</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a868ee8c6ae2877f7fd73e637ba648b01</anchor>
      <arglist>(char transa, char transb, int m, int n, int k, const P &amp;alpha, const P a[], int lda, const P b[], int ldb, const P &amp;beta, P c[], int ldc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getri</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>abd1a5d6b9eb09b38635a7818721d1c7b</anchor>
      <arglist>(int n, P a[], int lda, const int ipiv[], P work[], int lwork, int &amp;info)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getrf</name>
      <anchorfile>classSimTK_1_1Lapack.html</anchorfile>
      <anchor>a14d39318d17cb8a69701f38def4ae20a</anchor>
      <arglist>(int m, int n, P a[], int lda, int ipiv[], int &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Test</name>
    <filename>classSimTK_1_1Test.html</filename>
    <class kind="class">SimTK::Test::Subtest</class>
    <member kind="function">
      <type></type>
      <name>Test</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga00f5fdc2c110cb8d8bc26065425fa7e7</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Test</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga9c2b8322d18c4908cbdbe8198cd3d582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>defTol</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga3e8b7e6d667e677b1d5b092256eaa306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>defTol2</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga2a4547f0b5532580ef17144faabee206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gafa185f89b0d7bc197f1dd829f6f6d30f</anchor>
      <arglist>(float v1, float v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga2efcb167f0c547353d067c8cc7bafa8b</anchor>
      <arglist>(double v1, double v2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gae0f0b744a814cbc0352f772c60a8b813</anchor>
      <arglist>(long double v1, long double v2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gae4b52795224b425d12f884ae6e985d41</anchor>
      <arglist>(int i1, int i2, int n, double tol=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga5bfa631da7c10949a8eb5a9ab1658677</anchor>
      <arglist>(unsigned u1, unsigned u2, int n, double tol=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaff026ecef71eac57c9349a6f2c07251d</anchor>
      <arglist>(float v1, double v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga93adf93813d07f10b50139fff7377e7a</anchor>
      <arglist>(double v1, float v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga985b8d92079c3adffbc535fb7ad5b3d7</anchor>
      <arglist>(float v1, long double v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga1e0ef053288697d2f6e561fe70b824c3</anchor>
      <arglist>(long double v1, float v2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8c93398dea7824f5698af5a4ae7ec552</anchor>
      <arglist>(double v1, long double v2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac19da944c43063cb21c4a7bb00ea54a5</anchor>
      <arglist>(long double v1, double v2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8ac9314ad51d00fdf77c45ed1f9f1c5c</anchor>
      <arglist>(int i1, float f2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga7b09e669c16c48840d5086402cbce747</anchor>
      <arglist>(float f1, int i2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gafef76c665129d0c7d1e64bbb16ed64c8</anchor>
      <arglist>(unsigned i1, float f2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac20360a3b7c7ec4d9fd3fc11b3f9d1ca</anchor>
      <arglist>(float f1, unsigned i2, int n, double tol=defTol&lt; float &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga5b4975a2c26a59fd70018fb4e9dbc4b9</anchor>
      <arglist>(int i1, double f2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga43a53486f3a01c2a51af6e9a1da86326</anchor>
      <arglist>(double f1, int i2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaefba8a14bc83088359be3c838cb96ab0</anchor>
      <arglist>(unsigned i1, double f2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8dabfd3265f67d55e380b61520c9735d</anchor>
      <arglist>(double f1, unsigned i2, int n, double tol=defTol&lt; double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaffb15bf6f88404ab7f5bb766052c7a8c</anchor>
      <arglist>(int i1, long double f2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga74b926c6680185cba552674f285cab77</anchor>
      <arglist>(long double f1, int i2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga29174f8598d11a3fecf50f28189bfb19</anchor>
      <arglist>(unsigned i1, long double f2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac2e168d9b27d51ce0a1e79fe6ecd86da</anchor>
      <arglist>(long double f1, unsigned i2, int n, double tol=defTol&lt; long double &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga74d8c787634e576000d13fefc7e45a92</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;v1, const std::complex&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gab0820ce99da61b37147ca6e7ee651348</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;v1, const conjugate&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga6de3f68748e830054645f9a17b1444bb</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;v1, const conjugate&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gad76a432607326441363600c86ccf8099</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;v1, const std::complex&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga7213bbb06554e267626b95eb48db1502</anchor>
      <arglist>(const negator&lt; P &gt; &amp;v1, const negator&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga9fc8007175e73da01f2ee61bd2385c73</anchor>
      <arglist>(const P &amp;v1, const negator&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga1f3fa0422ed9dbd9a38c55c36c8de735</anchor>
      <arglist>(const negator&lt; P &gt; &amp;v1, const P &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gae2cf4af7dfffb2525b73ec5cf96a15fb</anchor>
      <arglist>(const negator&lt; std::complex&lt; P &gt; &gt; &amp;v1, const conjugate&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga64bf75feec727e3c574c996a87ac8856</anchor>
      <arglist>(const negator&lt; conjugate&lt; P &gt; &gt; &amp;v1, const std::complex&lt; P &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gad3550616f8156110c5ca2e9f6fbb49b4</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;v1, const negator&lt; conjugate&lt; P &gt; &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga13fff2d880f33420cc7b8753f03a70f3</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;v1, const negator&lt; std::complex&lt; P &gt; &gt; &amp;v2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gad03fa6a67db9eb15fea1e2824981f38b</anchor>
      <arglist>(const Vec&lt; M, E1, S1 &gt; &amp;v1, const Vec&lt; M, E2, S2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaaf63b7bda36bb4a98cf29dab937cdb17</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;v1, const Row&lt; N, E2, S2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaaff4359bab263aa3df15b151c7c74117</anchor>
      <arglist>(const Mat&lt; M, N, E1, CS1, RS1 &gt; &amp;v1, const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga998ab6188528929e7ad31959987b3696</anchor>
      <arglist>(const SymMat&lt; N, E1, S1 &gt; &amp;v1, const SymMat&lt; N, E2, S2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gade60fc36291af9c129a1025c143d0b27</anchor>
      <arglist>(const VectorView_&lt; E1 &gt; &amp;v1, const VectorView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac26f9f8b70477fd36ed727b564be6db1</anchor>
      <arglist>(const Vector_&lt; E1 &gt; &amp;v1, const Vector_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gab522a91dc78ec438f2f83dd7bab8b5d7</anchor>
      <arglist>(const Vector_&lt; E1 &gt; &amp;v1, const VectorView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga0b5fa2609d765ae3d5f2119b0820cd2e</anchor>
      <arglist>(const VectorView_&lt; E1 &gt; &amp;v1, const Vector_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gada06f44f7b0497914e68d5296c022cb9</anchor>
      <arglist>(const RowVectorView_&lt; E1 &gt; &amp;v1, const RowVectorView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga74a1445355d28c2841b32a85fa315c62</anchor>
      <arglist>(const RowVector_&lt; E1 &gt; &amp;v1, const RowVector_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga14071c95c874a2dd77f94f14b3c73609</anchor>
      <arglist>(const RowVector_&lt; E1 &gt; &amp;v1, const RowVectorView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga4c9019d2faf7983acff2e7701abbb636</anchor>
      <arglist>(const RowVectorView_&lt; E1 &gt; &amp;v1, const RowVector_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac1261863f2cc51fc9e5f219aeb16c62f</anchor>
      <arglist>(const MatrixView_&lt; E1 &gt; &amp;v1, const MatrixView_&lt; E2 &gt; &amp;v2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga275b1d26f3e128fede4e55b4ffe75714</anchor>
      <arglist>(const Matrix_&lt; E1 &gt; &amp;m1, const Matrix_&lt; E2 &gt; &amp;m2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac9e788b2936fe43a59b57390891255c9</anchor>
      <arglist>(const Matrix_&lt; E1 &gt; &amp;m1, const MatrixView_&lt; E2 &gt; &amp;m2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga1d6259f8d2a1371cb7db41d02dc7b59f</anchor>
      <arglist>(const MatrixView_&lt; E1 &gt; &amp;m1, const Matrix_&lt; E2 &gt; &amp;m2, int n, double tol=(defTol2&lt; E1, E2 &gt;()))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga6ee41e024220c4e15ea1dd24d1de76cd</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R1, const Rotation_&lt; P &gt; &amp;R2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gadd1902a1b4391b1fde7d1968020b8656</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;T1, const Transform_&lt; P &gt; &amp;T2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga29e6295a5c1edf7173e67f1b8157c70c</anchor>
      <arglist>(const UnitInertia_&lt; P &gt; &amp;G1, const UnitInertia_&lt; P &gt; &amp;G2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>numericallyEqual</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga0f23c36ecbfc9ad6efd2c1c6579922d0</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;I1, const Inertia_&lt; P &gt; &amp;I2, int n, double tol=defTol&lt; P &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>randReal</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga0547ca7c9a497f330b6cf922758ecbd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Complex</type>
      <name>randComplex</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga679653179bf35e3329f92242987ff57c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Conjugate</type>
      <name>randConjugate</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gae7e9d8b4e04ff06bfc8ed01c343a4f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>randFloat</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga2b1bcdb52ae116a560bbf1bfd649c2dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>randDouble</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga5c7a072ae202902673cf872990681472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; M &gt;</type>
      <name>randVec</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga823866e407c47c7fbf04763b28d55075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; N &gt;</type>
      <name>randRow</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga118787b3c6be972ff4b8cbc20840c358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; M, N &gt;</type>
      <name>randMat</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaca56ad1e8741defe2b21eae0523dfcca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymMat&lt; N &gt;</type>
      <name>randSymMat</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaaf71e4c21ebb021bb2e5f04d17869753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>randVector</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga71d20ad3eaef9b1ae3b27e69e89a9ed6</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>randMatrix</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaf3d7537645efb2a8fc76095371aeecf9</anchor>
      <arglist>(int m, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3</type>
      <name>randVec3</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga57ddc6c612e2e3fd1043700209ae82e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33</type>
      <name>randMat33</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8196ab5e1b3036eeb06a903de0b6091b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymMat33</type>
      <name>randSymMat33</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaac503a3fb068e75d4dc136800213ccd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialVec</type>
      <name>randSpatialVec</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga0c0ff596c887f90a550d76b58289e8e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpatialMat</type>
      <name>randSpatialMat</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaf19aca29b55b88210e9ae7e68b170e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rotation</type>
      <name>randRotation</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gac25db24790ec1223a7c2cddb1e7aba53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Transform</type>
      <name>randTransform</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gaa24ca6435616e379fdcc5efdae41290a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Test::Subtest</name>
    <filename>classSimTK_1_1Test_1_1Subtest.html</filename>
    <member kind="function">
      <type></type>
      <name>Subtest</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>ga8a85ab1e17ef35db0e662dd9e3be5d1c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Subtest</name>
      <anchorfile>group__RegressionTesting.html</anchorfile>
      <anchor>gabdda78ad141ded3991c3b788a57d6234</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateAxis</name>
    <filename>classSimTK_1_1CoordinateAxis.html</filename>
    <class kind="class">SimTK::CoordinateAxis::XCoordinateAxis</class>
    <class kind="class">SimTK::CoordinateAxis::YCoordinateAxis</class>
    <class kind="class">SimTK::CoordinateAxis::ZCoordinateAxis</class>
    <member kind="function">
      <type></type>
      <name>CoordinateAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>ad1010604a75a41e8a7bcd639b9d23ea2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a322ab2cbcb6814e69db7cfe1604a1b23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>getNextAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>afb7eb8618d469e6526b8e78c18bb8010</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>getPreviousAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a918c335aaeda14947ff89205ce8f9ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>getThirdAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a022323ac742cc375773005b3b2fbb8c7</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isXAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a54be566c9aa7955330d7604c4cb9948d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isYAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>ad7ef4303b9819317592f3133017ffd1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a5ec815f7560ee8793ea7115e0723e3c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNextAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>aba1d15c8e227dbc2837a7aea02a42439</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPreviousAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a9f55e9aed0bc7f5e05785d623281106a</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>add9262f5f5e4af503818b8040aba2235</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areAllSameAxes</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>acbabd916278ecba15711d821c1b5756a</anchor>
      <arglist>(const CoordinateAxis &amp;axis2, const CoordinateAxis &amp;axis3) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDifferentAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a2202aa4715749272eac927e3abe34854</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areAllDifferentAxes</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>af2c08eff2f3fb69d7d4056033bc9d7aa</anchor>
      <arglist>(const CoordinateAxis &amp;axis2, const CoordinateAxis &amp;axis3) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isForwardCyclical</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>acee971da40ed4d308bdb627eab4bd5a3</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReverseCyclical</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>ab023079fc02406f6a34b2fa918df219a</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dotProduct</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a71a4521c7c12da193949f2308f751bff</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>crossProductSign</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>ac7da15fdacff5166214338c2b3a9ad8a</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>crossProductAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a00890f584f08bae9752bf679363dad20</anchor>
      <arglist>(const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>crossProduct</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>ade7fe1c9207db30e7a4abda283da2d06</anchor>
      <arglist>(const CoordinateAxis &amp;axis2, int &amp;sign) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CoordinateAxis &amp;</type>
      <name>getCoordinateAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a82fb25f5bfcd19e28dd14ad4ad0e464a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isIndexInRange</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>ab05cf9face80786903190c84d91fbe5d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>assertIndexIsInRange</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a7c16e3aeda24201dd2364fae4e490945</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a854149f1f4d4fcdcdea968a05bade54c</anchor>
      <arglist>(const CoordinateAxis &amp;a1, const CoordinateAxis &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>aeb96f19f70433b15c52ffad43466f04f</anchor>
      <arglist>(const CoordinateAxis &amp;a1, const CoordinateAxis &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateDirection::NegXDirection &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a8c0e226e80d8d6613ba685f514da0c1a</anchor>
      <arglist>(const CoordinateAxis::XCoordinateAxis &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateDirection::NegYDirection &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>af36b6027cc7f84425d1224cdead19d76</anchor>
      <arglist>(const CoordinateAxis::YCoordinateAxis &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateDirection::NegZDirection &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>ae17d4791f632aa9b9fab412394571367</anchor>
      <arglist>(const CoordinateAxis::ZCoordinateAxis &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CoordinateDirection</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a1a91c3c1dd66b88c0bb774f9e2c54838</anchor>
      <arglist>(const CoordinateAxis &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>CoordinateDirection</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1CoordinateAxis.html</anchorfile>
      <anchor>a8706f9dc3e4621a970deb0a3dafcbf95</anchor>
      <arglist>(const CoordinateAxis &amp;axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateAxis::XCoordinateAxis</name>
    <filename>classSimTK_1_1CoordinateAxis_1_1XCoordinateAxis.html</filename>
    <base>SimTK::CoordinateAxis</base>
    <member kind="function">
      <type></type>
      <name>XCoordinateAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis_1_1XCoordinateAxis.html</anchorfile>
      <anchor>ae54e0956f2acd5ef2f3fba9ef00a8022</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateAxis::YCoordinateAxis</name>
    <filename>classSimTK_1_1CoordinateAxis_1_1YCoordinateAxis.html</filename>
    <base>SimTK::CoordinateAxis</base>
    <member kind="function">
      <type></type>
      <name>YCoordinateAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis_1_1YCoordinateAxis.html</anchorfile>
      <anchor>ae0b182cb52ae6b2272a3f427f21d056e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateAxis::ZCoordinateAxis</name>
    <filename>classSimTK_1_1CoordinateAxis_1_1ZCoordinateAxis.html</filename>
    <base>SimTK::CoordinateAxis</base>
    <member kind="function">
      <type></type>
      <name>ZCoordinateAxis</name>
      <anchorfile>classSimTK_1_1CoordinateAxis_1_1ZCoordinateAxis.html</anchorfile>
      <anchor>a0bc4081c1d827b89457b1a9bf6694852</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateDirection</name>
    <filename>classSimTK_1_1CoordinateDirection.html</filename>
    <class kind="class">SimTK::CoordinateDirection::Negative</class>
    <class kind="class">SimTK::CoordinateDirection::NegXDirection</class>
    <class kind="class">SimTK::CoordinateDirection::NegYDirection</class>
    <class kind="class">SimTK::CoordinateDirection::NegZDirection</class>
    <member kind="function">
      <type></type>
      <name>CoordinateDirection</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a288f07e1e87aa78182ced0197471a296</anchor>
      <arglist>(const CoordinateAxis &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordinateDirection</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a4838311f5204c99c4ece8691cfb549b3</anchor>
      <arglist>(const CoordinateAxis &amp;axis, Negative)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordinateDirection</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>ac40e0d75ec3a962ef9ebe01deced89bc</anchor>
      <arglist>(const CoordinateAxis &amp;axis, int direction)</arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>getAxis</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a895db0e047b9ad2f3b796f27c5687d83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDirection</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a4db9de7a5094cdb6014fe4f3d0097e36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSameAxis</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>adaf26797d9eb83582134c52946beed22</anchor>
      <arglist>(const CoordinateDirection &amp;dir2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameAxisAndDirection</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a1c85183ce9b787f605199058f78baf6b</anchor>
      <arglist>(const CoordinateDirection &amp;dir2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dotProduct</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a85d24e0bc979e5edf1fb7841ff902a24</anchor>
      <arglist>(const CoordinateDirection &amp;dir2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>crossProductSign</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a95963342eaaa132f8d313ea7f403da5d</anchor>
      <arglist>(const CoordinateDirection &amp;dir2) const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>crossProductAxis</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>aadb3000c095d181daac50480d951fb74</anchor>
      <arglist>(const CoordinateDirection &amp;dir2) const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>crossProduct</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a5a4591dff768d9bfd2f51b7fb13ea21f</anchor>
      <arglist>(const CoordinateDirection &amp;dir2, int &amp;sign) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>ad39f992741213d514677cba7f05d7502</anchor>
      <arglist>(const CoordinateDirection &amp;d1, const CoordinateDirection &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a328d7698a88d6410fbedbf5c8a3dcb87</anchor>
      <arglist>(const CoordinateDirection &amp;d1, const CoordinateDirection &amp;d2)</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateAxis::XCoordinateAxis &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a4df55a36501bd6352e9e11bc71704b8f</anchor>
      <arglist>(const CoordinateDirection::NegXDirection &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateAxis::YCoordinateAxis &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>aa6ce70fb0790b9215a1d70164ce32cdb</anchor>
      <arglist>(const CoordinateDirection::NegYDirection &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateAxis::ZCoordinateAxis &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a515ac1b3750793e5480bc5c60c4ae252</anchor>
      <arglist>(const CoordinateDirection::NegZDirection &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CoordinateDirection</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1CoordinateDirection.html</anchorfile>
      <anchor>a1664d852b90f7a7a42a3aa91a42a3ca9</anchor>
      <arglist>(const CoordinateDirection &amp;dir)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateDirection::Negative</name>
    <filename>classSimTK_1_1CoordinateDirection_1_1Negative.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateDirection::NegXDirection</name>
    <filename>classSimTK_1_1CoordinateDirection_1_1NegXDirection.html</filename>
    <base>SimTK::CoordinateDirection</base>
    <member kind="function">
      <type></type>
      <name>NegXDirection</name>
      <anchorfile>classSimTK_1_1CoordinateDirection_1_1NegXDirection.html</anchorfile>
      <anchor>ad66513064b20acb80e07d7f4db8c3e5a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateDirection::NegYDirection</name>
    <filename>classSimTK_1_1CoordinateDirection_1_1NegYDirection.html</filename>
    <base>SimTK::CoordinateDirection</base>
    <member kind="function">
      <type></type>
      <name>NegYDirection</name>
      <anchorfile>classSimTK_1_1CoordinateDirection_1_1NegYDirection.html</anchorfile>
      <anchor>a818512028b6e033d05016d544509a8cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CoordinateDirection::NegZDirection</name>
    <filename>classSimTK_1_1CoordinateDirection_1_1NegZDirection.html</filename>
    <base>SimTK::CoordinateDirection</base>
    <member kind="function">
      <type></type>
      <name>NegZDirection</name>
      <anchorfile>classSimTK_1_1CoordinateDirection_1_1NegZDirection.html</anchorfile>
      <anchor>a22b68b06eb15b170fbe89eb658b3ba52</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Inertia_</name>
    <filename>classSimTK_1_1Inertia__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>Inertia_</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>aa2b329d1fc62a9c7b952d1b3c88dff71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Inertia_</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a67cd5c9309fe5d443af3964bd030d2f9</anchor>
      <arglist>(const RealP &amp;moment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Inertia_</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>af3e29578287d59727cfc7427d0047c88</anchor>
      <arglist>(const Vec3P &amp;p, const RealP &amp;mass)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Inertia_</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a6757715dbe6c947a0fee42b40899b39f</anchor>
      <arglist>(const Vec3P &amp;moments, const Vec3P &amp;products=Vec3P(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Inertia_</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>afffe875cb713abfe04736892484d7d51</anchor>
      <arglist>(const RealP &amp;xx, const RealP &amp;yy, const RealP &amp;zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Inertia_</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a5170b86e5d3b138e93108721fb598b90</anchor>
      <arglist>(const RealP &amp;xx, const RealP &amp;yy, const RealP &amp;zz, const RealP &amp;xy, const RealP &amp;xz, const RealP &amp;yz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Inertia_</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ac3641e81e5b3f2d294fb0b27807b6ff5</anchor>
      <arglist>(const SymMat33P &amp;I)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Inertia_</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>aaafd3401dc8ca2b5c2dac17e43701549</anchor>
      <arglist>(const Mat33P &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>setInertia</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a1ef4b5dc3fdac7589ae14a9f0e79e6b1</anchor>
      <arglist>(const RealP &amp;xx, const RealP &amp;yy, const RealP &amp;zz)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>setInertia</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a51b76c4a2fa12cb3f5346feabb1688e5</anchor>
      <arglist>(const Vec3P &amp;moments, const Vec3P &amp;products=Vec3P(0))</arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>setInertia</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a172f5d103b854fe80b7b175cbdf1b165</anchor>
      <arglist>(const RealP &amp;xx, const RealP &amp;yy, const RealP &amp;zz, const RealP &amp;xy, const RealP &amp;xz, const RealP &amp;yz)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a0b8cc05842288fb68def46feccbcbb0a</anchor>
      <arglist>(const Inertia_ &amp;I)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a4d3d28adcf0756e94c4786ec1e4b451b</anchor>
      <arglist>(const Inertia_ &amp;I)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a2b50d1bec66484957bb0ebe1be4d1736</anchor>
      <arglist>(const P &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a2d583c80cb337680c60b88dc455e8eed</anchor>
      <arglist>(const P &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_</type>
      <name>shiftToMassCenter</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a000e4873c70bd977a2ecaba19be60794</anchor>
      <arglist>(const Vec3P &amp;CF, const RealP &amp;mass) const </arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>shiftToMassCenterInPlace</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a7faa542f554572d91f36d013fa531aa2</anchor>
      <arglist>(const Vec3P &amp;CF, const RealP &amp;mass)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_</type>
      <name>shiftFromMassCenter</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a9cad56af59c6eb1c306dd7dca0f77f27</anchor>
      <arglist>(const Vec3P &amp;p, const RealP &amp;mass) const </arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>shiftFromMassCenterInPlace</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>aa86c57dbb5548ab99a910bb24f1c07d5</anchor>
      <arglist>(const Vec3P &amp;p, const RealP &amp;mass)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_</type>
      <name>reexpress</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a8ded5c13f1f5cee2aec5319953eb401c</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R_FB) const </arglist>
    </member>
    <member kind="function">
      <type>Inertia_</type>
      <name>reexpress</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a73c802f5dab0c8aba78da00df82a73f4</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R_FB) const </arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>reexpressInPlace</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a4c4a49f053e7c11240ad4e802786f254</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R_FB)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_ &amp;</type>
      <name>reexpressInPlace</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a4021fe4887710d1285fc6d1c5bd728aa</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R_FB)</arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>trace</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a23859436a032c1e574cf1436330e50dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const SymMat33P &amp;</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ae1c83f66b07a3633caf070d8896e17b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SymMat33P &amp;</type>
      <name>asSymMat33</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ab156ca728529e3f6641003b840d51acc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat33P</type>
      <name>toMat33</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a36c0ed7f30e9a7c6a4789bfb5b05775c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getMoments</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a12695d09b41d77ca188b70ac9fa454c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getProducts</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ab8518a3d580aef33a332fca0c264db96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ab23a4618b211aa416301b7639fbc9dc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a5ff49432033de46bc8d43ace62269461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a68d1d61b83d7a7b17d9728d1211a9ebb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a3f1dc63b25c031af43cae91862ae9c74</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>af7e057e5f4b948bb560b5d9a8e812e40</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;other, double tol) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidInertiaMatrix</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a09065c454fb39eec2dee757f63ff277e</anchor>
      <arglist>(const SymMat33P &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>pointMassAtOrigin</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>adaf11cafc9975fd5e6072f12548a467f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>pointMassAt</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>aa644c212473bd29473a768d15caf291e</anchor>
      <arglist>(const Vec3P &amp;p, const RealP &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>sphere</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a0079ce02a6ce9ddb2c3cdf26f5c88fac</anchor>
      <arglist>(const RealP &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>cylinderAlongZ</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a731715abc3e23d14716ed8778c3a41db</anchor>
      <arglist>(const RealP &amp;r, const RealP &amp;hz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>cylinderAlongY</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>afb7fa18382bb190462ec90cee793c618</anchor>
      <arglist>(const RealP &amp;r, const RealP &amp;hy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>cylinderAlongX</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ab408d2690f9520647fc41426d2da97a5</anchor>
      <arglist>(const RealP &amp;r, const RealP &amp;hx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>brick</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>afe1dc7f12543454dadb1ea0ab243b2a3</anchor>
      <arglist>(const RealP &amp;hx, const RealP &amp;hy, const RealP &amp;hz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>brick</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a6e344c2ae3ff6b5ac4a84f632c4c7f8e</anchor>
      <arglist>(const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>ellipsoid</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a2ce85ba36aeec4e390d1adb99d34b33d</anchor>
      <arglist>(const RealP &amp;hx, const RealP &amp;hy, const RealP &amp;hz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Inertia_</type>
      <name>ellipsoid</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ac4bc60ba4fe2d9bf269bfb9789a3433b</anchor>
      <arglist>(const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const UnitInertia_&lt; P &gt; &amp;</type>
      <name>getAsUnitInertia</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a9f881a10d5ca19fad90ad60b5491fbf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UnitInertia_&lt; P &gt; &amp;</type>
      <name>updAsUnitInertia</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a2542289a1b1ae02d15d2e6ca581b5f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>errChk</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ada96544452d94f01b0f5167c8be260d7</anchor>
      <arglist>(const char *methodName) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymMat33P</type>
      <name>I_OF_F</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a12f924bcb499f181af8687660f939d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Inertia_&lt; P &gt;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>aa13a2386109b73510feedacbc00dcb06</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;l, const Inertia_&lt; P &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_&lt; P &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ad11356749d9b854ac7c54941f8898123</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;l, const Inertia_&lt; P &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a0e0178f717c4a3c324ae9e7acbe670b5</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;i, const P &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a81c2f71a5c2f03e9ae1be20477721e51</anchor>
      <arglist>(const P &amp;r, const Inertia_&lt; P &gt; &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a4f803c5be5d23c79883c07160c1b3fff</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;i, int r)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a11dbacbcdcafff80ec99c068987b8323</anchor>
      <arglist>(int r, const Inertia_&lt; P &gt; &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a4d2db9435adf44e235f3165f8274d58b</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;i, const P &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Inertia_&lt; P &gt;</type>
      <name>operator/</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a51fba91692c4dd54851b29a7ccac6317</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;i, int r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a5c8ce4e99ab6b63e6786f47f4647f939</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;I, const Vec&lt; 3, P &gt; &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>ad3306602216739add773fc2b00440560</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;i1, const Inertia_&lt; P &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1Inertia__.html</anchorfile>
      <anchor>a8cb59637de516910c73d319d793f53db</anchor>
      <arglist>(std::ostream &amp;o, const Inertia_&lt; P &gt; &amp;inertia)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::UnitInertia_</name>
    <filename>classSimTK_1_1UnitInertia__.html</filename>
    <templarg>P</templarg>
    <base>SimTK::Inertia_</base>
    <member kind="function">
      <type></type>
      <name>UnitInertia_</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>ae99be8ef0c02a608415ac09cd4c08d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitInertia_</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a387d94e0b21d63c31abee6e38d13a3c2</anchor>
      <arglist>(const RealP &amp;moment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitInertia_</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a428d474987b57e275010e899df64b634</anchor>
      <arglist>(const Vec3P &amp;moments, const Vec3P &amp;products=Vec3P(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitInertia_</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>acece1584634f71dc9d42338275358438</anchor>
      <arglist>(const RealP &amp;xx, const RealP &amp;yy, const RealP &amp;zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitInertia_</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>af3a0c1914d9c3632de7777d1e14ccb24</anchor>
      <arglist>(const RealP &amp;xx, const RealP &amp;yy, const RealP &amp;zz, const RealP &amp;xy, const RealP &amp;xz, const RealP &amp;yz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitInertia_</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a2e06c431d9332364cbd7a32055a452b4</anchor>
      <arglist>(const SymMat33P &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitInertia_</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>adbd367dbd9f823d671489dca9d7f8a37</anchor>
      <arglist>(const Mat33P &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitInertia_</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>ac4d3e0602950a28cd8ec8e5ae6f39036</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;I)</arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_ &amp;</type>
      <name>setUnitInertia</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a965913951efebcc88457a3fb2309e44d</anchor>
      <arglist>(const RealP &amp;xx, const RealP &amp;yy, const RealP &amp;zz)</arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_ &amp;</type>
      <name>setUnitInertia</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a941ff2a084bb33e57b81bb78f6792d8b</anchor>
      <arglist>(const Vec3P &amp;moments, const Vec3P &amp;products=Vec3P(0))</arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_ &amp;</type>
      <name>setUnitInertia</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>af519b525445b103c7b97bec214c28788</anchor>
      <arglist>(const RealP &amp;xx, const RealP &amp;yy, const RealP &amp;zz, const RealP &amp;xy, const RealP &amp;xz, const RealP &amp;yz)</arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_</type>
      <name>shiftToCentroid</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a9c2535890d3b9e0ca3b8519d252f8cf7</anchor>
      <arglist>(const Vec3P &amp;CF) const </arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_ &amp;</type>
      <name>shiftToCentroidInPlace</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a86344e7cc8a70d606ba5a8c16511d4ed</anchor>
      <arglist>(const Vec3P &amp;CF)</arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_</type>
      <name>shiftFromCentroid</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a4f981071de25c9d3f263643b31850a04</anchor>
      <arglist>(const Vec3P &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_ &amp;</type>
      <name>shiftFromCentroidInPlace</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a9e4d4d72a9d1890c1f6a45067d5c88c8</anchor>
      <arglist>(const Vec3P &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_</type>
      <name>reexpress</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a82227844aba875e9fa4063bff68a3451</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R_FB) const </arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_</type>
      <name>reexpress</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a76f8a4eba1df68a53839ae02025f5507</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R_FB) const </arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_ &amp;</type>
      <name>reexpressInPlace</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a4b820a2338b949af9816a70343940a07</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R_FB)</arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_ &amp;</type>
      <name>reexpressInPlace</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a9f0b740b16c447193af134d6dcfc8a29</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R_FB)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const SymMat33P &amp;</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>aaf30c07af59a472f872e6867ef8a14df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Inertia_&lt; P &gt; &amp;</type>
      <name>asUnitInertia</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a4ad2f3845459ee8d4a99857160b67238</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitInertia_ &amp;</type>
      <name>setFromUnitInertia</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>adff44afd712eb42eb003df3454dd5fc3</anchor>
      <arglist>(const Inertia_&lt; P &gt; &amp;I)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidUnitInertiaMatrix</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a0747db2089594f1958363401e7a75a3e</anchor>
      <arglist>(const SymMat33P &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>pointMassAtOrigin</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a1e27445e87e048350c0733f282a14d4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>pointMassAt</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>ad12590783e2b1cc3dc3715f6c4c8f3ef</anchor>
      <arglist>(const Vec3P &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>sphere</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>aea6dff2244b2e884fc5ae7747b4489c2</anchor>
      <arglist>(const RealP &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>cylinderAlongZ</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a22aae6b90b2feeb28272a15ac0ee431b</anchor>
      <arglist>(const RealP &amp;r, const RealP &amp;hz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>cylinderAlongY</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a433b955d92ee92f053e4c90301b2537e</anchor>
      <arglist>(const RealP &amp;r, const RealP &amp;hy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>cylinderAlongX</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a89f3c0caf76077405e5eca28662214dc</anchor>
      <arglist>(const RealP &amp;r, const RealP &amp;hx)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>brick</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>aa765bcf7ca1430d4bb0ee35964b6a87b</anchor>
      <arglist>(const RealP &amp;hx, const RealP &amp;hy, const RealP &amp;hz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>brick</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a6727b53f8dc2470095ead9162f74df1e</anchor>
      <arglist>(const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>ellipsoid</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>afb4918161a3aa2b765b10834420f2006</anchor>
      <arglist>(const RealP &amp;hx, const RealP &amp;hy, const RealP &amp;hz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitInertia_</type>
      <name>ellipsoid</name>
      <anchorfile>classSimTK_1_1UnitInertia__.html</anchorfile>
      <anchor>a617357823ece8ff6c7f03c6cb34ab31e</anchor>
      <arglist>(const Vec3P &amp;halfLengths)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SpatialInertia_</name>
    <filename>classSimTK_1_1SpatialInertia__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>SpatialInertia_</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a5a18e7fd09141c51fbaa54258117ccdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialInertia_</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>ab5b284bdee64fb8b30f434bccb8b718f</anchor>
      <arglist>(RealP mass, const Vec3P &amp;com, const UnitInertiaP &amp;gyration)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>setMass</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>ad6c076c62aa1294911c7ff7752394c86</anchor>
      <arglist>(RealP mass)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>setMassCenter</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a04b055dd19ea4987cdf9a88810543a58</anchor>
      <arglist>(const Vec3P &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>setUnitInertia</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a147ff1b0fe566a4b8c65988d41171315</anchor>
      <arglist>(const UnitInertiaP &amp;gyration)</arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>getMass</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a762590b92c50cb50029734c74eee6e79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getMassCenter</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a7f900c3e5e922ce38699a5efeb810a77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitInertiaP &amp;</type>
      <name>getUnitInertia</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a6773b0b67718b80e867a90f1ed6b857e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>calcMassMoment</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a95cfb63169ec43c12f067600d1a03718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InertiaP</type>
      <name>calcInertia</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>abe5e20ab4de7ae55024c9f6219d1febb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a7cc7b7d2e8a3d7a17a7a6208efea9e31</anchor>
      <arglist>(const SpatialInertia_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a16b3ffe93dd0a5b9a87651306f5f9137</anchor>
      <arglist>(const SpatialInertia_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a1210e27aeaf4c729c0fa9f3b7504fb35</anchor>
      <arglist>(const RealP &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a27c2d4d66bd4bbb6d843914181e93bc4</anchor>
      <arglist>(const RealP &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVecP</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>ae27f14b5f3ccf81f7f05b95712b36784</anchor>
      <arglist>(const SpatialVecP &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_</type>
      <name>reexpress</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a38d2cb7d77972fb33fa5d794d6b3ac63</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R_FB) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_</type>
      <name>reexpress</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>ac6121fedec819b4562d2453c83b182f1</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R_FB) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>reexpressInPlace</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a8c53418feeabe8460aa257c937bc4995</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>reexpressInPlace</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>aeb844974c0f911186c3e04eb773f55e6</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;R_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_</type>
      <name>shift</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>aded210e33511953be4e804cc8181a3dd</anchor>
      <arglist>(const Vec3P &amp;S) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>shiftInPlace</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a8c47be818f2ff9a2e99317bf70dc6899</anchor>
      <arglist>(const Vec3P &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_</type>
      <name>transform</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>af470ddf2aa42d86b56b846ef89d205b9</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_FB) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_</type>
      <name>transform</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a9cd793bc0b9a0de19c6a3e96557f6ae0</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_FB) const </arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>transformInPlace</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a70ed68773d8508b66b575860a6b8c7d1</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_FB)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_ &amp;</type>
      <name>transformInPlace</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a730a21dc374eb7f7e5b230829c34ad32</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_FB)</arglist>
    </member>
    <member kind="function">
      <type>const SpatialMatP</type>
      <name>toSpatialMat</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a461a0f13fb5b50e970416b0781d4631d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_&lt; P &gt;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>aa8fbbb1b76326c2960f89c3cc17256e3</anchor>
      <arglist>(const SpatialInertia_&lt; P &gt; &amp;l, const SpatialInertia_&lt; P &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>SpatialInertia_&lt; P &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1SpatialInertia__.html</anchorfile>
      <anchor>a28bcef8b2f22a45c06652f13976e1eec</anchor>
      <arglist>(const SpatialInertia_&lt; P &gt; &amp;l, const SpatialInertia_&lt; P &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ArticulatedInertia_</name>
    <filename>classSimTK_1_1ArticulatedInertia__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>ArticulatedInertia_</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a22a0fe90762bbcc963d5c3ac2138addb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArticulatedInertia_</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>ad6160f20b84553a3897330422bbcde03</anchor>
      <arglist>(const SymMat33P &amp;mass, const Mat33P &amp;massMoment, const SymMat33P &amp;inertia)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArticulatedInertia_</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>aacf6ade13f6fbf4b33c0fb6ca6d6311b</anchor>
      <arglist>(const SpatialInertia_&lt; P &gt; &amp;rbi)</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_ &amp;</type>
      <name>setMass</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a7fd89ee39b02a4670464844a636e9768</anchor>
      <arglist>(const SymMat33P &amp;mass)</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_ &amp;</type>
      <name>setMassMoment</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a6a77a23e9d59a8cac1ed06dafa8ed297</anchor>
      <arglist>(const Mat33P &amp;massMoment)</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_ &amp;</type>
      <name>setInertia</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>ab522210b4a873471c895257473bb97d7</anchor>
      <arglist>(const SymMat33P &amp;inertia)</arglist>
    </member>
    <member kind="function">
      <type>const SymMat33P &amp;</type>
      <name>getMass</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a55b7d3d02b5f8f92dec82d95d7086bb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Mat33P &amp;</type>
      <name>getMassMoment</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>ae9bd2774f99871c830389438923f9857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SymMat33P &amp;</type>
      <name>getInertia</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>ab97890fa51e14901c53537a3e1430cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a03cc898f7b7a6269126cc2d2861d9980</anchor>
      <arglist>(const ArticulatedInertia_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a8d11486f14d050a11d83afd2b95804c0</anchor>
      <arglist>(const ArticulatedInertia_ &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>SpatialVecP</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a0fc8a1bc1152ce1591afcc71cdbadecc</anchor>
      <arglist>(const SpatialVecP &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 2, N, Vec3P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a8d3296372f8705f0e1c23590335dfbe8</anchor>
      <arglist>(const Mat&lt; 2, N, Vec3P &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_</type>
      <name>shift</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a29ee1d39e21efc21dbf1742eba618c84</anchor>
      <arglist>(const Vec3P &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_ &amp;</type>
      <name>shiftInPlace</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a08d955b9e56ba66f6759e83c32a0bfc1</anchor>
      <arglist>(const Vec3P &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const SpatialMatP</type>
      <name>toSpatialMat</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a36794f70da3fbdc5f64ef2cb48901fcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_&lt; P &gt;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>aeb18af2ac70ef816c9ae1e81e8f944a9</anchor>
      <arglist>(const ArticulatedInertia_&lt; P &gt; &amp;l, const ArticulatedInertia_&lt; P &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>ArticulatedInertia_&lt; P &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1ArticulatedInertia__.html</anchorfile>
      <anchor>a9bb8891252382d151f01bc9ee03e5513</anchor>
      <arglist>(const ArticulatedInertia_&lt; P &gt; &amp;l, const ArticulatedInertia_&lt; P &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MassProperties_</name>
    <filename>classSimTK_1_1MassProperties__.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MassProperties_</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a693e2f65897344fb0e2a6771e809a39f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MassProperties_</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>abcde2e54c09df4a9e1330d94c10a1f73</anchor>
      <arglist>(const RealP &amp;m, const Vec3P &amp;com, const InertiaP &amp;inertia)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MassProperties_</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>afb3651bd37b97e0354c11233fb740633</anchor>
      <arglist>(const RealP &amp;m, const Vec3P &amp;com, const UnitInertiaP &amp;gyration)</arglist>
    </member>
    <member kind="function">
      <type>MassProperties_ &amp;</type>
      <name>setMassProperties</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>ae9ffdb0731e5285d5730f55e9857fe4f</anchor>
      <arglist>(const RealP &amp;m, const Vec3P &amp;com, const InertiaP &amp;inertia)</arglist>
    </member>
    <member kind="function">
      <type>MassProperties_ &amp;</type>
      <name>setMassProperties</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a1214e4c54f7eeb390178b690d92e720e</anchor>
      <arglist>(const RealP &amp;m, const Vec3P &amp;com, const UnitInertiaP &amp;gyration)</arglist>
    </member>
    <member kind="function">
      <type>const RealP &amp;</type>
      <name>getMass</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a376dff7710ff981f0a5b1e7bf266437e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getMassCenter</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a0fa5f1fb9a84e3f7da27b9db78df724e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitInertiaP &amp;</type>
      <name>getUnitInertia</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>afcda88cd6455c18b8c2acc858a88a007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InertiaP</type>
      <name>calcInertia</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a6c86aa4c1fdd1610470bb11ce3ea158c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InertiaP</type>
      <name>getInertia</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>ada505ac511a91326e7dddbf527fa04e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InertiaP</type>
      <name>calcCentralInertia</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a8376b8fcd6f4183480fb38d45def5a65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InertiaP</type>
      <name>calcShiftedInertia</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a42d06011d5ce2b7426941f442ffac24b</anchor>
      <arglist>(const Vec3P &amp;newOriginB) const </arglist>
    </member>
    <member kind="function">
      <type>InertiaP</type>
      <name>calcTransformedInertia</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>ae81717fe0dbe12b4901acc560642e145</anchor>
      <arglist>(const TransformP &amp;X_BC) const </arglist>
    </member>
    <member kind="function">
      <type>MassProperties_</type>
      <name>calcShiftedMassProps</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a65e39f4fc77c20cb4de2367807ad9885</anchor>
      <arglist>(const Vec3P &amp;newOriginB) const </arglist>
    </member>
    <member kind="function">
      <type>MassProperties_</type>
      <name>calcTransformedMassProps</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a51a3fcef6b05488f35045fdc34fbd1e2</anchor>
      <arglist>(const TransformP &amp;X_BC) const </arglist>
    </member>
    <member kind="function">
      <type>MassProperties_</type>
      <name>reexpress</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>ac75cebbff9fcdb11ba11f32152814634</anchor>
      <arglist>(const RotationP &amp;R_BC) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExactlyMassless</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a1bed68bf8d6ec99378d810499015666f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNearlyMassless</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a0a44a4aa63448f09466ebcfd6a56d9a8</anchor>
      <arglist>(const RealP &amp;tol=SignificantReal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExactlyCentral</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a44176bbaa37ce7b66b2e929b1e482f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNearlyCentral</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a459fff3f6c7405d4398d60b770695660</anchor>
      <arglist>(const RealP &amp;tol=SignificantReal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a77058a609614c3dbac3a3377911f33c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a2ecb4666a41d9fccc05919551e8246c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>acb1cae62c0633322cde62e8b66ac3683</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SpatialMatP</type>
      <name>toSpatialMat</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>ac525ff09f513426a315b315805a2e095</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat66P</type>
      <name>toMat66</name>
      <anchorfile>classSimTK_1_1MassProperties__.html</anchorfile>
      <anchor>a84e43b159d1495a244750789b3122440</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Quaternion_</name>
    <filename>classSimTK_1_1Quaternion__.html</filename>
    <templarg></templarg>
    <base>Vec&lt; 4, P &gt;</base>
    <member kind="function">
      <type></type>
      <name>Quaternion_</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>aca2536d4d0a94ac026f6ae21e5f77ab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion_</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>a494e1a5082ece21a520e8cb8f707ca07</anchor>
      <arglist>(const Quaternion_ &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>ad028f96cc451c3314291e70ca7c6956d</anchor>
      <arglist>(const Quaternion_ &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion_</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>aeadf591eb0940418900ad1b64bfaf5ba</anchor>
      <arglist>(RealP e0, RealP e1, RealP e2, RealP e3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion_</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>aea410e54303af4a99d4ece6336fb6e3d</anchor>
      <arglist>(const Vec4P &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion_</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>afa6bca192407bb8555a56e9893059487</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternionToZeroRotation</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>a22a9d60eaa3aa5df5417f4ce93f1c59e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternionToNaN</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>af4c7e8ec798c1b7289b54a94871ad503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternionFromAngleAxis</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>a08e44491dfcab79bb7070d1d02f055bb</anchor>
      <arglist>(const Vec4P &amp;av)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuaternionFromAngleAxis</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>a988b174f12e35520b9ccf0af121d068e</anchor>
      <arglist>(const RealP &amp;a, const UnitVec&lt; P, 1 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec4P</type>
      <name>convertQuaternionToAngleAxis</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>af7b9f5cde7c1058faf6233dd15b68b8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4P &amp;</type>
      <name>asVec4</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>a6bce34a7c362fd737416d425cd47f1a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion_ &amp;</type>
      <name>normalizeThis</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>aebb2b507f322dedf027ea3e90323d356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion_</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>a3be8ddedc702dbb7f31e5fd49ed510d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion_</name>
      <anchorfile>classSimTK_1_1Quaternion__.html</anchorfile>
      <anchor>a5bb610d715d46c9eb5106e713fd45689</anchor>
      <arglist>(const Vec4P &amp;v, bool)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Rotation_</name>
    <filename>classSimTK_1_1Rotation__.html</filename>
    <templarg>P</templarg>
    <base>Mat&lt; 3, 3, P &gt;</base>
    <member kind="typedef">
      <type>UnitVec&lt; P, Mat33P::RowSpacing &gt;</type>
      <name>ColType</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a8156453423742aa7ab103650c3ffa4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitRow&lt; P, Mat33P::ColSpacing &gt;</type>
      <name>RowType</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a0c41f591c9926e8436596f924967f45c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a7dc8a355b0476f8fc3897225bcec0028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationToIdentityMatrix</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a352f6087f76d893011d1cf4a168d58d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationToNaN</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a360123fced580910bb805feb3a602258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a966293b042b3b6f3906bb15aec3110d2</anchor>
      <arglist>(const Rotation_ &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ad66e7d173f96a983c32d011bb0d91fc7</anchor>
      <arglist>(const Rotation_ &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a451308fdf619ff01b3b07a7d960cf354</anchor>
      <arglist>(BodyOrSpaceType bodyOrSpace, RealP angle1, const CoordinateAxis &amp;axis1, RealP angle2, const CoordinateAxis &amp;axis2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a4de3e72e32205e18ea71b03dfdc08932</anchor>
      <arglist>(BodyOrSpaceType bodyOrSpace, RealP angle1, const CoordinateAxis &amp;axis1, RealP angle2, const CoordinateAxis &amp;axis2, RealP angle3, const CoordinateAxis &amp;axis3)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromTwoAnglesTwoAxes</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>afc54e75b189a41cf6b0e9d23458eae32</anchor>
      <arglist>(BodyOrSpaceType bodyOrSpace, RealP angle1, const CoordinateAxis &amp;axis1, RealP angle2, const CoordinateAxis &amp;axis2)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromThreeAnglesThreeAxes</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ad19a5140a685462e498d6d5c2c42c8c4</anchor>
      <arglist>(BodyOrSpaceType bodyOrSpace, RealP angle1, const CoordinateAxis &amp;axis1, RealP angle2, const CoordinateAxis &amp;axis2, RealP angle3, const CoordinateAxis &amp;axis3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationToBodyFixedXY</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>af44ae0c01f7118c690a0c47cbf44e9a7</anchor>
      <arglist>(const Vec2P &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationToBodyFixedXYZ</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a1b5b9946341290a869fdf36263c6e901</anchor>
      <arglist>(const Vec3P &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a511a6db1f00e0b2e535f70fb01d4009e</anchor>
      <arglist>(const QuaternionP &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromQuaternion</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aed39e831fc2c774c769b4afb72830874</anchor>
      <arglist>(const QuaternionP &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a9c751d1b449be1eba50a5b026a18b907</anchor>
      <arglist>(const Mat33P &amp;m, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a8c1c1cf9f8c55f4371795eab53da933e</anchor>
      <arglist>(const Mat33P &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromApproximateMat33</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>acf320049f0aa881075905d781eee032f</anchor>
      <arglist>(const Mat33P &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>convertOneAxisRotationToOneAngle</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ac24f6d58ac08a8aa027bd04dc294b4d5</anchor>
      <arglist>(const CoordinateAxis &amp;axis1) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2P</type>
      <name>convertTwoAxesRotationToTwoAngles</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a0670932d36daa77ab1bec1dfc9a2dbd9</anchor>
      <arglist>(BodyOrSpaceType bodyOrSpace, const CoordinateAxis &amp;axis1, const CoordinateAxis &amp;axis2) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>convertThreeAxesRotationToThreeAngles</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a8fedf3e4f467b4c46cb3d75c72d1cbe7</anchor>
      <arglist>(BodyOrSpaceType bodyOrSpace, const CoordinateAxis &amp;axis1, const CoordinateAxis &amp;axis2, const CoordinateAxis &amp;axis3) const </arglist>
    </member>
    <member kind="function">
      <type>QuaternionP</type>
      <name>convertRotationToQuaternion</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aeb0dbfbe9692728363f19291a36582fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4P</type>
      <name>convertRotationToAngleAxis</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>af32d025ec1a522a1f97a420bdc1c542f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2P</type>
      <name>convertRotationToBodyFixedXY</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ae8fde87c8bfcd30533f47cbaa96d2fc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>convertRotationToBodyFixedXYZ</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a852ebf23b0a5075f89079184eea129ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SymMat33P</type>
      <name>reexpressSymMat33</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a9408d46027f2faf546417095f9da84d8</anchor>
      <arglist>(const SymMat33P &amp;S_BB) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>getMaxAbsDifferenceInRotationElements</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a5f79467f7a137c87f11fd50dad4f5f64</anchor>
      <arglist>(const Rotation_ &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areAllRotationElementsSameToEpsilon</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aa137c322dd6f46282e335365ae1a24ce</anchor>
      <arglist>(const Rotation_ &amp;R, RealP epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areAllRotationElementsSameToMachinePrecision</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ac1db1f3a440a79ad2e5b403913f44042</anchor>
      <arglist>(const Rotation_ &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a125229971a87b9405c6943687ae5cb6c</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a4ac773d1fe4e964aebf5c62c51f1cb1a</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const InverseRotation_&lt; P &gt; &amp;</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a29dabf3d119461ff356a6536ff2859d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InverseRotation_&lt; P &gt; &amp;</type>
      <name>updInvert</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>abcf61a10b96a4320c991e55caa582386</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowType &amp;</type>
      <name>row</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aeaccae1010b6c9cc9427d2a39b686c76</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>col</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a914bb4f7f7e7c1e82aa7cc095e6704f2</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>x</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>af36bd122d1e1b06b05d6f6a518f9bc52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>y</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a5ea9cb2cb1301a551be2f575ec5dc39c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>z</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a635c34523b636e2b0e767cbcae7185a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a84f0d8ba224b1b812be0f354d5d407be</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a64e2dae5549468bf72dfa6dfe83f1555</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationToBodyFixedXYZ</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a6d2d3b70084a3a474bf2c8ac1f598bf6</anchor>
      <arglist>(const Vec3P &amp;c, const Vec3P &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a19962cc7af21545ae8e8f63702e83624</anchor>
      <arglist>(RealP angle, const CoordinateAxis &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aeaa3df1484427409f85bdba47f263d18</anchor>
      <arglist>(RealP angle, const CoordinateAxis::XCoordinateAxis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a6a3cf04efd08eda9a303036fa6346bb9</anchor>
      <arglist>(RealP angle, const CoordinateAxis::YCoordinateAxis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ab1171f57869b8633941395bc3baed5ed</anchor>
      <arglist>(RealP angle, const CoordinateAxis::ZCoordinateAxis)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutAxis</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a9d85ae0f22416a5cd6866596fc40f2d8</anchor>
      <arglist>(RealP angle, const CoordinateAxis &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutX</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a2b0dd8018a891fae9f52a77a8af85913</anchor>
      <arglist>(RealP angle)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutY</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a03c34f207cd0c05dcf8fb4fe01bece15</anchor>
      <arglist>(RealP angle)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutZ</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a019d1ba576917c1294376af5d5c07684</anchor>
      <arglist>(RealP angle)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutX</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ad3626657c38a81b2df9205db8dd48af2</anchor>
      <arglist>(RealP cosAngle, RealP sinAngle)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutY</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a0429ecf9ca8d6bf23b2ea6a1067c13bf</anchor>
      <arglist>(RealP cosAngle, RealP sinAngle)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutZ</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a12bea1532e99c7e6aa83e189053000b2</anchor>
      <arglist>(RealP cosAngle, RealP sinAngle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ae551ca3f12b485259ba56def8ccd152a</anchor>
      <arglist>(RealP angle, const UnitVec3P &amp;unitVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a340d147e68d17979a01248d6b70cfe45</anchor>
      <arglist>(RealP angle, const Vec3P &amp;nonUnitVector)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutNonUnitVector</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a13e4dcab37f729839b79abf5a5e77840</anchor>
      <arglist>(RealP angle, const Vec3P &amp;nonUnitVector)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromAngleAboutUnitVector</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a69dbe7f3f47a4b0c6d7be8650d95049c</anchor>
      <arglist>(RealP angle, const UnitVec3P &amp;unitVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a297f4ad4b10f009c4cb18830af8da154</anchor>
      <arglist>(const UnitVec3P &amp;uvec, const CoordinateAxis axis)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromOneAxis</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a1716a6bd3d8ae76bbd59b139edcc2e2d</anchor>
      <arglist>(const UnitVec3P &amp;uvec, const CoordinateAxis axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation_</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>abf7001ed401fb3f4550a6fae494a0c7a</anchor>
      <arglist>(const UnitVec3P &amp;uveci, const CoordinateAxis &amp;axisi, const Vec3P &amp;vecjApprox, const CoordinateAxis &amp;axisjApprox)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromTwoAxes</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a7efe475b1e8a00f0628a74e660e84dfa</anchor>
      <arglist>(const UnitVec3P &amp;uveci, const CoordinateAxis &amp;axisi, const Vec3P &amp;vecjApprox, const CoordinateAxis &amp;axisjApprox)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameRotationToWithinAngle</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a44abc241c4d901a0a784a94d8ffa40a6</anchor>
      <arglist>(const Rotation_ &amp;R, RealP okPointingAngleErrorRads) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameRotationToWithinAngleOfMachinePrecision</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ac725bd972c9c54809b4b63880cb84fd2</anchor>
      <arglist>(const Rotation_ &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>const InverseRotation_&lt; P &gt; &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a5440d77a9933a385260197de908d8798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InverseRotation_&lt; P &gt; &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a94968ae3dab970ba1c9ef24e58989673</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InverseRotation_&lt; P &gt; &amp;</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a83d8ca5d3b3edd6630b5fb7a0a577d72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InverseRotation_&lt; P &gt; &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aec15e73cf4dbcdc7e1c6ac90f68fdef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a26169557db013c2a8779098d00d5c846</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ab38257532c21876c8629b224f0431080</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a7fa2ee262d79bf91ba2465bdbecb40c2</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a94079169da0047a42fe96411f36f9f42</anchor>
      <arglist>(const InverseRotation_&lt; P &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Mat33P &amp;</type>
      <name>asMat33</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a97e3dd684128236abdd4729ddffb208e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat33P</type>
      <name>toMat33</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a02a8b19b9c7dab9b72762bd339cdb6a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromMat33TrustMe</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a34a70e677a952560b2ab8d972ed79801</anchor>
      <arglist>(const Mat33P &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationColFromUnitVecTrustMe</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a9913668d30b526d87c63b175ccef9c56</anchor>
      <arglist>(int colj, const UnitVec3P &amp;uvecj)</arglist>
    </member>
    <member kind="function">
      <type>Rotation_ &amp;</type>
      <name>setRotationFromUnitVecsTrustMe</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a38115244428f8fc0f4411dd092ee5fe4</anchor>
      <arglist>(const UnitVec3P &amp;colA, const UnitVec3P &amp;colB, const UnitVec3P &amp;colC)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertAngVelToBodyFixed321Dot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ada7be536a78529d455a292a04fc267bf</anchor>
      <arglist>(const Vec3P &amp;q, const Vec3P &amp;w_PB_B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertBodyFixed321DotToAngVel</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a0b2274baac7bc6e82343040f1850f59c</anchor>
      <arglist>(const Vec3P &amp;q, const Vec3P &amp;qd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertAngVelDotToBodyFixed321DotDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a41b70da72a012a4e248150759ae09a0b</anchor>
      <arglist>(const Vec3P &amp;q, const Vec3P &amp;w_PB_B, const Vec3P &amp;wdot_PB_B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNForBodyXYZInBodyFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a3eb22f98f2a9088cf1012a5559548e3a</anchor>
      <arglist>(const Vec3P &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNForBodyXYZInBodyFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aaaa54243d974e2c0a8bb80c201343ad4</anchor>
      <arglist>(const Vec3P &amp;cq, const Vec3P &amp;sq)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNForBodyXYZInParentFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a0127cac78bdb1aea48a1b8294d2f13a5</anchor>
      <arglist>(const Vec3P &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNForBodyXYZInParentFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aabd585adb5a86dc06adc011d46c4d2a4</anchor>
      <arglist>(const Vec3P &amp;cq, const Vec3P &amp;sq)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>multiplyByBodyXYZ_N_P</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a3d8d055de40c8993a4bb9bb2d86c784a</anchor>
      <arglist>(const Vec2P &amp;cosxy, const Vec2P &amp;sinxy, RealP oocosy, const Vec3P &amp;w_PB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>multiplyByBodyXYZ_NT_P</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a776789cb0d7ba32361b1b43813591754</anchor>
      <arglist>(const Vec2P &amp;cosxy, const Vec2P &amp;sinxy, RealP oocosy, const Vec3P &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertAngVelInParentToBodyXYZDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ad8b111f6521a2001a2c2dbc00414d5ad</anchor>
      <arglist>(const Vec2P &amp;cosxy, const Vec2P &amp;sinxy, RealP oocosy, const Vec3P &amp;w_PB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertAngAccInParentToBodyXYZDotDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aa5ee4bdfde750e6cb198494b1b522b20</anchor>
      <arglist>(const Vec2P &amp;cosxy, const Vec2P &amp;sinxy, RealP oocosy, const Vec3P &amp;qdot, const Vec3P &amp;b_PB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>multiplyByBodyXYZ_NInv_P</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ad0edcb1b005f9a4980302c60cec1840d</anchor>
      <arglist>(const Vec2P &amp;cosxy, const Vec2P &amp;sinxy, const Vec3P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>multiplyByBodyXYZ_NInvT_P</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ae19740559fc48c4651696e8e1d4ff6d8</anchor>
      <arglist>(const Vec2P &amp;cosxy, const Vec2P &amp;sinxy, const Vec3P &amp;v_P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNDotForBodyXYZInBodyFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a57cc6b4aa8b35bb60f885bc8c07927ed</anchor>
      <arglist>(const Vec3P &amp;q, const Vec3P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNDotForBodyXYZInBodyFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>af1a07a41343d026e5f95c7072aa180b1</anchor>
      <arglist>(const Vec3P &amp;cq, const Vec3P &amp;sq, const Vec3P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNDotForBodyXYZInParentFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a713ce2d2d7aa5e3ba6bc4107f715bca2</anchor>
      <arglist>(const Vec3P &amp;q, const Vec3P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNDotForBodyXYZInParentFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a731e89578e363e9c42f998b542682a35</anchor>
      <arglist>(const Vec2P &amp;cq, const Vec2P &amp;sq, RealP ooc1, const Vec3P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNInvForBodyXYZInBodyFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aba5b6c3e33f68fc8105d2f2099969753</anchor>
      <arglist>(const Vec3P &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNInvForBodyXYZInBodyFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a05421fe60aadcdc2c5b9a02747568a73</anchor>
      <arglist>(const Vec3P &amp;cq, const Vec3P &amp;sq)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNInvForBodyXYZInParentFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a37fc3fe5bd8a98217aafeb5a6639ccbc</anchor>
      <arglist>(const Vec3P &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat33P</type>
      <name>calcNInvForBodyXYZInParentFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a020a2169bc07b8e28414b75892986c9f</anchor>
      <arglist>(const Vec3P &amp;cq, const Vec3P &amp;sq)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertAngVelInBodyFrameToBodyXYZDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ae87f86eb9a0b8dff3202c35e39f1b16d</anchor>
      <arglist>(const Vec3P &amp;q, const Vec3P &amp;w_PB_B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertAngVelInBodyFrameToBodyXYZDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aa59271d0544a807b0d43617485365efd</anchor>
      <arglist>(const Vec3P &amp;cq, const Vec3P &amp;sq, const Vec3P &amp;w_PB_B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertBodyXYZDotToAngVelInBodyFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>afc7286af6f32e76ddc0b5f90f7efd22e</anchor>
      <arglist>(const Vec3P &amp;q, const Vec3P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertBodyXYZDotToAngVelInBodyFrame</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aaed9d79a18b05275c469d18d58413ca5</anchor>
      <arglist>(const Vec3P &amp;cq, const Vec3P &amp;sq, const Vec3P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertAngVelDotInBodyFrameToBodyXYZDotDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aed514d5990532404a82da26793049900</anchor>
      <arglist>(const Vec3P &amp;q, const Vec3P &amp;w_PB_B, const Vec3P &amp;wdot_PB_B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertAngVelDotInBodyFrameToBodyXYZDotDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a4ae5a0d854e698521bde92dfe17b84a7</anchor>
      <arglist>(const Vec3P &amp;cq, const Vec3P &amp;sq, const Vec3P &amp;w_PB_B, const Vec3P &amp;wdot_PB_B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat43P</type>
      <name>calcUnnormalizedNForQuaternion</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>af8b7a0f3971e33ca93521589eeb7cc1d</anchor>
      <arglist>(const Vec4P &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat43P</type>
      <name>calcUnnormalizedNDotForQuaternion</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a30c0b4373719c68c0a14783d8fa8e8aa</anchor>
      <arglist>(const Vec4P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat34P</type>
      <name>calcUnnormalizedNInvForQuaternion</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a939de389a2ef2d6516aee271d1f04ad7</anchor>
      <arglist>(const Vec4P &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4P</type>
      <name>convertAngVelToQuaternionDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>aea472db472765197f6daf4624b9a0700</anchor>
      <arglist>(const Vec4P &amp;q, const Vec3P &amp;w_PB_P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>convertQuaternionDotToAngVel</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>adc55fc1b16c0df4962094d3173ae4372</anchor>
      <arglist>(const Vec4P &amp;q, const Vec4P &amp;qdot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4P</type>
      <name>OLDconvertAngVelDotToQuaternionDotDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>a8891cd55bbfc43e47421b7534c17b947</anchor>
      <arglist>(const Vec4P &amp;q, const Vec3P &amp;w_PB_P, const Vec3P &amp;wdot_PB_P)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4P</type>
      <name>convertAngVelDotToQuaternionDotDot</name>
      <anchorfile>classSimTK_1_1Rotation__.html</anchorfile>
      <anchor>ac39e2b91d6d396f2002afb7f26335e64</anchor>
      <arglist>(const Vec4P &amp;q, const Vec3P &amp;w_PB, const Vec3P &amp;b_PB)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::InverseRotation_</name>
    <filename>classSimTK_1_1InverseRotation__.html</filename>
    <templarg>P</templarg>
    <base>SimTK::Mat</base>
    <member kind="typedef">
      <type>Mat&lt; 3, 3, P &gt;::TransposeType</type>
      <name>BaseMat</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>ab016d53e68089ef68d86b7a244cb53ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitVec&lt; P, BaseMat::RowSpacing &gt;</type>
      <name>ColType</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a7b807bb585370af8970d8fbf7210c982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitRow&lt; P, BaseMat::ColSpacing &gt;</type>
      <name>RowType</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>ad00b413d7248407f17dc1aac9b6dabdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseRotation_</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>aacabd3b7fc7e7bae0cf2c1641af47e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseRotation_</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a394720c8a67e9eaa4b42f0b9da5ccbc2</anchor>
      <arglist>(const InverseRotation_ &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>InverseRotation_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a409f37f203fdee1cc7761b3272fef4b4</anchor>
      <arglist>(const InverseRotation_ &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>SymMat33P</type>
      <name>reexpressSymMat33</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a104b75456e9ff57aab3c45c8c4fbbc0f</anchor>
      <arglist>(const SymMat33P &amp;S_BB) const </arglist>
    </member>
    <member kind="function">
      <type>const RotationP &amp;</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a3ecc896b191bb71192ab747c7f965293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RotationP &amp;</type>
      <name>updInvert</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a2c397bfb5758d75c7b3f378bd4580406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RotationP &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a96ec7569a8d9763d14e318032bc753e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RotationP &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>ad15558be6e9c8913bfe6ccc7117fbee8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RotationP &amp;</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a59cfa15d24d3437dbedacda2ee471a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RotationP &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a3c125204b5cfe1889f3affb84c562c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowType &amp;</type>
      <name>row</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a74c56d9d4549c931a92d67cfb8353af7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>col</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>ada253ca39f5eaa7698689e17d1a43fb8</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>x</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a9d66e73eb2d68489ec6b9de0af664e0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>y</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>aa5b01ea454161b33222e5573cc155aeb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>z</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a9d117a45f52ec87564ef454e33b2aa6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RowType &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>ae3b64cc93ee5914c6853c07368cab30b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const ColType &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a7ffea334cbc41bb07e8bd714cadf7324</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>const BaseMat &amp;</type>
      <name>asMat33</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a9b31dcfb60f7bdb512b3705ab4918389</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseMat</type>
      <name>toMat33</name>
      <anchorfile>classSimTK_1_1InverseRotation__.html</anchorfile>
      <anchor>a9bd4f756500444842b7454a6dea3a840</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PhiMatrix</name>
    <filename>classSimTK_1_1PhiMatrix.html</filename>
    <member kind="typedef">
      <type>PhiMatrixTranspose</type>
      <name>TransposeType</name>
      <anchorfile>classSimTK_1_1PhiMatrix.html</anchorfile>
      <anchor>a46f18a95b7032147240ea95d530545e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhiMatrix</name>
      <anchorfile>classSimTK_1_1PhiMatrix.html</anchorfile>
      <anchor>a8e87d5f46f6d13350524ab6400f1fa94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhiMatrix</name>
      <anchorfile>classSimTK_1_1PhiMatrix.html</anchorfile>
      <anchor>acbfd973e6107c6b35435bf3a49eb20ed</anchor>
      <arglist>(const Vec3 &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>classSimTK_1_1PhiMatrix.html</anchorfile>
      <anchor>a512d58486ba5ceee616d7d0cb9c28067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNaN</name>
      <anchorfile>classSimTK_1_1PhiMatrix.html</anchorfile>
      <anchor>a542373985894f425d7d7c336b188f93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialMat</type>
      <name>toSpatialMat</name>
      <anchorfile>classSimTK_1_1PhiMatrix.html</anchorfile>
      <anchor>aef980c88632990e47fa19ff249220919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>l</name>
      <anchorfile>classSimTK_1_1PhiMatrix.html</anchorfile>
      <anchor>ad506f0b13e99f23c045bab70a03dcf7f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PhiMatrixTranspose</name>
    <filename>classSimTK_1_1PhiMatrixTranspose.html</filename>
    <member kind="function">
      <type></type>
      <name>PhiMatrixTranspose</name>
      <anchorfile>classSimTK_1_1PhiMatrixTranspose.html</anchorfile>
      <anchor>a1463343c41930e96771a7aec12795496</anchor>
      <arglist>(const PhiMatrix &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>SpatialMat</type>
      <name>toSpatialMat</name>
      <anchorfile>classSimTK_1_1PhiMatrixTranspose.html</anchorfile>
      <anchor>a8f03ce4e6970c556c0849e341964c82c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>l</name>
      <anchorfile>classSimTK_1_1PhiMatrixTranspose.html</anchorfile>
      <anchor>a832b762f3fd37fc98f48546616cd3df9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Transform_</name>
    <filename>classSimTK_1_1Transform__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>Transform_</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>aa942cf29be6dfe83a94793a8b81dd2b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform_</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a9df212001307fcfc4e33cf3aa8817c90</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R, const Vec&lt; 3, P &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform_</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a57fbe8b9a20fb1bdea86d041bc6d8a62</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform_</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a7c35260adc6730882709e597db78a18b</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Transform_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a88d6ac8f3fef3c908264601b84bd6d07</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>Transform_ &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>accc0c88a25651fc828e217376765e425</anchor>
      <arglist>(const Vec&lt; 3, P, S &gt; &amp;offset_B)</arglist>
    </member>
    <member kind="function">
      <type>Transform_ &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a82a5dba99e12f4d7e53a3d71c9e7ada5</anchor>
      <arglist>(const Vec&lt; 3, P, S &gt; &amp;offset_B)</arglist>
    </member>
    <member kind="function">
      <type>Transform_ &amp;</type>
      <name>set</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a7254c6803ccc46ee6ac745ee40da464a</anchor>
      <arglist>(const Rotation_&lt; P &gt; &amp;R, const Vec&lt; 3, P &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Transform_ &amp;</type>
      <name>setToZero</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>accffbeb421e93b37b303c4eceae81e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform_ &amp;</type>
      <name>setToNaN</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a3f5acadb0389eb80373a4cd766e2c6f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const InverseTransform_&lt; P &gt; &amp;</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>adb7386fec19e9744e69813dddb5258ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InverseTransform_&lt; P &gt; &amp;</type>
      <name>updInvert</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a38e61c08d0cc6e37131ce9f6ac0fb378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const InverseTransform_&lt; P &gt; &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>aaa3888110181f8402ccde9af23d4925a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InverseTransform_&lt; P &gt; &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>abe62f45f57315377f9b2d73849bf45be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform_</type>
      <name>compose</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>ac54db4d34f60e92de504118d3928c73e</anchor>
      <arglist>(const Transform_ &amp;X_FY) const </arglist>
    </member>
    <member kind="function">
      <type>Transform_</type>
      <name>compose</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a3df46f1fdef563f0e7ce68b6668da048</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_FY) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>xformFrameVecToBase</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a242c4b712d667325f20097c951fd0c84</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;vF) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>xformBaseVecToFrame</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>ad2c1eb9f8d3825ae3e22b55a69ff5e11</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;vB) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>shiftFrameStationToBase</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>ae6ac374d3a6b688c39928447d9687d40</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;sF) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>shiftBaseStationToFrame</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>ac3ca78f40550de6beadd1c2c77443bff</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;sB) const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation_&lt; P &gt; &amp;</type>
      <name>R</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a5ae599faa20bd3a12be54c415531b0ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt; &amp;</type>
      <name>updR</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a1c0dfb4616800cb27dbff93494f74a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Rotation_&lt; P &gt;::ColType &amp;</type>
      <name>x</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a79f19fe5c11cceeb2c393c26f65006d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation_&lt; P &gt;::ColType &amp;</type>
      <name>y</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>ace71979648bcbe866f2a491b3ae683eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation_&lt; P &gt;::ColType &amp;</type>
      <name>z</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a2035e141d98ad873c29514d329463948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InverseRotation_&lt; P &gt; &amp;</type>
      <name>RInv</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a8a63172ce20b5decae30f41080623c20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InverseRotation_&lt; P &gt; &amp;</type>
      <name>updRInv</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>ac9ad027199c1f83bd34b377e52002afe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; 3, P &gt; &amp;</type>
      <name>p</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a2ce6d476087a63d06666af72fce2a29d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt; &amp;</type>
      <name>updP</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>adc620dd92c973510862ca3dc1ed2d4a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt; &amp;</type>
      <name>setP</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a8244bef7c4c612515fff52ad226f08b3</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>pInv</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a018a63d24923bed8495a7993aab3ea47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt; &amp;</type>
      <name>setPInv</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a337e6d26f7a989df392dc8e43ecc38c8</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;p_FB)</arglist>
    </member>
    <member kind="function">
      <type>const Mat&lt; 3, 4, P &gt; &amp;</type>
      <name>asMat34</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a1b9a760cae4392b1215a850360007617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 4, P &gt;</type>
      <name>toMat34</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a8927772632327b255f5e4cb903489f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 4, 4, P &gt;</type>
      <name>toMat44</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a46b263009f1901a5887ce31cb5b23234</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; 3, P &gt; &amp;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a10fb49d9e653257b54ff851ee837aa58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt; &amp;</type>
      <name>updT</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a6dd9b7821ea0a831494b7f729a1de2f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a6431752e53d0aa5556082a0282a8a214</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, P, S &gt; &amp;s_F)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>af47aa26f1160b2408a72eb2fb25ce332</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, P, S &gt; &amp;offset_B)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a02f24668c1938312872432428c5999e9</anchor>
      <arglist>(const Vec&lt; 3, P, S &gt; &amp;offset_B, const Transform_&lt; P &gt; &amp;X_BF)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a5dfc1ed3b6d6a82633d1e9c3eb9e5f84</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_BF, const Vec&lt; 3, P, S &gt; &amp;offset_B)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>aa6a5a44119a5823a29eeeb578b6346f3</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_BF, const Vec&lt; 4, P, S &gt; &amp;a_F)</arglist>
    </member>
    <member kind="function">
      <type>Vector_&lt; E &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a7a55bee4fe245a448b2084aac7c3d847</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X, const VectorBase&lt; E &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>operator*</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a25b0195de53b1c24ead039ab6a74f474</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X1, const Transform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>aa658b71de13e1f79accba3471066001d</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X1, const Transform_&lt; P &gt; &amp;X2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1Transform__.html</anchorfile>
      <anchor>a92a11498c04820d2dd1185c61ee04a1d</anchor>
      <arglist>(std::ostream &amp;, const Transform_&lt; P &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::InverseTransform_</name>
    <filename>classSimTK_1_1InverseTransform__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>InverseTransform_</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a32201eb1ee71d121c70de8fcef4cc24b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Transform_&lt; P &gt;</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a2839204edce87834cd0f86fc52086a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InverseTransform_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a61b233900b3751293d584aeee14165d8</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X)</arglist>
    </member>
    <member kind="function">
      <type>const Transform_&lt; P &gt; &amp;</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>aedbc0256069ddb0dc3095682ccb03a47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt; &amp;</type>
      <name>updInvert</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a0d6f41d81e6e3596f1acaa971b73b403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Transform_&lt; P &gt; &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a52aeda151cd12ffb7efea5c9c6bc9556</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt; &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a95de260037598600ee354f1ba9448fce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>compose</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a1b7ffa02e4a39591746c0c3755454757</anchor>
      <arglist>(const Transform_&lt; P &gt; &amp;X_FY) const </arglist>
    </member>
    <member kind="function">
      <type>Transform_&lt; P &gt;</type>
      <name>compose</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a2f338f068d300916e9e9119d24be3ddb</anchor>
      <arglist>(const InverseTransform_&lt; P &gt; &amp;X_FY) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>xformFrameVecToBase</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a083ee4b3fb82e24099dda401e92d7c19</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;vF) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>xformBaseVecToFrame</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a35b78288ff32f17f1ece4297faaeb0b3</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;vB) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>shiftFrameStationToBase</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a30c9d5644c6388afbd78a0fe4000f51e</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;sF) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>shiftBaseStationToFrame</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>addaa82b99de98d84ff52e43749b87379</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;sB) const </arglist>
    </member>
    <member kind="function">
      <type>const InverseRotation_&lt; P &gt; &amp;</type>
      <name>R</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a48cc49de236f20a2e2de518000306c05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InverseRotation_&lt; P &gt; &amp;</type>
      <name>updR</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a0984eedefc5e5b7e1d2e476aa4042b8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const InverseRotation_&lt; P &gt;::ColType &amp;</type>
      <name>x</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a24a438b6d608b706e5f43cf5f48fac1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InverseRotation_&lt; P &gt;::ColType &amp;</type>
      <name>y</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a43aff700ee909f291a90512104a99e9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InverseRotation_&lt; P &gt;::ColType &amp;</type>
      <name>z</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>affa91e9fbcf88a985ec418548e5c78b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Rotation_&lt; P &gt; &amp;</type>
      <name>RInv</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>aba52cca2b95e4eb8ce2c2e2335efd413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rotation_&lt; P &gt; &amp;</type>
      <name>updRInv</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a6b9b4b17b53101c1805f63ccda502f33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>p</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a8aec54ee1935f01d45186ea26cb55cd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setP</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a3a85759e05ed048aa52bd9c2ea4225fa</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;p_BF)</arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; 3, P &gt; &amp;</type>
      <name>pInv</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a8542a93ce80bdb99fa85b85fcbb3ba9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPInv</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>abc2164866a2e7412495c3845bd6a0224</anchor>
      <arglist>(const Vec&lt; 3, P &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 3, 4, P &gt;</type>
      <name>toMat34</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>ade40aa4670d5a288d5e38ddd31e32ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 4, 4, P &gt;</type>
      <name>toMat44</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a1e1448e1fbc5329ee3254d243b982099</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 3, P &gt;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>aa3c823096060a112378b270c72396ade</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSimTK_1_1InverseTransform__.html</anchorfile>
      <anchor>a45711dbc31700bc2023272572b796491</anchor>
      <arglist>(std::ostream &amp;, const InverseTransform_&lt; P &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::UnitVec</name>
    <filename>classSimTK_1_1UnitVec.html</filename>
    <templarg>P</templarg>
    <templarg>S</templarg>
    <base>Vec&lt; 3, P, S &gt;</base>
    <member kind="typedef">
      <type>Vec&lt; 3, P, S &gt;</type>
      <name>BaseVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>abc8a07343261e22409fc61416f549c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitRow&lt; P, S &gt;</type>
      <name>TransposeType</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a00a0813acda5a13e55b70a419f86a365</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a73d73693191a8a61c3cc7a97cf3a5d90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a12fb60e996d4a98e4e46d653ed6390fc</anchor>
      <arglist>(const UnitVec &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a9a6b45877344851eb2b0a82467772973</anchor>
      <arglist>(const UnitVec&lt; P, S2 &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a8da37a5763ddcb9ac2cd134feecd039c</anchor>
      <arglist>(const BaseVec &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a915d564bb48a436429ad3e2448184a85</anchor>
      <arglist>(const Vec&lt; 3, P, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a54c348c1fd1bab4d5a5a1483480d680f</anchor>
      <arglist>(const RealP &amp;x, const RealP &amp;y, const RealP &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>afd6a8daeb3fbbfb03ddd1839f73587fc</anchor>
      <arglist>(const CoordinateAxis &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>aa5650655c4c6d07b74f6282f85d01810</anchor>
      <arglist>(const CoordinateDirection &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>aba4bece487167338cbd2b8f8e1e4225c</anchor>
      <arglist>(int axis)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>abaabfb8fb4c3abdfd066721f6c5b8e11</anchor>
      <arglist>(const UnitVec &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a9aa161e02139d0d3918d9de7b1a14c0d</anchor>
      <arglist>(const UnitVec&lt; P, S2 &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>const BaseVec &amp;</type>
      <name>asVec3</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a89577691cf2757ee8986e1e19ff149e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec&lt; P, 1 &gt;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a8130a59a0dfb2dd589bdf44cf28f39bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec&lt; P, 1 &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>abb186725a570af8edaf7e86529e900a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TransposeType &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>ad22b166a41988289bc647e3015cc4703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TransposeType &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a652eee30279596142606524844c66791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RealP &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>aead23834dad959044a95f503ce91857f</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const RealP &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>ab5fe83afff02a450c8a2139962787229</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec&lt; P, 1 &gt;</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a8fcc41c6547ed29ee4cd265c8bcc0074</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec&lt; P, 1 &gt;</type>
      <name>perp</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a02b1489ac6269128cbf609366a1f56ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a6f9391c4529db05af4f2a03cd4233233</anchor>
      <arglist>(const BaseVec &amp;v, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitVec</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>ae8d418967f5eda9d41056450e57826e1</anchor>
      <arglist>(const Vec&lt; 3, RealP, S2 &gt; &amp;v, bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const UnitVec &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a6ccf84f7c5c7cdd2c968750e047a0c6e</anchor>
      <arglist>(const RealP *p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a4b67369ce57496d919e2e644324ed3d4</anchor>
      <arglist>(const UnitVec&lt; P, S1 &gt; &amp;u1, const UnitVec&lt; P, S2 &gt; &amp;u2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1UnitVec.html</anchorfile>
      <anchor>a2bb319207d0f3cc936c647f423170c3f</anchor>
      <arglist>(const UnitVec&lt; P, S1 &gt; &amp;u1, const UnitVec&lt; P, S2 &gt; &amp;u2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::UnitRow</name>
    <filename>classSimTK_1_1UnitRow.html</filename>
    <templarg>P</templarg>
    <templarg>S</templarg>
    <base>Row&lt; 3, P, S &gt;</base>
    <member kind="typedef">
      <type>Row&lt; 3, P, S &gt;</type>
      <name>BaseRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>aa5c2905c851183c31b25caa80d990703</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnitVec&lt; P, S &gt;</type>
      <name>TransposeType</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>abc02a8846f78a20fc44ec9d8a6338cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a03fdcbf3badc68f4beba18fec61b4b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a8b0f1bf69f59273bdb37fd73cdfef35f</anchor>
      <arglist>(const UnitRow &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a23f96ac7943327eac20e951ecebfa51e</anchor>
      <arglist>(const UnitRow&lt; P, S2 &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>UnitRow &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a3842902cba05240df2c129b35ba1c43a</anchor>
      <arglist>(const UnitRow &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>UnitRow &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a2eb67960addf0ad9fb12bb5269df8ed4</anchor>
      <arglist>(const UnitRow&lt; P, S2 &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a56b7c472195e0fa5702c9c8158886d00</anchor>
      <arglist>(const BaseRow &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a252108e846e957de4e23fa16d4f1778a</anchor>
      <arglist>(const Row&lt; 3, P, S2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a6a6d97684463b397de6501ca079c3921</anchor>
      <arglist>(const RealP &amp;x, const RealP &amp;y, const RealP &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a7e4068b8f6feaab2387eccd153f71e4b</anchor>
      <arglist>(int axis)</arglist>
    </member>
    <member kind="function">
      <type>const BaseRow &amp;</type>
      <name>asRow3</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a84c2a61390ffac25d90e85646673c2e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitRow&lt; P, 1 &gt;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a20382786e939aa7259a0c6df1bf190dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitRow&lt; P, 1 &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a34745cf507ff35ed6df54417ab7fbede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TransposeType &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>aa873ac67c9433378412d6601b0c0e867</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TransposeType &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a0a113f49d49fc68cfcb236771e898962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RealP &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a73be137694a5f17248a19129fa994684</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const RealP &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a21174ad51b4899faa9317d4685a2f5c1</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>UnitRow&lt; P, 1 &gt;</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a79774aa49dc9edc34ea61b8a7329bc99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitRow&lt; P, 1 &gt;</type>
      <name>perp</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>af3b833c3d0136e870f6a5f21a89ddd29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>af42b48e53b51ebc6bcc14242b3bdc9de</anchor>
      <arglist>(const BaseRow &amp;v, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnitRow</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>ac7c094818f7322799972dda885d0c58b</anchor>
      <arglist>(const Row&lt; 3, P, S2 &gt; &amp;v, bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const UnitRow &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a5d195c61f8a0030b24f005cccc6c5109</anchor>
      <arglist>(const RealP *p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>a4929f7ed8ccfc4dc0ca667df2b7341a1</anchor>
      <arglist>(const UnitRow&lt; P, S1 &gt; &amp;u1, const UnitRow&lt; P, S2 &gt; &amp;u2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1UnitRow.html</anchorfile>
      <anchor>ad3ef919c503cde93574c9a3f26136cbe</anchor>
      <arglist>(const UnitRow&lt; P, S1 &gt; &amp;u1, const UnitRow&lt; P, S2 &gt; &amp;u2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PolynomialRootFinder</name>
    <filename>classSimTK_1_1PolynomialRootFinder.html</filename>
    <class kind="class">SimTK::PolynomialRootFinder::ZeroLeadingCoefficient</class>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findRoots</name>
      <anchorfile>classSimTK_1_1PolynomialRootFinder.html</anchorfile>
      <anchor>afea07976477024271e100cab9c2e8d23</anchor>
      <arglist>(const Vec&lt; 3, T &gt; &amp;coefficients, Vec&lt; 2, complex&lt; T &gt; &gt; &amp;roots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findRoots</name>
      <anchorfile>classSimTK_1_1PolynomialRootFinder.html</anchorfile>
      <anchor>a4785c9546671e29b691a571a94f6c8c5</anchor>
      <arglist>(const Vec&lt; 3, complex&lt; T &gt; &gt; &amp;coefficients, Vec&lt; 2, complex&lt; T &gt; &gt; &amp;roots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findRoots</name>
      <anchorfile>classSimTK_1_1PolynomialRootFinder.html</anchorfile>
      <anchor>a0cea4ac0f6571636bd4484ed925845aa</anchor>
      <arglist>(const Vec&lt; 4, T &gt; &amp;coefficients, Vec&lt; 3, complex&lt; T &gt; &gt; &amp;roots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findRoots</name>
      <anchorfile>classSimTK_1_1PolynomialRootFinder.html</anchorfile>
      <anchor>ad26a3e54bdcd5497da13366f12df9a4f</anchor>
      <arglist>(const Vec&lt; 4, complex&lt; T &gt; &gt; &amp;coefficients, Vec&lt; 3, complex&lt; T &gt; &gt; &amp;roots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findRoots</name>
      <anchorfile>classSimTK_1_1PolynomialRootFinder.html</anchorfile>
      <anchor>a150b16acf16718548da54560601049b4</anchor>
      <arglist>(const Vector_&lt; T &gt; &amp;coefficients, Vector_&lt; complex&lt; T &gt; &gt; &amp;roots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findRoots</name>
      <anchorfile>classSimTK_1_1PolynomialRootFinder.html</anchorfile>
      <anchor>aea76fb1d7bf469d1a49932815dbda274</anchor>
      <arglist>(const Vector_&lt; complex&lt; T &gt; &gt; &amp;coefficients, Vector_&lt; complex&lt; T &gt; &gt; &amp;roots)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PolynomialRootFinder::ZeroLeadingCoefficient</name>
    <filename>classSimTK_1_1PolynomialRootFinder_1_1ZeroLeadingCoefficient.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>ZeroLeadingCoefficient</name>
      <anchorfile>classSimTK_1_1PolynomialRootFinder_1_1ZeroLeadingCoefficient.html</anchorfile>
      <anchor>a9c08ac684d5cd4d021df8c77419e4096</anchor>
      <arglist>(const char *fn, int ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZeroLeadingCoefficient</name>
      <anchorfile>classSimTK_1_1PolynomialRootFinder_1_1ZeroLeadingCoefficient.html</anchorfile>
      <anchor>a8a30b502de19da9820e0b3199dffc54d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Random</name>
    <filename>classSimTK_1_1Random.html</filename>
    <class kind="class">SimTK::Random::Gaussian</class>
    <class kind="class">SimTK::Random::Uniform</class>
    <member kind="function">
      <type></type>
      <name>~Random</name>
      <anchorfile>classSimTK_1_1Random.html</anchorfile>
      <anchor>aded8612afbacace95d04b15e1d021fe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classSimTK_1_1Random.html</anchorfile>
      <anchor>a7d5b7c82cc87da78b2adad2e67273a31</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1Random.html</anchorfile>
      <anchor>a7c28a12dcc852fdd4c82c8fd885d2a97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillArray</name>
      <anchorfile>classSimTK_1_1Random.html</anchorfile>
      <anchor>a021d11642b77a88a672602fe7860f407</anchor>
      <arglist>(Real array[], int length) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Random</name>
      <anchorfile>classSimTK_1_1Random.html</anchorfile>
      <anchor>a22219c19846bcb62f78198a7e7638652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RandomImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1Random.html</anchorfile>
      <anchor>a4541e3477f08595aee65eddb96e978f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const RandomImpl &amp;</type>
      <name>getConstImpl</name>
      <anchorfile>classSimTK_1_1Random.html</anchorfile>
      <anchor>a1d3e687a6bb140aed3ab0edbb3b3367c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RandomImpl *</type>
      <name>impl</name>
      <anchorfile>classSimTK_1_1Random.html</anchorfile>
      <anchor>abda02297aed4a0fefed2fd22504d5f0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Random::Gaussian</name>
    <filename>classSimTK_1_1Random_1_1Gaussian.html</filename>
    <base>SimTK::Random</base>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>classSimTK_1_1Random_1_1Gaussian.html</anchorfile>
      <anchor>ad32177b146608577b6a1e3eeec810f4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>classSimTK_1_1Random_1_1Gaussian.html</anchorfile>
      <anchor>ae3eb2e1f2fbb922596aee7b7552fb552</anchor>
      <arglist>(Real mean, Real stddev)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMean</name>
      <anchorfile>classSimTK_1_1Random_1_1Gaussian.html</anchorfile>
      <anchor>a18ef88e7203e9c13d82d0e8d02d1dc85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMean</name>
      <anchorfile>classSimTK_1_1Random_1_1Gaussian.html</anchorfile>
      <anchor>a3edf9c1cb4a5909bdbd11c4dcc3abfd6</anchor>
      <arglist>(Real mean)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getStdDev</name>
      <anchorfile>classSimTK_1_1Random_1_1Gaussian.html</anchorfile>
      <anchor>afe25a07ec9840ca1dd329d0c6fa63a5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStdDev</name>
      <anchorfile>classSimTK_1_1Random_1_1Gaussian.html</anchorfile>
      <anchor>a2bd3b3b98dd264b159d590b8ea93291e</anchor>
      <arglist>(Real stddev)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GaussianImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1Random_1_1Gaussian.html</anchorfile>
      <anchor>a6423764a4abcf837eb0d0ef333e13bd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GaussianImpl &amp;</type>
      <name>getConstImpl</name>
      <anchorfile>classSimTK_1_1Random_1_1Gaussian.html</anchorfile>
      <anchor>ad8d44e2c76775d4723ae2ad90cfbb51c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Random::Uniform</name>
    <filename>classSimTK_1_1Random_1_1Uniform.html</filename>
    <base>SimTK::Random</base>
    <member kind="function">
      <type></type>
      <name>Uniform</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>a5f20b4c0839f2a6d29e5a90dc1c75c4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Uniform</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>a10c693bf6d63ae74eebfd93095aa69ee</anchor>
      <arglist>(Real min, Real max)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntValue</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>ab66877fa19f8e010a1a1505d7fbcc590</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMin</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>a370bb564e213d1c34e57b3c57be7b9cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMin</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>a044361be62897d090f524381b5e07401</anchor>
      <arglist>(Real min)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMax</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>a22a75b570a62f05c437ba9350706d9f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMax</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>aba1938431bbc1d615925c0b0caf22315</anchor>
      <arglist>(Real max)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>UniformImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>aec45a929662e92a401bb4444975c2850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const UniformImpl &amp;</type>
      <name>getConstImpl</name>
      <anchorfile>classSimTK_1_1Random_1_1Uniform.html</anchorfile>
      <anchor>a9a204ebff25c2f63c86cf68fbb45a678</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CNT</name>
    <filename>classSimTK_1_1CNT.html</filename>
    <templarg>K</templarg>
    <class kind="struct">SimTK::CNT::Result</class>
    <class kind="struct">SimTK::CNT::Substitute</class>
    <member kind="enumvalue">
      <name>NRows</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a4c1201b13828e22d6f5b2a22fc81a7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NCols</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a0e85c062c2512847e2df03e4367a7e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSpacing</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a5de617e59a810818574857152e02e6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSpacing</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a844eeb92eee9f29f4dc229f41e8130d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NPackedElements</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77ae1c5dfee9a201bc46a3736683226f149</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualElements</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a748bbfd9b963dfd9a902ad334aa83613</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualScalars</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a2e5a019a7f9463007d779bc3d6c84e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImagOffset</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77acf138686889b51330d3f9f1f47cceecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealStrideFactor</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77aa6151f5c70160179366829c23df4f0e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArgDepth</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77af463269e07453721535ba382fafc7bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsScalar</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a8bc025c14e8df5b13d631389047fd6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsULessScalar</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a6a5a6302c2310f8425656892d27f9366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsNumber</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a2e6eb1530babbda44d996a12c9dfa6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsStdNumber</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a2add89eae4f11f0a5d50240d213c70cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPrecision</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a9aa027abf67a29a8218f05a7dbce7565</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SignInterpretation</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7bf017c3814189c19f5a72ec66223e77a669ebd13a508590c6e7e863dc6044df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a46a07a7cc3bd1953d2b3291ef758d8df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TNeg</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ac60083a4dfbd9d4b52eba40d0daa5e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TWithoutNegator</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a8fa907a1105e1986cc3a6693bee289a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TReal</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a99691326a3ebcde21f820c7d1948b8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TImag</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ae974547ef47fa4b20eecb968a5ed34dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TComplex</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>acf221e39666a67f13d33eb1ec42595eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::THerm</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>abbc59ab05d09d534ab26f1abd1612c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TPosTrans</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>abee71fda19f27c7d84caede6599154d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TSqHermT</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a63dea5955adff218f158da672d2e51e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TSqTHerm</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ae6f64a355b6f5dd6183a49b958899b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TElement</type>
      <name>TElement</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>aa060478adaf10776b288a3bef666eeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TRow</type>
      <name>TRow</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a7060b40f487c387fe47aba48640f47e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TCol</type>
      <name>TCol</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a4ce28b2850da071275044a4fddf747bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TSqrt</type>
      <name>TSqrt</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a8a063f3c7cb38f49db3f593bba18478d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TAbs</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>aeb6a416120e5b20ba65c36ce8b68c230</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TStandard</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>aca0bf92df6b4a845b221a9f2377c4635</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TInvert</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a8d762c72fc4c640cfadfa1c0d8569679</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::TNormalize</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a8f5b3ad31cbda4d37e3b3fe9443d30b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>aeb30bb49aaaaf6baa2a953a2b2d9a970</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::ULessScalar</type>
      <name>ULessScalar</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a240ab22b41c9dd30843f2cd21d247a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::Number</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>aff55e5df3a09f157237bdac6a216c42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::StdNumber</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a363c3f8c73184bf95abb1abec4ecd951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::Precision</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ae9ac0e4d4ae2c731f84c181fa31be0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::ScalarNormSq</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a32c5aa3c649c3819f9c60bd04218e669</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Scalar *</type>
      <name>getData</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ac6f7125b389b83644fb2b87281bfa422</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scalar *</type>
      <name>updData</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a41b1df8e978701f7d932967601582a2a</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ad46e2685b64111d3cbf71e85c7c0e9b8</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a3027cfa48eb628c675d8c6bd84655fce</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a73492f01d92c2bda51284e5d054fd334</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>aa2e641b392382924eb00c47cee49584e</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ac8b6f085306daae0ae0da417d85da99b</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a97a9b60872c01b1eb496031be2ece600</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a250f41312c2551bc4659337e9784aa25</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a1fad212fd014b052884958bef09ae343</anchor>
      <arglist>(K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a281ad2bfe96ffd0fc225f79e348ed181</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ac6dc9e5faee833f44ad63a8d92126865</anchor>
      <arglist>(K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TWithoutNegator &amp;</type>
      <name>castAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a1b1a083594eaad810959f9f939b1e95b</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TWithoutNegator &amp;</type>
      <name>updCastAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>af8ac8b391765ac7907db0539d90e4795</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ab73218baec45557fb67815e80f2727f4</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TSqrt</type>
      <name>sqrt</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a53d43220d4a8f748de15ccf079e8e41e</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a0b431be3c86cf224237fbb2b3ecd3aaf</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TStandard</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a9d655f83bf42c432df0486775b1e4d9f</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TNormalize</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ad2ec62d0b7dfad81582932ee5fa3f89e</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a9b71201e3a31728b5db3ec52ca19e972</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>getInfinity</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a84e07a0a07860bfba1e597c773c71604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a05f07b6ea26be48bdb3a503af2b5015f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>ae744d77841ec56e96b76f741b95693af</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a86d5f9ba43ddcb97ee235bd1a8148d44</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a5f378be12735e7d74332e51f268f5ccb</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a9e2c5d8d639b74837f1a3fa6b65e8ef7</anchor>
      <arglist>(const K &amp;t1, const K2 &amp;t2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>aa8f3c3b8fbb36028985fd2c9dd7d2c3a</anchor>
      <arglist>(const K &amp;t1, const K2 &amp;t2, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1CNT.html</anchorfile>
      <anchor>a2abc7816ddbe0fb0a46b8af9a849a4ed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::CNT::Result</name>
    <filename>structSimTK_1_1CNT_1_1Result.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>K::template Result&lt; P &gt;::Mul</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1CNT_1_1Result.html</anchorfile>
      <anchor>a05df6ed9c5364a93ec23086fa013d2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::template Result&lt; P &gt;::Dvd</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1CNT_1_1Result.html</anchorfile>
      <anchor>afff5b9f9e8419240a0489d5ae947b8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::template Result&lt; P &gt;::Add</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1CNT_1_1Result.html</anchorfile>
      <anchor>a08c9843df1d60d63a3ad21e3b2d72ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K::template Result&lt; P &gt;::Sub</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1CNT_1_1Result.html</anchorfile>
      <anchor>ae841e6f6b7d66338cd7e9337f13fba85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::CNT::Substitute</name>
    <filename>structSimTK_1_1CNT_1_1Substitute.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>K::template Substitute&lt; P &gt;::Type</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1CNT_1_1Substitute.html</anchorfile>
      <anchor>a14dfc946aab9f76c37f4c32218776238</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider</name>
    <filename>structSimTK_1_1Wider.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; float, float &gt;</name>
    <filename>structSimTK_1_1Wider_3_01float_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01float_01_4.html</anchorfile>
      <anchor>a17c6d04b633af727c7aa18358910d4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; float &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01float_01_4.html</anchorfile>
      <anchor>a0a1481cbbaeed72475d2832b6d135522</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; float &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01float_01_4.html</anchorfile>
      <anchor>ae6b6a83784e143d303d4e7919a4cf9cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; float, double &gt;</name>
    <filename>structSimTK_1_1Wider_3_01float_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01double_01_4.html</anchorfile>
      <anchor>a246255a78d61e10f24bb8f0ab624f13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; double &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01double_01_4.html</anchorfile>
      <anchor>adad0b01a2a05951e10d1442e5535284e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; double &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01double_01_4.html</anchorfile>
      <anchor>ad4878f69774fa2cd5f5ce1d2c5e6cd3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; double, float &gt;</name>
    <filename>structSimTK_1_1Wider_3_01double_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01float_01_4.html</anchorfile>
      <anchor>a4b4bbb5453d8a7a7befe8b686b89b7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; double &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01float_01_4.html</anchorfile>
      <anchor>ae26c141d5e86ef7f58ea6beab6de78c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; double &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01float_01_4.html</anchorfile>
      <anchor>a10c454e21a590deb75ac21eefdf5df09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; double, double &gt;</name>
    <filename>structSimTK_1_1Wider_3_01double_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01double_01_4.html</anchorfile>
      <anchor>a40e8857f013836a1cce196ee6e0fd6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; double &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01double_01_4.html</anchorfile>
      <anchor>aeff35f0409edbc3b4345e4e25802656b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; double &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01double_01_4.html</anchorfile>
      <anchor>afcd6ffe694049631a578f37ae5ecb2e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; float, long double &gt;</name>
    <filename>structSimTK_1_1Wider_3_01float_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01long_01double_01_4.html</anchorfile>
      <anchor>a76a854e5237f7d416e99b37b91f886c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; long double &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01long_01double_01_4.html</anchorfile>
      <anchor>a701d971e099619fde25a205771a857c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; long double &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01float_00_01long_01double_01_4.html</anchorfile>
      <anchor>a681c11b9a150cee5084672d881e3d318</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; double, long double &gt;</name>
    <filename>structSimTK_1_1Wider_3_01double_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>a1e1622dd62a384961fa079bda4d1811a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; long double &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>a16c4674a414b5bc9205410219392a77f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; long double &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>aab10df88a5c219c950fc1dc1c38d690e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; long double, float &gt;</name>
    <filename>structSimTK_1_1Wider_3_01long_01double_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01float_01_4.html</anchorfile>
      <anchor>a19c3f45519254eba238694845f699824</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; long double &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01float_01_4.html</anchorfile>
      <anchor>a90bca397c50c7404c7a8087a9ebcf3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; long double &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01float_01_4.html</anchorfile>
      <anchor>a8ac3256666b9a301cb68e198af9c7954</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; long double, double &gt;</name>
    <filename>structSimTK_1_1Wider_3_01long_01double_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01double_01_4.html</anchorfile>
      <anchor>a7c29f6593df6996fbf66a364399855e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; long double &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01double_01_4.html</anchorfile>
      <anchor>add3c133c0be7c29270d3aba9e00759ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; long double &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01double_01_4.html</anchorfile>
      <anchor>a5356641142e9d802ce00c106db7e2bd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Wider&lt; long double, long double &gt;</name>
    <filename>structSimTK_1_1Wider_3_01long_01double_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>WReal</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>a9ba28fdb3fe70c067f7bfc9a9734a43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; long double &gt;</type>
      <name>WCplx</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>aaa7a8638c174602422736a59087af103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; long double &gt;</type>
      <name>WConj</name>
      <anchorfile>structSimTK_1_1Wider_3_01long_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>ae0eeb3de41de5c2b094b370534168c5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::conjugate</name>
    <filename>classSimTK_1_1conjugate.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>SimTK::conjugate&lt; float &gt;</name>
    <filename>classSimTK_1_1conjugate_3_01float_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>ae6bb837848a8cd0e08400bd5a1d1328f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a2816d9f79664950ec13855df4d4d4d26</anchor>
      <arglist>(const float &amp;real, const float &amp;imag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a17c2270e8f68bf6a319abbaaf451506e</anchor>
      <arglist>(const float &amp;real, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a3779cfbd8522ecc5e6cfcd09ce1009ce</anchor>
      <arglist>(int r, const float &amp;imag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a171b34a3fe7a27dfcc313ec259fc1928</anchor>
      <arglist>(int r, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>aa9c189de52b7592bd70975922a950b4f</anchor>
      <arglist>(const float &amp;real)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a3e83ab4cce2c393b7d4a57aad8520819</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a1f0a6a5f1fcac0e38aa7753a852f5fbd</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;cd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a6377dabae661b95dadc738b0894ebf2a</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;cl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>aa678b0672933e233fa7072d7bf917532</anchor>
      <arglist>(const double &amp;rd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a4088ce325e15c12012359ffe62fcd955</anchor>
      <arglist>(const long double &amp;rl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>aca1885a4d48bfe9ccef55fc8f83199ff</anchor>
      <arglist>(const complex&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a6ce946830fc5db5f0015a5252276ae28</anchor>
      <arglist>(const complex&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a3a2d0922799fc0b50467f19f96e7ec91</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator complex&lt; float &gt;</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>aeaeb03c7cee261793743c5874bb71401</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>adf044beffe3ed86ffb700c630e7359db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const conjugate &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>ae8120c67097401ed6f75cd55798009ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>aaee871587805baafa3746e01f66d2a5a</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a3c7455d99d219c2a806c4a7e0c859ee5</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a42187b3333e440f6fb0b3fd9e2d548fe</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a618d6e26d23ac54d958dfff608c6d92c</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>acffd55e92cae24d08e790f1897fdc974</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a43acc920f281177d907702cdf093a338</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a0831e042dbe1282401527d60b51a60da</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a30702cbe64c55ef6e6048f700ee05cae</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a8768c5856b6e87be78aac30209b1ac96</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>af3d58f68e03d36ce54463aecc9b192b1</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>ac533a37794d280841e40ffc6e3ef4750</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>ae5d8afbb9058fd7e345db1592ef9ae5b</anchor>
      <arglist>(const complex&lt; float &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a18a0ee4ae5491bef51f60694408970ac</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a105c15f7f29aee697b839f5ac7b0c389</anchor>
      <arglist>(const complex&lt; float &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a4d2c68df47b9ad3c633e33e71eba64ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a63f0dcc0b89db6f79e66d22237e39dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; float &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a056acbddfa8b786d66be160569d1966f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>negator&lt; float &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a7c494be1dedc1944edcc61f0c72d1af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; float &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>aa003e6498d0a9a4320eed6697d2f0ec7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; float &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a32aabf08848e5f875b09d2485507dbb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const float &amp;</type>
      <name>negImag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a0c0bba23ee27198a9a4dd03a0f8a43f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>negImag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>ac15f06fa61760974710e57727c750809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReal</name>
      <anchorfile>classSimTK_1_1conjugate_3_01float_01_4.html</anchorfile>
      <anchor>a9ee84080ab2efb4295922b1e4226c3fb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::conjugate&lt; double &gt;</name>
    <filename>classSimTK_1_1conjugate_3_01double_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>ae675ccc2192d13fcc9df15d02ac9f6cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a7ebb00940c401c1201fe28d42ebd83d4</anchor>
      <arglist>(const double &amp;real, const double &amp;imag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>aa40cbd4a3b8e7c7e1e392fd1dcf954a4</anchor>
      <arglist>(const double &amp;real, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a1b35a49a3b44c3ba411edb65990c420b</anchor>
      <arglist>(int r, const double &amp;imag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a280071650bef5f80fecc66fe134a6676</anchor>
      <arglist>(int r, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>aeff372ab06ede287550010c9f6659e40</anchor>
      <arglist>(const double &amp;real)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>ac81579b2c3606ad88dfd945477ba2912</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>afbdbfad378c938a11825a13d55e52780</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;cf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>afe32070b6810dc42bf70864bd48b1ad6</anchor>
      <arglist>(const float &amp;rf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a9d3d1971838c0083100fe356830a8566</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;cl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a38e12b011ba62067b14f5f7f8b6f6d14</anchor>
      <arglist>(const long double &amp;rl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a31c9b29e90536d1e9e78bc6b0d9e8518</anchor>
      <arglist>(const complex&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a66e96da01d1d31fd1cc13d8bc85f7bdf</anchor>
      <arglist>(const complex&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a9fb2fb43fd39f46b0c46478afbae7f46</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator complex&lt; double &gt;</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a7ff5e07aec4d9da275393d390722fd9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a1669e5a3255f3760df38e2d2bcad4a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const conjugate &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a0d808425b656ff8cf64f1dbdcdabfea1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a06436acc156297f470298b5bee64eb8f</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a4988e76df053c2cdc3abcb90b1ea5334</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a494b408f2adeccab7c01da115d0a81a3</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>ae8a3ba245852f676f981c185e191d2ea</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a2a06cc9412c5da4df3ebad5a760f19a6</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a542fafd44b2c57714aa5d733d5afbb05</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a33ed9340ce9884928d2fc57ea9565694</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a90adaba09c8276f10e5252fd44cc661a</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a777872f3ac1ccccaa597b1d1f0bc6f17</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>ac0d09f91aea9ead3118e2d526f35add6</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a83291de434fdcc836231202cfaf2a21a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>ac430982cba1aaf9cf16b28e6f6e906f8</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a7dee6f023c5307144c5cc18afd063b2d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a81f6a42d323667dbfbb85b759ba93d0f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a2b886f3346538da26275b86f59cddb49</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a60bc29c0c5796f9eb1765319b18b2318</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>aeb78e36011f77b6bdd81d7dd63f69c10</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a755ace6c35336b052260a012997669c3</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a54336bcb25f932d413377db6094edc79</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a59626d47379df72b37e14cd24e046516</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>aed15a708c6ce7bf3c372d786a38d795f</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a3672cdc17dab64669d506c713a35c8ab</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a7fcacd346977ccfee76c8b436953a3fe</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>ac56c7c2319cc9f2284a1023f7276c9dd</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>aec85d58d2357ec987d8dc0df1f2e23b7</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a85da6362d1f105a1d820db545e579501</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a0323796517be9d187dc94bbfecb2510e</anchor>
      <arglist>(const complex&lt; double &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a3026f40b2de18dfbea8d1206d98eac2e</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a912062f8bc420d44e16a7a3523d64243</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>aa8602f22d7fe0f973e539ca70d64671f</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a861d5c8e914585f7924c19fac0630776</anchor>
      <arglist>(const complex&lt; double &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a90999292902199d3a892f60922252e2a</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a43967c42e796c3200eefe0ef4022bca7</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a05fdde5a26573e935d328f7c34287c5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a2ea85d974caea3ef9ca0f0e0caa48d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; double &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a7f1398bbca835ecf0ae67317b2d467d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>negator&lt; double &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a840fc3418186786c508941ad831bf371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; double &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>adc57b3c0873460e522ce60f81e0067b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; double &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a0c0966ddc557fdbaf2fbfe90b076e0d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>negImag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a5ebfa9cf3abec9b7758a6e6b81890ac9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>negImag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a0182e48cbaa504e25c66aeff5342e437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReal</name>
      <anchorfile>classSimTK_1_1conjugate_3_01double_01_4.html</anchorfile>
      <anchor>a4b1aa8126c643f738036a907451ddb2a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::conjugate&lt; long double &gt;</name>
    <filename>classSimTK_1_1conjugate_3_01long_01double_01_4.html</filename>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>aa99f70eb8c351491f6e62bf39876e8cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ae7f65571fc4517569bff3ab5d92c6c1b</anchor>
      <arglist>(const long double &amp;real, const long double &amp;imag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>accb5bae53168e503022960226c98d372</anchor>
      <arglist>(const long double &amp;real, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a7f381fc764483e25c8c68a9c9131dd04</anchor>
      <arglist>(int r, const long double &amp;imag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>af740f6f546f423e3f5020054e2507095</anchor>
      <arglist>(int r, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a2d08b47ae547a382a34ba5ac51642693</anchor>
      <arglist>(const long double &amp;real)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a5659087e69cc4b7925e5639a1b0b6aa8</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>aa4cdc942ed9d2d3b7895bd4363389d92</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;cf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a732254d54d47d2dff043b167b4196d70</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;cd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ad41dd6aca777a70e1af41c5117a35c4a</anchor>
      <arglist>(const float &amp;rf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>afebb016b2c193072e77a455dce1572ca</anchor>
      <arglist>(const double &amp;rd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>acc6ea6897acfb880c3c7ea23e135d93d</anchor>
      <arglist>(const complex&lt; float &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ac6d1d8efbdb047fb0a3ecfa8bc23723d</anchor>
      <arglist>(const complex&lt; double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>conjugate</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>af9d2595e1d4ea2cb6577081a3f77d188</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator complex&lt; long double &gt;</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ace81241462aad8dd556abb298caa2726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a28faae99708cdc2573ce1073a2d1cfa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const conjugate &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a804871d2bf4fe3947beba14e932cd62d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ac1deaf46cd642f4679675742e773c43d</anchor>
      <arglist>(const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a0100d40a60c361b15d15975707d1aee8</anchor>
      <arglist>(const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a2e3ea527ebbcbcdc00aa3d417d6d2e98</anchor>
      <arglist>(const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ad422e844a63823701398df4fbdb4d9b3</anchor>
      <arglist>(const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ab834a19c35a96e277f68976b6d2c47df</anchor>
      <arglist>(const long double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a6c491d6d19c512facea52953ec76478e</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a11dca0883f8de21c1560f1acfdd97f7e</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a8df9b45bcbe4d2f2a231025c1ee2ed77</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>af1064fdc11d3a0c6d5a889d2e1af43ab</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a35eaf5c0412b2d277c7f0e5d872738df</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ae7c70b816d81a250582a6ebdc9e6c012</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>accdf3b163afaca622ec842ec3e696ab6</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a63a661ec5c314fc85d8ef7395271a419</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a8eb02ffbe6d45bf92b7112418be4d409</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a1a57076a2678badfc80aa5d96006e05b</anchor>
      <arglist>(const float &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>aa5a8f0f1e01a9e773647ca8a33170070</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a7ae9fe3a06e68b7c6b21fc6936c89b57</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ae668f38ad60680b28cc7c4a16c47d376</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a28081eb524553da779790805dfe0eea4</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a5e42749d82b27059eaf514cd050c6c0e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>af19292abbd30cbb7cf1af1d2327d921d</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a3671ad5a7baf03a40f5df31190c57616</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ab4dd48c9324fed85d7dd86a8c07ad809</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ae8b7202d2c8531b159bcf21bc5b0c954</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a33a95e2d0c017c5dd429b26ba24b3d44</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ab0ea6d4b67ae75ecf4f411df565677a3</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a6893c15df63b0506ac6f4b94821980fa</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ad657f6764d906c557fe49b5012640340</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>abebd0b438fc9d6d375c1e2622dcdd723</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>aa13941c8bc3f1c5b9d6aae866adb6535</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a1c2d21c60ab34f0263ed644a673c953f</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a06d6fa292cd208c80ca543fba665dff3</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a39c1e563971cac59b008668aff042111</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a01f5020a5a535cd0ad438175d1251130</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a375c684faff734f9174149f65881d72e</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a9ed4f09602434c19dea299f03a30648c</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>afd96cce6d298f4843b0c02f2ba7bfe6d</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a10ea00cae4be2624e619989eaa3e8797</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a312f319e5b9f7bc8826166ef303748d1</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>acfe393b4a66b5453b71fc5040d0f33f3</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>af0d5b79a1f7b309f051751d36d9022aa</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a349baf8f47a3488342f4eb3aa8fc6dce</anchor>
      <arglist>(const conjugate&lt; long double &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a499faf20e2dcb8f12901b89fd33ce366</anchor>
      <arglist>(const complex&lt; long double &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a735ac5d8bc4df87ad23a73218fbf6f68</anchor>
      <arglist>(const conjugate&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>aa7e21ffd68ba7a3c38a4cec1da87aa56</anchor>
      <arglist>(const complex&lt; double &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a15962893bca5454f57c04eadec660988</anchor>
      <arglist>(const conjugate&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>conjugate &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>aa4490c0903a744216a0357e7bbcf4578</anchor>
      <arglist>(const complex&lt; float &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>const long double &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a8d5ccdd5e3fb27911cf82934886b8d69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>ab1f81b881cf022322b2724dcc2a746f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; long double &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a90b7a54645682dd73803b84908be594e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>negator&lt; long double &gt; &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a55d34aac0df67a84992e060304f1413e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const complex&lt; long double &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a4babae2b13f4081032284bc2728d4fa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>complex&lt; long double &gt; &amp;</type>
      <name>conj</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a13e1b8568658bd3984fc2789e60e4518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const long double &amp;</type>
      <name>negImag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a00d7ca26c88f5eb280cdfda3be632929</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long double &amp;</type>
      <name>negImag</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a09f8f4b5f734f79cf85646d185833f0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReal</name>
      <anchorfile>classSimTK_1_1conjugate_3_01long_01double_01_4.html</anchorfile>
      <anchor>a786e1d833d6c8f22296a9cf01c2dabc7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::negator</name>
    <filename>classSimTK_1_1negator.html</filename>
    <templarg>NUMBER</templarg>
    <class kind="struct">SimTK::negator::Result</class>
    <class kind="struct">SimTK::negator::Substitute</class>
    <member kind="enumvalue">
      <name>NRows</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76a0e721a4ad27c8dfc4d839e8bec477142</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NCols</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76af9775dd1dd5e932bc9b68cabc890a59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSpacing</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76a6e64bb513ac491fe515c90b5b6feba47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSpacing</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76a1bdb02944ad2d146fa457feb0447e205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NPackedElements</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76ad7039cb967337ccb5104ba5882970b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualElements</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76a4d49ee5a005da744d77241ea04c98643</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualScalars</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76a2d811e0cb26864a2a087eddc4963b29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImagOffset</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76ac93c84d666c8aa5d60c06bd92c0c860b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealStrideFactor</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76a08af142e85cb297bffa4239783cda0fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArgDepth</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76aa514fcec7492fe7f57c1d0824071db75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsScalar</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76aa82887c3f83e1624f16fd1ab1700b126</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsULessScalar</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76a0a6cb16c9fb8d9c34e078aa36967c8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsNumber</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76abb16e26b5ff00f2bdf697f40dd40c8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsStdNumber</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76ac03fe22b972773b29d5883e5d38720f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPrecision</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76abdd6b89f3df8d0b6da483a3fa9c406ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SignInterpretation</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a62cea78087b371f082d57ba2289c3a76a62559ead896cdd9314b70734eb4ec049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; N &gt;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a7c044d61cff7acbd70294c0c6684e885</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NUMBER</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ac3e8b264ed91acff1b2198576d765bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NUMBER</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ad7b56abc817025f610fd692f791c04fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; NReal &gt;::TNeg</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ac985ee1fa71715837e77dd402e9fa092</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; NImag &gt;::TNeg</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a420300d3c813297670dceb384cbac2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; NComplex &gt;::TNeg</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ad034a9893f310fb4e9d663160865e58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; NHerm &gt;::TNeg</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a5d96f989e505c60c984cba85ff9f5ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; N &gt;</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a161329841adda3a340cb6285115873ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::TSqHermT</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ac866f6b17f6630c2da3ef7e36fe84074</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::TSqTHerm</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a89c63a8b61692eecdcd391cdcde0efa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; N &gt;</type>
      <name>TElement</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a085493ddb529276a4d58ff70711fee2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; N &gt;</type>
      <name>TRow</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a114b6eee9a43885da9153300366f5879</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; N &gt;</type>
      <name>TCol</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ab15d523250828dc6b1ee23900b4fbc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::TSqrt</type>
      <name>TSqrt</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>aa537c6ea39952ccd2d3dd01b9a04955f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::TAbs</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>affb26ed5ab72a60ff720854d8fac83c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::TStandard</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>aeeefcf63a023fa5883dcc3adbe04e409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; NInvert &gt;::TNeg</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a2ffef6cf19bfe92a6130a1a5ebac9b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::TStandard</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a754ba562fbbd00a1a5668c4f10058df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; N &gt;</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a6b72557586e2acf74371b8a443ab5385</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; N &gt;</type>
      <name>ULessScalar</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a00615d163b46489b53540ff9178b48cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NUMBER</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>aeb55918c82a653c35416afaf01aed4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::StdNumber</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ae3b11033129d454a94ac9c8665dbd07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::Precision</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a7662c745aef9d94463e2839ed547d87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NTraits&lt; N &gt;::ScalarNormSq</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a8e85fdaac6e7c7acd7a6a10f5f546a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const negator&lt; N &gt; *</type>
      <name>getData</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>aeb88b24d43757d48aa1a6a980a79e7bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>negator&lt; N &gt; *</type>
      <name>updData</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a1efd483d52bf02728f3b0598cdf26ef1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a404ff91bda2d084a3db91607f83955a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ac79e9eaed273648f91c4cdf53ca58181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a388f59b54b14fe9c0b2e4b20a274158d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>acba561653d0953e4b2b8ef50f88303b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a63f345006e04ce199f84d6af8be277f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TSqrt</type>
      <name>sqrt</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a66337b7038c116b6ca1d34d81bb3d56d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a54aa704d757ae076b09656044f675e4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TStandard</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a7dc4e27612ec413b716ef580acb5c54b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNormalize</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ade6910817ee2278b8ec703708c5adf01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>aa3f6c06c48b66b3046049a141ef6586a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a6b24e2113ba4dfd3c09f75d96fc401ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a5e2d671c7b9796e95b33de3e70499840</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a121570dc8aae1191d6a5f8a3af7e6458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a1fb488f687a862047c6b1d84cdf34012</anchor>
      <arglist>(const T2 &amp;t2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ab72c3811493b1e8c7911ef21c96d19d4</anchor>
      <arglist>(const negator&lt; N2 &gt; &amp;t2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a6e71b4f5edb7deca97a2cae105e6e799</anchor>
      <arglist>(const T2 &amp;t2, double tol) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a321aeb3587f9c47ebb527c6bc2162e4e</anchor>
      <arglist>(const negator&lt; N2 &gt; &amp;t2, double tol) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a42cafd7e66c8c92ff1ea0bd3f63178b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a8273b0d014c825f78bf0035dffa4754e</anchor>
      <arglist>(const negator &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a8e01a27d8089336786da225168578608</anchor>
      <arglist>(const negator &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>aa02c33e35f57b34adb2e508bb4cad4f6</anchor>
      <arglist>(int t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>aca3a279dce21956e26c4ce2cc8663f91</anchor>
      <arglist>(const float &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ae34c1532f8119bc32a2281edffc10ea0</anchor>
      <arglist>(const double &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a0dfb277dc462b26f20483ca45dd87d4c</anchor>
      <arglist>(const long double &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a45d91937d36836b495edab14aa059725</anchor>
      <arglist>(const std::complex&lt; P &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ad7e675c4afe7ccfa4ab506ba278f0c30</anchor>
      <arglist>(const conjugate&lt; P &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>const N &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a2398f0097fbaeb8353af877478a407f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>N &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>acf6f2329972d7b3c28ce45891c180686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>N</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a7c4cdf8941eab4f865528c1fdd4bbb33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator N</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ae370896b38427a2721c4f5da843f1c9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>adc524f02fc6f2ae9c11956c3e6368f91</anchor>
      <arglist>(const P &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a6e87397f8d2b3518522138a7b0c065d5</anchor>
      <arglist>(const P &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a18435a6b1ad91b7846e825c703d2642b</anchor>
      <arglist>(const P &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>aefb56fff0fd65b9723ab4b063fd8549f</anchor>
      <arglist>(const P &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ab5db9f6dedf719c20be0c7d60c1d308e</anchor>
      <arglist>(const P &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a7aa60e48c434ba80a44a7670b4b2d3b3</anchor>
      <arglist>(const negator&lt; NN &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a22ec5961a3f5a62f17089a6d5b371246</anchor>
      <arglist>(const negator&lt; NN &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>negator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a14756f0f5e4ba42fb3c091d64bec3edf</anchor>
      <arglist>(const negator&lt; NN &gt; &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static negator&lt; N &gt;</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a938dd827a7b446393ff64363851ca115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static negator&lt; N &gt;</type>
      <name>getInfinity</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a63d6a8f1017fc4a20902e19fa2f06355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>ac9e00f588e301ae7194b77305992327d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const negator&lt; N &gt; &amp;</type>
      <name>recast</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a9b832d1e28f472919f32b822fbbc10cb</anchor>
      <arglist>(const N &amp;val)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>negator</name>
      <anchorfile>classSimTK_1_1negator.html</anchorfile>
      <anchor>a800d6cd6c7494e4fedb13f093ea75408</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::negator::Result</name>
    <filename>structSimTK_1_1negator_1_1Result.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>CNT&lt; PMul &gt;::TNeg</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1negator_1_1Result.html</anchorfile>
      <anchor>a24511a175d27b8f40c5b8d2f26c0e2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; PDvd &gt;::TNeg</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1negator_1_1Result.html</anchorfile>
      <anchor>a073aa8a9d0a8ed28dc3e2d10dc9731a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PAdd</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1negator_1_1Result.html</anchorfile>
      <anchor>a7d792801533a70c168a46e0baacf7f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; PSub &gt;::TNeg</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1negator_1_1Result.html</anchorfile>
      <anchor>a51be0994899e85e4135ea9c831b82c8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::negator::Substitute</name>
    <filename>structSimTK_1_1negator_1_1Substitute.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>P</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1negator_1_1Substitute.html</anchorfile>
      <anchor>adda9425929395289fed799fdeeff99f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest</name>
    <filename>structSimTK_1_1Widest.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; float, float &gt;</name>
    <filename>structSimTK_1_1Widest_3_01float_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01float_00_01float_01_4.html</anchorfile>
      <anchor>a274975128902aa3ea6c388a716469987</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01float_00_01float_01_4.html</anchorfile>
      <anchor>a441e6cb45046c50b56a6101ba116d6e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; float, double &gt;</name>
    <filename>structSimTK_1_1Widest_3_01float_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01float_00_01double_01_4.html</anchorfile>
      <anchor>a4a1a11fa4a4d5281101ebbc590fcd57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01float_00_01double_01_4.html</anchorfile>
      <anchor>a29c2d67e4312bc9e312e3871d4c16425</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; float, long double &gt;</name>
    <filename>structSimTK_1_1Widest_3_01float_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01float_00_01long_01double_01_4.html</anchorfile>
      <anchor>a98efb6cdf6d2e59b040247a1473b8963</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01float_00_01long_01double_01_4.html</anchorfile>
      <anchor>abcf8b6a5f2b4a833b86537501abf8762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; double, float &gt;</name>
    <filename>structSimTK_1_1Widest_3_01double_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01double_00_01float_01_4.html</anchorfile>
      <anchor>ac9b052eb4a43d0634561598eb415d825</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01double_00_01float_01_4.html</anchorfile>
      <anchor>ac2f493b501c586753354eb2cccba567c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; double, double &gt;</name>
    <filename>structSimTK_1_1Widest_3_01double_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01double_00_01double_01_4.html</anchorfile>
      <anchor>ace859ca16be01fa6016631d0f3c67130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01double_00_01double_01_4.html</anchorfile>
      <anchor>a9bafb16b5542944e49e6c473036bdc07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; double, long double &gt;</name>
    <filename>structSimTK_1_1Widest_3_01double_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>aaef96267c7d9a4cbab4c9804bd113c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>a5083065332495ea868fcca4573daeccf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; long double, float &gt;</name>
    <filename>structSimTK_1_1Widest_3_01long_01double_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01long_01double_00_01float_01_4.html</anchorfile>
      <anchor>a37bdd7a84960f2d80a112576aac85bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01long_01double_00_01float_01_4.html</anchorfile>
      <anchor>af46a9aae85342cfc2c376e31e2cfbcc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; long double, double &gt;</name>
    <filename>structSimTK_1_1Widest_3_01long_01double_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01long_01double_00_01double_01_4.html</anchorfile>
      <anchor>a2c1a4ee7315135ae4240e5cb471d1f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01long_01double_00_01double_01_4.html</anchorfile>
      <anchor>ab261bfe51307275b0014ae5db5a496d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; long double, long double &gt;</name>
    <filename>structSimTK_1_1Widest_3_01long_01double_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01long_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>aa03ac47bcd7c9b7798e6b7263ffc2b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01long_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>a968634fa7fa707d56ec51dd85b0ade8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; complex&lt; R1 &gt;, complex&lt; R2 &gt; &gt;</name>
    <filename>structSimTK_1_1Widest_3_01complex_3_01R1_01_4_00_01complex_3_01R2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>complex&lt; typename Widest&lt; R1, R2 &gt;::Type &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01complex_3_01R1_01_4_00_01complex_3_01R2_01_4_01_4.html</anchorfile>
      <anchor>a31816e976cf8edcc10f9334c36d3afd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Widest&lt; R1, R2 &gt;::Precision</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01complex_3_01R1_01_4_00_01complex_3_01R2_01_4_01_4.html</anchorfile>
      <anchor>ad9cada043f4609d8a9b38f0343be7977</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; complex&lt; R1 &gt;, R2 &gt;</name>
    <filename>structSimTK_1_1Widest_3_01complex_3_01R1_01_4_00_01R2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>complex&lt; typename Widest&lt; R1, R2 &gt;::Type &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01complex_3_01R1_01_4_00_01R2_01_4.html</anchorfile>
      <anchor>a3975789bd535491bebbf93b8ad8e7d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Widest&lt; R1, R2 &gt;::Precision</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01complex_3_01R1_01_4_00_01R2_01_4.html</anchorfile>
      <anchor>a468b90ac81fc23554105fed763e4a1af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Widest&lt; R1, complex&lt; R2 &gt; &gt;</name>
    <filename>structSimTK_1_1Widest_3_01R1_00_01complex_3_01R2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>complex&lt; typename Widest&lt; R1, R2 &gt;::Type &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Widest_3_01R1_00_01complex_3_01R2_01_4_01_4.html</anchorfile>
      <anchor>a84b839ff13aa8ab3c869bdb98a437d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Widest&lt; R1, R2 &gt;::Precision</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Widest_3_01R1_00_01complex_3_01R2_01_4_01_4.html</anchorfile>
      <anchor>a603143885016461a8ed220c440e9b829</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest</name>
    <filename>structSimTK_1_1Narrowest.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; float, float &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01float_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01float_00_01float_01_4.html</anchorfile>
      <anchor>afad00a927dd2427b74331edf4bafffd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01float_00_01float_01_4.html</anchorfile>
      <anchor>aebef9d46c0e7fc0ca7f8ac4012e15ac9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; float, double &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01float_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01float_00_01double_01_4.html</anchorfile>
      <anchor>aa37036aecaf2d5ca9514b458f484a9e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01float_00_01double_01_4.html</anchorfile>
      <anchor>aa6f1f47fd2da0c244b05029644c6de0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; float, long double &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01float_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01float_00_01long_01double_01_4.html</anchorfile>
      <anchor>acc3c0e0fb79ded135b4dbb0ce40589ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01float_00_01long_01double_01_4.html</anchorfile>
      <anchor>a02dc4697a3ca575e13db49c3caa21cd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; double, float &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01double_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01double_00_01float_01_4.html</anchorfile>
      <anchor>a275185f78e20b6767ce4c60b2aae48e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01double_00_01float_01_4.html</anchorfile>
      <anchor>ae9a0959451af88b24e105c29870d5814</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; double, double &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01double_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01double_00_01double_01_4.html</anchorfile>
      <anchor>a2992de42bf6e43a15216c007c4612643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01double_00_01double_01_4.html</anchorfile>
      <anchor>a855e851b1b75436cfd1d2fcf41c8226c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; double, long double &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01double_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>a00b90cee9f97a01ffdc88e7f20e4daaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>ac750c2001ba212e8835e0e5277928a67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; long double, float &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01long_01double_00_01float_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01long_01double_00_01float_01_4.html</anchorfile>
      <anchor>ab0c57c759afdc928d0a0b714ccd65cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01long_01double_00_01float_01_4.html</anchorfile>
      <anchor>a91e68f65ab4f8c4f139fa2a3e02affc2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; long double, double &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01long_01double_00_01double_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01long_01double_00_01double_01_4.html</anchorfile>
      <anchor>aee7ecb8fbb9831dc57990d02a52f563b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01long_01double_00_01double_01_4.html</anchorfile>
      <anchor>ada7e6c507a0df108cfeed30553a004c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; long double, long double &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01long_01double_00_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>long double</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01long_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>a7b2ff81622e3b92e90500c34db2d5f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01long_01double_00_01long_01double_01_4.html</anchorfile>
      <anchor>a1c6be7741e7a782216d9277941743899</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; complex&lt; R1 &gt;, complex&lt; R2 &gt; &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01complex_3_01R1_01_4_00_01complex_3_01R2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>complex&lt; typename Narrowest&lt; R1, R2 &gt;::Type &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01complex_3_01R1_01_4_00_01complex_3_01R2_01_4_01_4.html</anchorfile>
      <anchor>a5ad28602606eeefcf98ecc2469c5c1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Narrowest&lt; R1, R2 &gt;::Precision</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01complex_3_01R1_01_4_00_01complex_3_01R2_01_4_01_4.html</anchorfile>
      <anchor>a250e94e371ceda4a2d1c18fa6be76753</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; complex&lt; R1 &gt;, R2 &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01complex_3_01R1_01_4_00_01R2_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>complex&lt; typename Narrowest&lt; R1, R2 &gt;::Type &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01complex_3_01R1_01_4_00_01R2_01_4.html</anchorfile>
      <anchor>a02c852444a7a34bf88161b7e74914223</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Narrowest&lt; R1, R2 &gt;::Precision</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01complex_3_01R1_01_4_00_01R2_01_4.html</anchorfile>
      <anchor>ae2afe957ce9f58113c200478662f96eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Narrowest&lt; R1, complex&lt; R2 &gt; &gt;</name>
    <filename>structSimTK_1_1Narrowest_3_01R1_00_01complex_3_01R2_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>complex&lt; typename Narrowest&lt; R1, R2 &gt;::Type &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01R1_00_01complex_3_01R2_01_4_01_4.html</anchorfile>
      <anchor>a865cfd0d8c2bc4430d92287dac0f47c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Narrowest&lt; R1, R2 &gt;::Precision</type>
      <name>Precision</name>
      <anchorfile>structSimTK_1_1Narrowest_3_01R1_00_01complex_3_01R2_01_4_01_4.html</anchorfile>
      <anchor>a722ae1526706707760e25807be63bc34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RTraits</name>
    <filename>classSimTK_1_1RTraits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>SimTK::RTraits&lt; float &gt;</name>
    <filename>classSimTK_1_1RTraits_3_01float_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const float &amp;</type>
      <name>getEps</name>
      <anchorfile>classSimTK_1_1RTraits_3_01float_01_4.html</anchorfile>
      <anchor>a73e5d748705664bb476e5413602f51ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const float &amp;</type>
      <name>getSignificant</name>
      <anchorfile>classSimTK_1_1RTraits_3_01float_01_4.html</anchorfile>
      <anchor>a0d4dca630802439ef1d5bb25e88b16dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1RTraits_3_01float_01_4.html</anchorfile>
      <anchor>ae645532e5354bd911d50bf36e55f3542</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RTraits&lt; double &gt;</name>
    <filename>classSimTK_1_1RTraits_3_01double_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const double &amp;</type>
      <name>getEps</name>
      <anchorfile>classSimTK_1_1RTraits_3_01double_01_4.html</anchorfile>
      <anchor>a334d00f7d39d6ab88973f7e10dfdbcb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const double &amp;</type>
      <name>getSignificant</name>
      <anchorfile>classSimTK_1_1RTraits_3_01double_01_4.html</anchorfile>
      <anchor>a9793b893eb81ae49900ee2918f9cd37b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1RTraits_3_01double_01_4.html</anchorfile>
      <anchor>ab35e21a83af00768dd5f1943c231ed88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RTraits&lt; long double &gt;</name>
    <filename>classSimTK_1_1RTraits_3_01long_01double_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static const long double &amp;</type>
      <name>getEps</name>
      <anchorfile>classSimTK_1_1RTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a1fa77f68ee0f59f2c3c6c9fbdbcc1183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const long double &amp;</type>
      <name>getSignificant</name>
      <anchorfile>classSimTK_1_1RTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a53f7143e30aa913395311f48c36382ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1RTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a2dfc55bdd0a5433462466b3aee642891</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::NTraits</name>
    <filename>classSimTK_1_1NTraits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>SimTK::NTraits&lt; complex&lt; R &gt; &gt;</name>
    <filename>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</filename>
    <templarg></templarg>
    <class kind="struct">SimTK::NTraits&lt; complex&lt; R &gt; &gt;::Result</class>
    <class kind="struct">SimTK::NTraits&lt; complex&lt; R &gt; &gt;::Substitute</class>
    <member kind="enumvalue">
      <name>NRows</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a8d0840bd6a26ffc7d768e527b38a476e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NCols</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a5152cdcda7648d17f238ff1b75b5b38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSpacing</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a676142a43183e6de11a8c31b7644d67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSpacing</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a60f0a18121dd6c20a6f533d41258f112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NPackedElements</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859ad22237e83373b6154e9d8c173127e627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualElements</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a0541df07251450470a5a76a91a7501c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualScalars</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a937272441e3baa431cf71af07d46b010</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImagOffset</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a5fdf85765f5e8f999d654a8182e94d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealStrideFactor</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a4eda0f02ed87e1584703b3ad2e482ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArgDepth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859add7a99c55f96521a7dd826749dbc666a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsScalar</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a306c7179c3e7372dc12c08e9b5612eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsULessScalar</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a0debe663c918c60636f5b7c3d530a54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsNumber</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859ae00cca314a2887287ccbae03a5031f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsStdNumber</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859af875c3cc6889f36f46f1173a4fc64b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPrecision</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a89a64b58cc74ac2df6a369fea62eea3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SignInterpretation</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a85f76513b045d5d30cfecb37fb26e859a63ccf34a6c57dad2d7ba7eb8ce2b0c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a12b4dbccedcd575961900eb886c1a4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; C &gt;</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ac35287e2686ed5e39a0488d5c3734d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ae8891350030e030182b3712558144a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>afc7bc510c05c0710547a87673fd0ea55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aa60e9cb823346d84e782d5afa2d60c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>acef7d648a79c7092f110cba9ca3280f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a7af2caa2ababbc7236212afd1f20180b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aeeb8968f5c0290180f8d845e22e8b8ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>af2156382b67a98433119488acc1d5b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a22405ff8d737ecb95149a4edc5bc00f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TElement</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ad6779e1be7c4e1f3292dfb6f545cd66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TRow</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>afa34dc93e74cb4b87f47882eafe0e07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TCol</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a2fd74774683dcd0894c4c909168091b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TSqrt</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>adee23b7ef563ccf7c9c5d8fee2f1aa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aec5c730df0b8055c15609d257b053b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aa8515e71b977e1dbad650fbe56d49755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ae02f154c55a4108be79a8f5b94d39489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a186a48b2a356c796eaabe3f8704a2722</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a61ec2301b4dd6ed560d5a4ed4dd1f1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>ULessScalar</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a12e0d8c781fe88d943f113ca51674e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ac7878615fcecc6b990b13b563a958a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aa6bf69b21830b237b53adb3f96c105c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>adfe8d8b979d12959fd4b1317b5a90d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a3bcb7b00f4c6f42ea23f3822321e0824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T *</type>
      <name>getData</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a47b88ecd2bed5cba0107da9d3b46ff33</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>updData</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>abada7cf7e2b1451bf0afca50c0897a8d</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const R &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a0725444c42956fdde3023d14ee2fa3bd</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static R &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a93f58351ef6a249e0290a90d4d9ad8b0</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const R &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a18991ae6a709e52de252ff52929e9908</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static R &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a3146a01fe85f41778176829b8858543d</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ada46bca91404ead9acf1df202a56b846</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a3e740509e55a270785c601f603306046</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a6d488a7fe1438580bc482a248431686b</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aee4611fcbc0803954423ebcb07df850a</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ad54e254278ac3b2c823c485b5473c80c</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a56e7e8a336551e2e15a31a79ad8317e2</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TWithoutNegator &amp;</type>
      <name>castAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a2b33abe4992515e275d69dbbcb34bda6</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TWithoutNegator &amp;</type>
      <name>updCastAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a17ed3b78eec311a881337e211b8abb82</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a64d9a72924383a9a9fff551b3ab07ec3</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TSqrt</type>
      <name>sqrt</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ade100265c3d37560925ed31771005d35</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a1f77b991e573de0dbe152720c282cc0a</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TStandard &amp;</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a42e4905e0996bd7e57a9084979048d9c</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TNormalize</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aada48322b13766c4704f43b7de00d515</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a08b73e291a186d7b6cbf55880e89be48</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>af2d3bf4b27dab3e4510aa1787f2d8172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getInfinity</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a19a4bcbb429bf5bfdb1571500c4848bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getI</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a1b90f5a4ea25b6ef44b720cd5eaece46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a6254f94c90e2b20beabf94e3d0fe4ac7</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ab4ef43613f9a9721090e8709ae4f52b3</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a8310c6b7d47b671ad89d8477a17e4c8b</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ae6e1eb20950ba7eec2d9c94ed0aa9783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a297fc5a627c72976f91fbcc5190bcf60</anchor>
      <arglist>(const T &amp;a, const complex&lt; R2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>af7dcd2ddef208f20ac9cb7f0a9d191bd</anchor>
      <arglist>(const T &amp;a, const complex&lt; R2 &gt; &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a5f0a9b3e823bee510f49d66f5cfd19b2</anchor>
      <arglist>(const T &amp;a, const conjugate&lt; R2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a10d11d7c5df15a5c591db8ff916a7786</anchor>
      <arglist>(const T &amp;a, const conjugate&lt; R2 &gt; &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>afb3b87770e5934cd62d99e0fc4cc706e</anchor>
      <arglist>(const T &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ae2eb2f9223312571e3f35e67d77dba64</anchor>
      <arglist>(const T &amp;a, const float &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a443a9ea615054573ec455ea9b7d963e5</anchor>
      <arglist>(const T &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a872dc74a341e5e6b646e1d2bba055108</anchor>
      <arglist>(const T &amp;a, const double &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a48998bd85a20241f8ac9e94ecd3eac69</anchor>
      <arglist>(const T &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a0866365b5edb016c87bf2cf8d1bc4a10</anchor>
      <arglist>(const T &amp;a, const long double &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a500fea4b7f89c5f24d778e8d7af388f3</anchor>
      <arglist>(const T &amp;a, int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9635a7a2580b38dd30360dcc8c57bb28</anchor>
      <arglist>(const T &amp;a, int b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getZero</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9ad70a54be5f68468552131422e4f487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOne</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a75733158ad8700ecc46ae3ebee345416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getMinusOne</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a96f0ea4b77add5da0a76aa2a8c12c97c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getTwo</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ac1f05affae744843f4210961f13085dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getThree</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aeda9f6e77903b6b92402266050f8eec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneHalf</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a37b456b698abbf5666d8a2edfa2be2dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneThird</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a1f774155bcc2167210c895c580f53fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneFourth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a42c85f0a32f58f2248b5f74c42d5a573</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneFifth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9034f3c72c2eddf76691960ef80223e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneSixth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a14c32d339533870a77dad82d3ef7c72b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneSeventh</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>adeaea2cf8f79f1b5c5817effa763f9c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneEighth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a1554a60d117351e57b91cc1ffca72c57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneNinth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a6fef3afe224a799c60ef074dc1df5d40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getPi</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9af50bf4f5457ad2d0257794f2fe340e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneOverPi</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a4e4b98445c364d95214187831052c122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getE</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a172e1d2c2a7aecb4b7bb1787abcccc13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getLog2E</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ae69645b2510176c15725a011485e7cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getLog10E</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a22cc862ea54675fa92c07ef26a7b9c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getSqrt2</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a4eca165029a0482d3badc3a72333d40e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneOverSqrt2</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a8bf062ec0cc28579c4ed3ffe8bead477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getSqrt3</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a5e15045258abd1f13b7184ea8f71d239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneOverSqrt3</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a8b16076e61f2fca13f232676631797c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getCubeRoot2</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a66b811070305f50dcda9c2c9d0ed5921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getCubeRoot3</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a074228baa733b50a45b7c70c516bbf12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getLn2</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a774f4e54f24bdeeefe55f340065e1308</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getLn10</name>
      <anchorfile>classSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4.html</anchorfile>
      <anchor>afa0db27ec1f9aa9db9264ff1c0c91d18</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::NTraits&lt; complex&lt; R &gt; &gt;::Result</name>
    <filename>structSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4_1_1Result.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>CNT&lt; P &gt;::template Result&lt; C &gt;::Mul</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4_1_1Result.html</anchorfile>
      <anchor>a6b94aa5ecf1b1e5e47feb8d0d94d437e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; typename CNT&lt; P &gt;::THerm &gt;::template Result&lt; C &gt;::Mul</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4_1_1Result.html</anchorfile>
      <anchor>a6fe74439f0fae282c004c0dacf3c3c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; P &gt;::template Result&lt; C &gt;::Add</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4_1_1Result.html</anchorfile>
      <anchor>afb31adb5275e7404f4987fdb66cb83b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; typename CNT&lt; P &gt;::TNeg &gt;::template Result&lt; C &gt;::Add</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4_1_1Result.html</anchorfile>
      <anchor>ab6aeb1560623f3d83662c3549324bd32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::NTraits&lt; complex&lt; R &gt; &gt;::Substitute</name>
    <filename>structSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4_1_1Substitute.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>P</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1NTraits_3_01complex_3_01R_01_4_01_4_1_1Substitute.html</anchorfile>
      <anchor>adc06312b138530f27fb1528f7e5ded64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;</name>
    <filename>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</filename>
    <templarg></templarg>
    <class kind="struct">SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;::Result</class>
    <class kind="struct">SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;::Substitute</class>
    <member kind="enumvalue">
      <name>NRows</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a141bebc5d930eed5c2d212a9c9544e9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NCols</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a471db3cc6077950d2ce88781abb5799a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSpacing</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a37ac0f8aa7b5a297bdd16fb499577113</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSpacing</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421ae7c6bbc99881ae2639235ca2625e8f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NPackedElements</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a33f22f361104dc35652d3d24138cb829</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualElements</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421aa1558cd226ae35b43a648902c79b85ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualScalars</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421aef6fc30fad74aa379924274652b1525f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImagOffset</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a57e3869b3d17f8557a0318531e84d97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealStrideFactor</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a2e63c10a225c4398555b829bd3b0cde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArgDepth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a9ad05c7a406f71fce0efe662b64f6761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsScalar</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a275699176e4b92b796a329f7e923e6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsULessScalar</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421afdcb2d0f3ad57a26b176f0bb2136e865</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsNumber</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a407cecc6ca92bed56b13977a154ae81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsStdNumber</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a0c71ed0a7767038ce7bb823d64b9783c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPrecision</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421a68ffffb07117e616f4a4d8c16384b565</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SignInterpretation</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a9105d281a3a04a3e3ea640850d4421aa86b52f84033943e831ae58076162373</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a0ca86de5716efcd7b6a9b9d3353ffd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; T &gt;</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>afc952de5c6a17a1f7fa664944613496f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ab285a9f873bb5c2d1672d9d5add67a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ac39ffc4f260a0e6b8872cfe3774850c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>negator&lt; R &gt;</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>af8b679d13cc9fa9a56002c8e830744a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aded16346acd16df5be1fd76a1c542c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; R &gt;</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a8bf46874fc86afaee23a9670696cd22a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a2895d63a89b777c625cc0d42264c2c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9ebd314d4e31569c242a48766d028d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ab4fcaf5d8e91574023e229effd556b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>TElement</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a25572c751658fc27e90fe3182511d815</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>TRow</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a8cf9f1f0c01fb08ab59618553bd42abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>TCol</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a21282bc803d8e1c2a1b8a34ef8d25023</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; R &gt;</type>
      <name>TSqrt</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ace6ccc7b07a72eb165d5ab5bcfb55146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a6919be93f1daa8a3d6e41eb7cc423dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; R &gt;</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aaafde14c67dd4b314f7df59bf14a8517</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a06523b4347400b8990a5987c087d903b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a28e85f1a1f2285cb00e448749de821af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a177b4c1c020d3223bd63382f54ab91ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>ULessScalar</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a43798c2e6d021b833795aee17d315f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>conjugate&lt; R &gt;</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a4cbb6b3160f202e8e8ba3b758290900a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>complex&lt; R &gt;</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ae5a05a93a34eae10c359de5eef8d87c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a60de3dbe4260f174d51c93ee0ba38bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a8725f8a8b5db6f98fc7c9e437fb5a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T *</type>
      <name>getData</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a035f2ecd336f6469980c512a7312b216</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>updData</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a1ee0520758341127224a4b68ab060477</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>af7a28115c24af0025b3f56f9c12df701</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a767f30c0c588b7decba45ae29a35f4c0</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a2666a36ecea9b55139ecf0e9bef70f3b</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a8fe689a91e4d5fe79925e5b4ff7ee400</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a7fffee48262c70e984ffc271d63c5f93</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>af43414f53a38664a7046d4c5ace3d565</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a7d42907d9900805fad8d63a6fd6468f9</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aa923c16be9383dfa49fd0940d1a77278</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a1f7ce75492941dbe16b222e6c9ddea</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ad66dfc71da87527d5453d74cb9127f50</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TWithoutNegator &amp;</type>
      <name>castAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aa88025f846a880237e50cb266732b5e8</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TWithoutNegator &amp;</type>
      <name>updCastAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a0b244beffcfbf3c8c0a145e37e8de49a</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a08a5a211d24af308bd256043cc46be31</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TSqrt</type>
      <name>sqrt</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a47b9e2d2772e1362f5e954657530ebf8</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a86efd5fcc471973c8a221e23218a4d9a</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TStandard</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9ec39d2a50bb2447618e770505fc7f94</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TNormalize</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ad8c5ed19a0ddc2e6c3b00e1973dd8ad5</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a30b438d1ccf0ba97083d6c1549894238</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a73684c98c6130b7a2c1d3345dc018147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getInfinity</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a149b730eb7f2ed4d4af8cb2adee33c21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getI</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ad553541fabe4256cdcd7836111ee96dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a1bfe215d5411a664f388aec914a3dc90</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aa772a97ab78843c1aac8540dc7457efa</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ab84615ea29c8fa33dc100c20e497dcfd</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aca1cf0818aa01964497d8b6840c2bbe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>afd1c6f5c42d6582aeea8fbb1fa3c6f23</anchor>
      <arglist>(const T &amp;a, const conjugate&lt; R2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a53b0ef040bee234baf21cabacfc6ab</anchor>
      <arglist>(const T &amp;a, const conjugate&lt; R2 &gt; &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a4733460eecd655c69b66b573b59257ca</anchor>
      <arglist>(const T &amp;a, const complex&lt; R2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ab2b7ccded72161a62ef01bd7c4168037</anchor>
      <arglist>(const T &amp;a, const complex&lt; R2 &gt; &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a095496cb605433983b4ce651c2f85f38</anchor>
      <arglist>(const T &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a1d127ed714a283e6b0307e26f8fc5e66</anchor>
      <arglist>(const T &amp;a, const float &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a7698985ebd0af69e8f74c097e5be4898</anchor>
      <arglist>(const T &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aa9aeddb8c1a77e5cb8acd234fd532a23</anchor>
      <arglist>(const T &amp;a, const double &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a0bdd3c6a4fb2b158ddd7abf0e87d6601</anchor>
      <arglist>(const T &amp;a, const long double &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ac09bc24dcf05103afc775fb5b8141c54</anchor>
      <arglist>(const T &amp;a, const long double &amp;b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a527d9035f648397c4c08b0500048b3fe</anchor>
      <arglist>(const T &amp;a, int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ad29e1c5a86d990b1fd3c61c33e01a6d4</anchor>
      <arglist>(const T &amp;a, int b, double tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getZero</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a3d9589b72776a1ac540835697b4b2bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOne</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>af534b609ff7156a94144788766de8230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getMinusOne</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a775917084248c2395c2247129774f1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getTwo</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a0509a9b30651cc2adc462209a83b7f23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getThree</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aeabf1962febcbc579c161a2f760a6514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneHalf</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ac9b1cb4915188c3153daf7aaee60ad32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneThird</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a537e34c13db30cfe0fea1b6137c3eb27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneFourth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>abe5003a9fe4e62f51ae8192dd2fd47c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneFifth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a438866377c219c318fb7003c90859552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneSixth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a4a7e25b4e2ead1982865138d8dd127f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneSeventh</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ab66c71a10d566526d51203a81fd7315d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneEighth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a49a357e718c4db607a3b991aade3fa6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneNinth</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aab98f20afc921c45fabfead05a389985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getPi</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>ae12b5c3cdcdd123f810754c02526886b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneOverPi</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a5e0bd3c3ecdca48e0fc96251e058b165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getE</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a6270e7ec764e14862e9a722fe48c24d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getLog2E</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a053a508414f584b8cd897a999249b090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getLog10E</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a6e3f0018647c1b54ba969b835d81965b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getSqrt2</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a60b66c17631870aa7149b69d55c8a00d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneOverSqrt2</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a1f6318ae27f851328d6b237a508350c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getSqrt3</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a0b6b1b0978ce719a2f12fb37c2ef3941</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getOneOverSqrt3</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9a635f1974fbf554d9eda840eab078c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getCubeRoot2</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a10124c20f752523a0ecb699689311636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getCubeRoot3</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a37418435dac94db4c9c7976df09c4098</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getLn2</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>aee127f7dcba28ec371a9e12dd088d6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T &amp;</type>
      <name>getLn10</name>
      <anchorfile>classSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4.html</anchorfile>
      <anchor>a9738073fc516dc1c1b28bd89ab373a0c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;::Result</name>
    <filename>structSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4_1_1Result.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>CNT&lt; P &gt;::template Result&lt; T &gt;::Mul</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4_1_1Result.html</anchorfile>
      <anchor>a75d22bade9162c69c4fcc3ddd5b45968</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; typename CNT&lt; P &gt;::THerm &gt;::template Result&lt; T &gt;::Mul</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4_1_1Result.html</anchorfile>
      <anchor>a32a0fffdcfbb9ce1f6c7c53f8e2f647a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; P &gt;::template Result&lt; T &gt;::Add</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4_1_1Result.html</anchorfile>
      <anchor>a3700e1818b8f9b960589ce97f9567b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; typename CNT&lt; P &gt;::TNeg &gt;::template Result&lt; T &gt;::Add</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4_1_1Result.html</anchorfile>
      <anchor>a64963a668192e8b81090ff15518d0636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;::Substitute</name>
    <filename>structSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4_1_1Substitute.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>P</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1NTraits_3_01conjugate_3_01R_01_4_01_4_1_1Substitute.html</anchorfile>
      <anchor>a7bd1e9df2faa09097c1340808ed44408</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CNT&lt; complex&lt; R &gt; &gt;</name>
    <filename>classSimTK_1_1CNT_3_01complex_3_01R_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>SimTK::NTraits&lt; complex&lt; R &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>SimTK::CNT&lt; conjugate&lt; R &gt; &gt;</name>
    <filename>classSimTK_1_1CNT_3_01conjugate_3_01R_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>SimTK::NTraits&lt; conjugate&lt; R &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>SimTK::CNT&lt; float &gt;</name>
    <filename>classSimTK_1_1CNT_3_01float_01_4.html</filename>
    <base>NTraits&lt; float &gt;</base>
  </compound>
  <compound kind="class">
    <name>SimTK::CNT&lt; double &gt;</name>
    <filename>classSimTK_1_1CNT_3_01double_01_4.html</filename>
    <base>NTraits&lt; double &gt;</base>
  </compound>
  <compound kind="class">
    <name>SimTK::CNT&lt; long double &gt;</name>
    <filename>classSimTK_1_1CNT_3_01long_01double_01_4.html</filename>
    <base>NTraits&lt; long double &gt;</base>
  </compound>
  <compound kind="class">
    <name>SimTK::Event</name>
    <filename>classSimTK_1_1Event.html</filename>
    <class kind="class">SimTK::Event::Cause</class>
    <member kind="enumeration">
      <name>Trigger</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>a6928cbd5cb7ff1c9a7adadbac8dc2467</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoEventTrigger</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>a6928cbd5cb7ff1c9a7adadbac8dc2467a97fc93fe1abae08722443e5d44fc40e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PositiveToNegative</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>a6928cbd5cb7ff1c9a7adadbac8dc2467a24067d99236057d85899440bebfba6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NegativeToPositive</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>a6928cbd5cb7ff1c9a7adadbac8dc2467a6d1cfa66dba7bbe1e6e82c7d7ee9d9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Falling</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>a6928cbd5cb7ff1c9a7adadbac8dc2467a14bd7eaee4222c192c0412070221ce85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Rising</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>a6928cbd5cb7ff1c9a7adadbac8dc2467ad56d7b5910db023f162259c6a72538be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AnySignChange</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>a6928cbd5cb7ff1c9a7adadbac8dc2467a9448dc0d08371a06abdf6b4ab4f3edb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getCauseName</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>a4a46c77e2e79741ce81525992fa49f24</anchor>
      <arglist>(Cause)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>eventTriggerString</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>aacd74119e0b1b5d66afcfd7af3df746a</anchor>
      <arglist>(Trigger)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Trigger</type>
      <name>classifyTransition</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>add2a8cef93ba648ca7efa42a0e1213de</anchor>
      <arglist>(int before, int after)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Trigger</type>
      <name>maskTransition</name>
      <anchorfile>classSimTK_1_1Event.html</anchorfile>
      <anchor>aa98883003d3ecbfff24c1c3b8bd4abc3</anchor>
      <arglist>(Trigger transition, Trigger mask)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Event::Cause</name>
    <filename>classSimTK_1_1Event_1_1Cause.html</filename>
    <member kind="enumeration">
      <name>Num</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a9dc5ccaa025d8d1aa67089ea60d660c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Initialization</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a9dc5ccaa025d8d1aa67089ea60d660c0a899770b61ad16cf754442786467ae247</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Triggered</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a9dc5ccaa025d8d1aa67089ea60d660c0a508a40609a00baf8c4ded51d7286f8a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Scheduled</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a9dc5ccaa025d8d1aa67089ea60d660c0a66fdb2566bb94b74816a9e11d4f9711d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TimeAdvanced</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a9dc5ccaa025d8d1aa67089ea60d660c0ab9be22a55fd9a13ec168c6871797ff1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Signaled</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a9dc5ccaa025d8d1aa67089ea60d660c0ae85f44b6fff74f197b37bee8ebbe5df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Termination</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a9dc5ccaa025d8d1aa67089ea60d660c0a264f5e63b6de429538c26deb1c9e4ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Invalid</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a9dc5ccaa025d8d1aa67089ea60d660c0af08a57d93b0e7e06fd5d4b1e6c095ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cause</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a75308b242fe3ba1858e6c7a41fbff979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cause</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a8ab9e7d34416c3c690aad1c16dd4a1d4</anchor>
      <arglist>(Num n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Num</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>a7279acd26cf874f479b10c9ee28434e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Cause &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>af1ba66a6bb930c49704547df9cb74196</anchor>
      <arglist>(Num n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1Event_1_1Cause.html</anchorfile>
      <anchor>adcaca7aacf7979604bd3960f536c6ec3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::EventTriggerInfo</name>
    <filename>classSimTK_1_1EventTriggerInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>EventTriggerInfo</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>a6929db8062c01a3c683fd1fa28fafb57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventTriggerInfo</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>a04b46c1c71e080c651fec877c4aca280</anchor>
      <arglist>(EventId eventId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EventTriggerInfo</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>ae00fe34403bf8650b42cbf5848e56669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventTriggerInfo</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>a45616a17b6658e82b7bc722bfa293139</anchor>
      <arglist>(const EventTriggerInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EventTriggerInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>a22930a77c0d6300d9bda3bb28588020e</anchor>
      <arglist>(const EventTriggerInfo &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EventId</type>
      <name>getEventId</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>a55da9e489dcb3d5735cc8c700b5f400a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldTriggerOnRisingSignTransition</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>acce32499755e8710efabc34912cc400f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldTriggerOnFallingSignTransition</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>aaee57c3db0db1e448418caeffd0a8c78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRequiredLocalizationTimeWindow</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>ad2004ce3d4f7a026feee763aca6f0a99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EventTriggerInfo &amp;</type>
      <name>setEventId</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>aee4d7216b3440384d1ba3a3afd9e3464</anchor>
      <arglist>(EventId)</arglist>
    </member>
    <member kind="function">
      <type>EventTriggerInfo &amp;</type>
      <name>setTriggerOnRisingSignTransition</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>ae6d26281bdb77f9421c76704f19426f3</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>EventTriggerInfo &amp;</type>
      <name>setTriggerOnFallingSignTransition</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>a8c12827d7901994fc458c29276734f9d</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>EventTriggerInfo &amp;</type>
      <name>setRequiredLocalizationTimeWindow</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>a5eb20c2f3e6b922f17677c34fb943146</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>Event::Trigger</type>
      <name>calcTransitionMask</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>ad1ae838200555b9d7dda7ecc9eb2de21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Event::Trigger</type>
      <name>calcTransitionToReport</name>
      <anchorfile>classSimTK_1_1EventTriggerInfo.html</anchorfile>
      <anchor>a858bcb84aa768f16d5580a2ceec2c331</anchor>
      <arglist>(Event::Trigger transitionSeen) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::HandleEventsOptions</name>
    <filename>classSimTK_1_1HandleEventsOptions.html</filename>
    <member kind="enumeration">
      <name>Option</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>add5ac680fd54086b23000f0de90dfd6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>add5ac680fd54086b23000f0de90dfd6aaf272b49dc5c17dfd40b4b3502f5a5458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DontThrow</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>add5ac680fd54086b23000f0de90dfd6aafe3de8496fb79a405f8ff3bde0da8b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UseInfinityNorm</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>add5ac680fd54086b23000f0de90dfd6aadfcaa33297d9a0a00fe398efe816154e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HandleEventsOptions</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a405daea112a55420169fcf70a76f5e59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HandleEventsOptions</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a16c19b690b8ce22a4bc10d785b73ee90</anchor>
      <arglist>(Real accuracy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HandleEventsOptions</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a7e6354acf61a0fc119d29c15b2c133fe</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a151cc7aca98131f242219904938c35ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>setAccuracy</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a8569857f547b8da01c6bba9ffd1e8c66</anchor>
      <arglist>(Real accuracy)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>clearOption</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a94adf32f886c81bd815d5d97311c7808</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>setOption</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a177e7e643f337daef5942d13834497dd</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccuracy</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a834ea7ee707583adabb598eecdcdb934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptionSet</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a32b4e9b9fb8afdd02af259e73ed31077</anchor>
      <arglist>(Option opt) const </arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a633251d662503efaed9edd5b6e7f7be4</anchor>
      <arglist>(const HandleEventsOptions &amp;opts)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a44ba886cd07273e5414fe044eb380fb9</anchor>
      <arglist>(const HandleEventsOptions &amp;opts)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a05ec252cceddbaff3dc7c81b68a42271</anchor>
      <arglist>(const HandleEventsOptions &amp;opts)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a66b9d3e89f223dbc3c88edf907415f26</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsOptions &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>ac61dea545a58d286f33c9794da51354a</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>getDefaultAccuracy</name>
      <anchorfile>classSimTK_1_1HandleEventsOptions.html</anchorfile>
      <anchor>a1da1e7d13f8dd7effa78e03b5e592445</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::HandleEventsResults</name>
    <filename>classSimTK_1_1HandleEventsResults.html</filename>
    <member kind="enumeration">
      <name>Status</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a31fbd2c1498f1d04212342f12d4e7b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Invalid</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a31fbd2c1498f1d04212342f12d4e7b39a2f6468c30df4493160b182886538bb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Succeeded</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a31fbd2c1498f1d04212342f12d4e7b39a6c53a859db1f945b939e215a7c8075ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ShouldTerminate</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a31fbd2c1498f1d04212342f12d4e7b39aeff46346e12ac7414b529c360f2c78e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a31fbd2c1498f1d04212342f12d4e7b39aca8d441bd9754fe43ed2cc3d32a9d797</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HandleEventsResults</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a04a51390058586c527484ec09ad8455f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsResults &amp;</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>aff61e7b083efd7669bef72c0f2c4c7fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>ae7245231fcec98ae97855db95d7d1817</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>getExitStatus</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a458508e23e3747cc021dff0d27bc61db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAnyChangeMade</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a9c5ea9e5e15fd1f70c71927b62021497</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getLowestModifiedStage</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a505fa14d7892364fbcc7e41013f34e1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getMessage</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a8c81c995faf2ccf6d4b482e7d7dc68f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>HandleEventsResults &amp;</type>
      <name>setExitStatus</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>a00527d4456cef337703a4cc4db48b575</anchor>
      <arglist>(Status status)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsResults &amp;</type>
      <name>setAnyChangeMade</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>af4d00174717850bae2dd45e85e2483f1</anchor>
      <arglist>(bool changeMade)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsResults &amp;</type>
      <name>setLowestModifiedStage</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>aa9d2653ca669cce102dc9a23805ba513</anchor>
      <arglist>(Stage stage)</arglist>
    </member>
    <member kind="function">
      <type>HandleEventsResults &amp;</type>
      <name>setMessage</name>
      <anchorfile>classSimTK_1_1HandleEventsResults.html</anchorfile>
      <anchor>ae3175a2ae8bc3d0e9290821ad7698608</anchor>
      <arglist>(const String &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::EventHandler</name>
    <filename>classSimTK_1_1EventHandler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EventHandler</name>
      <anchorfile>classSimTK_1_1EventHandler.html</anchorfile>
      <anchor>a8319968ec8ed444acff3e805043933a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSimTK_1_1EventHandler.html</anchorfile>
      <anchor>a30e89a60da5e7159de04b517297ed6a7</anchor>
      <arglist>(State &amp;state, Real accuracy, bool &amp;shouldTerminate) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ScheduledEventHandler</name>
    <filename>classSimTK_1_1ScheduledEventHandler.html</filename>
    <base>SimTK::EventHandler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScheduledEventHandler</name>
      <anchorfile>classSimTK_1_1ScheduledEventHandler.html</anchorfile>
      <anchor>a712625d0e02f3d1dc596574fce2e9988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>getNextEventTime</name>
      <anchorfile>classSimTK_1_1ScheduledEventHandler.html</anchorfile>
      <anchor>ab0751eb5e6218a8756cae3c77f873770</anchor>
      <arglist>(const State &amp;state, bool includeCurrentTime) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::TriggeredEventHandler</name>
    <filename>classSimTK_1_1TriggeredEventHandler.html</filename>
    <base>SimTK::EventHandler</base>
    <member kind="function">
      <type></type>
      <name>TriggeredEventHandler</name>
      <anchorfile>classSimTK_1_1TriggeredEventHandler.html</anchorfile>
      <anchor>a28deff56b8a911a8e2b6a2db07a7f1ce</anchor>
      <arglist>(const TriggeredEventHandler &amp;clone)</arglist>
    </member>
    <member kind="function">
      <type>TriggeredEventHandler &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1TriggeredEventHandler.html</anchorfile>
      <anchor>a781aea238d7274149df8a463cd726430</anchor>
      <arglist>(const TriggeredEventHandler &amp;clone)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TriggeredEventHandler</name>
      <anchorfile>classSimTK_1_1TriggeredEventHandler.html</anchorfile>
      <anchor>ae31d9f24c93ebd154cdaa825ce7d1e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriggeredEventHandler</name>
      <anchorfile>classSimTK_1_1TriggeredEventHandler.html</anchorfile>
      <anchor>a44d7741e04d54b526573127fc6531c09</anchor>
      <arglist>(Stage requiredStage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1TriggeredEventHandler.html</anchorfile>
      <anchor>a3253b03eb99de20f6d67bcac01e8b67e</anchor>
      <arglist>(const State &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type>EventTriggerInfo &amp;</type>
      <name>getTriggerInfo</name>
      <anchorfile>classSimTK_1_1TriggeredEventHandler.html</anchorfile>
      <anchor>a133a0c94eac39ffb5cdd3aebfc3ee1ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getRequiredStage</name>
      <anchorfile>classSimTK_1_1TriggeredEventHandler.html</anchorfile>
      <anchor>a3dddaefbb5d7f1d346af1ff3d70fa645</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PeriodicEventHandler</name>
    <filename>classSimTK_1_1PeriodicEventHandler.html</filename>
    <base>SimTK::ScheduledEventHandler</base>
    <member kind="function">
      <type></type>
      <name>~PeriodicEventHandler</name>
      <anchorfile>classSimTK_1_1PeriodicEventHandler.html</anchorfile>
      <anchor>a2c6c023bafe0a3e7a0fa8efab606aaa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getNextEventTime</name>
      <anchorfile>classSimTK_1_1PeriodicEventHandler.html</anchorfile>
      <anchor>a793f32e20f31441e5cd78ce1ca651c63</anchor>
      <arglist>(const State &amp;state, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicEventHandler</name>
      <anchorfile>classSimTK_1_1PeriodicEventHandler.html</anchorfile>
      <anchor>ad706d632abc71430edcadfdca15516c5</anchor>
      <arglist>(Real eventInterval)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEventInterval</name>
      <anchorfile>classSimTK_1_1PeriodicEventHandler.html</anchorfile>
      <anchor>a6fce5bf35b8646e652ecc74f1ccc8701</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEventInterval</name>
      <anchorfile>classSimTK_1_1PeriodicEventHandler.html</anchorfile>
      <anchor>adedf506e5f2cf940b51ebb2fc9e5b63a</anchor>
      <arglist>(Real eventInterval)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::EventReporter</name>
    <filename>classSimTK_1_1EventReporter.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EventReporter</name>
      <anchorfile>classSimTK_1_1EventReporter.html</anchorfile>
      <anchor>a0db9bab8f42982f911b8489d02293437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>handleEvent</name>
      <anchorfile>classSimTK_1_1EventReporter.html</anchorfile>
      <anchor>ae3f8b7ef2ce73bd827a13433104fac06</anchor>
      <arglist>(const State &amp;state) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ScheduledEventReporter</name>
    <filename>classSimTK_1_1ScheduledEventReporter.html</filename>
    <base>SimTK::EventReporter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScheduledEventReporter</name>
      <anchorfile>classSimTK_1_1ScheduledEventReporter.html</anchorfile>
      <anchor>a600c09ad614a8f3f5bc5190033449803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>getNextEventTime</name>
      <anchorfile>classSimTK_1_1ScheduledEventReporter.html</anchorfile>
      <anchor>ae8f26a7ff7e869522e1490cf7f4e88b0</anchor>
      <arglist>(const State &amp;state, bool includeCurrentTime) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::TriggeredEventReporter</name>
    <filename>classSimTK_1_1TriggeredEventReporter.html</filename>
    <base>SimTK::EventReporter</base>
    <member kind="function">
      <type></type>
      <name>TriggeredEventReporter</name>
      <anchorfile>classSimTK_1_1TriggeredEventReporter.html</anchorfile>
      <anchor>a5470032c8d63642be0df7af97cae8c0c</anchor>
      <arglist>(const TriggeredEventReporter &amp;clone)</arglist>
    </member>
    <member kind="function">
      <type>TriggeredEventReporter &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1TriggeredEventReporter.html</anchorfile>
      <anchor>ac6ed46887c0456c6b12a4b9aab322596</anchor>
      <arglist>(const TriggeredEventReporter &amp;clone)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TriggeredEventReporter</name>
      <anchorfile>classSimTK_1_1TriggeredEventReporter.html</anchorfile>
      <anchor>a0f1f8df043c6e35d6b92cfbfe45e9bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriggeredEventReporter</name>
      <anchorfile>classSimTK_1_1TriggeredEventReporter.html</anchorfile>
      <anchor>a26b14c2d58f47819578def68a476bebf</anchor>
      <arglist>(Stage requiredStage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1TriggeredEventReporter.html</anchorfile>
      <anchor>a6b75572ea93916cfbd3f0404196be4fe</anchor>
      <arglist>(const State &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type>EventTriggerInfo &amp;</type>
      <name>getTriggerInfo</name>
      <anchorfile>classSimTK_1_1TriggeredEventReporter.html</anchorfile>
      <anchor>a80b1edb4cd2fa74e752208d487e30518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getRequiredStage</name>
      <anchorfile>classSimTK_1_1TriggeredEventReporter.html</anchorfile>
      <anchor>a6ec8aa77ee2cfe0250700ee1699987b7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PeriodicEventReporter</name>
    <filename>classSimTK_1_1PeriodicEventReporter.html</filename>
    <base>SimTK::ScheduledEventReporter</base>
    <member kind="function">
      <type></type>
      <name>~PeriodicEventReporter</name>
      <anchorfile>classSimTK_1_1PeriodicEventReporter.html</anchorfile>
      <anchor>a7f6154f5bb3ca84e7619b5b5ca718302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getNextEventTime</name>
      <anchorfile>classSimTK_1_1PeriodicEventReporter.html</anchorfile>
      <anchor>a7f50bc6efb588a42cc01ec333925a9bc</anchor>
      <arglist>(const State &amp;state, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicEventReporter</name>
      <anchorfile>classSimTK_1_1PeriodicEventReporter.html</anchorfile>
      <anchor>a81d6c9bc73ed6fb8968d9b8366b9746e</anchor>
      <arglist>(Real eventInterval)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEventInterval</name>
      <anchorfile>classSimTK_1_1PeriodicEventReporter.html</anchorfile>
      <anchor>adb653e6d0a6630d26eaaf624fd653f1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEventInterval</name>
      <anchorfile>classSimTK_1_1PeriodicEventReporter.html</anchorfile>
      <anchor>ab79f5183bb06908a8b3b2c4e653a320f</anchor>
      <arglist>(Real eventInterval)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::AbstractMeasure</name>
    <filename>classSimTK_1_1AbstractMeasure.html</filename>
    <class kind="class">SimTK::AbstractMeasure::Implementation</class>
    <class kind="class">SimTK::AbstractMeasure::SetHandle</class>
    <member kind="function">
      <type></type>
      <name>AbstractMeasure</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>ab1e29672879dd489abb7853d56c88859</anchor>
      <arglist>(Implementation *g=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractMeasure</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a899a0b9a089207493a18030d36adbabd</anchor>
      <arglist>(Subsystem &amp;, Implementation *g, const SetHandle &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractMeasure</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>ad0afab4aa2ae7243f9f363043846b368</anchor>
      <arglist>(const AbstractMeasure &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AbstractMeasure &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a2c2854f0648f81ed693b4dcf49172d18</anchor>
      <arglist>(const AbstractMeasure &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AbstractMeasure</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>aec0e1d27dda8ccd6a3cda24bb7d0854f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractMeasure &amp;</type>
      <name>shallowAssign</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>af3bf22f3372886fdfb7673fd40b82a90</anchor>
      <arglist>(const AbstractMeasure &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AbstractMeasure &amp;</type>
      <name>deepAssign</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>ad5661a7a4f608ff3a049c168fee5772d</anchor>
      <arglist>(const AbstractMeasure &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivatives</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a29c9212dfae314a248f1df2e7879faf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStage</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a2b95c63b4276051ec4f038367faff743</anchor>
      <arglist>(int derivOrder=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameMeasure</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a2bbeebc578b2ea3866b3d7e9e9693fec</anchor>
      <arglist>(const AbstractMeasure &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyHandle</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>ac5dce53ceb8e95040d7f7e9e45250688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSubsystem</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>acef407022fb912479c992787cf77d060</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Subsystem &amp;</type>
      <name>getSubsystem</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a2c43821e6916029de40bb12f94c16635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MeasureIndex</type>
      <name>getSubsystemMeasureIndex</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>ab316e91ba631106db04f700d3a56033f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>ac3dd15f8a953c960519f82fb623dcfa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a4490dc83ae040cf00f4aaddbd4ae2a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasImpl</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>ac2cabd88934912db58f8431933e18532</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRefCount</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a03aa8018bb346bcbab705d59185a9c87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1AbstractMeasure.html</anchorfile>
      <anchor>a78eb5d53960b60a02a13ee07d191620b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::AbstractMeasure::Implementation</name>
    <filename>classSimTK_1_1AbstractMeasure_1_1Implementation.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>ad1dcb303f83fbd5d9f328b299a2b91cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>acba813775f679235a25eaf9b4a96efbb</anchor>
      <arglist>(const Implementation &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>ad20e2de90240d5f69bfdf1973a0db078</anchor>
      <arglist>(const Implementation &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>incrRefCount</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a72aaea2ec1e6b0a9de69f573eea45661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>decrRefCount</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>af3dddf39d56edadaddf19f9c024c28a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getRefCount</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a1f855c6815c46058fd0215fe19a3a930</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getCopyNumber</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a29d31af4ec925fd7e0edc9d25bcfa15d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>add364af1dc8ee8663e7839349ef24060</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realizeModel</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a6fe8da49e59ae32f1e43bf4677039a2b</anchor>
      <arglist>(State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realizeInstance</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>ae1fefe7007a25229af8ad7f611bb0a13</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realizeTime</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a292fc171ea1af33f063ae179a7de6270</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realizePosition</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>ac02f4b8c363592e56ef1385390d881ad</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realizeVelocity</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a3e4f24b0a16782c8dfd5645171016006</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realizeDynamics</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a698c64ff48cac58bc69323fe5defd734</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realizeAcceleration</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>ad0b364d7adbd8edafb475da3ab4b1786</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>realizeReport</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a6ea82166e5082b3d6fe29b7a5b624817</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a6854d5a49675003d061e978278eaa03c</anchor>
      <arglist>(State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getNumTimeDerivatives</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a7ee7c5a080203d4233dd0a96493e3e7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Stage</type>
      <name>getDependsOnStage</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a09bb25e7505747f00f5c5ff189d5d287</anchor>
      <arglist>(int derivOrder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSubsystem</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a5ed5a7fe744101baffe6d78cab76f01c</anchor>
      <arglist>(Subsystem &amp;sub, MeasureIndex mx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isInSubsystem</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a97bfeca24f6458bb1b327425bc4f7e64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Subsystem &amp;</type>
      <name>getSubsystem</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>aa78b260f334ce28203e73969e79f769c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Subsystem &amp;</type>
      <name>updSubsystem</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a184fdfc8f4b72b7cf4e4dd928e9323f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MeasureIndex</type>
      <name>getSubsystemMeasureIndex</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>adab4bd0a001c1c7f6884d7adb16f816b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SubsystemIndex</type>
      <name>getSubsystemIndex</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a4aa49f65c01dd484f73fe2e2bc633fbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>invalidateTopologyCache</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a2f01a8036cef5ec549c31e57b5f8ffec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Stage</type>
      <name>getStage</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a47b2ea83485433ab82eca2ddb20f966b</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Implementation</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a6b631d018dd8e2ce3b4ce74e46030bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>ab6e92560adb5b50a47dbeffc83962b0a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>realizeTopology</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a6108299325b5e35beb646420cf4be8af</anchor>
      <arglist>(State &amp;) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasureModelVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>aa330f353e8acec3cdb7a72a0ef1fab9e</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasureInstanceVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>abd110d51a12537da84fcb83cae11c314</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasureTimeVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a060bf22529be9a991dce39f57ca165f4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasurePositionVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>af70cbeacc0705fcbb128c51bb26bde2d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasureVelocityVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>ac1f3d3be1a774efd9c4e743ff7f2d57b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasureDynamicsVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a07a2115fecc00cdffe8ccc9db9bbd0e4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasureAccelerationVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>ac8ce9a018ff0cbf9ec4f0a0b5bc18f34</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasureReportVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>afa889cf8bbef794ccebcad127b0168e7</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a868dc2537ad3e9cea24222178e112477</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a8e721e8ae67cb12de12d99d464f8fb1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a9c350121f551cffcf666b7ae0fe3fde2</anchor>
      <arglist>(int order) const =0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AbstractMeasure</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a65afb8c1c15e718dba0ad93c690ffd91</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Subsystem::Guts</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>a9f0a004f3bff33392e11266c40b8b53f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Subsystem::Guts::GutsRep</name>
      <anchorfile>classSimTK_1_1AbstractMeasure_1_1Implementation.html</anchorfile>
      <anchor>adb8ecbafc20db36f9e09b480da8bd34c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::AbstractMeasure::SetHandle</name>
    <filename>classSimTK_1_1AbstractMeasure_1_1SetHandle.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_</name>
    <filename>classSimTK_1_1Measure__.html</filename>
    <templarg>T</templarg>
    <base>SimTK::AbstractMeasure</base>
    <class kind="class">SimTK::Measure_::Constant</class>
    <class kind="class">SimTK::Measure_::Delay</class>
    <class kind="class">SimTK::Measure_::Differentiate</class>
    <class kind="class">SimTK::Measure_::Extreme</class>
    <class kind="class">SimTK::Measure_::Implementation</class>
    <class kind="class">SimTK::Measure_::Integrate</class>
    <class kind="class">SimTK::Measure_::MaxAbs</class>
    <class kind="class">SimTK::Measure_::Maximum</class>
    <class kind="class">SimTK::Measure_::MinAbs</class>
    <class kind="class">SimTK::Measure_::Minimum</class>
    <class kind="class">SimTK::Measure_::Minus</class>
    <class kind="class">SimTK::Measure_::One</class>
    <class kind="class">SimTK::Measure_::Plus</class>
    <class kind="class">SimTK::Measure_::Result</class>
    <class kind="class">SimTK::Measure_::SampleAndHold</class>
    <class kind="class">SimTK::Measure_::Scale</class>
    <class kind="class">SimTK::Measure_::Sinusoid</class>
    <class kind="class">SimTK::Measure_::Time</class>
    <class kind="class">SimTK::Measure_::Variable</class>
    <class kind="class">SimTK::Measure_::Zero</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE_ABSTRACT</name>
      <anchorfile>classSimTK_1_1Measure__.html</anchorfile>
      <anchor>aff740835723442a21582e3059f9e68ab</anchor>
      <arglist>(Measure_, AbstractMeasure)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1Measure__.html</anchorfile>
      <anchor>ae5859c12f5b0ffd63c082040fade1812</anchor>
      <arglist>(const State &amp;s, int derivOrder=0) const </arglist>
    </member>
    <member kind="function">
      <type>Measure_ &amp;</type>
      <name>setDefaultValue</name>
      <anchorfile>classSimTK_1_1Measure__.html</anchorfile>
      <anchor>aebd726fc6d6cc52b42b6d22e6694d6b2</anchor>
      <arglist>(const T &amp;defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getDefaultValue</name>
      <anchorfile>classSimTK_1_1Measure__.html</anchorfile>
      <anchor>ab7ceecec525ac269468c6bc17d714aa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure__.html</anchorfile>
      <anchor>a1503efc59af95841849653f1ad49cf78</anchor>
      <arglist>(Measure_, AbstractMeasure)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Constant</name>
    <filename>classSimTK_1_1Measure___1_1Constant.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Constant::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant.html</anchorfile>
      <anchor>a0e04d19322309bde538eddc6d40eb8d3</anchor>
      <arglist>(Constant, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant.html</anchorfile>
      <anchor>a9d5349a0cd793490178630d221fbd619</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constant</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant.html</anchorfile>
      <anchor>ac80581281a5093fc6c0fd1ddaab3c2fc</anchor>
      <arglist>(Subsystem &amp;sub, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Constant &amp;</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant.html</anchorfile>
      <anchor>af0aaebd77a2ec5dd8b8cb3c566bc02e6</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant.html</anchorfile>
      <anchor>ac331a372d1ed6a8ee775bb068634d339</anchor>
      <arglist>(Constant, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Constant::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Constant_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant_1_1Implementation.html</anchorfile>
      <anchor>aba9f6cc15f0f96ccca15639dd7a0bbce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant_1_1Implementation.html</anchorfile>
      <anchor>a10889ba831fbd4d68e3fbdf3c1fe0537</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant_1_1Implementation.html</anchorfile>
      <anchor>a0122e33a47e686deabcc3255dd75fb97</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getUncachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant_1_1Implementation.html</anchorfile>
      <anchor>a71ed911d46756a5f269082ed61ab888f</anchor>
      <arglist>(const State &amp;, int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant_1_1Implementation.html</anchorfile>
      <anchor>ae477b155ac0ea676a56620488055374e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant_1_1Implementation.html</anchorfile>
      <anchor>aff4bf3110ab3830d4f939b7e6d84651e</anchor>
      <arglist>(int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Constant_1_1Implementation.html</anchorfile>
      <anchor>a54761270f3a377e55a18f9898018163f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Delay</name>
    <filename>classSimTK_1_1Measure___1_1Delay.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Delay::Implementation</class>
    <member kind="function">
      <type></type>
      <name>Delay</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>a17d6a27431e9757b8b77d6dc3e39e9e4</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;source, Real delay)</arglist>
    </member>
    <member kind="function">
      <type>Delay &amp;</type>
      <name>setUseLinearInterpolationOnly</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>ab08c149c1e97c3a9fbf8501dd63493ad</anchor>
      <arglist>(bool linearOnly)</arglist>
    </member>
    <member kind="function">
      <type>Delay &amp;</type>
      <name>setCanUseCurrentValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>a0c7c2fa21d99287e2942fa9963d9a86c</anchor>
      <arglist>(bool canUseCurrentValue)</arglist>
    </member>
    <member kind="function">
      <type>Delay &amp;</type>
      <name>setSourceMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>a9c79e12998149bb654d9d94d03586bf9</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Delay &amp;</type>
      <name>setDelay</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>aa4cf9e394748ccbdc829e6ae43395e11</anchor>
      <arglist>(Real delay)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseLinearInterpolationOnly</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>a37305483be5a2359917116eb48a34e18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCanUseCurrentValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>a930b87551c4ae46d65e3a953959a8c6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getSourceMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>a5009088bfe15571b2a9882b0660ebcc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDelay</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay.html</anchorfile>
      <anchor>a99dc3be38f9fed4251a702ab645f5a27</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Delay::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a4f2f43d940f4216a0465653ae8ecc587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>aedd6fa597251e0c63b4d8aac9fcb968e</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;source, Real delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a420f76a02750044e63c5bf54280ffa11</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelay</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>ac765046d00cb2b0f7dee1510fcb04093</anchor>
      <arglist>(Real delay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseLinearInterpolationOnly</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>acf0ad941cf4a800e0fd24c1dd6d5fa36</anchor>
      <arglist>(bool linearOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCanUseCurrentValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a9a5e1acc4ca2aeeab097632829db5562</anchor>
      <arglist>(bool canUseCurrentValue)</arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getSourceMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a45b569d56e03995d65e402a00083f9ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDelay</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>aaff63923f85ba90d70deb5073ac75570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseLinearInterpolationOnly</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a1d9058d6c52132ea081badaf4366404b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCanUseCurrentValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>af66388aa4f15ce8c28dbb9e9c9491434</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a6c56a8637adc4be15f2ed58bbb215e29</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>ac52b897854416ff45db7cbcda9f28a95</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a820ec94acb72f6a222b494e11ea3aac8</anchor>
      <arglist>(int order) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>aa36d381694c1f982d2da18ffcd173f7a</anchor>
      <arglist>(const State &amp;s, int derivOrder, T &amp;value) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>ab3d8273c96983e24ee3dc8b51ab32e18</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureTopologyVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a37e750f32a24f8bb3171d64abf1c03be</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureAccelerationVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a131a46bec12f7ed553963a54c37c52e5</anchor>
      <arglist>(const State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBuffer</name>
      <anchorfile>classSimTK_1_1Measure___1_1Delay_1_1Implementation.html</anchorfile>
      <anchor>a330b3fcd866a6ce551386bab02af49a6</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Differentiate</name>
    <filename>classSimTK_1_1Measure___1_1Differentiate.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Differentiate::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate.html</anchorfile>
      <anchor>adf94bd679d513e1ee574c8c166e37a89</anchor>
      <arglist>(Differentiate, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Differentiate</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate.html</anchorfile>
      <anchor>aa63225005bc5ae0889d2bc38aabebc35</anchor>
      <arglist>(Subsystem &amp;subsystem, const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingApproximation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate.html</anchorfile>
      <anchor>a1cc09b61118dd5968eb285cb9b139c60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate.html</anchorfile>
      <anchor>a8719874529d327c2b80636d7694dfae1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Differentiate &amp;</type>
      <name>setOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate.html</anchorfile>
      <anchor>a9dc1b2559e0338090832a5ae43dc6700</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceUseApproximation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate.html</anchorfile>
      <anchor>ace6ef009c8fdd6b4b85bf221a27b071d</anchor>
      <arglist>(bool mustApproximate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getForceUseApproximation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate.html</anchorfile>
      <anchor>a468d9363288c51a9496841c67606c998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate.html</anchorfile>
      <anchor>a4e3039120df876e396fa626bdd0bdb21</anchor>
      <arglist>(Differentiate, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Differentiate::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>a91878e914a84fbbccfc1c72318e5b911</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>ac9cc44f4a033d6f554aeda6117a6a58e</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceUseApproximation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>aa210b6971a051d21b8ec76fca618ccdf</anchor>
      <arglist>(bool mustApproximate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>aeee46786c70d683115aadc7e7bfdd244</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getForceUseApproximation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>af8776d7cc1efa86409cec88620a79b2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingApproximation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>a0a334815ad0e72fbeebeabf6830cd879</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>afe9673630f7d0cca0b0f405e87fa53d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>adc3ea497533786ec221b9a90413d8dcd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>ae3051e5288c0b101918eb178dc802979</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>aa906668830cd85d2750becafe2025a65</anchor>
      <arglist>(int order) const override</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getUncachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>ac86017ee9c026615627fb0fa900e6833</anchor>
      <arglist>(const State &amp;s, int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>a2ce531947c18f1e73f7d9e871ee2433c</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureTopologyVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>a8e6a3dc62e4b12ee58a56ed0b53c9c91</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureAccelerationVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>a4a520c251967e4bf53813d53e66b867c</anchor>
      <arglist>(const State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ensureDerivativeIsRealized</name>
      <anchorfile>classSimTK_1_1Measure___1_1Differentiate_1_1Implementation.html</anchorfile>
      <anchor>af8245d96c9f19f4df8b6d4f2d9d5fff2</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Extreme</name>
    <filename>classSimTK_1_1Measure___1_1Extreme.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Extreme::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>affdda9d80e41cf7752e77702b9aab00e</anchor>
      <arglist>(Extreme, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Extreme</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>ae923d6097ae83d1241bdecbdb45e6202</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;operand, Operation op=MaxAbs)</arglist>
    </member>
    <member kind="function">
      <type>Extreme &amp;</type>
      <name>setOperation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>aaafe279ce6980e2013f397f77ee6a182</anchor>
      <arglist>(Operation op)</arglist>
    </member>
    <member kind="function">
      <type>Operation</type>
      <name>getOperation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>aa93de01e1ce7ba17f741b4e2535f75f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTimeOfExtremeValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>a7f8eafaa18af25c106905945e61f2d4c</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>a89857c57d2e2163acb1201dad9ac5926</anchor>
      <arglist>(State &amp;s, const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>a23a3ba0dfbf15ce4abd648a36f4318fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Extreme &amp;</type>
      <name>setOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>a55517e02c33302a53dd3a99c35b466b1</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme.html</anchorfile>
      <anchor>aa84e8fdd9a191fd4b900fc69167b86b2</anchor>
      <arglist>(Extreme, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Extreme::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a253ff042bdd0c98b6e771eb96257306d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a55508fbb3175154157f8479f0473e8db</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;operand, Operation op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>ad3c2082a1888327daf8cb41fb7b2c0f4</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOperation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a5fb5aaa0186cb37693c8859bb803c86e</anchor>
      <arglist>(Operation op)</arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a4e8ee28b3f03c32920ec2ca13dd4694a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Operation</type>
      <name>getOperation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a28fb02eacc930e68ea29afaa6c889e68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a851f070141ef5e332e8eab1b31b6d1a6</anchor>
      <arglist>(State &amp;s, const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTimeOfExtremeValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a9ede9f8091d6df479bc70d5a26e5fb7c</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a2f071801a3bd03eddf488ebaaa177d19</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>a0d5a0e150ad51bcd41cbbc4a44a38f0f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>adecbe59d2a2aee16231c465af32d565f</anchor>
      <arglist>(int order) const override</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getUncachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>ad6572ded1b55e50455db06e301d27c4b</anchor>
      <arglist>(const State &amp;s, int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>ac2d261adb357550867912e57213ec016</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureTopologyVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>aff72bb95dd6880610ccb19b900a59123</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureAccelerationVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>ac441b65807f0c45471ce70b0d6acdc7e</anchor>
      <arglist>(const State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ensureExtremeHasBeenUpdated</name>
      <anchorfile>classSimTK_1_1Measure___1_1Extreme_1_1Implementation.html</anchorfile>
      <anchor>acf900226838b1c968ed922fe97585bb3</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Implementation.html</filename>
    <base>SimTK::AbstractMeasure::Implementation</base>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a7cbd81f4cd50a19fb5f27999bb6e9956</anchor>
      <arglist>(const State &amp;s, int derivOrder) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a4b2680796d9a112f9fc4af1277375232</anchor>
      <arglist>(const T &amp;defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getDefaultValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a78208153d3ae9df2c8fc230430efdc7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsPresumedValidAtDependsOnStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>add65c71eb67c00b11f84b74d68e56470</anchor>
      <arglist>(bool presume)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsPresumedValidAtDependsOnStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a85df0121b8fae81e0111bd6a69bc9d5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a311dd69d48bbf81840eb792cd64e457d</anchor>
      <arglist>(const T &amp;defaultValue, int numCacheEntries=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a2a2f89fdb7aaa48622dbdfeaee333c76</anchor>
      <arglist>(int numCacheEntries=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a3debe4f7db118710fab11a43b1dc2e7d</anchor>
      <arglist>(const Implementation &amp;source)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a7071864424e2510c4df598099dacd5fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getNumCacheEntries</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>ae86915a5cfef28aebf7f58a7a762de8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>getCacheEntry</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a16282b2f13a14695acc41d94e322df93</anchor>
      <arglist>(const State &amp;s, int derivOrder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T &amp;</type>
      <name>updCacheEntry</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a50682a35224907dffa8d0ffc8e35e919</anchor>
      <arglist>(const State &amp;s, int derivOrder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isCacheValueRealized</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>abb6e2edeaf336f5131beaffb814557f0</anchor>
      <arglist>(const State &amp;s, int derivOrder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>markCacheValueRealized</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a96b7d4b3c659410f1f5b8e689818a9c0</anchor>
      <arglist>(const State &amp;s, int derivOrder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>markCacheValueNotRealized</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a711ba15d485872b3e8985dd6841f1854</anchor>
      <arglist>(const State &amp;s, int derivOrder) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>realizeMeasureTopologyVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>ab6e5be0d663a18d811341381b8c68df0</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcCachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>aa676ba40ee80baecb939feac0187adc0</anchor>
      <arglist>(const State &amp;, int derivOrder, T &amp;value) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const T &amp;</type>
      <name>getUncachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>a32ea9cff1d7d45cde9dcdfc8f06dc101</anchor>
      <arglist>(const State &amp;, int derivOrder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T &amp;</type>
      <name>getValueZero</name>
      <anchorfile>classSimTK_1_1Measure___1_1Implementation.html</anchorfile>
      <anchor>ac4ac030d4515ebfc876b44f1218da7d1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Integrate</name>
    <filename>classSimTK_1_1Measure___1_1Integrate.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Integrate::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate.html</anchorfile>
      <anchor>a0296e7a649a50cb89da985b49d3b5915</anchor>
      <arglist>(Integrate, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Integrate</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate.html</anchorfile>
      <anchor>a3d13a6e1b095b9997f1ab7a8727b5c39</anchor>
      <arglist>(Subsystem &amp;subsystem, const Measure_&lt; T &gt; &amp;deriv, const Measure_&lt; T &gt; &amp;ic, const T &amp;initAlloc=T(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate.html</anchorfile>
      <anchor>ab44662d4b33a48645f442256af115157</anchor>
      <arglist>(State &amp;s, const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getDerivativeMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate.html</anchorfile>
      <anchor>a4b92862272b044e19388d0550439efb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getInitialConditionMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate.html</anchorfile>
      <anchor>a643ad896f6f0d9467f898ea2f62c2d8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integrate &amp;</type>
      <name>setDerivativeMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate.html</anchorfile>
      <anchor>a5cc06bf6921bdf4798cf3b6dbbed766f</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>Integrate &amp;</type>
      <name>setInitialConditionMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate.html</anchorfile>
      <anchor>ac5db0cfcdd7fdfd60340d5c759e8a25f</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;ic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate.html</anchorfile>
      <anchor>a054f75dde4946f2fd50e625eac00e4b8</anchor>
      <arglist>(Integrate, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Integrate::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a2aaa5a4d00cafa4f077b9ae5c664840e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a4f52b6466999624db6aea10f409b3831</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;deriv, const Measure_&lt; T &gt; &amp;ic, const T &amp;defaultValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>af7d2a764376d6c7cf9d1d588e9c28dfc</anchor>
      <arglist>(const Implementation &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>aa0474f8242fd43ae51fb3858f63e4e61</anchor>
      <arglist>(State &amp;s, const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getDerivativeMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a10613d51f95a92c6d5a4a7eee2d4e9a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getInitialConditionMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a88fd717237e429825cd50ee80e3b05af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDerivativeMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a900479fb1b50b941c8eac480c4f9b008</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialConditionMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>af99a3aa83cca95e52b01e9e6b0d5f7d9</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;ic)</arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>aac181d333130a61d7a384e52aa0f8a7c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a65b8b1a0b1a2df1cfd1f6b832818a2d7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a8aa80e89f4f1e2df18494ec16dfdbbe2</anchor>
      <arglist>(const State &amp;s, int derivOrder, T &amp;value) const override</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getUncachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a4859206019d612f18e24666870d10aaf</anchor>
      <arglist>(const State &amp;s, int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>ab445a05b8a860e205a3309c61088a4cc</anchor>
      <arglist>(int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a3249f8cb8198efdba94d18dafa7322f8</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureTopologyVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a49aeac4713f1b8a7eb3884405be7d34d</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureAccelerationVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Integrate_1_1Implementation.html</anchorfile>
      <anchor>a2ada3d40012268285557e859ee51793f</anchor>
      <arglist>(const State &amp;s) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::MaxAbs</name>
    <filename>classSimTK_1_1Measure___1_1MaxAbs.html</filename>
    <base>SimTK::Measure_::Extreme</base>
    <member kind="function">
      <type></type>
      <name>MaxAbs</name>
      <anchorfile>classSimTK_1_1Measure___1_1MaxAbs.html</anchorfile>
      <anchor>a9492d4a3f82c4161a9c8c452fc9dff2d</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Maximum</name>
    <filename>classSimTK_1_1Measure___1_1Maximum.html</filename>
    <base>SimTK::Measure_::Extreme</base>
    <member kind="function">
      <type></type>
      <name>Maximum</name>
      <anchorfile>classSimTK_1_1Measure___1_1Maximum.html</anchorfile>
      <anchor>a6d2b5b5ef2abcf3936b9d22dbfe8180b</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::MinAbs</name>
    <filename>classSimTK_1_1Measure___1_1MinAbs.html</filename>
    <base>SimTK::Measure_::Extreme</base>
    <member kind="function">
      <type></type>
      <name>MinAbs</name>
      <anchorfile>classSimTK_1_1Measure___1_1MinAbs.html</anchorfile>
      <anchor>a75647185c9a949e4a18b70eaa96c979a</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Minimum</name>
    <filename>classSimTK_1_1Measure___1_1Minimum.html</filename>
    <base>SimTK::Measure_::Extreme</base>
    <member kind="function">
      <type></type>
      <name>Minimum</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minimum.html</anchorfile>
      <anchor>a39486f436c2f00ee0dc60cbc648c2c68</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Minus</name>
    <filename>classSimTK_1_1Measure___1_1Minus.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Minus::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus.html</anchorfile>
      <anchor>aafc6802b898bc29d0ee9134f6264c930</anchor>
      <arglist>(Minus, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Minus</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus.html</anchorfile>
      <anchor>ac088ef6375bd584f07c07d45cce24f8d</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;left, const Measure_&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus.html</anchorfile>
      <anchor>a246ec1acedc095ef460fe64268c271f7</anchor>
      <arglist>(Minus, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Minus::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Minus_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus_1_1Implementation.html</anchorfile>
      <anchor>aa1903acc9d7459098823dcb9b955539d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus_1_1Implementation.html</anchorfile>
      <anchor>a071bc8cb3ffc9b188265a81c2cfe96eb</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;left, const Measure_&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus_1_1Implementation.html</anchorfile>
      <anchor>ab369c98e33107ee92508b2e2b9d90a8f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus_1_1Implementation.html</anchorfile>
      <anchor>ac74443049816a6b8ffc6c7606661a45c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus_1_1Implementation.html</anchorfile>
      <anchor>a51576f4c8f47699011e3b59695d2732d</anchor>
      <arglist>(int order) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Minus_1_1Implementation.html</anchorfile>
      <anchor>abf7be330ed2bfb2a8e2969eaa5a144b4</anchor>
      <arglist>(const State &amp;s, int derivOrder, T &amp;value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::One</name>
    <filename>classSimTK_1_1Measure___1_1One.html</filename>
    <base>SimTK::Measure_::Constant</base>
    <base>SimTK::Measure_::Constant</base>
    <member kind="function">
      <type></type>
      <name>One</name>
      <anchorfile>classSimTK_1_1Measure___1_1One.html</anchorfile>
      <anchor>aa6850a73e275ee237f15eaa578a5ab26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>One</name>
      <anchorfile>classSimTK_1_1Measure___1_1One.html</anchorfile>
      <anchor>aabc2d01bbf90f7ef57d6ef7f8104d120</anchor>
      <arglist>(Subsystem &amp;sub)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>One</name>
      <anchorfile>classSimTK_1_1Measure___1_1One.html</anchorfile>
      <anchor>a20ab6a9aff17bfd847262ff84f9d61ac</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>One</name>
      <anchorfile>classSimTK_1_1Measure___1_1One.html</anchorfile>
      <anchor>aa66eca3d5a8b8e1bce9ea8080b0cb575</anchor>
      <arglist>(Subsystem &amp;sub, int size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Plus</name>
    <filename>classSimTK_1_1Measure___1_1Plus.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Plus::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus.html</anchorfile>
      <anchor>aeec3efa39f610c1bf9c5fc6fc4debf64</anchor>
      <arglist>(Plus, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plus</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus.html</anchorfile>
      <anchor>ae71c8b4ad277ffb6cf5e34792b19fd72</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;left, const Measure_&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus.html</anchorfile>
      <anchor>a5d371249bee550350b38d6dcf30386db</anchor>
      <arglist>(Plus, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Plus::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Plus_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus_1_1Implementation.html</anchorfile>
      <anchor>ae171a981e2fc4080214e145984bb39c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus_1_1Implementation.html</anchorfile>
      <anchor>aac2863e0c4a994cb60b7e75ec13a33d9</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;left, const Measure_&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus_1_1Implementation.html</anchorfile>
      <anchor>a9670b14592e4931af1f89f040803d2ec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus_1_1Implementation.html</anchorfile>
      <anchor>a50bd5c2715f30b313534fcebded1082e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus_1_1Implementation.html</anchorfile>
      <anchor>a2ff87b593d5f6877a66f665fa2ea3de9</anchor>
      <arglist>(int order) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Plus_1_1Implementation.html</anchorfile>
      <anchor>ad8a37b798bf079cc9bc7da471805f6bb</anchor>
      <arglist>(const State &amp;s, int derivOrder, T &amp;value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Result</name>
    <filename>classSimTK_1_1Measure___1_1Result.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Result::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>a596b7b5ee23a2009b5fc2712689cf561</anchor>
      <arglist>(Result, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>aeaed06e8d26434f2113a74c4b9826875</anchor>
      <arglist>(Subsystem &amp;sub, Stage dependsOn, Stage invalidated)</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>ad979f9f5473f855a835c70eeaa534e5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getInvalidatedStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>a59c96ad085ff35f19f665c8768b4b2ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Result &amp;</type>
      <name>setDependsOnStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>a81f2d64a11ef806b541300b7a358423f</anchor>
      <arglist>(Stage dependsOn)</arglist>
    </member>
    <member kind="function">
      <type>Result &amp;</type>
      <name>setInvalidatedStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>a3f3f696d856eab8a6c319782b77bef79</anchor>
      <arglist>(Stage invalidated)</arglist>
    </member>
    <member kind="function">
      <type>Result &amp;</type>
      <name>setIsPresumedValidAtDependsOnStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>aa5445d21a79104c6c1a02bcd10173e73</anchor>
      <arglist>(bool presume)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsPresumedValidAtDependsOnStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>ab5e7ba744128d652982a3bf65b9c21f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>updValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>acf99a07400e6069476ec04ef695ca027</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsValid</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>ad2acbb174a96b0796b9db481e4f405cf</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>ae860eea9f42af5f4c3e9592472c99156</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsNotValid</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>af871757f9fe449323b5199b506f8c8da</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>abe932bfe7924f6f658b31b9192f8ae9a</anchor>
      <arglist>(const State &amp;state, const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result.html</anchorfile>
      <anchor>a00ca9b33a8385d9c58d50ed3293a4b50</anchor>
      <arglist>(Result, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Result::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>a75114307d283176fda7217670bfb8cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>ae4bba74fc4f38ee66b873d32de079aa9</anchor>
      <arglist>(Stage dependsOn, Stage invalidated)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>ac7d6499a1e7895a582faee42fee4b65a</anchor>
      <arglist>(const Implementation &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDependsOnStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>a882aaed685466b2c3d9f31c09897e693</anchor>
      <arglist>(Stage dependsOn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInvalidatedStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>ae82d03dccdb5f61eabd03e172221c3c1</anchor>
      <arglist>(Stage invalidated)</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>a88d3ba8d107c595ebb51a2101f3471be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getInvalidatedStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>ac3cc690e4c9e774166bd91dcfd8fe8e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsValid</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>ac958d455774e751046db2f88d4451342</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>a4fa7566c81bceb52abaea9479627090a</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsNotValid</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>a55852a1903dd07589add47a912f94b2a</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>updValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>ac91f5ac167e4d9d784b951b89d363fc7</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>ae24813f4adbc27bb9c72ac08000c06a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>ab7d0471da8d9ec4c6dc385375b088e6e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>a08f1b6a173ae5218551e28697c9515a2</anchor>
      <arglist>(int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Result_1_1Implementation.html</anchorfile>
      <anchor>a3cf0244929cf2d481a682d44df7b462e</anchor>
      <arglist>(const State &amp;, int derivOrder, T &amp;value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::SampleAndHold</name>
    <filename>classSimTK_1_1Measure___1_1SampleAndHold.html</filename>
    <base>SimTK::Measure_</base>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>af6cdc558410d65d0ad5673529ec2c37b</anchor>
      <arglist>(SampleAndHold, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SampleAndHold</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>a8ab9f03875563d57c4651c06f0437e00</anchor>
      <arglist>(Subsystem &amp;sub, const Measure_&lt; T &gt; &amp;source, EventId e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>a1bf737888db9e423902e7aeb0909823e</anchor>
      <arglist>(State &amp;s, const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sample</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>a2e9cc58cc0f3fac900cb96faea620a3e</anchor>
      <arglist>(State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getSource</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>af8316306f6420b915777cbc428c11eee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EventId</type>
      <name>getEventId</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>a5834513ba699e47684d41d9ffc807b23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SampleAndHold &amp;</type>
      <name>setSource</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>ac2a19e89dd61935d0da997c86b6f478c</anchor>
      <arglist>(const Measure_&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SampleAndHold &amp;</type>
      <name>setEventId</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>a24ecb08b382e1b10e86ce3682e1b7267</anchor>
      <arglist>(EventId)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1SampleAndHold.html</anchorfile>
      <anchor>a703e939888f110c93779419e112f9f90</anchor>
      <arglist>(SampleAndHold, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Scale</name>
    <filename>classSimTK_1_1Measure___1_1Scale.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Scale::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale.html</anchorfile>
      <anchor>a6ca9d5e2c0d7e4b7b480831686a07eb5</anchor>
      <arglist>(Scale, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scale</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale.html</anchorfile>
      <anchor>adb7392e004fd67981540a66c33c8cba4</anchor>
      <arglist>(Subsystem &amp;sub, Real factor, const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale.html</anchorfile>
      <anchor>af7ea3600dab717f7b0d9813f03f796cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale.html</anchorfile>
      <anchor>a4524882e586b6578329761ce68d87109</anchor>
      <arglist>(Scale, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Scale::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</anchorfile>
      <anchor>a5bd5305fc44da45c5ad2b9cc4719a52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</anchorfile>
      <anchor>a5ebf939e096ea25643a4ec18b1708e6b</anchor>
      <arglist>(Real factor, const Measure_&lt; T &gt; &amp;operand)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScaleFactor</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</anchorfile>
      <anchor>a2ef3963fefb309078a6e426d2078ca6f</anchor>
      <arglist>(Real sf)</arglist>
    </member>
    <member kind="function">
      <type>const Measure_&lt; T &gt; &amp;</type>
      <name>getOperandMeasure</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</anchorfile>
      <anchor>ab2b283299b913771a5964e6d9c7d8de3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</anchorfile>
      <anchor>a4bbcd87ec6fc4efa35a502fd4e7da98a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</anchorfile>
      <anchor>aada4d0cb21bfc3c75a2ca832f6df6336</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</anchorfile>
      <anchor>a0957b3f7e765e66fbb71054a16015561</anchor>
      <arglist>(int order) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Scale_1_1Implementation.html</anchorfile>
      <anchor>aff52c19c046aaa5b4b0cda1c5a8aeda3</anchor>
      <arglist>(const State &amp;s, int derivOrder, T &amp;value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Sinusoid</name>
    <filename>classSimTK_1_1Measure___1_1Sinusoid.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Sinusoid::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid.html</anchorfile>
      <anchor>a03c2cc449549fbc6ee331b0b80fbd399</anchor>
      <arglist>(Sinusoid, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sinusoid</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid.html</anchorfile>
      <anchor>a161c07e1b05f55c43c2e26bc3bdeab7f</anchor>
      <arglist>(Subsystem &amp;sub, const T &amp;amplitude, const T &amp;frequency, const T &amp;phase=T(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid.html</anchorfile>
      <anchor>a5c68b0e2f4a4846ec458842b97c24e1b</anchor>
      <arglist>(Sinusoid, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Sinusoid::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Sinusoid_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid_1_1Implementation.html</anchorfile>
      <anchor>a2274500374038d74236a6a629d348a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid_1_1Implementation.html</anchorfile>
      <anchor>aa28e11892ecde2163157218f82622a47</anchor>
      <arglist>(const T &amp;amplitude, const T &amp;frequency, const T &amp;phase=T(0))</arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid_1_1Implementation.html</anchorfile>
      <anchor>add9fc1b5dc769c24acdd24d7a5de5d44</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid_1_1Implementation.html</anchorfile>
      <anchor>a13de1626cb42f935f1321cba39945871</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid_1_1Implementation.html</anchorfile>
      <anchor>a0e937f80f5ca94568776cb989224b34b</anchor>
      <arglist>(int order) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Sinusoid_1_1Implementation.html</anchorfile>
      <anchor>a6318f52fab8f776981eb94d4269d1e26</anchor>
      <arglist>(const State &amp;s, int derivOrder, T &amp;value) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Time</name>
    <filename>classSimTK_1_1Measure___1_1Time.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Time::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Time.html</anchorfile>
      <anchor>a8d5e4b99bf9c3744f9a59e146a80bbcf</anchor>
      <arglist>(Time, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Time.html</anchorfile>
      <anchor>a8ae6dc4bc1243d79562f3fa9af08be7e</anchor>
      <arglist>(Time, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Time::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Time_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Time_1_1Implementation.html</anchorfile>
      <anchor>ad9934ff60557aa8af3c64f590b6e8db3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Real &amp;</type>
      <name>getUncachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Time_1_1Implementation.html</anchorfile>
      <anchor>abdb6cc0cadacef23867d9549ac077af1</anchor>
      <arglist>(const State &amp;s, int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Time_1_1Implementation.html</anchorfile>
      <anchor>aa821b701d700396c4f9c4526735a8347</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Time_1_1Implementation.html</anchorfile>
      <anchor>a1e5eeaae3c974fe826f826af3c4660f2</anchor>
      <arglist>(int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Time_1_1Implementation.html</anchorfile>
      <anchor>a4270a15aa4da1edc6fc6f0975fade084</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Variable</name>
    <filename>classSimTK_1_1Measure___1_1Variable.html</filename>
    <base>SimTK::Measure_</base>
    <class kind="class">SimTK::Measure_::Variable::Implementation</class>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_PREAMBLE</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable.html</anchorfile>
      <anchor>a110733c16af05c0d3569073b9f9ac66d</anchor>
      <arglist>(Variable, Measure_&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variable</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable.html</anchorfile>
      <anchor>ac698afd9e5a15575703e4d0e8ecc060f</anchor>
      <arglist>(Subsystem &amp;sub, Stage invalidates, const T &amp;defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable.html</anchorfile>
      <anchor>a07b567a8d59aed3a8486d3e4cd6714c0</anchor>
      <arglist>(State &amp;state, const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTK_MEASURE_HANDLE_POSTSCRIPT</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable.html</anchorfile>
      <anchor>a860abdd6d26771f753cbf7c0dfbcab40</anchor>
      <arglist>(Variable, Measure_&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Variable::Implementation</name>
    <filename>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</filename>
    <base>SimTK::Measure_::Implementation</base>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>aed4d2f6a738711647c124f111f483696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>a344d7d8816e28d8257d6eb3e29a8182e</anchor>
      <arglist>(Stage invalidated, const T &amp;defaultValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Implementation</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>abb81f04dda158793797d3f71bb6b9c37</anchor>
      <arglist>(const Implementation &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInvalidatedStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>a344ca9072ab57dfe486988d64df928af</anchor>
      <arglist>(Stage invalidates)</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getInvalidatedStage</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>a10daef0c96e2cace9af5811742587b36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>a5f4466a2028aa0104438c1455ec50106</anchor>
      <arglist>(State &amp;state, const T &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>Implementation *</type>
      <name>cloneVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>a30ed10f1a201a2bc5febca008cff60e1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTimeDerivativesVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>acb35ee38d36b5eeca01dd8587214799d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDependsOnStageVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>aae0d158be676fc3d0c72fc04797f7c72</anchor>
      <arglist>(int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getUncachedValueVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>afbdf52aae59ca7943bbe1e44836a42ae</anchor>
      <arglist>(const State &amp;s, int derivOrder) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeMeasureTopologyVirtual</name>
      <anchorfile>classSimTK_1_1Measure___1_1Variable_1_1Implementation.html</anchorfile>
      <anchor>a38a67ea96fa8d64ce6925b4f92db6747</anchor>
      <arglist>(State &amp;s) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Measure_::Zero</name>
    <filename>classSimTK_1_1Measure___1_1Zero.html</filename>
    <base>SimTK::Measure_::Constant</base>
    <base>SimTK::Measure_::Constant</base>
    <member kind="function">
      <type></type>
      <name>Zero</name>
      <anchorfile>classSimTK_1_1Measure___1_1Zero.html</anchorfile>
      <anchor>a4792e484a44165995b1c63bb99d8c431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zero</name>
      <anchorfile>classSimTK_1_1Measure___1_1Zero.html</anchorfile>
      <anchor>a09b0fd0e70322ef653fced585de601ec</anchor>
      <arglist>(Subsystem &amp;sub)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zero</name>
      <anchorfile>classSimTK_1_1Measure___1_1Zero.html</anchorfile>
      <anchor>ac48f1275a9741043c568c4d631fdd6a1</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Zero</name>
      <anchorfile>classSimTK_1_1Measure___1_1Zero.html</anchorfile>
      <anchor>a424deb40ba83ceb9519bf77ac36fcdae</anchor>
      <arglist>(Subsystem &amp;sub, int size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Stage</name>
    <filename>classSimTK_1_1Stage.html</filename>
    <member kind="enumeration">
      <name>Level</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Empty</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13a7952f85d965f096e94dd68d9b769f887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Topology</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13a58721a4474cb55368c71692a698504b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Model</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13aedd9c6ba269432679e666eda36ee069b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Instance</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13af4ff7049cee385e9f602ab8378beee4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Time</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13a06ce2e5708ad9e6c20d8265601afbdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Position</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13aa387747781b9d06f99cad1168864c747</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Velocity</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13adaccf0c0afccae921811f5dd93e781e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dynamics</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13ab0a24de476c174b03fc0dc8d463a3563</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Acceleration</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13a8bd64db14a555b7478679e9462888950</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Report</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13af707c792f9f86a0a01efd6a94413a739</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Infinity</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13af1940a612a2fd4cb358e87322b7815d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowestValid</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13afe8a05be9b20467ed86235dbb559473d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HighestValid</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13af77ddfa898793e770017da0bc9a8ca14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowestRuntime</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13a2471e675a3b82fa623d7168dd70bbe03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HighestRuntime</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac3ebdb6f8942a72c65886e5286dd8a13a80571f7c9ec481b305a9c6b17da32014</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NValid</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a4217691cefea0b8efc3072e75f85a7eda3dd0007dc25a917525f65200763a480f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NRuntime</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a4217691cefea0b8efc3072e75f85a7eda91aba33e62424a77883716754f1c29b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stage</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a740a087a194642f4cbc8d2b2ef606dfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stage</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a3d7ab0e2f93edc84c9d0809c64d81b5b</anchor>
      <arglist>(Level l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stage</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a2a081e592ffe574a88d18646ad276ed9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a09ffa9437f37bb87c4d798c16ab33340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a706372a3f4debc4be2ee717b0ba3ca81</anchor>
      <arglist>(Level other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>adcd62616ffe6454acbccc19b65d8825b</anchor>
      <arglist>(Level other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a26af4c1a8d74e3eda088d78f6464251a</anchor>
      <arglist>(Level other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a04b6c3e8e9811481141d283ca197cffc</anchor>
      <arglist>(Level other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a63d97d48b7eb7e696948a2a47bbc1f06</anchor>
      <arglist>(Level other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a984e370e861775b1b2f5ec2458c4fa2e</anchor>
      <arglist>(Level other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a827128bfda6bc12cde829c9e0f994813</anchor>
      <arglist>(Stage other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>ac7b758f4c30efbb7bc5b3ba911fef246</anchor>
      <arglist>(Stage other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a5c46742d098e18a0de74fe6471efa026</anchor>
      <arglist>(Stage other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>aa0b435534f94b6a46c825c5feac14d7f</anchor>
      <arglist>(Stage other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a16de7132b558ce08a5f5b410f208c1d7</anchor>
      <arglist>(Stage other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>aafeb8b6781a0bafb2c98de608796057e</anchor>
      <arglist>(Stage other) const </arglist>
    </member>
    <member kind="function">
      <type>const Stage &amp;</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a427a886eb62d3273984a5dbe00a4083e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Stage &amp;</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a1b6a90def651fded96756a0137b9bb28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>operator++</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a2fa8ef98714b40fccd6098dcade6a215</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>operator--</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>af248f6ff41a2496287b8790de4c2e90e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>next</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a5456f3e3944f5de0b6429ffca261259d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>prev</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a1c5bfc1cb88d23330db08ff18c7f233a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a57b0815faec263403d925946d5411bf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>a20a716f5ab4eff572b07127aba554c84</anchor>
      <arglist>(Stage tooHigh)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInRuntimeRange</name>
      <anchorfile>classSimTK_1_1Stage.html</anchorfile>
      <anchor>aab3ffbb64e7eb7195b74342b218bfaf9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::State</name>
    <filename>classSimTK_1_1State.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a718a90ef538a16cfd6a5fd4f89f3857f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~State</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a18970cc5d1a4ae82595d1679009cc42b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>afa724ccf9b959542f1c617563905cd07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumSubsystems</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a5aa67d2a9a76764b295fc97493023f26</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae7b9ddedb2298764f16c3559e8a4611a</anchor>
      <arglist>(SubsystemIndex, const String &amp;name, const String &amp;version)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>acb872fdefc6d344720d197e129e6712a</anchor>
      <arglist>(const State &amp;)</arglist>
    </member>
    <member kind="function">
      <type>State &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac829588930f550a7c5da85ab0e5e6e04</anchor>
      <arglist>(const State &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SubsystemIndex</type>
      <name>addSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ab94cdc6575bff73529cf048fbfdcf942</anchor>
      <arglist>(const String &amp;name, const String &amp;version)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubsystems</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae2fda5cb20adc8f28d52e1dcabdd4634</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getSubsystemName</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae5802fd77bc21d8f3f1a2cb257dbdce6</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getSubsystemVersion</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a50beee60eadf49f2ae29ac899071ed29</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Stage &amp;</type>
      <name>getSubsystemStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a9cb0770f5ccabe8d56d4deeb52e6d352</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Stage &amp;</type>
      <name>getSystemStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a50e7655909ca82923992efa423d44dc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateAll</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a060484b97a44dddef791e2e101f0a407</anchor>
      <arglist>(Stage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateAllCacheAtOrAbove</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>af1bb5062d9e3bf2594a5b72d9bfe63d0</anchor>
      <arglist>(Stage) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceSubsystemToStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a727ff7168e6ad619ddd8e10fb9ffc073</anchor>
      <arglist>(SubsystemIndex, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceSystemToStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aaa675066b37e51d3dbc4c0a49fc2e9a1</anchor>
      <arglist>(Stage) const </arglist>
    </member>
    <member kind="function">
      <type>StageVersion</type>
      <name>getSystemTopologyStageVersion</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a6b5288aca25862280f95f7ec82ff1e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getEventTriggers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a1fa04045c9b6d59b8b27334c2ce58bd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac95995c662ead13d2ee6e22a4c2fb87d</anchor>
      <arglist>(Stage) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a0ceecce675132fe811638f82c29587de</anchor>
      <arglist>(SubsystemIndex, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updEventTriggers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae2207525c823442c3fcd89a7ad6081b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>af103f0e681464c69c2f0280e1f48ae46</anchor>
      <arglist>(Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a958486f84efe6cca682a9601c0065917</anchor>
      <arglist>(SubsystemIndex, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a79e2ea78ba1b83ebe4b2c2bc2319240d</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a2fda7f59c8499e43e5dbe2d413164a42</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>add14c9d781974abeaeb87857aca59b5b</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a82f17e227cc19986af9e3a178816c703</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ad6e0b575f5b541e0683a4113b399a90e</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a998c661cf0cfae47dbe7ce5a1e2e846a</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updU</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a5d4faebca10be06bd35e9e055d41d59a</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a1c31219b0a00ca8712ee087a9d7b486b</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a1d331d59007c1fa6bf3f09c24a434e75</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a3074f727ff1dd233ed8037309c2be403</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a6d909e8d964ee8070f27afcdd5a12b40</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac77db5bf29d0bf67e822fdc660da29cc</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ab25a577142caa1250d71b22656735797</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a200a59c465c446e9eb5458e2401ea5ba</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>abb67c456024027e102299d0b22797458</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a329df621860cd9681dac563cb43e6405</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aa0a2eac62ec7f567d043beed47d0d752</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQDotDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae4e2b825744c24677b38771141f71503</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac1d0b83eecb7cbe2fc514721644582ec</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a65e3e363ea61a4d2674d5579d293705a</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUDotErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a5475339ca1749dc9e01366d74a07b946</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a9a6f31be95a33484551411e9c0d12190</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQErrWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aec8c96bc604b16ae09c415422f4c0d85</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUErrWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a3d3c9c06edfdd641217e0056728a56a1</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a2c5186cf403f9493a77a6c0d1772a182</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a4e9da97520edd4f712a3f74b63537b96</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUDotErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a45f1200c70e552fbf7e735a24daa5505</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updMultipliers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a8d911973f0b5e7692336058004bb0eee</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQErrWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>abc0d8452c50d9f472aea76f4054697de</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUErrWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a78dcf460b49fc2ee3087581817a021b3</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>const Real &amp;</type>
      <name>getTime</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a419c46f8dc2a03f69e3488f6aaf1f798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getY</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a8b84ab8daf06b7209856cd56adf0818b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a356b4df0238d48b1f1c8e45b60bd4194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a2164e988ed91feb199b73d2fa128a5c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a39c3e91f753ce78b89ffea6ed5406522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aa6f6c6d6cec49db6847060a2e9b718d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac3bdcbe55351160fe8ff6455efc212a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aa2b4a718e984085983c9edc6507b3274</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ad45c5bc8d846bf15ab20c8f239843383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real &amp;</type>
      <name>updTime</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ad383c266a4f58c5ae6fe12e6fa60f5c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updY</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae3f395b315b5e7c9e45c3049ef5e79dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aecc4d78f371896753ece80fe92eb8eaf</anchor>
      <arglist>(Real t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a12b6c852725c0c1cbc3632f3fb51a395</anchor>
      <arglist>(const Vector &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a00fad986d5547dd10b1f5f7bad802d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updU</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a30d88df32c0564319245e2d0926d8083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a1ec53ed9d99548566703a4b2185c2511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a9181b7d2f1cf17be5b75061e488a70bb</anchor>
      <arglist>(const Vector &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a09fcba284ec2e81d7f2fac2b64e43086</anchor>
      <arglist>(const Vector &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a4c4166209fae1e16ca2b9191aec5d64e</anchor>
      <arglist>(const Vector &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getYDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>afd29ccab173e74900145ca4fcd0e5870</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aa2cac3db98c80d0161e6462672df6d6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a1fc9495922e223b3102c43379494d5b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ab1bce4d425cfec38ba814034df754da5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a8789dc9b56f7db0199a66cb118a1554d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updYDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a75e21683bf46d9d0744017bd77c26575</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aa37a5b425f3868598147e321c15ec464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aff096fa4b5762c7de299e21b11de8f54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a06981689da63c353c7a3d2f8f5b767e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQDotDot</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aab00bcf8585ddd5e35d2ef252340db55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getYErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a4603ff6ac6fc0a1cf3b9289f4fd73f07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a4c64e8992b740ebf013362bff87a8f4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>af796b6eb0510ddc7ae5c55c17a0ef00c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUDotErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a972c4457f1454e0a18d1317a5ab0b458</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a393f6dc9c403f22f7209b5328820c356</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQErrWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ad3207b5ff8c4c8434b83d93a8b210565</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUErrWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae5c621ba864a1b1b13fe80c7543eae07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQErrWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aebb3fbf1a3f55f0ace6a69ac74e5a968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUErrWeights</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a54e8c6c59ee75df582d7fb398417f89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updYErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a8f3d9f55ce1a0a7cd1979811c8fc03ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a2ab929e384c532507bca6cf1ad954c18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a0ed0ad1b8f6c6b369b629e06266ec27d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUDotErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a289c516e35ba97a06397e3190e789283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updMultipliers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac4e2b76c7089c216a8806035df309753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSystemStageVersions</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aae9ca495d5b6ee51fd9f8ee48380ce5d</anchor>
      <arglist>(Array_&lt; StageVersion &gt; &amp;versions) const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getLowestSystemStageDifference</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae6df2681ed056a34d65ffb92251a910d</anchor>
      <arglist>(const Array_&lt; StageVersion &gt; &amp;prevVersions) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemTopologyStageVersion</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a18fca0c246567f476fec83b86eea51a3</anchor>
      <arglist>(StageVersion topoVersion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoUpdateDiscreteVariables</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a30b1ef1c1e2b8e9687e413c2eea0eb17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>toString</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a2000b4d5985acc5d6188ff040efbf464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>String</type>
      <name>cacheToString</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a0772e43e14280d360ae775bcd67c71d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QIndex</type>
      <name>allocateQ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a31299e8d0eb4446e9739598d604dd0fb</anchor>
      <arglist>(SubsystemIndex, const Vector &amp;qInit)</arglist>
    </member>
    <member kind="function">
      <type>UIndex</type>
      <name>allocateU</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae4988e8d824beb1161a67d8e2a1d4c85</anchor>
      <arglist>(SubsystemIndex, const Vector &amp;uInit)</arglist>
    </member>
    <member kind="function">
      <type>ZIndex</type>
      <name>allocateZ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aeb532c8ae68fded77c3d943218a3eb54</anchor>
      <arglist>(SubsystemIndex, const Vector &amp;zInit)</arglist>
    </member>
    <member kind="function">
      <type>QErrIndex</type>
      <name>allocateQErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a40ac97631674ce34983b010bd735e42b</anchor>
      <arglist>(SubsystemIndex, int nqerr) const </arglist>
    </member>
    <member kind="function">
      <type>UErrIndex</type>
      <name>allocateUErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a022e4c988fa1c8ef0cfcc528001e2886</anchor>
      <arglist>(SubsystemIndex, int nuerr) const </arglist>
    </member>
    <member kind="function">
      <type>UDotErrIndex</type>
      <name>allocateUDotErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aacce924aa6ff13b3cccf4d83dbb40959</anchor>
      <arglist>(SubsystemIndex, int nudoterr) const </arglist>
    </member>
    <member kind="function">
      <type>EventTriggerByStageIndex</type>
      <name>allocateEventTrigger</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a83aee870cd58009ba3476fe1bd8f97ea</anchor>
      <arglist>(SubsystemIndex, Stage stage, int nevent) const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteVariableIndex</type>
      <name>allocateDiscreteVariable</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae7fc9b56d326138a77e39bd73ad59aaa</anchor>
      <arglist>(SubsystemIndex, Stage invalidates, AbstractValue *)</arglist>
    </member>
    <member kind="function">
      <type>DiscreteVariableIndex</type>
      <name>allocateAutoUpdateDiscreteVariable</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aaa2b067d10792c14666301c9bf2d77b9</anchor>
      <arglist>(SubsystemIndex, Stage invalidates, AbstractValue *, Stage updateDependsOn)</arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>getDiscreteVarUpdateIndex</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae025d2d65b81c64f5223c1b997ddcb32</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDiscreteVarAllocationStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a13df56ee436934d1dfe3a6f7fbeaab4a</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getDiscreteVarInvalidatesStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>adcfe2d8ac284cb737123bf7f328ec5d8</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getDiscreteVariable</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a616006f2c04e00e76230c8762d43011f</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDiscreteVarLastUpdateTime</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a91ea0e205f11002b65eb1a851dc6c313</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getDiscreteVarUpdateValue</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a9948c686bdbc5b1c993757d990d3341a</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updDiscreteVarUpdateValue</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a6abf72f7fe52e2147b53cf321b3386ab</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiscreteVarUpdateValueRealized</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>af6c7785ea1602ae56b084487ca083757</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markDiscreteVarUpdateValueRealized</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a7d15a05a11cc4a6224919e2e172ef2d2</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updDiscreteVariable</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a836298382ef60e18f64e850e89146075</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiscreteVariable</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a063c76cfff04618f04734c8cf4d2ed57</anchor>
      <arglist>(SubsystemIndex, DiscreteVariableIndex, const AbstractValue &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateCacheEntry</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae23cf03fdbf7d3db8ba7c00cb80fbefa</anchor>
      <arglist>(SubsystemIndex, Stage earliest, Stage latest, AbstractValue *) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateCacheEntry</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a1ca8d146f8bd46fbb208902a2339efb0</anchor>
      <arglist>(SubsystemIndex sx, Stage g, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateLazyCacheEntry</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>afaf2b1829aa2d0c6267051b0d7ace5f6</anchor>
      <arglist>(SubsystemIndex sx, Stage earliest, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getCacheEntryAllocationStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aeac2a82bbeb1c0565899f67bbc23a218</anchor>
      <arglist>(SubsystemIndex, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getCacheEntry</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a2ec664d01f587b40d0b4dea31e9cc6a5</anchor>
      <arglist>(SubsystemIndex, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updCacheEntry</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a2e47d6f32c9ada0cbb8d0152f41d59e3</anchor>
      <arglist>(SubsystemIndex, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCacheValueRealized</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a3c6da724ee83f9ee77447111d3163eab</anchor>
      <arglist>(SubsystemIndex, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markCacheValueRealized</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a9a680f1ac8151fe1ff8a7915abfb34fd</anchor>
      <arglist>(SubsystemIndex, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markCacheValueNotRealized</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>adb1063736a32f90ed1916fbbe74ef0b3</anchor>
      <arglist>(SubsystemIndex, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNY</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a4db5f14a3ae16163ea40591675b0edb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNQ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>acc528e226016c8934c94bc9f1ca4541b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SystemYIndex</type>
      <name>getQStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a045f57b4c9171966d5e5d44a54e7bcb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNU</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>af1b608e443dcfcd54637c350be85f097</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SystemYIndex</type>
      <name>getUStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac1bc88077a378929ca984569bca744bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNZ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aaaff79d7f7d4331c215d27289708cedf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SystemYIndex</type>
      <name>getZStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>acd246a81e351f96188faaafc1f99948c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNYErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac0983f1ca16c583002c23944af298793</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNQErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a669aa791bd89de846189b7d552bc1e57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SystemYErrIndex</type>
      <name>getQErrStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a97a34cf3297c043641716d2739ea6c93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNUErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac0e415975ee4415c121d216ece4c76ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SystemYErrIndex</type>
      <name>getUErrStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a0e3b250997f9cda1e2f0c1e7ec425737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNUDotErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a3e65493f3fbadc22031cb2e8cc00b33a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNMultipliers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a26dde07c7450f444e83973035b7a6e8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNEventTriggers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aa2989318ceb4f561569692b6f3e99ed3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a8a82fb815e9f918d83b92e5e07906159</anchor>
      <arglist>(Stage) const </arglist>
    </member>
    <member kind="function">
      <type>SystemEventTriggerIndex</type>
      <name>getEventTriggerStartByStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a79b00827a9dd264c6b8e552b1e187c46</anchor>
      <arglist>(Stage) const </arglist>
    </member>
    <member kind="function">
      <type>SystemQIndex</type>
      <name>getQStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>acac627fe2915dad54278b33a9814fc4d</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNQ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a388ac593645c17d5f00ec5a4faad76c5</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUIndex</type>
      <name>getUStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a7b8ffdfb136e1d19924cae2768ee94fe</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNU</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a69d73c7bd04939821657659c2c4cd24a</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemZIndex</type>
      <name>getZStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a1964e1487312d5c9eeff62c690781531</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNZ</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae63c52d5c7bb938f6bb083f3df3a6508</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemQErrIndex</type>
      <name>getQErrStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a44be9079dc1f076cdd7faa1b7181879c</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNQErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a05ba78429e9c1289e0ef286e3a9520bf</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUErrIndex</type>
      <name>getUErrStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a8024ed98679df352684fdad6d130e1a3</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNUErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a5135af3783b2698fddaa26ced5f4ec59</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUDotErrIndex</type>
      <name>getUDotErrStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a0b2e53a49e96a88715b76a64e1f90685</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNUDotErr</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a6ca9e5d5fe900f86b9a8c53017936ca4</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemMultiplierIndex</type>
      <name>getMultipliersStart</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ac4a134295ba7715af4033fe8cd58369f</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNMultipliers</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a7208bee70c889e2e153883c10abc3bf0</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemEventTriggerByStageIndex</type>
      <name>getEventTriggerStartByStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a96268164511770948ea2adec4211ab96</anchor>
      <arglist>(SubsystemIndex, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ad6de38fa57d0fefd62716ffd4ec357cf</anchor>
      <arglist>(SubsystemIndex, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapQToSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>aaf9c49cc6682c9a0a7b9facaddd19cbf</anchor>
      <arglist>(SystemQIndex, SubsystemIndex &amp;, QIndex &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapUToSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a1cace001d4b00537b4de68b24502bb62</anchor>
      <arglist>(SystemUIndex, SubsystemIndex &amp;, UIndex &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapZToSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a5a40289ef60908a48c41877b815e777e</anchor>
      <arglist>(SystemZIndex, SubsystemIndex &amp;, ZIndex &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapQErrToSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>af67ff16d47f3052b5c7aab6eaf3f728c</anchor>
      <arglist>(SystemQErrIndex, SubsystemIndex &amp;, QErrIndex &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapUErrToSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>a28bfce46fefd2949580d97b7f80ebf18</anchor>
      <arglist>(SystemUErrIndex, SubsystemIndex &amp;, UErrIndex &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapUDotErrToSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>acf12f55eb1f89a2e543afa5c4c38d50d</anchor>
      <arglist>(SystemUDotErrIndex, SubsystemIndex &amp;, UDotErrIndex &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapMultiplierToSubsystem</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>ae20a186c6b349b4d20ea12f004d60025</anchor>
      <arglist>(SystemMultiplierIndex, SubsystemIndex &amp;, MultiplierIndex &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapEventTriggerToStage</name>
      <anchorfile>classSimTK_1_1State.html</anchorfile>
      <anchor>adca1e29d15cfa8074a78e0c1eaaa617a</anchor>
      <arglist>(SystemEventTriggerIndex, Stage &amp;, SystemEventTriggerByStageIndex &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Study</name>
    <filename>classSimTK_1_1Study.html</filename>
    <class kind="class">SimTK::Study::Guts</class>
    <member kind="function">
      <type></type>
      <name>Study</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a52c60575c28ab3adfc1cece0132990de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Study</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a8f28fbecd29707324ac2f35d90b22039</anchor>
      <arglist>(const Study &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Study &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a47c11ee63b5f55eef9837318c9567c61</anchor>
      <arglist>(const Study &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Study</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a106b787647d8ec6f0e8f330c180af197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Study</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>aeee7a269b5434543d5a903a94a699411</anchor>
      <arglist>(const System &amp;sys)</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>ac3bdb0e9c35cada750b8250b09b4afa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getVersion</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a0bedfbd56ca59a005493ff8fd484cafe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const System &amp;</type>
      <name>getSystem</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>abe76c6a84c242fdc22f144f04a84d1ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>getState</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a2889fd36cd6c696fb6d656dfa5972d60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State &amp;</type>
      <name>updState</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a67964ec0cf6aa1e8ac1c031b66990e7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwnerHandle</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>ac1274956379c661c7effea61b9368a9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyHandle</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a91d4e13c15985a6126dbc5edb4a79588</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameStudy</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a3c320d5082910d3545fee3d5bc205a44</anchor>
      <arglist>(const Study &amp;otherStudy) const </arglist>
    </member>
    <member kind="function">
      <type>const Study::Guts &amp;</type>
      <name>getStudyGuts</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a8dac12b94e3616b65c4a926c6a8f5a8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Study::Guts &amp;</type>
      <name>updStudyGuts</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a48b068d7ab1d8eb26b70b3fd3b36fd9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptStudyGuts</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a26fe38b19045d86ad14c1f85cc1b10ff</anchor>
      <arglist>(Study::Guts *g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Study</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a4aeed8873bc5a798a0d4e2956ede24aa</anchor>
      <arglist>(Study::Guts *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGuts</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>ac4d964295cf203bd1478c1f380463442</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1Study.html</anchorfile>
      <anchor>a4987035570f1150fe0631dbef6dbd95b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Study::Guts</name>
    <filename>classSimTK_1_1Study_1_1Guts.html</filename>
    <member kind="function">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a65ce714230bcbbfc8c56bb820a38381d</anchor>
      <arglist>(const String &amp;name=&quot;&lt;UNNAMED STUDY&gt;&quot;, const String &amp;version=&quot;0.0.0&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Guts</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a476dfaceb39e9c5662d5645e8a15ea50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a3ba60e512f18e429d3f3cc03b4452896</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getVersion</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a31a285bb77f1c060e930e26a370031f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Study &amp;</type>
      <name>getStudy</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a28eb0a382167c95cddd3a7de60be28e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Study &amp;</type>
      <name>updStudy</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a67cd23f44793238ed26b39008c3741bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerHandle</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a099c1e8224f1d5f7fc32afe0864f9b6b</anchor>
      <arglist>(Study &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOwnerHandle</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a58a0660db06334160584f87a80ea40aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a9916cda87d7e8979358331ee8978db5b</anchor>
      <arglist>(class GutsRep *r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRep</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a96aa51af581a08c6b48b18c53b1f9d84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GutsRep &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>aaca6996606bf351c6033c392ceb77aac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GutsRep &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>af3227e8c259fb322d56fd3f69697625f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Study::Guts *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a6d390ef6d8b9bb0588ac52529224a641</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a0efaab77eac8e7de91442a112720d64e</anchor>
      <arglist>(const Guts &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Study::Guts *</type>
      <name>cloneImpl</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>adebfce579ddd2cbd2757177a940b5cfa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GutsRep</name>
      <anchorfile>classSimTK_1_1Study_1_1Guts.html</anchorfile>
      <anchor>a65348a69351f325dcdf42302b7ca7b47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Subsystem</name>
    <filename>classSimTK_1_1Subsystem.html</filename>
    <class kind="class">SimTK::Subsystem::Guts</class>
    <member kind="function">
      <type></type>
      <name>Subsystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a7e70c91bba5e96343d6f2ea676833dbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Subsystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>adb8b0c9b22049a700172635d0e54ad1f</anchor>
      <arglist>(const Subsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Subsystem &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a839f580d4f23447f6f3f39fffae0831d</anchor>
      <arglist>(const Subsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Subsystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a272011429bb671b2af21ccdd929d42ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>acca1ec62a9faf40ed0d13e797b0e3469</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getVersion</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a8ee5bd9797ba4cd66aea87516e255d16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QIndex</type>
      <name>allocateQ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a54526fa0c834dad7db28541347d99666</anchor>
      <arglist>(State &amp;, const Vector &amp;qInit) const </arglist>
    </member>
    <member kind="function">
      <type>UIndex</type>
      <name>allocateU</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a37f2bf1007239e3de887946c356276cd</anchor>
      <arglist>(State &amp;, const Vector &amp;uInit) const </arglist>
    </member>
    <member kind="function">
      <type>ZIndex</type>
      <name>allocateZ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>afa109f8745f480d5bacdd091651d1d97</anchor>
      <arglist>(State &amp;, const Vector &amp;zInit) const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteVariableIndex</type>
      <name>allocateDiscreteVariable</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a38942d3bf31b87f102532ab9448bcfb2</anchor>
      <arglist>(State &amp;, Stage invalidates, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteVariableIndex</type>
      <name>allocateAutoUpdateDiscreteVariable</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a156cd99767c0e761a281124f0e17c797</anchor>
      <arglist>(State &amp;, Stage invalidates, AbstractValue *v, Stage updateDependsOn) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ab27b326786fec5d7230b5fe4d878ddae</anchor>
      <arglist>(const State &amp;, Stage dependsOn, Stage computedBy, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ac7c2eadb6bad87d0e0296408e36a7405</anchor>
      <arglist>(const State &amp;state, Stage g, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateLazyCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a5350c35d7b59054b838a0dfc813c7bac</anchor>
      <arglist>(const State &amp;state, Stage earliest, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>QErrIndex</type>
      <name>allocateQErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a521fb166d6f2634eabde2b46d7255f97</anchor>
      <arglist>(const State &amp;, int nqerr) const </arglist>
    </member>
    <member kind="function">
      <type>UErrIndex</type>
      <name>allocateUErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>aa53ce1f0a0cb3d31b5a158d50b82fd81</anchor>
      <arglist>(const State &amp;, int nuerr) const </arglist>
    </member>
    <member kind="function">
      <type>UDotErrIndex</type>
      <name>allocateUDotErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a7fafd7de0e6303da005be2fe63d6145b</anchor>
      <arglist>(const State &amp;, int nudoterr) const </arglist>
    </member>
    <member kind="function">
      <type>EventTriggerByStageIndex</type>
      <name>allocateEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>af2b57e6e865a2aaa6d6cdc5f27e6b54f</anchor>
      <arglist>(const State &amp;, Stage, int ntriggers) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a282333903ecbc187ca6aa2063435dc71</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a8e65a12f959c5d38c7ae61f84ac0b328</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a96d6f0cceb56a81b9c138aecc2901302</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a3edd64e7c22f119e4caf022e2d4a1da3</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a4d7316667901ac4cf5492267ab0c9fd6</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZDot</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>aa20c1891428598b525556a48196e7b24</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a306de370dbcc605c15fa679372467026</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ac507a84c0e8dd2c91dc779d658b28d4e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a42ad921770a0e7cf74527acd8f62417f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUDotErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a9a94e1ebf057d204c394f4c4818caba9</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a2b768f159e1f9f6c219f202486ae067d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a42df79c26caa5bb7a42da1a0fd36a3c5</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ae2d24e51c3e77802600f857cff4f047f</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updU</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ad018c2fa19121c285d70155d8b6b8113</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a0f41526a3c743d493b5b8dd841d2f018</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a592ff2854960cdff093d8f348b472306</anchor>
      <arglist>(State &amp;s, const Vector &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ab19465c9ae2d8193f931cf729cddddad</anchor>
      <arglist>(State &amp;s, const Vector &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a5dd0490cdb37659ae40155d3dc8bc54a</anchor>
      <arglist>(State &amp;s, const Vector &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQDot</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a61352034e874fbcdd3aa9cb365572a91</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUDot</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ad771d9154ed57da48fbc2c90486c95bd</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZDot</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ae3f9b83184eda3bd2947805cc00ac42f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQDotDot</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ada657fccfa3dd4e1258a7a7644a77a30</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ac79e50b55dd891563e986f496d8afaf6</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a73e4da5fee620c62aa96bcbbbe46993c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUDotErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>adb85c05a43c8fc26995c3e977fcaa5af</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updMultipliers</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a60fc9881bb40995c3eb22a3b04e04b0e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a523deff6e2dbd2902a2d09cd485e5a33</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getStage</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a97e1b847bc50dc9a1440ab006e401eb2</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getDiscreteVariable</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a5514858938a7ab1c5ad6f954213e4f90</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDiscreteVarLastUpdateTime</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a7cedb6c79428e511ef0156314e763e37</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>getDiscreteVarUpdateIndex</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a6e76f3c3a25d5de83597b733bf54d770</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getDiscreteVarUpdateValue</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ac21f05208036e57c54596c9f8e98f49b</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updDiscreteVarUpdateValue</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a5276af995b56132b139d178de73f34a1</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiscreteVarUpdateValueRealized</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ac09e243084a0f1b37ae8dc51517dffa5</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markDiscreteVarUpdateValueRealized</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a2eecaa91f875b968cb2608091cc8225f</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updDiscreteVariable</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a489622f2509e7d9f3bae740338eee0e8</anchor>
      <arglist>(State &amp;, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a4d5fe57ce90ea9164f23bf67bc8b6cb5</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a0d4d26df0390ae6280cb07cb417a905b</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCacheValueRealized</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a3e6edc5a7028ca4658ffc2f13dc832e9</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markCacheValueRealized</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a4aa6c98b2d19d75fcdcdeecf58a4faca</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markCacheValueNotRealized</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a1bc848624ea8a53d1dfacdc527af4a2c</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemQIndex</type>
      <name>getQStart</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a1dc96e8f82c34bb22fa1794eabf93f2b</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNQ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ab1e98466c5be93208a116db443cb0cd6</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUIndex</type>
      <name>getUStart</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a615114f93b520d67116122faa2f0a1d1</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNU</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>aa83b6445a3d99aea02fffe9fe54e9399</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemZIndex</type>
      <name>getZStart</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>afe2d8211d3c81b5fa1d9c5f3c4d23891</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNZ</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ab8771198d31e72f098358658f6b4264c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemQErrIndex</type>
      <name>getQErrStart</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a89da74563f373c1c16f1373c68333034</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNQErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a7230dfad777e1a54ea1313c6caf61e95</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUErrIndex</type>
      <name>getUErrStart</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a19848d6cb2bb15bf7fb5762b8eedd9ee</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNUErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ac0edc8b0832ad2242cc750a349b6e7f7</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUDotErrIndex</type>
      <name>getUDotErrStart</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a3b20b119fddb774b1282999cc2bbd80f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNUDotErr</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>aa060ac65cc9275f0fe5229eabbb51e82</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemMultiplierIndex</type>
      <name>getMultipliersStart</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ae046ad35566ed0a4b7eff61babf27974</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNMultipliers</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a022b817561977806265ccdc2e429fc1e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemEventTriggerByStageIndex</type>
      <name>getEventTriggerStartByStage</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a75a92933746518083ed766c0dcf44b7b</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ae485d69065a6f1e9b2649907a2798071</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>accfe6ad2f091aa1c1eca12cb94341240</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSameSystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a6f2a74858fa40251747e560c5e951fac</anchor>
      <arglist>(const Subsystem &amp;otherSubsystem) const </arglist>
    </member>
    <member kind="function">
      <type>const System &amp;</type>
      <name>getSystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a7aec20c2678884eceb9d93ec2e6c6fae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>updSystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a529ac3f13870b78e102d65fa2407a88e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SubsystemIndex</type>
      <name>getMySubsystemIndex</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ab1ef151d1e21008eff624e98dfee40e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwnerHandle</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a34786d047778ba982bde26d5ee8a58a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyHandle</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a8b35ee921910acdd21e16e707eb197c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameSubsystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>af7787435501c30a231160b34c23f33ac</anchor>
      <arglist>(const Subsystem &amp;otherSubsystem) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subsystemTopologyHasBeenRealized</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ac7aa5fc2027837e79f1003f3d9eb121c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateSubsystemTopologyCache</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a6f140ce9dcccde8c029268ebfb23f2b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MeasureIndex</type>
      <name>adoptMeasure</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a2f8941d1bc537da9c4b8ac83509f46f0</anchor>
      <arglist>(AbstractMeasure &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AbstractMeasure</type>
      <name>getMeasure</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a120398aabdf24ef3c8c15e64801df8a8</anchor>
      <arglist>(MeasureIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Measure_&lt; T &gt;</type>
      <name>getMeasure_</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a57fb894ce340e7c325f66f0ab1c082b5</anchor>
      <arglist>(MeasureIndex mx) const </arglist>
    </member>
    <member kind="function">
      <type>const Subsystem::Guts &amp;</type>
      <name>getSubsystemGuts</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a977e3d6153ed795bb77110faace535e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Subsystem::Guts &amp;</type>
      <name>updSubsystemGuts</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a6c3ab15a9eaf4f22af9bcaf30d44fc64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptSubsystemGuts</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a8aaededb44ed2df0a7f6c823ba5bf2bb</anchor>
      <arglist>(Subsystem::Guts *g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>ac02b7690d6e9995aa4e2dac0cdcd0ea5</anchor>
      <arglist>(System &amp;, SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Subsystem</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>afb5b5170becdbc1120da9254d2ac48f5</anchor>
      <arglist>(Subsystem::Guts *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGuts</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>afa2878a29a229670ae39496c7cc62d1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1Subsystem.html</anchorfile>
      <anchor>a4987035570f1150fe0631dbef6dbd95b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Subsystem::Guts</name>
    <filename>classSimTK_1_1Subsystem_1_1Guts.html</filename>
    <member kind="function">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>acf693a5efaad9ba876a5037a749419df</anchor>
      <arglist>(const Guts &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Guts &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aa93e83dc67e0f6148d64b2424919faed</anchor>
      <arglist>(const Guts &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>af2eb80a6231b6f009f1a5e806a257738</anchor>
      <arglist>(const String &amp;name=&quot;&lt;NONAME&gt;&quot;, const String &amp;version=&quot;0.0.0&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Guts</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aa317170085c220c7f20a2cfc6625f6ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>acc5b001beb7cfb9424a752904c839eb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getVersion</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac22dc1e6c93b8f4694e1aa3244049483</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>QIndex</type>
      <name>allocateQ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aabebf655c8c60e2567ff6f2dc670971d</anchor>
      <arglist>(State &amp;s, const Vector &amp;qInit) const </arglist>
    </member>
    <member kind="function">
      <type>UIndex</type>
      <name>allocateU</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a714829b954b399a6b6bc8b56116dc337</anchor>
      <arglist>(State &amp;s, const Vector &amp;uInit) const </arglist>
    </member>
    <member kind="function">
      <type>ZIndex</type>
      <name>allocateZ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a65859c4445ba20fc4685897f5fbadeeb</anchor>
      <arglist>(State &amp;s, const Vector &amp;zInit) const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteVariableIndex</type>
      <name>allocateDiscreteVariable</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a090e05d055e7460ce19f3d4fd5616ff5</anchor>
      <arglist>(State &amp;s, Stage g, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>DiscreteVariableIndex</type>
      <name>allocateAutoUpdateDiscreteVariable</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a77dde57d55f56fed998228478e46a8d5</anchor>
      <arglist>(State &amp;, Stage invalidates, AbstractValue *v, Stage updateDependsOn) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a15b7ea6fa35d5c97311361327eb0aa08</anchor>
      <arglist>(const State &amp;, Stage dependsOn, Stage computedBy, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a04ac0d29ebc775f4ccd99b804a9fcfeb</anchor>
      <arglist>(const State &amp;state, Stage g, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>allocateLazyCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a2f7b0a16520b99265ecf6bbb53f7ad9c</anchor>
      <arglist>(const State &amp;state, Stage earliest, AbstractValue *v) const </arglist>
    </member>
    <member kind="function">
      <type>QErrIndex</type>
      <name>allocateQErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ad63830523f765a0c3840950dcf769df2</anchor>
      <arglist>(const State &amp;s, int nqerr) const </arglist>
    </member>
    <member kind="function">
      <type>UErrIndex</type>
      <name>allocateUErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac1c6181f8bae82a5611da47147a50f24</anchor>
      <arglist>(const State &amp;s, int nuerr) const </arglist>
    </member>
    <member kind="function">
      <type>UDotErrIndex</type>
      <name>allocateUDotErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aae41d184386f624e3f6e9b70d794976b</anchor>
      <arglist>(const State &amp;s, int nudoterr) const </arglist>
    </member>
    <member kind="function">
      <type>EventTriggerByStageIndex</type>
      <name>allocateEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a3c6f8a8ad9c8033406e4bff240e11632</anchor>
      <arglist>(const State &amp;, Stage, int ntriggers) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a043236841b68455304b0492fdb335d1d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>af6a95d2dd8976036d258347d46038822</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a3c95c75f53c165851d475717150bb864</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUWeights</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a9849beb647a7ab6d57b18d69165b36ea</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZWeights</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a81ca16f545a7b559d51d93c1fba888a5</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a0333412bc9432aaf7bfbf0bae6b02286</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a48fcb0410c36742c12731167c95fafb6</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getZDot</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac2e4201e53127594eaae3e77b181f584</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQDotDot</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ada3b7328d5cf2dd8da0a4bc6368b76dc</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a2478a5b2b02db5b77eb09501da2c5fca</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>adb27df464809a6cde59209bb9023a427</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getQErrWeights</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ade501decc354478736fff19c7dabf070</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUErrWeights</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac78997126c5d542126ba5e218bff3a9c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getUDotErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac69e8c1ee42e2c76933a1d02abb45c9a</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getMultipliers</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aec6afe7ab8134b457c4e0b0e69b0d7cf</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a812b94f8577e6d4d54d800e359dec31d</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac13d19fb7a8f857b78fcec17b373167f</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updU</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a7f59c41d019f72737fb4b7a656c223b1</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac69f5979061f4987fb4d47c7d4e54565</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a59cd60140275695593df73e522a46af2</anchor>
      <arglist>(State &amp;s, const Vector &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setU</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a1f1424d93f9874d9c7ffdb3600f94496</anchor>
      <arglist>(State &amp;s, const Vector &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a296819bd76d8cff80c2cb1bc9113b2af</anchor>
      <arglist>(State &amp;s, const Vector &amp;z) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQDot</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>af1dbc6b14248efcc997233f558adda16</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUDot</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ae0bb5d09036d85ab500a55c5e46b8e45</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updZDot</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a80edc5431e31563ab355d69c655e3f16</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQDotDot</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a406bf1a36256c716c7388b813157575c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updQErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a8a68baa62950dadd7f667b7aa43fc3e1</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a90e9bcb99bb81194101d8e429f4765bc</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updUDotErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aa45b3b0b62591a65d97f00fad1022cb9</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updMultipliers</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>af9685f29606440ac2120fef4836d9e84</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>updEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a62e0aa77b2d7ea664e9c512ee6065c43</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>Stage</type>
      <name>getStage</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a77e86a7bae0846f8b76fa34835e4cedf</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getDiscreteVariable</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a4307dbdcd070d6212a277cf9602ea9c3</anchor>
      <arglist>(const State &amp;, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDiscreteVarLastUpdateTime</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a616328c134bf2572a42cec7c26ccbf0c</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>CacheEntryIndex</type>
      <name>getDiscreteVarUpdateIndex</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a3243c2c1c9a84d25c93c32a69fbc17da</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getDiscreteVarUpdateValue</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>af58a628b3f52d498366f33193e34d484</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updDiscreteVarUpdateValue</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a20089f6aab380bac4c8db23b80c729a8</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiscreteVarUpdateValueRealized</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a2d94227191dedf2f0df68aa9f6af6feb</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markDiscreteVarUpdateValueRealized</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a30be4c03bb9a7d429c8d34209ee09cac</anchor>
      <arglist>(const State &amp;s, DiscreteVariableIndex dx) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updDiscreteVariable</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aa7eecf28f74d4a1d3802af41b48b8a77</anchor>
      <arglist>(State &amp;, DiscreteVariableIndex) const </arglist>
    </member>
    <member kind="function">
      <type>const AbstractValue &amp;</type>
      <name>getCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>acd5fdc6684d9e5e7d4b3e2a3a947eedd</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>AbstractValue &amp;</type>
      <name>updCacheEntry</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a01bd2f03b323954630f1112285fb7ae5</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCacheValueRealized</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aac987d5108fa2992c6a3e2f79f5b644c</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markCacheValueRealized</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a165e07dc352bdefeba207554ed13d221</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markCacheValueNotRealized</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a719f2d01d1617d2b52c5daf1c28254bb</anchor>
      <arglist>(const State &amp;, CacheEntryIndex) const </arglist>
    </member>
    <member kind="function">
      <type>SystemQIndex</type>
      <name>getQStart</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac0b5784a8c6552e5a8971d044f2cdead</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNQ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>af9faa47a12fbb4c87cd5b381f8f09a33</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUIndex</type>
      <name>getUStart</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a969457f07c25eb2c425220c54c342efc</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNU</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a6da3bdeb5c99a37d0fb49acf4c8c3229</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemZIndex</type>
      <name>getZStart</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a53db9a6f3933902c84e9fa5b7798359e</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNZ</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a628277ef97a02215e92a88be6c62315f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemQErrIndex</type>
      <name>getQErrStart</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>acf1ac5786bc172c0bfbf7fe427287a18</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNQErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a866e5ad597278ecbf3add9e0b223c4cb</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUErrIndex</type>
      <name>getUErrStart</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac8e72fa6a4aeeb0aca57b91b2202bf51</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNUErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ad4321e86d02d82d8f862c0c046a0eb5c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemUDotErrIndex</type>
      <name>getUDotErrStart</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ab7c051ec3628094e4bbdab19faca70d8</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNUDotErr</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a2759f1c7286053ad3e79648fb4dff531</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemMultiplierIndex</type>
      <name>getMultipliersStart</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a0a054ed9fe3289465ba7f1f1d0f0aa9a</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNMultipliers</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a082f6d06b832ea19c0867566b5c7c79f</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>SystemEventTriggerByStageIndex</type>
      <name>getEventTriggerStartByStage</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ab091965fe6c3e71a7e419da25af44ce0</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNEventTriggersByStage</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>af85df12bbe231e516a5984159031f329</anchor>
      <arglist>(const State &amp;, Stage) const </arglist>
    </member>
    <member kind="function">
      <type>MeasureIndex</type>
      <name>adoptMeasure</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>abf05dc87e1a6a734f1a9f24a711df8a1</anchor>
      <arglist>(AbstractMeasure &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>AbstractMeasure</type>
      <name>getMeasure</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a96fe1da153605e1d195713d5d0e83321</anchor>
      <arglist>(MeasureIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Measure_&lt; T &gt;</type>
      <name>getMeasure_</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ab0eafed8138fa9ca05a4193a73de5155</anchor>
      <arglist>(MeasureIndex mx) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSystem</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a4f7867c8ecb1baf8f913630a705412db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInSameSystem</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac8af98eef1579d0c94e760650d874df6</anchor>
      <arglist>(const Subsystem &amp;otherSubsystem) const </arglist>
    </member>
    <member kind="function">
      <type>const System &amp;</type>
      <name>getSystem</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a83891de361f5e104930eac51f5a337f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>updSystem</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ad7fdb4233d24c1c456a77e4d6e54339f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SubsystemIndex</type>
      <name>getMySubsystemIndex</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a91b9a5a079b9c3a1475dc306c0663071</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Subsystem &amp;</type>
      <name>getOwnerSubsystemHandle</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ad465b3041c0956e9b56d1125a5a536a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Subsystem &amp;</type>
      <name>updOwnerSubsystemHandle</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a38002be5fdac301163ab337e6f0631c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerSubsystemHandle</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a0e85206599e9ac20bee7046a27a7121c</anchor>
      <arglist>(Subsystem &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOwnerSubsystemHandle</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a0fa917f76385a9ebd88f6ef80a2864bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystem</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a3321da69a89b105421b477721a213d5e</anchor>
      <arglist>(System &amp;, SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a95a1cc6c9386eceec31a04e86e2154a0</anchor>
      <arglist>(GutsRep *r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRep</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ad52bf95d314fc609c7d8fe4d3bc62d3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GutsRep &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a583e5136c837c09bc3f6efc65e60eb1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GutsRep &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>af44ae928604f742346944d73ded8f36c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRep</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aa1e8b593dd35a37d148c5a7fb97ff27c</anchor>
      <arglist>(GutsRep &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subsystemTopologyHasBeenRealized</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ae686e632d789e19a7c84a59678cb686f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateSubsystemTopologyCache</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a81fe2a2415af6232dc58e39e2567087d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Subsystem::Guts *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aa467a8b083b7c6755d0ae665524cf8f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemTopology</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aa8722d33a3826587b87b824b0ee19ca9</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemModel</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a85c666262b65b5f69710a5af1ebf3cfc</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemInstance</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a06138e9e7575f61e4ad885a260bcbd30</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemTime</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a4d01b20e542b19ee1beab378db7e82b7</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemPosition</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>afcf544a9e23319304a8e2207c300e4c4</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemVelocity</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>afea135a8c9915c5fabeb59d0696afc58</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemDynamics</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a2ef7b8e26da0f98db20afbf84b3a6241</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemAcceleration</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a5198fac5ee95b9941875d53739630991</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeSubsystemReport</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a5c93f030431a66f7139472f9ba96ac83</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDecorativeGeometryAndAppend</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ac08d278b3b974ac528d395582c8d4de2</anchor>
      <arglist>(const State &amp;, Stage, Array_&lt; DecorativeGeometry &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createScheduledEvent</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a8d221d20e914627f571ccbe37fd83f0a</anchor>
      <arglist>(const State &amp;state, EventId &amp;eventId) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createTriggeredEvent</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a46105ceaff4b44777313bd872fa37254</anchor>
      <arglist>(const State &amp;state, EventId &amp;eventId, EventTriggerByStageIndex &amp;triggerFunctionIndex, Stage stage) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcEventTriggerInfo</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a9974bad10385833e57283f2055785051</anchor>
      <arglist>(const State &amp;, Array_&lt; EventTriggerInfo &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTimeOfNextScheduledEvent</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>ab29acc9c940a65e8a8cd1578bcf47dd8</anchor>
      <arglist>(const State &amp;, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTimeOfNextScheduledReport</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a53e6710c02d1ae093f9dc9ad015e332e</anchor>
      <arglist>(const State &amp;, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleEvents</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a4324bf2e0d8ed9edfc4e76bed80dd9ee</anchor>
      <arglist>(State &amp;, Event::Cause, const Array_&lt; EventId &gt; &amp;eventIds, const HandleEventsOptions &amp;options, HandleEventsResults &amp;results) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportEvents</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a59aea9a57c397c046132f2220e6cc575</anchor>
      <arglist>(const State &amp;, Event::Cause, const Array_&lt; EventId &gt; &amp;eventIds) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Subsystem::Guts *</type>
      <name>cloneImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a461b8a5de117c08b399c90a3ed7158cd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemTopologyImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a143988660d57f9e8fcceaef4ce3d0ea4</anchor>
      <arglist>(State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemModelImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a634ec799a990db69d4c3889a9a52afee</anchor>
      <arglist>(State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemInstanceImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a1e30371226623c62bd6195d5065013ea</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemTimeImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aebbd97bd67d8d665c0934135a2eb832a</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemPositionImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a5443ca0dbffc678e8cdabdd62a7e176f</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemVelocityImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a76f35ad96a7b513a85f9c9181f2a6bf0</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemDynamicsImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a3c997b3d282b4c3fd30a7347d3075efe</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemAccelerationImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>acae645ea5c384976123520c196d9dbc5</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeSubsystemReportImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a60f898f237f228e2ca4a13e3d602259e</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>calcDecorativeGeometryAndAppendImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a0dacad76608f01762a2cdcc523f6a4a0</anchor>
      <arglist>(const State &amp;, Stage, Array_&lt; DecorativeGeometry &gt; &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcEventTriggerInfoImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a5c17acc9966e30ca6a9117f62c6dcdf4</anchor>
      <arglist>(const State &amp;, Array_&lt; EventTriggerInfo &gt; &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcTimeOfNextScheduledEventImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a5c706e60af0e4a016355ffa8a7944814</anchor>
      <arglist>(const State &amp;, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcTimeOfNextScheduledReportImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a581d16ad4780ac681713a5d85a898107</anchor>
      <arglist>(const State &amp;, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEventsImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a0c9683e8641d1535e695b13eeb8bdd88</anchor>
      <arglist>(State &amp;, Event::Cause, const Array_&lt; EventId &gt; &amp;eventIds, const HandleEventsOptions &amp;options, HandleEventsResults &amp;results) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reportEventsImpl</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>aa991963ef72a063df94fc2638c7359e9</anchor>
      <arglist>(const State &amp;, Event::Cause, const Array_&lt; EventId &gt; &amp;eventIds) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>advanceToStage</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a0027a863909b2e6bd8822f6e7bff1cf0</anchor>
      <arglist>(const State &amp;s, Stage g) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GutsRep</name>
      <anchorfile>classSimTK_1_1Subsystem_1_1Guts.html</anchorfile>
      <anchor>a65348a69351f325dcdf42302b7ca7b47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::System</name>
    <filename>classSimTK_1_1System.html</filename>
    <class kind="class">SimTK::System::Guts</class>
    <member kind="function">
      <type>System &amp;</type>
      <name>setUpDirection</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a48108e379cbb25b518a592f5eb4dba0d</anchor>
      <arglist>(const CoordinateDirection &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>setUseUniformBackground</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aa22b56e154d4416c321c8219ff39ade0</anchor>
      <arglist>(bool useUniformBackground)</arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>setDefaultTimeScale</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a0ff6c479f189d6d161498d8276ba5846</anchor>
      <arglist>(Real tc)</arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>setDefaultLengthScale</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a65b24e83f5e4a61c7d8eef49c6196a06</anchor>
      <arglist>(Real lc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHasTimeAdvancedEvents</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ac31a77ed678547306d48b0c72df969c6</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <type>CoordinateDirection</type>
      <name>getUpDirection</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a15c8dc0ebd5d350c39ef8561823eae34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseUniformBackground</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ae06f14b32dd9d414c92255e58a842bbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultTimeScale</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aae38b5db206b4856fc0f2e47deb5809c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDefaultLengthScale</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>adb5711bd3b05e2ccc50aef4e643a1840</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTimeAdvancedEvents</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a6a69d10ac1c7953d6e95a852e9aff188</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventHandler</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>af37126f1c07e4f0436d5942cbdff72e6</anchor>
      <arglist>(ScheduledEventHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventHandler</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a02ea777ee8f406ded887c3747f5be11f</anchor>
      <arglist>(TriggeredEventHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventReporter</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ac41a6340e813fa89646b0ddac3a7fd1d</anchor>
      <arglist>(ScheduledEventReporter *handler) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventReporter</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a2dbe3e249de51d0188758685ba9826ad</anchor>
      <arglist>(TriggeredEventReporter *handler) const </arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>realizeTopology</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aafd93d926012dc3d754d63126fa75355</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>getDefaultState</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aca986159e75689b55bb63be374f4b933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State &amp;</type>
      <name>updDefaultState</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>abe10df3e1df1326164e32098a73772a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeModel</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a04ebc894406cd86fdb55d32d274f81ac</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realize</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a39adc09111d252b2253485047ee7ce30</anchor>
      <arglist>(const State &amp;state, Stage stage=Stage::HighestRuntime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a4f03913f3c308b36ae9ee0a31e1d0026</anchor>
      <arglist>(State &amp;state, Real accuracy=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectQ</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a7523e953d467c665e4808e8c88ab5af0</anchor>
      <arglist>(State &amp;state, Real accuracy=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectU</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ac86f067cd6f00d338cf1c4b773a86d07</anchor>
      <arglist>(State &amp;state, Real accuracy=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectQ</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a106082b22732f8cf58a6c5c2d6e1b59f</anchor>
      <arglist>(State &amp;state, Vector &amp;qErrEst, const ProjectOptions &amp;options, ProjectResults &amp;results) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectU</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a3014df5714167d59163c79473e08b97f</anchor>
      <arglist>(State &amp;state, Vector &amp;uErrEst, const ProjectOptions &amp;options, ProjectResults &amp;results) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prescribe</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a8515581300ce1496748a84b1f5a79c62</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prescribeQ</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a2c4aa2fffcdc6f9aa541078b3f327c03</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prescribeU</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a608f8a85ce62a78b794d3d2225c7de46</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleEvents</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a689865295cdc20f55ba2a4c078a80d0a</anchor>
      <arglist>(State &amp;state, Event::Cause cause, const Array_&lt; EventId &gt; &amp;eventIds, const HandleEventsOptions &amp;options, HandleEventsResults &amp;results) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportEvents</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aa87826365bf47122b842d55fcab0248b</anchor>
      <arglist>(const State &amp;state, Event::Cause cause, const Array_&lt; EventId &gt; &amp;eventIds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcEventTriggerInfo</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a2c2c0eba7798f37d75387a85c5b27c6c</anchor>
      <arglist>(const State &amp;state, Array_&lt; EventTriggerInfo &gt; &amp;triggerInfo) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTimeOfNextScheduledEvent</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a14bfcf5759f8088df5a5b5876dbc9551</anchor>
      <arglist>(const State &amp;state, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTimeOfNextScheduledReport</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aef441c402f8e6baea15674944853009b</anchor>
      <arglist>(const State &amp;state, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relax</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a94090d706e7373e8cf633ed6f52c8e2c</anchor>
      <arglist>(State &amp;state, Stage stage, Real accuracy=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByN</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a49bdc882a0672512d3d8543fa74ee60a</anchor>
      <arglist>(const State &amp;state, const Vector &amp;u, Vector &amp;dq) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNTranspose</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a6ff01072399415ff519145567e2f5e87</anchor>
      <arglist>(const State &amp;state, const Vector &amp;fq, Vector &amp;fu) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNPInv</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a9d75878460be0aa52382fb501de8d353</anchor>
      <arglist>(const State &amp;state, const Vector &amp;dq, Vector &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNPInvTranspose</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a1259cd226aba4ea785e55750ae8302b9</anchor>
      <arglist>(const State &amp;state, const Vector &amp;fu, Vector &amp;fq) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAllCountersToZero</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aa6624457dde5c8b7ca66a3fbe1d0b2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRealizationsOfThisStage</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a596ddf886b4da67cb626c540be63ba1d</anchor>
      <arglist>(Stage) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRealizeCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ab22400494518c82a3f7c76a98894e79b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPrescribeQCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>af2f33a3dbb6311daf8805aefa795c416</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPrescribeUCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ae6835f2ba9c74e12a365a995c575ef3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumProjectQCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a39a86d135714abce04b16abe5d92a417</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFailedProjectQCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aa9353d2a3a0ec327fc932386b2859446</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumQProjections</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a00ad0446ba8fe1b494ff5f8dd97576c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumQErrorEstimateProjections</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a3b9fb2946b388cf061e106385d8bf586</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumProjectUCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a642edc17d576f99502fe3a9bc356b0e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFailedProjectUCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a6d4b3c6e405fbd428aad410bc2d6cea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumUProjections</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>af49589140db74033d02e415348fa38f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumUErrorEstimateProjections</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a0691cdb34eda5be9eaa0f3f7177ef2e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumHandlerCallsThatChangedStage</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a011e7eff9361b2e128f7435ddd4ae87d</anchor>
      <arglist>(Stage) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumHandleEventCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a50544edf6531886812ec4994a9bf5472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumReportEventCalls</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>acdeec2292b272af23c9347d1aaef2867</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>System</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a5941f985aa91c4a13bc964c06562e68f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>System</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a0de8bdbe5c484ef5b25c9d0a42e01921</anchor>
      <arglist>(const System &amp;)</arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ad6546ff05186570385606d0342e9d886</anchor>
      <arglist>(const System &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~System</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a388f7dee9d5a987134f128822ab27eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a33f9a0687dfba4073561b8af7b638954</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getVersion</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a50c2a92c914fab816a9906b01510e46e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SubsystemIndex</type>
      <name>adoptSubsystem</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a2f1212b35fa9988617a6e3b179390baa</anchor>
      <arglist>(Subsystem &amp;child)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubsystems</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a2625005bf4b2a3dba479a192d9d4b3ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Subsystem &amp;</type>
      <name>getSubsystem</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ab9294351057026a1cdb9598b30f350cd</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Subsystem &amp;</type>
      <name>updSubsystem</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>abd488d61309a843be491384bd0fc2e05</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>const DefaultSystemSubsystem &amp;</type>
      <name>getDefaultSubsystem</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ace4d6fb1dc801bf21587ac27f0bbff07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DefaultSystemSubsystem &amp;</type>
      <name>updDefaultSubsystem</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a2225a7bd6fd66c628ed8c35077f0edca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Subsystem &amp;</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aef1e8631d4c629307d0fb8d4a42a3349</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Subsystem &amp;</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>af5e6dec5b296dfd09de479ac3534a3eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>systemTopologyHasBeenRealized</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a9935bdda9ea407bb3b669d68f93b4a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StageVersion</type>
      <name>getSystemTopologyCacheVersion</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a726f47afe785d14efca4369ebd0340d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemTopologyCacheVersion</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a3abde0d445d8c8ed23d9142b0d26c6e8</anchor>
      <arglist>(StageVersion topoVersion) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateSystemTopologyCache</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>af45e623ec7b91415aa87c060d67a3bf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDecorativeGeometryAndAppend</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>aba88dac52b3b28a184203458b00e530b</anchor>
      <arglist>(const State &amp;, Stage, Array_&lt; DecorativeGeometry &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameSystem</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a1c8a555b755c4ccf458ecdfebf13bda7</anchor>
      <arglist>(const System &amp;otherSystem) const </arglist>
    </member>
    <member kind="function">
      <type>const Guts &amp;</type>
      <name>getSystemGuts</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>ad6946d8d9988a9e4ce8c4d977e94bef6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Guts &amp;</type>
      <name>updSystemGuts</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a89c195d9f3bc604e7758e2f4d2a05165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adoptSystemGuts</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a866f6290257b3368d9b9098ffb879bd4</anchor>
      <arglist>(System::Guts *g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>System</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a14fe155e614bbe89e960d5a588b95a0a</anchor>
      <arglist>(System::Guts *g)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGuts</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a6a41998f82345fcd24169897fd74d14e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwnerHandle</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a13e58b7dfc3ebf27c5de0638be21e742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyHandle</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a4f3e37832adeb472aa44d92fa01a41d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1System.html</anchorfile>
      <anchor>a4987035570f1150fe0631dbef6dbd95b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::System::Guts</name>
    <filename>classSimTK_1_1System_1_1Guts.html</filename>
    <member kind="function">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a149dc35a29e73517159ccbe998cbc554</anchor>
      <arglist>(const String &amp;name=&quot;&lt;NONAME&gt;&quot;, const String &amp;version=&quot;0.0.0&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Guts</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a725328922f8d50e9510ccea23a18044f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getName</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a12df11f5ee46c84ee63d9a5093fefb2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const String &amp;</type>
      <name>getVersion</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a6d51d59679a00a1dcd5859cbf287d491</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHasTimeAdvancedEvents</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aa376555b93ee7676e91865f7c67e00ce</anchor>
      <arglist>(bool hasEm)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTimeAdvancedEvents</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a0a4aedc21412b626d24b29a52ad3f496</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>getDefaultState</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>af03fd11ed50d63f18f271eb77b980821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State &amp;</type>
      <name>updDefaultState</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a938aaf4251d95d6ed8236cc85a45c24d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realize</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aba33b580356ac752983edf72352397a3</anchor>
      <arglist>(const State &amp;s, Stage g=Stage::HighestRuntime) const </arglist>
    </member>
    <member kind="function">
      <type>SubsystemIndex</type>
      <name>adoptSubsystem</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ac61bd66886e84cfe8ffd35f1a7238cbd</anchor>
      <arglist>(Subsystem &amp;child)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSubsystems</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>abd731fb8f355da1a593ce0cbc2d06935</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Subsystem &amp;</type>
      <name>getSubsystem</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aa89571cd90ae7aa3b6f463141fc70713</anchor>
      <arglist>(SubsystemIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Subsystem &amp;</type>
      <name>updSubsystem</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a529179d21d0c1b6408d3aea77c0d369c</anchor>
      <arglist>(SubsystemIndex)</arglist>
    </member>
    <member kind="function">
      <type>const System &amp;</type>
      <name>getSystem</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a157606d4df37cf0ed0ce33f88d498cdb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>System &amp;</type>
      <name>updSystem</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ab76247c5cae7b6f42c5a2b688b0c06f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerHandle</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ad0eb659bd674e6f68a4e4c703700ac62</anchor>
      <arglist>(System &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOwnerHandle</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a06a85c57ab7a2cc18cad62be634ed51c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a1ac5ea3f73b79a94e0aecf48cace5dea</anchor>
      <arglist>(class GutsRep *r)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRep</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a6108ab996135a894643942a29f56032b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GutsRep &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a3dd615da2da1a2364ca1ab250d5acb5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GutsRep &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a1a13c6ffea5d0df31580b571abad9414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>systemTopologyHasBeenRealized</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>acd823acc6ae8b78c1898a14a9da21fa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>StageVersion</type>
      <name>getSystemTopologyCacheVersion</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ac7113c1246d64e792f51a65b37b9888c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemTopologyCacheVersion</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a8e2eb16ee97038bff9d148cf200c1901</anchor>
      <arglist>(StageVersion topoVersion) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateSystemTopologyCache</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a8b2f2e6c92963415de622a5a60b325b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>System::Guts *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ac9ccccf1cdfa02ecff32cc692d1c421f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>realizeTopology</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>af10767d7d33cf0d04d595b3bcc158ecb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeModel</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>af56d9ad8dfb79df6c87c7273f34564b6</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeInstance</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a103390866ac3a62458636b3745759008</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeTime</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a110e0fe6073e21543df9ec408cc17d29</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizePosition</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a68b608762553476a1eb88c91b6ded068</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeVelocity</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ab0a89de8a721e74069f0b3adcf4c4363</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeDynamics</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ac6202fa8994b4b2831d5a526870c5219</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeAcceleration</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ae75187c554bf9aa13b8e77b2b0c264f0</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realizeReport</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a4b144a0d863af47ac7f34d2bd636912e</anchor>
      <arglist>(const State &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByN</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a969c37692f68057e4db39f83302ed313</anchor>
      <arglist>(const State &amp;state, const Vector &amp;u, Vector &amp;dq) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNTranspose</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aa8dbc4b778b2c075ba64e2fea767f68f</anchor>
      <arglist>(const State &amp;state, const Vector &amp;fq, Vector &amp;fu) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNPInv</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a57b6d0f481fd1ab70df6d43a6f3c57aa</anchor>
      <arglist>(const State &amp;state, const Vector &amp;dq, Vector &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNPInvTranspose</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aa7682735f76a1be99e4c3834e7a0a6bf</anchor>
      <arglist>(const State &amp;state, const Vector &amp;fu, Vector &amp;fq) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prescribeQ</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aaa8071e63c332fccb9920d46959308c5</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prescribeU</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a346b38a5d05c1f5e68c5a1f3f81d8b40</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectQ</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a413beca18c03c209f9febdcbd50a0b3e</anchor>
      <arglist>(State &amp;, Vector &amp;qErrEst, const ProjectOptions &amp;options, ProjectResults &amp;results) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectU</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a356b229b474adda8b15f11385e8e3f30</anchor>
      <arglist>(State &amp;, Vector &amp;uErrEst, const ProjectOptions &amp;options, ProjectResults &amp;results) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleEvents</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ac5c93673091e482e32cb381703e7e54f</anchor>
      <arglist>(State &amp;, Event::Cause, const Array_&lt; EventId &gt; &amp;eventIds, const HandleEventsOptions &amp;options, HandleEventsResults &amp;results) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportEvents</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a9a18d90808ecade55dbe42f73f5c6fcb</anchor>
      <arglist>(const State &amp;, Event::Cause, const Array_&lt; EventId &gt; &amp;eventIds) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcEventTriggerInfo</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a787fb1db4f8b65481346de4f6c93aaeb</anchor>
      <arglist>(const State &amp;, Array_&lt; EventTriggerInfo &gt; &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTimeOfNextScheduledEvent</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aef8b4dddb275efe68b9d795fd2bce135</anchor>
      <arglist>(const State &amp;, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcTimeOfNextScheduledReport</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a57dd0c99381864d770063dcb07cbebfc</anchor>
      <arglist>(const State &amp;, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDecorativeGeometryAndAppend</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aefb57fcaa09dec0b9be401c24ccfa600</anchor>
      <arglist>(const State &amp;, Stage, Array_&lt; DecorativeGeometry &gt; &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Guts</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a543d30eff541a488f6e85ab30415dbc4</anchor>
      <arglist>(const Guts &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual System::Guts *</type>
      <name>cloneImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a06353b3cd3096f6b53046da650573189</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeTopologyImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a33b0dcf2743f7a8e47d625cc7699bb63</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeModelImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aef3a4ffca2a7bff5879465ed8b85ec65</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeInstanceImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ad8ca1890d344380d7aabecd162967bcf</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeTimeImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aacb80e952121c98c0e066ab805281162</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizePositionImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a6fd577298fbfc431fb550b608b276a1b</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeVelocityImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ae474f06718bc5a0854606645ee3d7062</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeDynamicsImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aad67e82e4fe575e97975063bdb3ea6df</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeAccelerationImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a3a6c6406d07c817f5b2df7493ea62312</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>realizeReportImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a0270433e4c513690b925004610b97522</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyByNImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ab9cdfd7d5c495864e7eae92c7236b0ef</anchor>
      <arglist>(const State &amp;state, const Vector &amp;u, Vector &amp;dq) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyByNTransposeImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>acdfae87235c2ce1b1e2f4b381a26808e</anchor>
      <arglist>(const State &amp;state, const Vector &amp;fq, Vector &amp;fu) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyByNPInvImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a95e884170fe0e360d442fbfac3e50b4b</anchor>
      <arglist>(const State &amp;state, const Vector &amp;dq, Vector &amp;u) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyByNPInvTransposeImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a4a7406704ef8a2383a6b6ea3daec5382</anchor>
      <arglist>(const State &amp;state, const Vector &amp;fu, Vector &amp;fq) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prescribeQImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a646da99bc738d803747de4b9876983c2</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prescribeUImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a4dd432d72fc3a6756658604938d24b24</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>projectQImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a3122cdbdce66be461aba51a00b60be1d</anchor>
      <arglist>(State &amp;state, Vector &amp;qErrEst, const ProjectOptions &amp;options, ProjectResults &amp;results) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>projectUImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>af24ed1cc26337194b8afa5376e09bf2a</anchor>
      <arglist>(State &amp;state, Vector &amp;uErrEst, const ProjectOptions &amp;options, ProjectResults &amp;results) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleEventsImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a952a80531089b6e8557acaea0884ae77</anchor>
      <arglist>(State &amp;state, Event::Cause cause, const Array_&lt; EventId &gt; &amp;eventIds, const HandleEventsOptions &amp;options, HandleEventsResults &amp;results) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>reportEventsImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>ab979006aad699bc22237960d6d4981d5</anchor>
      <arglist>(const State &amp;state, Event::Cause cause, const Array_&lt; EventId &gt; &amp;eventIds) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>calcEventTriggerInfoImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aa94e0f88aae3a9e9a962c478e7ffff37</anchor>
      <arglist>(const State &amp;state, Array_&lt; EventTriggerInfo &gt; &amp;info) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>calcTimeOfNextScheduledEventImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a5e61bd234b8242056f9ef6d36e4be24a</anchor>
      <arglist>(const State &amp;state, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>calcTimeOfNextScheduledReportImpl</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>aad3f1014033ecd581c9032037691dce8</anchor>
      <arglist>(const State &amp;state, Real &amp;tNextEvent, Array_&lt; EventId &gt; &amp;eventIds, bool includeCurrentTime) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GutsRep</name>
      <anchorfile>classSimTK_1_1System_1_1Guts.html</anchorfile>
      <anchor>a65348a69351f325dcdf42302b7ca7b47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DefaultSystemSubsystem</name>
    <filename>classSimTK_1_1DefaultSystemSubsystem.html</filename>
    <base>SimTK::Subsystem</base>
    <member kind="function">
      <type></type>
      <name>DefaultSystemSubsystem</name>
      <anchorfile>classSimTK_1_1DefaultSystemSubsystem.html</anchorfile>
      <anchor>a36a7876b09a20245e34dc1d8db64509a</anchor>
      <arglist>(System &amp;sys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventHandler</name>
      <anchorfile>classSimTK_1_1DefaultSystemSubsystem.html</anchorfile>
      <anchor>ab3cc108e1564e79f887fafef6c0aa7fa</anchor>
      <arglist>(ScheduledEventHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventHandler</name>
      <anchorfile>classSimTK_1_1DefaultSystemSubsystem.html</anchorfile>
      <anchor>a96d540a82ec265c1d940fed7b3dbf553</anchor>
      <arglist>(TriggeredEventHandler *handler)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventReporter</name>
      <anchorfile>classSimTK_1_1DefaultSystemSubsystem.html</anchorfile>
      <anchor>a05ec90d6f9c58ff65ad34ff535514df9</anchor>
      <arglist>(ScheduledEventReporter *handler) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addEventReporter</name>
      <anchorfile>classSimTK_1_1DefaultSystemSubsystem.html</anchorfile>
      <anchor>aed82e463b0716fd5aa91f1a39611bdf6</anchor>
      <arglist>(TriggeredEventReporter *handler) const </arglist>
    </member>
    <member kind="function">
      <type>EventId</type>
      <name>createEventId</name>
      <anchorfile>classSimTK_1_1DefaultSystemSubsystem.html</anchorfile>
      <anchor>a5d64b9f0fa39080944edb6003b657ea5</anchor>
      <arglist>(SubsystemIndex subsys, const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findSubsystemEventIds</name>
      <anchorfile>classSimTK_1_1DefaultSystemSubsystem.html</anchorfile>
      <anchor>ad67ce839e31c49002237c582ab40f3a1</anchor>
      <arglist>(SubsystemIndex subsys, const State &amp;state, const Array_&lt; EventId &gt; &amp;allEvents, Array_&lt; EventId &gt; &amp;eventsForSubsystem) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ProjectOptions</name>
    <filename>classSimTK_1_1ProjectOptions.html</filename>
    <member kind="enumeration">
      <name>Option</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a6abd6483a25562d223bff67a53d0bb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a6abd6483a25562d223bff67a53d0bb45ad0f3728a5b630d08cf242fae831b52b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LocalOnly</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a6abd6483a25562d223bff67a53d0bb45a466314b1fd15a1c5bd1cbfc4c9bb5b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DontThrow</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a6abd6483a25562d223bff67a53d0bb45adc87d850cb45b80ecd1efb60000bcfe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UseInfinityNorm</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a6abd6483a25562d223bff67a53d0bb45a192101597a7f18057dc31361ae674c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ForceProjection</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a6abd6483a25562d223bff67a53d0bb45a91042fd5de3e915fc5cd5680e8069166</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ForceFullNewton</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a6abd6483a25562d223bff67a53d0bb45a7790ec65d6a42a32168747e89932e833</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectOptions</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>aac491a996e4e9149d4361bde6aef1e62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectOptions</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a7f6af5ccd6f77aa888d5395db0357c7a</anchor>
      <arglist>(Real accuracy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectOptions</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a023878fc55b96554ac18ac48313c96e9</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a48e0a26e4252e79fc9dd893818dea620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>setRequiredAccuracy</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a6944ad7c29876f1ec9ab63dbf8e1fbeb</anchor>
      <arglist>(Real accuracy)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>setOvershootFactor</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a9cc3b3d277595a0eb374738184c3af54</anchor>
      <arglist>(Real overshoot)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>setProjectionLimit</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>aaa71871405fc83b8ef90af949a305615</anchor>
      <arglist>(Real limit)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>clearOption</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a4b6e8cac77f7cde0f3066c88305a6aea</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>setOption</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>afc28645e98cf36d20d20bda508dcbe27</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRequiredAccuracy</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>ac7166a01f52cebc71c270e13132c61ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOvershootFactor</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a3f4c5c30ab11e003b34d1db0cb13dd14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getProjectionLimit</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>aeaaf2aaf4829517cee162680a905555b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptionSet</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a2655f9096952fc2367895c1ca30c2153</anchor>
      <arglist>(Option opt) const </arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a37ee85042c2bed638241c779af36239f</anchor>
      <arglist>(const ProjectOptions &amp;opts)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a006cb4a4a9f57f807e634d86d4282209</anchor>
      <arglist>(const ProjectOptions &amp;opts)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>ab7de0911875198f089c9a9a0435870f2</anchor>
      <arglist>(const ProjectOptions &amp;opts)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>aa488a0ee2cccf7649b6e06fd5717ed86</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>ProjectOptions &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a48bdde30bc6044abfe3d0911d9eeb4f8</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>getDefaultRequiredAccuracy</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>aa25abf3c51f25728cb341840f18f015d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>getDefaultOvershootFactor</name>
      <anchorfile>classSimTK_1_1ProjectOptions.html</anchorfile>
      <anchor>a0d77ab3ce757f60d3a0bbb53fcedcf7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ProjectResults</name>
    <filename>classSimTK_1_1ProjectResults.html</filename>
    <member kind="enumeration">
      <name>Status</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>ab6548cb2dda80581a65a292c02471fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Invalid</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>ab6548cb2dda80581a65a292c02471fb8af6c3f302cd39297c06f0c091f78816fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Succeeded</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>ab6548cb2dda80581a65a292c02471fb8a8fd3abf8de79b049886bade01be4e66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FailedToAchieveAccuracy</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>ab6548cb2dda80581a65a292c02471fb8a7e14d1510ddbbc58c03b96a782279a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FailedToConverge</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>ab6548cb2dda80581a65a292c02471fb8a85cbb41bc4cff74ec2989aecc3d8b4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectResults</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a1b406fea6764fa7d16916c0099f3e4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProjectResults &amp;</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>ac169ff15e7ad58f3033465a6c05f9de3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>aa11d2f7fd1c3ebc50d5f6c74faa982b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>getExitStatus</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a29326f51a4c631c7205f5d018f535efa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAnyChangeMade</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a67244b58ff3b6e8ebe27dad5af1c4a8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIterations</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>ae4632b504dc3df2a7d1243c56c13e503</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getNormOnEntrance</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a479f72c46aa5f5c2ebcb7b013e5731e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getNormOnExit</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>ac91458c6d35f16cfe12aafd05a62febb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorstErrorOnEntrance</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a7c7a996711c5ce8a3bfc0543b6919de6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getProjectionLimitExceeded</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a02b49885e8f0fafe9c23bdd60b7b2cf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProjectResults &amp;</type>
      <name>setExitStatus</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a6c6181d13a9df7901f95cce947b43e53</anchor>
      <arglist>(Status status)</arglist>
    </member>
    <member kind="function">
      <type>ProjectResults &amp;</type>
      <name>setAnyChangeMade</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>abeb713775018a6e2dd87714d9a0a44ec</anchor>
      <arglist>(bool changeMade)</arglist>
    </member>
    <member kind="function">
      <type>ProjectResults &amp;</type>
      <name>setProjectionLimitExceeded</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a7368553dce304cb2dd4d8cb77057c302</anchor>
      <arglist>(bool limitExceeded)</arglist>
    </member>
    <member kind="function">
      <type>ProjectResults &amp;</type>
      <name>setNumIterations</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a3765faf43cc469886e27472efc4667b4</anchor>
      <arglist>(int numIterations)</arglist>
    </member>
    <member kind="function">
      <type>ProjectResults &amp;</type>
      <name>setNormOnEntrance</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a698b68d2693d09f258471180d4066e2f</anchor>
      <arglist>(Real norm, int worstError)</arglist>
    </member>
    <member kind="function">
      <type>ProjectResults &amp;</type>
      <name>setNormOnExit</name>
      <anchorfile>classSimTK_1_1ProjectResults.html</anchorfile>
      <anchor>a403368e6bdd571f26fbbc794a4e17f78</anchor>
      <arglist>(Real norm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RealizeOptions</name>
    <filename>classSimTK_1_1RealizeOptions.html</filename>
    <member kind="enumeration">
      <name>Option</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>ac35410505ef9d9414204e3111bcecbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>ac35410505ef9d9414204e3111bcecbbcaa006828cb531c98407dace45a4158fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DontThrow</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>ac35410505ef9d9414204e3111bcecbbca42d08a1099250a4b9db762a2f98fcc5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealizeOptions</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>a11217c0ddc57faff13d2031d51a18bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealizeOptions</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>a5188718e3aaf4c8b48b094951e0d8dca</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>aa86c13add6f215291e7512ecd3069c8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>ac8b92505fd3fa61dc016b389c8a859b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOptionSet</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>aa38c7490895b210c31136828c6b3beaa</anchor>
      <arglist>(Option opt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>a0a790d1edef0911ce787b3e6b58c4f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearOption</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>ae0edbb43624c4c7a4697bb311be5d856</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>a3f419adb067c306ca069e657c125707f</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>RealizeOptions &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>a9e89b7718b5889da70f4f7efc0b387e1</anchor>
      <arglist>(RealizeOptions opts)</arglist>
    </member>
    <member kind="function">
      <type>RealizeOptions &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>a20fa4926c1eea7153efadba4215c2640</anchor>
      <arglist>(RealizeOptions opts)</arglist>
    </member>
    <member kind="function">
      <type>RealizeOptions &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>a27ae7a1d0675c14d2006ee8c06435a32</anchor>
      <arglist>(Option opt)</arglist>
    </member>
    <member kind="function">
      <type>RealizeOptions &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1RealizeOptions.html</anchorfile>
      <anchor>a822a27877c551d3db431b87484ed789e</anchor>
      <arglist>(Option opt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RealizeResults</name>
    <filename>classSimTK_1_1RealizeResults.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::Mat</name>
    <filename>classSimTK_1_1Mat.html</filename>
    <templarg>M</templarg>
    <templarg>N</templarg>
    <templarg>ELT</templarg>
    <templarg>CS</templarg>
    <templarg>RS</templarg>
    <class kind="struct">SimTK::Mat::EltResult</class>
    <class kind="struct">SimTK::Mat::Result</class>
    <class kind="struct">SimTK::Mat::SubMat</class>
    <class kind="struct">SimTK::Mat::Substitute</class>
    <member kind="enumvalue">
      <name>NRows</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81aed1c2516345210a98441e515adf1491f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NCols</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a1fcc4cce15c7dc31b88533933fde3757</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MinDim</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81af6a6fc8a3d38e032ffaf52a5e358fd9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSpacing</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a27fc7b5604dacb9eedeef01198463960</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSpacing</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a91607a34c56f039489106477fcfcecac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NPackedElements</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a1270b3bef89a2edefdb74256f2ebe8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualElements</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a59ef6d537d048a12ec3db14e3c82243c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualScalars</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81ac7439292b5ebe0cd3b49dcd9d1a3d86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImagOffset</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a14bbe1f7434e0350e02342c35a84cda5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealStrideFactor</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a525b7edea493ad6d5fb3c61757f1c0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArgDepth</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a1ded0c74f954a213c6c7214f9de56780</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsScalar</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a67b340abdf1f6b708e9b2b4e2e400b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsULessScalar</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81af9f2283e7a1e9e3f0cacdd21826b0aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsNumber</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a6e16b912c2dfd4e95612f4fce1f89c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsStdNumber</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81abffb78c56140f27cbed308f00994bb32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPrecision</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a5e54cc9b11813d954a7eccb990ff26e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SignInterpretation</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9d5d5b39f2f26327081406be46fb3d81a9546d2f57bc00b074e95fd2e6e1aa8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, E, CS, RS &gt;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a6f2421d40d41c33fd833248060c8beb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, ENeg, CS, RS &gt;</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a277fa95f8e821dfda695121715cec9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, EWithoutNegator, CS, RS &gt;</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ae8a35b8bde4a34b61532c2d64e977dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, EReal, CS *CNT&lt; E &gt;::RealStrideFactor, RS *CNT&lt; E &gt;::RealStrideFactor &gt;</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac5d6421e7a18cba31f69efee1642dd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, EImag, CS *CNT&lt; E &gt;::RealStrideFactor, RS *CNT&lt; E &gt;::RealStrideFactor &gt;</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad9cb6efc99cb8d68b8f5dcf0de22d4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, EComplex, CS, RS &gt;</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>acdfca6c1b273d11ba66f5e57aba5b780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; N, M, EHerm, RS, CS &gt;</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aef5efe848398d53aba2b0860a2589531</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; N, M, E, RS, CS &gt;</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a5ec1730573a75d69d19b911bc195b014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>E</type>
      <name>TElement</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af1229a351616e91ff78d29a9f601c67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, E, CS &gt;</type>
      <name>TRow</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a6d68b382d22f097026db4901c71c5597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, E, RS &gt;</type>
      <name>TCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a56e36aa5c1ae0a8a5835f435ce3ed86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; MinDim, E, RS+CS &gt;</type>
      <name>TDiag</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a956fdad138444b1a58edc04dc7b3e620</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, ESqrt, M, 1 &gt;</type>
      <name>TSqrt</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac6ff355a5685251cc0275f7b1af40768</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, EAbs, M, 1 &gt;</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a33803159b9afd1534d547cc8a3797f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, EStandard, M, 1 &gt;</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a3a4021304835bbcf202e2c91a437a1e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; N, M, EInvert, N, 1 &gt;</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ab1a2436edabf2ff08ebc43c5fa9e4915</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, ENormalize, M, 1 &gt;</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a700e9c1c2801c21a1de3a8d4d350efe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; N, ESqHermT &gt;</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a445178b4fb438830e7d6137fe40f68b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, ESqTHerm &gt;</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a6c238d6acc462048e94968401efb1883</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, E, M, 1 &gt;</type>
      <name>TPacked</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a523742bb010f3f8fdf6b3573c24055a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M-1, N, E, M-1, 1 &gt;</type>
      <name>TDropRow</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aa8fd0c2490f6a4b070924d5c64bfbc4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N-1, E, M, 1 &gt;</type>
      <name>TDropCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac224fd04608b7973fd66ef859fea67c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M-1, N-1, E, M-1, 1 &gt;</type>
      <name>TDropRowCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a19a89676e5be08066b8ce8df4a6b685d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M+1, N, E, M+1, 1 &gt;</type>
      <name>TAppendRow</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a90f421f6ae04de16d19af931aec18637</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N+1, E, M, 1 &gt;</type>
      <name>TAppendCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a19c87c8e05e8fbd16672343e06e5a341</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M+1, N+1, E, M+1, 1 &gt;</type>
      <name>TAppendRowCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>acd51c59501eca17fce8993bd70958b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalar</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a4840b7c6857fe3977ba8cbaa51a6d46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EULessScalar</type>
      <name>ULessScalar</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>abf590e2b1a6a499c839a3c2e8d7f2c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ENumber</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a82f2cf911d8caba7cd4b7e67ebb6f90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EStdNumber</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a222012c773e236d370f79d722ae4e7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EPrecision</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af0d3b77be65e3fe5eb7c4789aceb18f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalarNormSq</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a4a15f46a835d23ac38629d50bcb5f82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>THerm</type>
      <name>TransposeType</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a2d3d54a4edcfe46a405469074a9b27a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a46698af64fb5247dc2bfbfcfd535e43b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TSqrt</type>
      <name>sqrt</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9426888e5e92178b5424aca5311eec4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af7fd26071129aac44cd0f8c5e26e2d62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TStandard</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af672940ef7ee5734ae0923c47affc0c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a0198d43d287a382583142e94a6193427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a78ed93ebb3ee14cd595e04129fa7f12c</anchor>
      <arglist>(const Mat &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aa01b165c41980b61822f9a75f2b503ca</anchor>
      <arglist>(const Mat &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a08e07809ed841d770e840e7953229cb2</anchor>
      <arglist>(const SymMat&lt; M, ELT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a86c093b3824e450ae5c04fd06942abd9</anchor>
      <arglist>(const Mat&lt; M, N, E, CSS, RSS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad935eedc0438fa1363a74cd1d5df936d</anchor>
      <arglist>(const Mat&lt; M, N, ENeg, CSS, RSS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad7bdb0b1866f04ebe536c8329947f006</anchor>
      <arglist>(const Mat&lt; M, N, EE, CSS, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aaac805beed030a0c2d98fb821b8122ee</anchor>
      <arglist>(const E &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad9ae28643e78b8be33abb64265dff2c6</anchor>
      <arglist>(const ENeg &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ab1674c00b0bd799326cfa5eaf8c1425c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a72ec083cfa58bd63957cd4ccf7e186a0</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af3653282a18649d504d37f855f977c50</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a3e3ec5dc0196edfe840e03c14ec215ae</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad2874b38c861a062158a7eb0a0744507</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a73e255e3235c54b9efb5ad8521fd9963</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a3ece64d8fe1453b2c0fd535cd128c39b</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a1f14d6dd4d32cc351ed66bec9875e887</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a60ea06b0aa5610b9b42f1f624d711c60</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a0a4d600db39665c9a4a5f8d1b0f0ba05</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>abd84e05a1929ace5e97b99227079e36d</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9, const E &amp;e10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af900ad8ea79b61b4a1e0f97ce23c62e1</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9, const E &amp;e10, const E &amp;e11)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aaa8c353a5e97bac06a917373e558bfe8</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9, const E &amp;e10, const E &amp;e11, const E &amp;e12)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac72ca542163d3f544a6d572be69f4be4</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9, const E &amp;e10, const E &amp;e11, const E &amp;e12, const E &amp;e13)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a095ac5d1c9b9e10dbb171c97058630e8</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9, const E &amp;e10, const E &amp;e11, const E &amp;e12, const E &amp;e13, const E &amp;e14)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a84dc1ce8542255f91e207c5fdca07112</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9, const E &amp;e10, const E &amp;e11, const E &amp;e12, const E &amp;e13, const E &amp;e14, const E &amp;e15)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad85f3d42a6095b3524fcfe2f97aeb440</anchor>
      <arglist>(const TRow &amp;r0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad90ef6f6cab8147409a97e6179587940</anchor>
      <arglist>(const TRow &amp;r0, const TRow &amp;r1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a6fa6c0a0b610ef479a74ac2bd4e32d7a</anchor>
      <arglist>(const TRow &amp;r0, const TRow &amp;r1, const TRow &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>afa49bf35181091cc2fb497bceb42c4e4</anchor>
      <arglist>(const TRow &amp;r0, const TRow &amp;r1, const TRow &amp;r2, const TRow &amp;r3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a2e1eee42d4bd99f669882fbeab667f32</anchor>
      <arglist>(const TRow &amp;r0, const TRow &amp;r1, const TRow &amp;r2, const TRow &amp;r3, const TRow &amp;r4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a7ac3b990e45897995e6436a8f1e3d1c8</anchor>
      <arglist>(const TRow &amp;r0, const TRow &amp;r1, const TRow &amp;r2, const TRow &amp;r3, const TRow &amp;r4, const TRow &amp;r5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a46e7534d70680ab3f152fe3defc23a8f</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a41101415e9112ccadb187b1ac20ef838</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r0, const Row&lt; N, EE, SS &gt; &amp;r1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a651d7dceee897c6bb80ed8e3569fe5b9</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r0, const Row&lt; N, EE, SS &gt; &amp;r1, const Row&lt; N, EE, SS &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ab3f4d08e2ad44e692f4a0f5e00e11981</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r0, const Row&lt; N, EE, SS &gt; &amp;r1, const Row&lt; N, EE, SS &gt; &amp;r2, const Row&lt; N, EE, SS &gt; &amp;r3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a318373a7b406a07d603a1ad04aab674a</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r0, const Row&lt; N, EE, SS &gt; &amp;r1, const Row&lt; N, EE, SS &gt; &amp;r2, const Row&lt; N, EE, SS &gt; &amp;r3, const Row&lt; N, EE, SS &gt; &amp;r4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>afc58e45d71258a5d3c6558997642e15e</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r0, const Row&lt; N, EE, SS &gt; &amp;r1, const Row&lt; N, EE, SS &gt; &amp;r2, const Row&lt; N, EE, SS &gt; &amp;r3, const Row&lt; N, EE, SS &gt; &amp;r4, const Row&lt; N, EE, SS &gt; &amp;r5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a1d980d16656901eda93954e7d97f4895</anchor>
      <arglist>(const TCol &amp;r0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>addb7337a56ef10eae5d851cb1cb56826</anchor>
      <arglist>(const TCol &amp;r0, const TCol &amp;r1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad0b35f6d365a1f16f456d012394c7e94</anchor>
      <arglist>(const TCol &amp;r0, const TCol &amp;r1, const TCol &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a1b148770369cfae485992fe795eaa87f</anchor>
      <arglist>(const TCol &amp;r0, const TCol &amp;r1, const TCol &amp;r2, const TCol &amp;r3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a70ee82bdcd08e96e3d4d6f2644a0e7c6</anchor>
      <arglist>(const TCol &amp;r0, const TCol &amp;r1, const TCol &amp;r2, const TCol &amp;r3, const TCol &amp;r4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a50f35a6de273acca4b2e6bbe012671dc</anchor>
      <arglist>(const TCol &amp;r0, const TCol &amp;r1, const TCol &amp;r2, const TCol &amp;r3, const TCol &amp;r4, const TCol &amp;r5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a5affd238188daff9b67e807d2bca9eba</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aee1863afa2e55e7fc3b40b0bef13422e</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r0, const Vec&lt; M, EE, SS &gt; &amp;r1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af0d10afa8f8175b07f87bdaa86d387e6</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r0, const Vec&lt; M, EE, SS &gt; &amp;r1, const Vec&lt; M, EE, SS &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a485b63a185e5e879e88a9a08b83a191b</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r0, const Vec&lt; M, EE, SS &gt; &amp;r1, const Vec&lt; M, EE, SS &gt; &amp;r2, const Vec&lt; M, EE, SS &gt; &amp;r3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad5e57e3ce57f32572bc31c38ab7d2b39</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r0, const Vec&lt; M, EE, SS &gt; &amp;r1, const Vec&lt; M, EE, SS &gt; &amp;r2, const Vec&lt; M, EE, SS &gt; &amp;r3, const Vec&lt; M, EE, SS &gt; &amp;r4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ae72f8c3fcbc324d6f75c517fda4aec31</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r0, const Vec&lt; M, EE, SS &gt; &amp;r1, const Vec&lt; M, EE, SS &gt; &amp;r2, const Vec&lt; M, EE, SS &gt; &amp;r3, const Vec&lt; M, EE, SS &gt; &amp;r4, const Vec&lt; M, EE, SS &gt; &amp;r5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aa06e0a93402b3c2e376b64c343c3b512</anchor>
      <arglist>(const EE *p)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a546e13ac17fc8220d8ec16c4aad88943</anchor>
      <arglist>(const Mat&lt; M, N, EE, CSS, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a14f90d636f25a959790c99b1da544a5e</anchor>
      <arglist>(const EE *p)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a165c030a7a2e2f455ceea585fd6489b4</anchor>
      <arglist>(const Mat&lt; M, N, EE, CSS, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a5ff1139fd3dce039ad7847065bb640ef</anchor>
      <arglist>(const Mat&lt; M, N, negator&lt; EE &gt;, CSS, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aca39bc36dedba2d83f71d49df7bf4c30</anchor>
      <arglist>(const Mat&lt; M, N, EE, CSS, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a46b33ee071412b812e59659201b16a1e</anchor>
      <arglist>(const Mat&lt; M, N, negator&lt; EE &gt;, CSS, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a8b4dded055349d556534fe1f9198867c</anchor>
      <arglist>(const Mat&lt; N, N, EE, CSS, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>Result&lt; Mat&lt; M, N, E2, CS2, RS2 &gt; &gt;::Add</type>
      <name>conformingAdd</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>acce7a229576a3cd4e215a5dc23d5cb09</anchor>
      <arglist>(const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Result&lt; Mat&lt; M, N, E2, CS2, RS2 &gt; &gt;::Sub</type>
      <name>conformingSubtract</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ae9aa8c63a148848841e7052c7675117f</anchor>
      <arglist>(const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, E2, CS2, RS2 &gt;::template Result&lt; Mat &gt;::Sub</type>
      <name>conformingSubtractFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a4f42ca0efdd845149cc2fcffe4b5606f</anchor>
      <arglist>(const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; E2 &gt;::Mul</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ab561af474825ef03b4af276ade9efe37</anchor>
      <arglist>(const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; E2 &gt;::Dvd</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a8d95bae5cb4142d437709a73c1696a82</anchor>
      <arglist>(const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Result&lt; SymMat&lt; M, E2, RS2 &gt; &gt;::Add</type>
      <name>conformingAdd</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a629e25c226c023e046044199d00df78b</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;sy) const </arglist>
    </member>
    <member kind="function">
      <type>Result&lt; SymMat&lt; M, E2, RS2 &gt; &gt;::Sub</type>
      <name>conformingSubtract</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a21e91299f3076139dbf58d32d526cd65</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;sy) const </arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, E2, RS2 &gt;::template Result&lt; Mat &gt;::Sub</type>
      <name>conformingSubtractFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a8483ff5416af56e6c2c62d397a617b1b</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;sy) const </arglist>
    </member>
    <member kind="function">
      <type>Result&lt; Mat&lt; N, N2, E2, CS2, RS2 &gt; &gt;::Mul</type>
      <name>conformingMultiply</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af0d046fd622b63845b9049fb255fbf24</anchor>
      <arglist>(const Mat&lt; N, N2, E2, CS2, RS2 &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M2, M, E2, CS2, RS2 &gt;::template Result&lt; Mat &gt;::Mul</type>
      <name>conformingMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a64a169bc9aaf4209ffc0f6a0e2a9c263</anchor>
      <arglist>(const Mat&lt; M2, M, E2, CS2, RS2 &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>Result&lt; Mat&lt; M2, N, E2, CS2, RS2 &gt; &gt;::Dvd</type>
      <name>conformingDivide</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aec7261a668d20d9803bc7bbd4c68b4d3</anchor>
      <arglist>(const Mat&lt; M2, N, E2, CS2, RS2 &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M2, N, E2, CS2, RS2 &gt;::template Result&lt; Mat &gt;::Dvd</type>
      <name>conformingDivideFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a7cafed4bdbb7763005b3677e5b601f0d</anchor>
      <arglist>(const Mat&lt; M2, N, E2, CS2, RS2 &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>const TRow &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>afbad570edd00e7fd82f6fe59c68fba20</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>TRow &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ada85341cbcd777b03cf0aecb5be54679</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const TCol &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a2f281b88c90d1f07c1ec882ee6d2792f</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>TCol &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a729be4c90f074b09671cb0babde787e8</anchor>
      <arglist>(int j)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aad835dd1acd821c4aa120452600f2553</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a2c1589e3cf0f2afa9e1a5c8f8ca43541</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>normSqr</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a8f34b0a73f1997d88d542e9f31002a2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; ScalarNormSq &gt;::TSqrt</type>
      <name>norm</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9f75bcccc4550f03ba5cc7068af35ce0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNormalize</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a038af8d41a330e1afba3d9ada1870cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad5d31751658e1c888e0a703acfca4923</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Mat &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ae3c5e8cec47aef8948beb9792a67e8ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a96485551f543c745aa9741a65c6ab236</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a6100b7fcf5abe106505412dc023b6f99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const THerm &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad34aa4ffc0a01399b96ddb12aa19faa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a5e990f48f3610f38bc07d392c74cc80f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a1e1196e2e7a6f5bbcf662d80b17295a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>updNegate</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aa49cea7e6ecd158ed3b095ccdd9ebd70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad35d793f74658269d3ec07375f3ed9ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm &amp;</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a7563cd32d9122374cc23dee6abee8f53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>afe4bc635f15ce46488e5ba62e1a1d4dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TPosTrans &amp;</type>
      <name>updPositionalTranspose</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a8b97309e930356b4cee24a3a89b07933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a7dfa3b29428e68f9c005410c656c97ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a8afdda1cecb8a28f7d68dfa513a6860f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a49e95e22ff0811c008b92be59889e5a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aa0be6880c67a146ebe3a768d3a10d4a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TWithoutNegator &amp;</type>
      <name>castAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>abb95e12dfe5c97911995ada0cd17e966</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TWithoutNegator &amp;</type>
      <name>updCastAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aa50a0e77ff033d1ae7ae2a9cc4bd1f8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TRow &amp;</type>
      <name>row</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aeb0d5caaad53a170858643d6e8f9be40</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>TRow &amp;</type>
      <name>row</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a731fda138d0baa893e93256e233af009</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const TCol &amp;</type>
      <name>col</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a87d916168dd45ec3cb7abf0fa5589465</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>TCol &amp;</type>
      <name>col</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ae32e65240a13926d09aa9bb6066f2998</anchor>
      <arglist>(int j)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>elt</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>acbb9c8df255f7034dbd4e671b7aa4ced</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>elt</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aac329d8ec7659a689333659907d98a71</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const TDiag &amp;</type>
      <name>diag</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ae5018f22bd63c7a4ca2c68597f5c3707</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TDiag &amp;</type>
      <name>updDiag</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ae0992c15e0e422863eede1f8a26d0211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TDiag &amp;</type>
      <name>diag</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a62076c16a395e35134bdd01c9a589280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EStandard</type>
      <name>trace</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a3bc9385ab3e430671d53eae122a5e9a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul &gt;</type>
      <name>scalarMultiply</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aff77d98a9df50e9e19600628dbf4dd3b</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Mul &gt;</type>
      <name>scalarMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af7c498da277b15c923b159050da4aba9</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Dvd &gt;</type>
      <name>scalarDivide</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a39858e60843375a2df564b7bbb7cea32</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Dvd &gt;</type>
      <name>scalarDivideFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>abcf4c121faef80e143f70e7d7c2f3d59</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Add &gt;</type>
      <name>scalarAdd</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad7d7c3d2c8b6ab142ae48f4fafaadbff</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Sub &gt;</type>
      <name>scalarSubtract</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a7f896d43bb392f03f50371dc0c6a0f4c</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, N, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Sub &gt;</type>
      <name>scalarSubtractFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac6de65440a21c4496d533dd41e04d808</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a1f105f1cdeb90ed6282e5fb9af6a166a</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a80361d8e3c31fc567c41b7e9c9d77ae6</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ab75bb8191ea93e7456b587d86dfa0309</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a35801b92119648929150fce33968feb3</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac861e45067be97f786a2e76779212d1a</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>scalarEq</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a4b03f7a2fee7a58da950b14cc378ca0d</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>scalarPlusEq</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad8a39f08bdd89f4851138e11f4a16fa2</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>scalarMinusEq</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aa2ec35a95b013f28540ddf9a0ae05b39</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>scalarMinusEqFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9828a86a4aa043d1e40dc148f2f64d29</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>scalarTimesEq</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af47c680cd6f882c3c293e110317b8a68</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>scalarTimesEqFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a89c2acb38cd7f785baf3af5888a50671</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>scalarDivideEq</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a929a0cfc0ef50a0ceeb99833493e1044</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Mat &amp;</type>
      <name>scalarDivideEqFromLeft</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac4d259aa3b2598a8abcffdc64e32cce1</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNaN</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a278efce6393b52d08909cb8fe511f0bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>aed637f1c91cbc64291c4cab698106359</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SubMat&lt; MM, NN &gt;::Type &amp;</type>
      <name>getSubMat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a2dc2297b73689a949c639f9a84b3898f</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>SubMat&lt; MM, NN &gt;::Type &amp;</type>
      <name>updSubMat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>abb479015894f95fcf50c85ad30c9a26d</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMat</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a0bb0a9b84f7f099f92d4b6df54f1aa94</anchor>
      <arglist>(int i, int j, const typename SubMat&lt; MM, NN &gt;::Type &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TDropRow</type>
      <name>dropRow</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>af06d81a29dc438a82f31220c60bcfdf6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>TDropCol</type>
      <name>dropCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a382e7936ee545b36e67a8c3153faf3a1</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>TDropRowCol</type>
      <name>dropRowCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>acf561d3e85674f071336dfc23ca1ac97</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>TAppendRow</type>
      <name>appendRow</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a32450ee5991ac0fdd09460ccad903ebe</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;row) const </arglist>
    </member>
    <member kind="function">
      <type>TAppendCol</type>
      <name>appendCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ad23025f71dd8bb65c4fbbee3094f2e9a</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;col) const </arglist>
    </member>
    <member kind="function">
      <type>TAppendRowCol</type>
      <name>appendRowCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a9f895721f5819e7ad312b7a7ce887f16</anchor>
      <arglist>(const Row&lt; N+1, ER, SR &gt; &amp;row, const Vec&lt; M+1, EC, SC &gt; &amp;col) const </arglist>
    </member>
    <member kind="function">
      <type>TAppendRow</type>
      <name>insertRow</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a986bb577ca5237cf1b9fcc82ddb9cad6</anchor>
      <arglist>(int i, const Row&lt; N, EE, SS &gt; &amp;row) const </arglist>
    </member>
    <member kind="function">
      <type>TAppendCol</type>
      <name>insertCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a048572caf025beaafe93b74185685d60</anchor>
      <arglist>(int j, const Vec&lt; M, EE, SS &gt; &amp;col) const </arglist>
    </member>
    <member kind="function">
      <type>TAppendRowCol</type>
      <name>insertRowCol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ae073abf9d898436695e7890807ec9dd8</anchor>
      <arglist>(int i, int j, const Row&lt; N+1, ER, SR &gt; &amp;row, const Vec&lt; M+1, EC, SC &gt; &amp;col) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a69b5a373b48870f232ce2a446addc59d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac439ec0d4276bcd33957b498b4d71407</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a56e7fb1614de10adf48f61db56e312b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a5953e03a7c01b39460d1773e3507cafc</anchor>
      <arglist>(const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;m, double tol) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>ac55661acce925ed76936bbf2725029cc</anchor>
      <arglist>(const Mat&lt; M, N, E2, CS2, RS2 &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>afc0d9529d01794e3f9b1e3d982b1065e</anchor>
      <arglist>(const ELT &amp;e, double tol=getDefaultTolerance()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallySymmetric</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a727a38909f2978a2c63e5aef49af24fd</anchor>
      <arglist>(double tol=getDefaultTolerance()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExactlySymmetric</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a6188c2e96e84c36b03b2493eeaa96a5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TRow</type>
      <name>colSum</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a232dc8f5d05b0287e0c508863b7ac072</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TRow</type>
      <name>sum</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a19dad34bf95a9f1c934ff5b72fa3e01e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TCol</type>
      <name>rowSum</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a7b8aac53772863debd20fe16fdb7fa15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a1d01b43c0a5f90076437fc556dbfe6aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ELT &amp;</type>
      <name>get</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>abb12e9084094aa061df63dd735cea348</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a8a3c83ee7f3cfcc170bac73bb19e4263</anchor>
      <arglist>(int i, int j, const ELT &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a8660d113298fda958e5b34424e613626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a1b82597b0b148385926ed865aa2888b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a60485ad59f010b8af0281d6d21b11c24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Mat &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a80737c2a4e4f6e776e4b5fe85b718086</anchor>
      <arglist>(const ELT *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a70c00b775b66663fea90a4a3c5432220</anchor>
      <arglist>(ELT *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; M, N, ELT, M, 1 &gt;</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a098455bf9d34ff63deaaafb9aae071ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1Mat.html</anchorfile>
      <anchor>a3005dc435071cfb874a222b49338e549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gab42c9328d2713319247ceccdd117fc34</anchor>
      <arglist>(std::ostream &amp;o, const Mat&lt; M, N, E, CS, RS &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>gae5721daf8ec53d172f0eb2ea2357c662</anchor>
      <arglist>(std::istream &amp;in, Mat&lt; M, N, E, CS, RS &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Mat::EltResult</name>
    <filename>structSimTK_1_1Mat_1_1EltResult.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Mat&lt; M, N, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Mul, M, 1 &gt;</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1Mat_1_1EltResult.html</anchorfile>
      <anchor>a7fe6020bebdbf399c9a47c1c62f1172f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Dvd, M, 1 &gt;</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1Mat_1_1EltResult.html</anchorfile>
      <anchor>acfc7fc0433ef575112b62477894801cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Add, M, 1 &gt;</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1Mat_1_1EltResult.html</anchorfile>
      <anchor>a12a54cce7b69bfaffb5d245e1e5b035a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mat&lt; M, N, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Sub, M, 1 &gt;</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1Mat_1_1EltResult.html</anchorfile>
      <anchor>a2677bbbeeb028e01dd7dd9b5b8006d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Mat::Result</name>
    <filename>structSimTK_1_1Mat_1_1Result.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>MulCNTs&lt; M, N, ArgDepth, Mat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>MulOp</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>a1e63ddb9d3ae5d33531c5d0d06960c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulOp::Type</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>a40d58646488b25993b6c8d6f61a50096</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulCNTsNonConforming&lt; M, N, ArgDepth, Mat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>MulOpNonConforming</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>a5532072f8f1d3047ca3fb5eb101bfc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulOpNonConforming::Type</type>
      <name>MulNon</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>a2cb568ae00f91a2a60d8bbf58afcbbe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DvdCNTs&lt; M, N, ArgDepth, Mat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>DvdOp</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>ab3e707099b157bb11403ed8746525bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DvdOp::Type</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>a28cf640687ae2e2f62a62b9987aceb0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AddCNTs&lt; M, N, ArgDepth, Mat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>AddOp</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>afb6692c423dba901fb534e904957270d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AddOp::Type</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>a718d2e4039c43f40e398b8e05c043363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SubCNTs&lt; M, N, ArgDepth, Mat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>SubOp</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>a36c3efbb2310e7ca48089e322443822e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SubOp::Type</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1Mat_1_1Result.html</anchorfile>
      <anchor>a6ed96c6feb46f1fe98f974f9cc74d203</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Mat::SubMat</name>
    <filename>structSimTK_1_1Mat_1_1SubMat.html</filename>
    <templarg>MM</templarg>
    <templarg>NN</templarg>
    <member kind="typedef">
      <type>Mat&lt; MM, NN, ELT, CS, RS &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Mat_1_1SubMat.html</anchorfile>
      <anchor>a33af45a958e841debcde3a40f39b1ef2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Mat::Substitute</name>
    <filename>structSimTK_1_1Mat_1_1Substitute.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Mat&lt; M, N, P &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Mat_1_1Substitute.html</anchorfile>
      <anchor>aeeaf74b5189f67106999f2e236352798</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Row</name>
    <filename>classSimTK_1_1Row.html</filename>
    <templarg>N</templarg>
    <templarg>ELT</templarg>
    <templarg>STRIDE</templarg>
    <class kind="struct">SimTK::Row::EltResult</class>
    <class kind="struct">SimTK::Row::Result</class>
    <class kind="struct">SimTK::Row::Substitute</class>
    <member kind="enumvalue">
      <name>NRows</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da5526374cb3726e781ce716427a34e4a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NCols</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69dae6b0ecbbb565782e585178aa48b20ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NPackedElements</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da005ed054cf62f045a25fb389ef5613d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualElements</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da3ae362555ddcef1b099b54404cda495f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualScalars</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da3857ae46c16cb7b49899586efa3929ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSpacing</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da40b9d98ff7f78ef1e57710b83fd82473</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSpacing</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da8d80af559e65583df96f721c216bd180</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImagOffset</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da6c1a3e35ad67d57f2d943dfc335b5028</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealStrideFactor</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da1efb036a405e6298119e3d7fd0b4a98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArgDepth</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da307e4f5f28ff4064f9c157d4e5dad471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsScalar</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69daf0d8f5a7b201663226135d3162341ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsULessScalar</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da000734bee9699622e2b6479af93ada37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsNumber</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da8782067c15e950ae04045df6f98ef90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsStdNumber</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69daa79535100a87e4b94af8d1c6c3152df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPrecision</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da7def17b1f1952cb22fd5bc3d6494019c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SignInterpretation</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade39afd15eedd990b0bb8aef4493a69da55253a2d371aeeb8ca91cd454f274370</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, E, STRIDE &gt;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ab5cf60da2bb1743d1b8f2af38f8ad27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, ENeg, STRIDE &gt;</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a361879be2c27f84c9dd6f3b6b17c51a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, EWithoutNegator, STRIDE &gt;</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a53c4047485a6de6182dcd82ac675a302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, EReal, STRIDE *CNT&lt; E &gt;::RealStrideFactor &gt;</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a7034da7ace6f65aef7f726cf21966e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, EImag, STRIDE *CNT&lt; E &gt;::RealStrideFactor &gt;</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aa45de0454312ad5b857e2018dc0b4c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, EComplex, STRIDE &gt;</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ade49d10743114309ebddbec3e37b773a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; N, EHerm, STRIDE &gt;</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>affa8acc5dc7f4d1072b90be48057c68b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; N, E, STRIDE &gt;</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a9e0db17fb6caf22f4f197e7ca3542bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>E</type>
      <name>TElement</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ad1081c99b49ed61c4a5a88e77c3fc95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row</type>
      <name>TRow</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ae1329b0e4f21542b68df12bf7394316c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>E</type>
      <name>TCol</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a5a44dd9a478aff194ff131805471e941</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; N, ESqrt, 1 &gt;</type>
      <name>TSqrt</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a0f36faeff4f4018824277c08dd715c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, EAbs, 1 &gt;</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a0c8548a08d21bf81b44b33b318a999c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, EStandard, 1 &gt;</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a3a8ee9364160ba82b82a3127eec71761</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; N, EInvert, 1 &gt;</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a76892dc0b458fd83c57a4b6dd1d01069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, ENormalize, 1 &gt;</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a976d06ec371d1b02361472a388333b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; N, ESqHermT &gt;</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>abf3b1292df86f194ccecc8e73a9e2efc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalarNormSq</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a622ee041022ce6347b824b7e8d841e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalar</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a480792b8290a5eb86b5713ec2166a61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EULessScalar</type>
      <name>ULessScalar</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a1124fc1305a32af7e6732a34447c8da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ENumber</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aff5dfe42c1011ddd0dccec53968bc96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EStdNumber</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a7b66c71b8c910533108297072eca6610</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EPrecision</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a86b74c6ef7c1672c8c782f2e5646a5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalarNormSq</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ad80261c205d899c22801b362e2b7e038</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a3df9077e61e3d0616f8318119bb95933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TSqrt</type>
      <name>sqrt</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a2e45f8907009fd4971edb5a91a30e1e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a268c52fa7bea8e873099e29c48b519c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TStandard</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aa614278c5db45f281ddd6b0c0f3e581d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EStandard</type>
      <name>sum</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a2f9bc13fd5bfc50bb218e0200b9c283f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>acdc3f9d9633c0a5fa282dc208b45e472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a969fdd7c3d4e71a66e1f6cc137ba072a</anchor>
      <arglist>(const Row &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aeb77180daa8675e0f1ec5c531685edc3</anchor>
      <arglist>(const Row &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a66143e750388048a0ebcf407d3747485</anchor>
      <arglist>(const Row&lt; N, E, SS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ab7d3ecfac811f2e10b7e0a10c4a58889</anchor>
      <arglist>(const Row&lt; N, ENeg, SS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a32b546cefb72f6413342baa27c44c09d</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a5f3fb71e69f5bc4d8e9b78002d3586c9</anchor>
      <arglist>(const E &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>adca7cddbdcec6a4bceff90373c11f634</anchor>
      <arglist>(const ENeg &amp;ne)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a93854da7e681f0ed7af3706b7b25cdaa</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a9c9dae82d01e32aaf8aef7a580b21a95</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a2179f169f0bab9c8804e3c06924343ed</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aa6c70b4fe3165727b837b6f93f15ff3f</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aa20dff17fc631e9ebeb1953683ece96b</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a44d79c2a5b8c2b6c9bc4c669eaa819c1</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>af4f0a3961c6cb1ec2efc0fdfeebaad07</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ac70e294ade4785caedf850252ad1505b</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a8784a09a0ac0bcf402b18f8177035815</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Row</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ab0c183a06c6f8c1b0ef5a55833b59f86</anchor>
      <arglist>(const EE *p)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a35c1e661269476038b7f193c74f94b2a</anchor>
      <arglist>(const EE *p)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a917b253a208941971d4cd418194d48e8</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>acaf93ceaa101780ae7113b82957b0400</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a7441ae336965e0625fa137df6c0758bc</anchor>
      <arglist>(const Row&lt; N, negator&lt; EE &gt;, SS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a73ef8c76e5c07cecf8a897ca24fe3631</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aa97a59ae6d2a5b89fa2a3349a3c7311a</anchor>
      <arglist>(const Row&lt; N, negator&lt; EE &gt;, SS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Add &gt;</type>
      <name>conformingAdd</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a79b3184d001d71213cdd4628994c971e</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Sub &gt;</type>
      <name>conformingSubtract</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a33ebd8f02ed811cd5f99207f8f23e5e4</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul</type>
      <name>conformingMultiply</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a85fbdf4cee4b9da147df20ea15663a6d</anchor>
      <arglist>(const Vec&lt; N, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; MatNCol, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul &gt;</type>
      <name>conformingMultiply</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a2f4ef275de900cb400df3a288df3050a</anchor>
      <arglist>(const Mat&lt; N, MatNCol, EE, CS, RS &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul &gt;</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aea4b9459d8deb1e89808dc62a1172a2c</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Dvd &gt;</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a48f97bbd95bda2281d9c33b11cb3be80</anchor>
      <arglist>(const Row&lt; N, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a359a6be2d5a7d9bd4480694b8472caed</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>add318512a3de5d5638dd33bdc998b273</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a0559bf8e033f533adbf1102a6e6028c3</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a7431e7d8d261931fe8bf8a4c70ec7491</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>normSqr</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aec0962cd4b4f75d27b55742b1da977ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; ScalarNormSq &gt;::TSqrt</type>
      <name>norm</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aa37edb9dd77ae17972d832344b3e0a84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNormalize</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a732444b4e5696134b1a97c030c5debd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a2654c0a54a87236a42d087bae0b646e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Row &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a0be3234b83b6d2ee4ce6d8e7ee638184</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a3bd4904d31bcc67f177751f24476a897</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a4834a48f8b0dc57d17c2cb6460c53462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const THerm &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a67cfa8bc0f0182218174ed0ec09e57f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a18ae609913aaf87f54250eb4c29be8ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>af82a6cc7b60e2ad00d3dc7390f778283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>updNegate</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ad423dfd4e6cf12e453eaddce5f710878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ab81cfcf1d7a2a8450c6d18a655cdf669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm &amp;</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a96c523142e43808e9a297f1a47f20abf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ada14b0598165c802e4ff0d6b73725e0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TPosTrans &amp;</type>
      <name>updPositionalTranspose</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a6b25d3bdbb558c974f4d207fc372745e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ac228bb4964195e25bb73934de0654d5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a43514343948d06b9ff0c43876c3c29d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a07bdc4904d64c799126e10534d306463</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a9032bcdc8a9593bb8644fc2e9c880301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TWithoutNegator &amp;</type>
      <name>castAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>adcbaf9bd64efd41d60bfde78de09daa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TWithoutNegator &amp;</type>
      <name>updCastAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a4183feaa6c23b9eeb533bb874542a450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul &gt;</type>
      <name>scalarMultiply</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a06c57e3726f1664965eb045dc911c57d</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Mul &gt;</type>
      <name>scalarMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aee4cd057f74883c3cbafac1a1131fc11</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Dvd &gt;</type>
      <name>scalarDivide</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ab6a12247ba68c2358fb5ef23d4b0a2a5</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Dvd &gt;</type>
      <name>scalarDivideFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a09752620b858951202bfb75d3bdc6ad5</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Add &gt;</type>
      <name>scalarAdd</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>af0328ff475537e44c72b117803eb5bd5</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Sub &gt;</type>
      <name>scalarSubtract</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>af905bb23f1fcb7b5321ea8e0d1e564f8</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Sub &gt;</type>
      <name>scalarSubtractFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a96ebf68ce3c49290a718c036a1eaee5b</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ad68f4c2f2c79266dd6607332b7cf7a3d</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a12ee9b87c94ab674aebbb87f1a292a44</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a6cdad643735cb1d42b9b7e81339d6137</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ab7c23d14ed348c5b86c48c9f1de2fe0b</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a0ba8fc2a7b3653b4adfe42e24fede3cd</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ad5d49ebdabe7463dd688b99dd79bc22f</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarPlusEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aefd64bd552ab93c53f529871d6e3f361</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarMinusEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a69b0cb66c03a79b9036f4c4e319e7277</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarMinusEqFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a382a55f5caaee8df5d1af27bc3c96335</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarTimesEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a43ea1cb855e0956c357dd6161fd271c5</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarTimesEqFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>acc337e72df80eb29312a9692afb0d87b</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarDivideEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a202c275b4f9cd73415e2b379a40d4e52</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarDivideEqFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>af8b50e6d3ab0c702ca8ce864ec3e8b57</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>adbea104d70e957de7b91ae670943d4a0</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarPlusEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a9984d92bf491d15f2b092307a4a5688b</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarMinusEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ac0df249c8c32debdf3b62623843c616c</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarTimesEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a18be0df0506647d9fdf77207bb85d947</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarDivideEq</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>afff1a243f855f25814128670e5754eeb</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarMinusEqFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a569a1be7777e582e8e47414553e4c075</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarTimesEqFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a02cd347fd1d33e2d9d9eaf74b804c934</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Row &amp;</type>
      <name>scalarDivideEqFromLeft</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a77bae9f197d1814b9dc5267911664a81</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNaN</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a2c76e2c75a2d812201c1196aed1b8e3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ae193c35129f62780db762d8c3dfacd15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Row&lt; NN, ELT, STRIDE &gt; &amp;</type>
      <name>getSubRow</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aca23485f22539355841c291af146f294</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; NN, ELT, STRIDE &gt; &amp;</type>
      <name>updSubRow</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aa8c75c11abe5cc965884250ad0754ee5</anchor>
      <arglist>(int j)</arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N-1, ELT, 1 &gt;</type>
      <name>drop1</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>abd3211fd0d508ff9635dc1de40512d8e</anchor>
      <arglist>(int p) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N+1, ELT, 1 &gt;</type>
      <name>append1</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a589550e2f33f164ebfbd8a7b2ecc9b30</anchor>
      <arglist>(const EE &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Row&lt; N+1, ELT, 1 &gt;</type>
      <name>insert1</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ae62ae1d6f4f2e37e0519b9e9d48f1773</anchor>
      <arglist>(int p, const EE &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a87ab6798ed19901a5a6226475211e236</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a5edfdc933fdef688b868771838327008</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a700cab1af300c3a25d2e01be6c16be50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a356ac55d00076f1aa6a6108d999e1f36</anchor>
      <arglist>(const Row&lt; N, E2, CS2 &gt; &amp;r, double tol) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aaaa7839abb9034b42154fc7daeef10ef</anchor>
      <arglist>(const Row&lt; N, E2, CS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>abaa3a4a475989f17aa6e3f9f556d8b29</anchor>
      <arglist>(const ELT &amp;e, double tol=getDefaultTolerance()) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>ac2d8cf89c68930bfc28e887b9a6963ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a95371dd8657828bd1716072493153425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a9230ae82277efe1f59851e4b3a12d266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Row &amp;</type>
      <name>getSubRow</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a018c7d4919ebcbce2e25f816922d0e0b</anchor>
      <arglist>(const Row&lt; NN, ELT, STRIDE &gt; &amp;r, int j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row &amp;</type>
      <name>updSubRow</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>abf8479ccb33bb62ca185bc577ba1852c</anchor>
      <arglist>(Row&lt; NN, ELT, STRIDE &gt; &amp;r, int j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Row &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a8de150627d9e937f2e95193988352b44</anchor>
      <arglist>(const ELT *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>a39a3bc4071152d0f6ce97414067e2219</anchor>
      <arglist>(ELT *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; N, ELT, 1 &gt;</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aeeccc0cd19a42270c07553c5c43d3672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1Row.html</anchorfile>
      <anchor>aa4b4b0e4a4d953ddbe83d252a7764b8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>ga22f4be43e5bfa1b25369f758b4e66ee7</anchor>
      <arglist>(std::ostream &amp;o, const Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga35c841ecd286946547dc05f44d84d455</anchor>
      <arglist>(std::istream &amp;in, Row&lt; N, E, S &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Row::EltResult</name>
    <filename>structSimTK_1_1Row_1_1EltResult.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Mul, 1 &gt;</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1Row_1_1EltResult.html</anchorfile>
      <anchor>a6a4bcf0b3b0db8e777d46580e09ced32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Dvd, 1 &gt;</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1Row_1_1EltResult.html</anchorfile>
      <anchor>aee109905ae73e3123a12cc64f58c3210</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Add, 1 &gt;</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1Row_1_1EltResult.html</anchorfile>
      <anchor>a5b2d0a834122a4ece0e153ff528df1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; N, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Sub, 1 &gt;</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1Row_1_1EltResult.html</anchorfile>
      <anchor>aeac33556ee2b472c0242037a5633b8c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Row::Result</name>
    <filename>structSimTK_1_1Row_1_1Result.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>MulCNTs&lt; 1, N, ArgDepth, Row, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>MulOp</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>adc72acd444c3afd4fd9cac4996fd4842</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulOp::Type</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>a6bc38bb5810280246fe786d6960f2e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulCNTsNonConforming&lt; 1, N, ArgDepth, Row, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>MulOpNonConforming</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>a339e0a3dac358f68f813c8e50479791b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulOpNonConforming::Type</type>
      <name>MulNon</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>aa1106b9fd459c791702ef71fc4e63c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DvdCNTs&lt; 1, N, ArgDepth, Row, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>DvdOp</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>aa6f1586a78838b2af381d6d15af2a727</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DvdOp::Type</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>aedb8102a431dd610a631f58088ca8c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AddCNTs&lt; 1, N, ArgDepth, Row, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>AddOp</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>a519bd5790550601d933f5743477507e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AddOp::Type</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>a0f9d8e9110855006006a02dab077d49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SubCNTs&lt; 1, N, ArgDepth, Row, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>SubOp</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>a7465bd8b43eae27a12664d612df36372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SubOp::Type</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1Row_1_1Result.html</anchorfile>
      <anchor>af1fe82823421a710206e21426561ce5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Row::Substitute</name>
    <filename>structSimTK_1_1Row_1_1Substitute.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Row&lt; N, P &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Row_1_1Substitute.html</anchorfile>
      <anchor>a3818409a903267880a287747bbd0cf32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SymMat</name>
    <filename>classSimTK_1_1SymMat.html</filename>
    <templarg>M</templarg>
    <templarg>ELT</templarg>
    <templarg>RS</templarg>
    <class kind="struct">SimTK::SymMat::EltResult</class>
    <class kind="struct">SimTK::SymMat::Result</class>
    <class kind="struct">SimTK::SymMat::Substitute</class>
    <member kind="enumvalue">
      <name>NRows</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca8a18423cb70db0eb002eac928a433a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NCols</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061ccabe9dd57c075f565d505ee595b481a659</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NDiagElements</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca2026a097ed3876b20021059ab584938b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NLowerElements</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca19e1a5a12ef73711dd317202261294ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NPackedElements</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca6217c4fc4d9ba481990579a4d66b1e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualElements</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca17399634c0a9152d7bf0c7b7cf428771</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualScalars</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061ccac71b5fd742bd12018406c0cd90eb791f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSpacing</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca6060914781dbfc3f710708380bfb08b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSpacing</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca60637b15cb8b3ac57ee72807243a2e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImagOffset</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca7600dfd59c318aa978dabe5915ad25a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealStrideFactor</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061ccad872b00bbfa468d1572269f7d0c5cde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArgDepth</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061ccabbfbc4ecb19726a872d78e6338b25daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsScalar</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061ccad4f85b0230c724700fc2808fea952eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsULessScalar</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061ccaf5323dc0a1d6925c08008f604ca68d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsNumber</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061ccab2f57211befb4fa511a5192b0d9dd5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsStdNumber</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca6988f641b0147b006df43f791a52899b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPrecision</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061ccac0d9ab9b36f5f64362ed5de5ac56def5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SignInterpretation</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4bc3406218e80e85dc3a01b8903061cca039e4faa092478b001b8ae80129e5db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, E, RS &gt;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a50a80548bc1a1f08a22a30916ee2121b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, ENeg, RS &gt;</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a01e9b1f6452a9d6c439982a95d9e8ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, EWithoutNegator, RS &gt;</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a3529e09177e7d21666e8966f9c8d32d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, EReal, RS *CNT&lt; E &gt;::RealStrideFactor &gt;</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aa573e56326515b2198c9fe0cf24b868e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, EImag, RS *CNT&lt; E &gt;::RealStrideFactor &gt;</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a5bf8d5f4e83092257703d2b5ade60281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, EComplex, RS &gt;</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a0038354dedaa06663481e952f6149394</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a16d6075eb2f377975c2bef3fd2695201</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, EHerm, RS &gt;</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a92085de1b75c9bde6c785838fd6f95ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>E</type>
      <name>TElement</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a5d2990f2b5416782876554a6dd4db691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, E, RS &gt;</type>
      <name>TDiag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a710442e13ca7fb4f880e16d4656be39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt;(M *(M-1))/2, E, RS</type>
      <name>TLower</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a1e271ddbc53dca01132b7eda80337efa</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt;(M *(M-1))/2, EHerm, RS</type>
      <name>TUpper</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a0f35baccf4a3c53bf29bac87f4d9cdd9</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt;(M *(M+1))/2, E, RS</type>
      <name>TAsVec</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ae7e303ff1a76a960bb6f866b20ceb5a4</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; M, E, 1 &gt;</type>
      <name>TRow</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a84c1dbaaaf793f4bcc282c2b29e42eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, E, 1 &gt;</type>
      <name>TCol</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ae82938a3fef307cf0b7f5b9e806fbdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, ESqrt, 1 &gt;</type>
      <name>TSqrt</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a8c92724f23a2fedeb995aabaad3ac7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, EAbs, 1 &gt;</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a9b29b17cfa9ee822f58cdc826cdb4c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, EStandard, 1 &gt;</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>abdf8f256385fbad58a3190390d624303</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, EInvert, 1 &gt;</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a5f057c6fe5e9ca4f2642f165317f2c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, ENormalize, 1 &gt;</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>acebe8f4a28d9ea1aab99029a9b67f90c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, ESqHermT, 1 &gt;</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a91822617385d9141c3371f54ecd5f57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, ESqTHerm, 1 &gt;</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a84b4a9fcfdd47d150416266af6f72b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, E, 1 &gt;</type>
      <name>TPacked</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aee84a7d3ccfb23822a926f2134d92050</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalar</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a429b67975921b8f6004d95aa3490335f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EULessScalar</type>
      <name>ULessScalar</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aec2f1c150561cd3d68ce7f1809858573</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ENumber</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a5eb277151d521a8c2759d9c2afa4cb0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EStdNumber</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>af33be49c683449daa0d66ab67bff78b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EPrecision</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a3fdd1333ec2c335f2cd769f42fd55aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalarNormSq</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a12c5a3861e158974ebcd1c901211e3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a5a221498b536529d2385a0cce7934afa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TSqrt</type>
      <name>sqrt</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a33265a909cc73d983be48127f31c096a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a59d70c4ffacb1c2755783f5695fb70e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TStandard</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a573de93f678c7eef6857ac9c3d379337</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EStandard</type>
      <name>trace</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ae4c6af408b732b8fc4f740e8f0c1ac21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a068f0c797f204c2d3d9bc6bb78237a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ab2f501352f559f89d090df5bce27a5b8</anchor>
      <arglist>(const SymMat &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a62c2dabbdc6f5f23fb8510b19cc94dc8</anchor>
      <arglist>(const SymMat &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a13bf2d531d0e6f07d5de81674737900b</anchor>
      <arglist>(const Mat&lt; M, M, EE, CSS, RSS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>setFromLower</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aab55b704f3e7556c7fc24fa07a57aa39</anchor>
      <arglist>(const Mat&lt; M, M, EE, CSS, RSS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>setFromUpper</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a951c6304fdbeca0958ac068f15c9d011</anchor>
      <arglist>(const Mat&lt; M, M, EE, CSS, RSS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>setFromSymmetric</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ab9b7b438c843fbb0415e032f6580079a</anchor>
      <arglist>(const Mat&lt; M, M, EE, CSS, RSS &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a78236504441af4db749e3ba97b9991c3</anchor>
      <arglist>(const SymMat&lt; M, E, RSS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aa0a7d9c7badcf3688788011da3b262dc</anchor>
      <arglist>(const SymMat&lt; M, ENeg, RSS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a6f274656a7b1db28fb8e9288df3777a7</anchor>
      <arglist>(const SymMat&lt; M, EE, RSS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ac1f08bbb14b59f0a1290b2f3b9fee476</anchor>
      <arglist>(const E &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a313faf814e783be5214fe200ac1674e9</anchor>
      <arglist>(const ENeg &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aedd843be7af4949a8d4a14f7114237e2</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a095ca6a6f4ceb2a77e69b048e03e453c</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a0a3dd231c5e5b040e33ec26d477b0f0b</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a38928de5e775e0c0c47e7af3fc1fce29</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a7cbeda9cde98013850ae89bf20b23cc1</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9, const E &amp;e10, const E &amp;e11, const E &amp;e12, const E &amp;e13, const E &amp;e14)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ab212fa7db6998b514688893cc010e942</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8, const E &amp;e9, const E &amp;e10, const E &amp;e11, const E &amp;e12, const E &amp;e13, const E &amp;e14, const E &amp;e15, const E &amp;e16, const E &amp;e17, const E &amp;e18, const E &amp;e19, const E &amp;e20)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>af22dae7a5ea9ae8ccea18d907ed2daf9</anchor>
      <arglist>(const EE *p)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4cd43439c34cae168d74cb5f1eaba89e</anchor>
      <arglist>(const EE *p)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a0d61b8813dec4425e3f711addbc51a09</anchor>
      <arglist>(const SymMat&lt; M, EE, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a160f58a8e09f7c4120b646048cf7fc43</anchor>
      <arglist>(const SymMat&lt; M, EE, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a0bfe2ab4dcf6278bc96aa64fd3800ae7</anchor>
      <arglist>(const SymMat&lt; M, negator&lt; EE &gt;, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a0e6cb4e5add4340720a3120c3a60d185</anchor>
      <arglist>(const SymMat&lt; M, EE, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a85c74e1e60f579dd872435ff1badfb07</anchor>
      <arglist>(const SymMat&lt; M, negator&lt; EE &gt;, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a13174b5e93f68d837864f98980640eae</anchor>
      <arglist>(const SymMat&lt; M, EE, RSS &gt; &amp;mm)</arglist>
    </member>
    <member kind="function">
      <type>Result&lt; SymMat&lt; M, E2, RS2 &gt; &gt;::Add</type>
      <name>conformingAdd</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ae0ced02e1e119c08f3030c81319d35d9</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Result&lt; SymMat&lt; M, E2, RS2 &gt; &gt;::Sub</type>
      <name>conformingSubtract</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ac73090ae0ddfbf335eab24623b86a5d6</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Result&lt; SymMat&lt; M, E2, RS2 &gt; &gt;::Mul</type>
      <name>conformingMultiply</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a3a0425a3a4322658582aa2c12178a6ae</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; E2 &gt;::Mul</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ac3504fa00be835e4901f32c124b2fe57</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>EltResult&lt; E2 &gt;::Dvd</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a9e580adaf4a51aa8bc0b9d51b4dfae13</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a3071c69a89a94872eafb627e1225d228</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a910d2960398f02499ad7064c1431962d</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>TRow</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>af8ae6f0799f1b6db4995f2b7ccfac1c8</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>TCol</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>abcf9e251de71a4b7eca73da7389bd608</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>normSqr</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a94e7106952b282e70cbfcd3246ba2e99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; ScalarNormSq &gt;::TSqrt</type>
      <name>norm</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a33d05adf66f2e6d0e55240a8dfeda4ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNormalize</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aa25bb553fb339f1d8be4fca306b2b7e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aa993264ee9c7bdca7a1fc38210e90ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SymMat &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a8b507a880c1550def9dbf8e11855055d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>abdcc23ae1e6e6cda13d65becdbd6dc17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a81c4c837b444341acad1265d61f53de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const THerm &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aed4b2d1ba864802b186499dd7c24c059</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a5ba07e930b6af7279b955b7e457b88df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a9bde3aed282e8385b24317484f2ce091</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>updNegate</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a2254c6f0ec03b298e1f2f8f270a2feb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a5d5d95494ce682cfa0be97effb5c960c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm &amp;</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a14a47180437eb0df8eff54e43d90ea3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aaf799ee3651141c1c1482563155649d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TPosTrans &amp;</type>
      <name>updPositionalTranspose</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a72f415e5420633ffa3bef658160ff103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ab025244d763c1ca50ae442be7102c74d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ab66bd942d6c60fac42cc6be5287e4b1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ae34ddfadea70b61d9e286aa0b658b13a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aaadea7e26aeaf8396e571a4b88954752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TWithoutNegator &amp;</type>
      <name>castAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aed3275ca30baea1171e529a60de81cc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TWithoutNegator &amp;</type>
      <name>updCastAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a3edc8162edc8f9650f5350256d753e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul &gt;</type>
      <name>scalarMultiply</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aa601ec7ef3b88effab8179dd4428f599</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Mul &gt;</type>
      <name>scalarMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a58b1dad0ddb7e3d0d6ba8174769420b3</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Dvd &gt;</type>
      <name>scalarDivide</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aeb476699799fa4105f5349e0c1c284b9</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Dvd &gt;</type>
      <name>scalarDivideFromLeft</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a43c48cfdb0145777dc84ddf0f4848e6a</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Add &gt;</type>
      <name>scalarAdd</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4cbc2f511c0cf7b180610994050db69f</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Sub &gt;</type>
      <name>scalarSubtract</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ab551d407031f39b226533439c80df72e</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>SymMat&lt; M, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Sub &gt;</type>
      <name>scalarSubtractFromLeft</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>af0c6b1c23e157ba9e9a41504b1523eef</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aa424a77b77e508eb2a355dfa8d14ec0f</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4243931ad8c910010468f9dcf7f7f3db</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ad8d07b5c4c404918234d60177206cdcd</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a2f9f4b2660a194d94ec2186396f10773</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a189ecc3b3f371c772561638529261478</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>scalarEq</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4a0ab04010a27a5b61f49a8452b456c8</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>scalarPlusEq</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ab58ee468302935d4351728eb7773c509</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>scalarMinusEq</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a0732a65a4410cb8a7250579ca7a3faae</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>scalarMinusEqFromLeft</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a883793164c6c8b2a3d1970aac8040eae</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>scalarTimesEq</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a9730c26b007401bc24d92d3a1f1f5780</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>scalarTimesEqFromLeft</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a1658028dbc8b9521a0243a1aff3132ef</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>scalarDivideEq</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a91c7c0dda9942014e356a7c0ab5d7c22</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>SymMat &amp;</type>
      <name>scalarDivideEqFromLeft</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a295d919eb3b18423030c431060c8e84a</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNaN</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a697500fa75e998c099a0f8eaae3f19cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a150611dd54ad2844b836ed286f4e7406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a84f0a45bd84d85bb2ae5d47d55c61ef5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a7cc7add1f8656f0946e76ee6ac655f64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a342703855002cc1c5ca0e3ca761bf375</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a8c536f140470529e766ab78e7d2fe7c0</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;m, double tol) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ac06d1b28fe6d860ae19011204f089969</anchor>
      <arglist>(const SymMat&lt; M, E2, RS2 &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a24c05d4a2428624d1da3f0230b9479be</anchor>
      <arglist>(const ELT &amp;e, double tol=getDefaultTolerance()) const </arglist>
    </member>
    <member kind="function">
      <type>TRow</type>
      <name>row</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a868406eb7145b87b588d1237fe5bf6cf</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>TCol</type>
      <name>col</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ad7296f5431558f1509b7209a1db44602</anchor>
      <arglist>(int j) const </arglist>
    </member>
    <member kind="function">
      <type>E</type>
      <name>elt</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ac022c52292994615e7370ff3e46f2a7f</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>const TDiag &amp;</type>
      <name>getDiag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a76f589008afeddff613f362789ae5425</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TDiag &amp;</type>
      <name>updDiag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a56267858f365597a96df42914900ae09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TDiag &amp;</type>
      <name>diag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a910890d639d8b31b8bdaa5a198a7b8c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TDiag &amp;</type>
      <name>diag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>add77992ae6731fed14243c402d33cd4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TLower &amp;</type>
      <name>getLower</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a8714db2a9bfdc74d5c8ffb0e1c13c8c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TLower &amp;</type>
      <name>updLower</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4f4cf2fe809d3b84c62f07d2b8f0e816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TUpper &amp;</type>
      <name>getUpper</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>af4fc3e384ccf59c0d530b892430641a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TUpper &amp;</type>
      <name>updUpper</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a97a2b1b770e143476a4c3753e83d0874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TAsVec &amp;</type>
      <name>getAsVec</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a6f117e0b2ca8c16f5ec0a8f84611874a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAsVec &amp;</type>
      <name>updAsVec</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>afa4c19225fe087844d31f358fa7996ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>getEltDiag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ae707a09c815b7855cd02e694f05468a7</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>updEltDiag</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a75e516adb2b938c1d5ac7da90ecde6c9</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>getEltLower</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aa40421806e1bb8af9e5ffcfb79f34084</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>updEltLower</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>aff34077018095f88bb556a55043d6899</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>const EHerm &amp;</type>
      <name>getEltUpper</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>add219ec78fe7ed603c66ac4c301c127a</anchor>
      <arglist>(int i, int j) const </arglist>
    </member>
    <member kind="function">
      <type>EHerm &amp;</type>
      <name>updEltUpper</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ada1cb1ebf7641bf023debc05e621319d</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>TRow</type>
      <name>colSum</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a2816883b09c53e3501e7c8b093c1f6cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TRow</type>
      <name>sum</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a7cd3c3c4ee62ddc831ff3c4aadbff671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TCol</type>
      <name>rowSum</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ad1a6ff4a88b67618eb915db2f214513d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ab955dec04e8ba21543d120366e020156</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a7dea9cb24c07312c3076fad4dd252d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a511a880600f3728a2d9ac8371d3fcfab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SymMat &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a0853be4d318e2a2d121f0b07ccb9e8d9</anchor>
      <arglist>(const ELT *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymMat &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>ac82b1585c75a1c8b694edf1ab77c7348</anchor>
      <arglist>(ELT *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TPacked</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a4d41030a613966aca2d7c0752fdfe51d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a19073d9616ec6a454488f92e057cf8d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SymMat</name>
      <anchorfile>classSimTK_1_1SymMat.html</anchorfile>
      <anchor>a634c223f8fad733dcada922dc495c65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gad17a40de28e390197785785cd30ff5fd</anchor>
      <arglist>(std::ostream &amp;o, const SymMat&lt; M, E, RS &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga4f43b4611ad3fa1e55020a4e18ceff8d</anchor>
      <arglist>(std::istream &amp;in, SymMat&lt; M, E, RS &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::SymMat::EltResult</name>
    <filename>structSimTK_1_1SymMat_1_1EltResult.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SymMat&lt; M, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Mul, 1 &gt;</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1SymMat_1_1EltResult.html</anchorfile>
      <anchor>a5485f11c27fe1eeab7dfe96b96230448</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Dvd, 1 &gt;</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1SymMat_1_1EltResult.html</anchorfile>
      <anchor>abd3c2935f89fec650fda35463aca68c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Add, 1 &gt;</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1SymMat_1_1EltResult.html</anchorfile>
      <anchor>a73fed1af1126c904ffc244cce80fc5ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Sub, 1 &gt;</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1SymMat_1_1EltResult.html</anchorfile>
      <anchor>a06f96d18a09c62e7712c6e44ce9a801c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::SymMat::Result</name>
    <filename>structSimTK_1_1SymMat_1_1Result.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>MulCNTs&lt; M, M, ArgDepth, SymMat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>MulOp</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>a42853a4f1efeb9d6c2b2f01cfde8a1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulOp::Type</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>acf6f49ac6e4b469fe4aa284f2fb362fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulCNTsNonConforming&lt; M, M, ArgDepth, SymMat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>MulOpNonConforming</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>ac04e6a53383e1c6243847383b723fa4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulOpNonConforming::Type</type>
      <name>MulNon</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>a1a76a32690b6c7738c1dbc2162c07807</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DvdCNTs&lt; M, M, ArgDepth, SymMat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>DvdOp</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>ac10f0f450b2f26b62242bdd5291b4a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DvdOp::Type</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>afef4bfb69d919f092d35436da0287abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AddCNTs&lt; M, M, ArgDepth, SymMat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>AddOp</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>a09f5272b0de0fc855b59e7e28ea00492</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AddOp::Type</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>a7d94784e837c145a8aad34df3406a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SubCNTs&lt; M, M, ArgDepth, SymMat, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>SubOp</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>ac703d3ca330d1d383c01319f2c2afcc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SubOp::Type</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Result.html</anchorfile>
      <anchor>a5f444d58fe2778b2d0d91383095f9188</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::SymMat::Substitute</name>
    <filename>structSimTK_1_1SymMat_1_1Substitute.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SymMat&lt; M, P &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1SymMat_1_1Substitute.html</anchorfile>
      <anchor>a5993589ed84b3312ebcb280237e47c76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Vec</name>
    <filename>classSimTK_1_1Vec.html</filename>
    <templarg>M</templarg>
    <templarg>ELT</templarg>
    <templarg>STRIDE</templarg>
    <class kind="struct">SimTK::Vec::EltResult</class>
    <class kind="struct">SimTK::Vec::Result</class>
    <class kind="struct">SimTK::Vec::Substitute</class>
    <member kind="enumvalue">
      <name>NRows</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca4098ba4c994d0a05d79f1f011fe826bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NCols</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fcaacb219bca801fa9b299610f154f34a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NPackedElements</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca71e046bac8a181561519a6122e2da18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualElements</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fcaa25980e89b5b6f756347facaa55bd6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NActualScalars</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fcaece1f9f77763466fb8f7c196fd2b8f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowSpacing</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca8f18985bf3fa11ed08b6840c04705116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColSpacing</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca6d4bd0883fc982185b9e36f48ce39e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImagOffset</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fcad531daf9c05933f95244a34b03754cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RealStrideFactor</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca6cefb5710f0913d3d08722d01870c197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ArgDepth</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca4f5243de94fcb7adbf667f1a107ea625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsScalar</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fcade2306ea77a38b5b4eb3c23646f359be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsULessScalar</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca2a5ac8bb16b80ee3aab25745909e0de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsNumber</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca766b45bc4868d8a042efa4533671d18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsStdNumber</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca2816cf70d3e06a09f6c54fc943689d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPrecision</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca8f0d38ec0caa44f7307829d6ec454170</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SignInterpretation</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac68d02035e9fb29b2b7c810a8d3554fca25bedfb632d2832892205ac5572d38be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ELT</type>
      <name>E</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1c4f863a54b68343ab160d46a4dfa107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TNeg</type>
      <name>ENeg</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a180db0a856dcd33f438ff607fb2d578e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TWithoutNegator</type>
      <name>EWithoutNegator</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1688fa5889391ca2510ec85af32c4d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TReal</type>
      <name>EReal</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a9fe820179fbd756adb31a21ea1635c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TImag</type>
      <name>EImag</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac960a48f176aa0870f267e6555489969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TComplex</type>
      <name>EComplex</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aa7122a7babdc45b6559fcfb2bcc5ba3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::THerm</type>
      <name>EHerm</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>af1a6fe2fbd6109e110319dde19ef8080</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TPosTrans</type>
      <name>EPosTrans</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aaf724f6707ea5d622a8218c8c7d0a47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TSqHermT</type>
      <name>ESqHermT</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a9e03a89cd7d90f90d2b77996912f7cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TSqTHerm</type>
      <name>ESqTHerm</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aed4f65810f2f99f99286c4de7526944c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TSqrt</type>
      <name>ESqrt</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ad7edbf8f2b7e6318eb98feadb1498e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TAbs</type>
      <name>EAbs</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a9328f6e879f0bce93ae861ed3830adfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TStandard</type>
      <name>EStandard</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a0cc83b9c25967c098119f0e604c15e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TInvert</type>
      <name>EInvert</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aeec08218c1b188793e64d47c3d1b8d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::TNormalize</type>
      <name>ENormalize</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5074ef8ddf4b5863b9c9aa73d08b0b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::Scalar</type>
      <name>EScalar</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>afb0c170f161ab33a760c6abed022c4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::ULessScalar</type>
      <name>EULessScalar</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a43fa9b9db155c966ec374279b11f7ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::Number</type>
      <name>ENumber</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a16e9c638c3725abee10ac8c0a0416938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::StdNumber</type>
      <name>EStdNumber</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a2dd99fd4db282175335f6b70a09c42d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::Precision</type>
      <name>EPrecision</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ab6a2b3875ce3ab44712d2b46c7c8c48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CNT&lt; E &gt;::ScalarNormSq</type>
      <name>EScalarNormSq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>abb9df16575296931169e80790f8180ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, E, STRIDE &gt;</type>
      <name>T</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a226b3621ca279d62533bf2c2bc1494cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, ENeg, STRIDE &gt;</type>
      <name>TNeg</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ad810229be85191609884e56063b788ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, EWithoutNegator, STRIDE &gt;</type>
      <name>TWithoutNegator</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5f18f1a887b7a31eaab12703b2d56eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, EReal, STRIDE *CNT&lt; E &gt;::RealStrideFactor &gt;</type>
      <name>TReal</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aebcbc25b0f0f1f9226dfe5796f30d459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, EImag, STRIDE *CNT&lt; E &gt;::RealStrideFactor &gt;</type>
      <name>TImag</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>acf0a11445fddc280dd6a1b3f9a54d4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, EComplex, STRIDE &gt;</type>
      <name>TComplex</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a3ac8c95d23ac09084c957db9e0807af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; M, EHerm, STRIDE &gt;</type>
      <name>THerm</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1664440ae833e25958fb6006815b93df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; M, E, STRIDE &gt;</type>
      <name>TPosTrans</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a21c96e0dda112e02745075e8bb727651</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>E</type>
      <name>TElement</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a306a8e6c01acbd2f6f27769abe6f1fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>E</type>
      <name>TRow</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>adee9814da9f07edf05e10aa8bf5b52a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec</type>
      <name>TCol</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a3bea93707d0d519f3bc680520ed6dba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, ESqrt, 1 &gt;</type>
      <name>TSqrt</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a6d723146f29d99138956fe3b0d71ea6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, EAbs, 1 &gt;</type>
      <name>TAbs</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a429ca3d609af5044f8be5243dfba714b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, EStandard, 1 &gt;</type>
      <name>TStandard</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ad1f95f01fde583b2d46c9ef7a31e582e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Row&lt; M, EInvert, 1 &gt;</type>
      <name>TInvert</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>adee68a1b3427cdc2a096be35d8b3f1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, ENormalize, 1 &gt;</type>
      <name>TNormalize</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5f4d20cd03be610a163f04985d74822d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ESqHermT</type>
      <name>TSqHermT</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aba33f5ae46bd5406b8bead75d3225e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymMat&lt; M, ESqTHerm &gt;</type>
      <name>TSqTHerm</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>af941dd81c240827a807b59925f9353ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalar</type>
      <name>Scalar</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a2747df15d62910c4e106267ff6a6456c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EULessScalar</type>
      <name>ULessScalar</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>acd8d06bc21666d641e6e8fc1d2348474</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ENumber</type>
      <name>Number</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ad2dcbe4f4c13eab6d32664b39c53067e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EStdNumber</type>
      <name>StdNumber</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aed3382cfdf59b23ac5fe16a359b9800e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EPrecision</type>
      <name>Precision</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>af41c74dcba45cbeccdafdc3c9276048d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EScalarNormSq</type>
      <name>ScalarNormSq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac5410fb3fc14453b32ced2e8134ad36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>scalarNormSqr</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a712141bb4fe924637c14555b1954b66a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TSqrt</type>
      <name>sqrt</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a6a37bb45b9fc50d691005df0824af255</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TAbs</type>
      <name>abs</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aafc94c4eaac8216b124ef659ff1d5487</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TStandard</type>
      <name>standardize</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>af696f3d3ec205726a276a2355104d9c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EStandard</type>
      <name>sum</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a051dc2d9f18a5b8b192e6e33c2dd49b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a7d52d8c3207d1fd68197233c4a60029c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ad34c3d97a17ed494e9f0e5b2829ae419</anchor>
      <arglist>(const Vec &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a96ee6e2f4bad2e772e4ad019b28c591a</anchor>
      <arglist>(const Vec &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ad6fd4b510a548add1477a13a1c99cc87</anchor>
      <arglist>(const Vec&lt; M, E, SS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a57a5678f4109bde28c1c7829f030a752</anchor>
      <arglist>(const Vec&lt; M, ENeg, SS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ad9220ca15fa8c7647bb0d5a7aaeb83b5</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>abe343569bdc62601e22eddccb9b76fa3</anchor>
      <arglist>(const E &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a0d54996ceb0ffdaaf35c0b42d13ffb22</anchor>
      <arglist>(const ENeg &amp;ne)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a58a2921791ea75c7022fb593b45c43f7</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a594d2b0d02e91efc5547af4678d3535c</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a6e0a194f6ca013c9026ff72f461bfc46</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a71c9a675a80482caf12e02a34b399bb1</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a774e82ed4bb90e65fee729e2082e413b</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a4dcac91cb1609810fac49da700e70e77</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5978f046474cf4481a5f0470f9558a29</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ae204f1902d2834ff3f47f3c84db23385</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ad4f80f6ed39b2a75521423d25b23835b</anchor>
      <arglist>(const E &amp;e0, const E &amp;e1, const E &amp;e2, const E &amp;e3, const E &amp;e4, const E &amp;e5, const E &amp;e6, const E &amp;e7, const E &amp;e8)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a9c66f56b1930d82c36f90142af7fb536</anchor>
      <arglist>(const EE *p)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1bf45d78264b6e333d79985c371efbf4</anchor>
      <arglist>(const EE *p)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a9ced2e90bb014a4c09f2e830846b73ac</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;vv)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a2a8255aebddddbcdb4aaae12736a1b05</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a51cc4c59703b5544ac71bc5e57cc0b19</anchor>
      <arglist>(const Vec&lt; M, negator&lt; EE &gt;, SS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a46b643762736321072c6bd58ba141841</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aee444801ca472095d6fc0ff1a103718f</anchor>
      <arglist>(const Vec&lt; M, negator&lt; EE &gt;, SS &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Add &gt;</type>
      <name>conformingAdd</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a82a4da394cb53cde9c5a63dc8a098f8d</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Sub &gt;</type>
      <name>conformingSubtract</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a69d1a60f240f485bc1f9c844ec1cd733</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; M, M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul &gt;</type>
      <name>conformingMultiply</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a7a9702efd5be91edf3f06f0680303ec0</anchor>
      <arglist>(const Row&lt; M, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul &gt;</type>
      <name>elementwiseMultiply</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5f554ca51a94f9cfa61a36b495478e5c</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Dvd &gt;</type>
      <name>elementwiseDivide</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a3af4163f4d188bf82242584bf985ccb8</anchor>
      <arglist>(const Vec&lt; M, EE, SS &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ab1ecf7f59bd4b7c6b9dfd67566b75449</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a32bc6a710c601343c9fe30e34c20b7bf</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ae44a011242e15a9188acf63a6625e6cc</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>E &amp;</type>
      <name>operator()</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a2918c06d3f0b353076c5fa9ce8019509</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>ScalarNormSq</type>
      <name>normSqr</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a95575b22850f63eaa64858660c8c8c64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CNT&lt; ScalarNormSq &gt;::TSqrt</type>
      <name>norm</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5bcb573b11b780148f1ff3e7f5961997</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNormalize</type>
      <name>normalize</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>abbd852b56584cfeda803eab3a95fb7db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TInvert</type>
      <name>invert</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a66cea75e2ed6de1c379a46745849c473</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec &amp;</type>
      <name>operator+</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ae28bb6b73abb3704de062f751dab4921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1d18cd6340b717437a31770499069bfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>operator-</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a52644eefd67080b80bba767e5affceb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const THerm &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a4b82833142e2b30ae998f1ee357245b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm &amp;</type>
      <name>operator~</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a055c47346d5b16b0a7ced839b91a9aa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TNeg &amp;</type>
      <name>negate</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a99e24a8076a1aed2b65595b0b382c71f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TNeg &amp;</type>
      <name>updNegate</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5108f85c423f5e00e51a198734ed17c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const THerm &amp;</type>
      <name>transpose</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a3eb9d7c001c9594fd65c50365dce0d5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>THerm &amp;</type>
      <name>updTranspose</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a3e181c0844930d9dbec8afb613f762d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TPosTrans &amp;</type>
      <name>positionalTranspose</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1e92208963211edbb39751c128310a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TPosTrans &amp;</type>
      <name>updPositionalTranspose</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a6021a62d22537c7ad406b7a1c1ca0761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ac891ea80a0181132c2430a349f461d72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TReal &amp;</type>
      <name>real</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>adc792ec3e435535fc8fe4ad3810d54fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aff885dcf7ea01c94d7621be973fd1aa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TImag &amp;</type>
      <name>imag</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a4b3ecf2380f493c8b48ad6d0d50695f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TWithoutNegator &amp;</type>
      <name>castAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a9283ff051541b8f511d748f862f1eb9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TWithoutNegator &amp;</type>
      <name>updCastAwayNegatorIfAny</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a2467300a636639eb7195ca7ea37d5ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Mul &gt;</type>
      <name>scalarMultiply</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a37b496ee9a8f41defa3250da5ed0014e</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Mul &gt;</type>
      <name>scalarMultiplyFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a314e384e0d1cc1077562131cb7a773a2</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Dvd &gt;</type>
      <name>scalarDivide</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a97a9b3263e294d85755e4c777302c2ae</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Dvd &gt;</type>
      <name>scalarDivideFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a34606c49af85f3f3b54341b54815cf25</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Add &gt;</type>
      <name>scalarAdd</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a474088f0218a89d4116358da2ced4fcc</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; EE &gt;::Sub &gt;</type>
      <name>scalarSubtract</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a69fc2003203268bcd10f9eadf9412695</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M, typename CNT&lt; EE &gt;::template Result&lt; E &gt;::Sub &gt;</type>
      <name>scalarSubtractFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5ee50b918ae4eefc8c8ac1a177d7f7c9</anchor>
      <arglist>(const EE &amp;e) const </arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aace53cca908837b6b13de05a6bbda540</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a6d6459937f78236c913e2ec50d328d8d</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a4b247dbd3a71bdcef1a0a4af1cece4c7</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1c865e00508d708562c21012f0cb66e1</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a273abdf63fc3f9e8d720b6b1c9ebd047</anchor>
      <arglist>(const EE &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a47cc5ea1fc0e6db75f4fe78c85772179</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarPlusEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a7d9a9f23aeaf38da791ec0173f5b49d8</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarMinusEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>af1ecc870150f4bbaddacf812bf3a55a4</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarMinusEqFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a11d049de83f163743bc576395746f0e6</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarTimesEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>af8f25b932993267cacda311724882b90</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarTimesEqFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1549f7c02c5f35b6ae02f3a384ba0461</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarDivideEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a5ec0b452d52d289345c333b6b1f61c1b</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarDivideEqFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a68d6c34551dd57324842f2e630ac5798</anchor>
      <arglist>(const EE &amp;ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a18982d1fac249ed0050b0497fc1b5fff</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarPlusEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a6e47b406661090c6bbb580bb32f613b6</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarMinusEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ab402c2238f2821d55a97dcdfb36ad0ba</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarTimesEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a7bba57628dc553c6155205ba7ebd0330</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarDivideEq</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aeafb7930483190b14571c043ccb33ce0</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarMinusEqFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ab07b8dc8c7690f71f6a2a7232c06f8b9</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarTimesEqFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a695383084e4311219d9c1d86330bc3fa</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>Vec &amp;</type>
      <name>scalarDivideEqFromLeft</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a45beaad82e2504367de24345f1b7f60c</anchor>
      <arglist>(int ee)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNaN</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a0b11014a0ad910e4254a26d39f013565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a25018475a82b7f1c61956d824104b300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; MM, ELT, STRIDE &gt; &amp;</type>
      <name>getSubVec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aba184e5623fcecb388ab58eb91232052</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; MM, ELT, STRIDE &gt; &amp;</type>
      <name>updSubVec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a085715471acf42722ddd05eb8028e13c</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M-1, ELT, 1 &gt;</type>
      <name>drop1</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aa0b31ae5026f2529651aeaad88d705b1</anchor>
      <arglist>(int p) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M+1, ELT, 1 &gt;</type>
      <name>append1</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>acc5b268f14abe92735185cafadd888dc</anchor>
      <arglist>(const EE &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; M+1, ELT, 1 &gt;</type>
      <name>insert1</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a19c8f4c92e03d90c4ec80644fb3d7bdc</anchor>
      <arglist>(int p, const EE &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aee785192d37052d76ff80d62338a6302</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aa92ef2895e51a3ff4f1a3c264012c4ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinite</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a1a0574822d6633f8b621d9c676a4352a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a862a6d93b3109965ce7104c6beae5de6</anchor>
      <arglist>(const Vec&lt; M, E2, RS2 &gt; &amp;v, double tol) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a596116b98d5d15f0112d1e052f09aeab</anchor>
      <arglist>(const Vec&lt; M, E2, RS2 &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericallyEqual</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a576e2e126e4f3bb2f59dc91ef1fbcfc4</anchor>
      <arglist>(const ELT &amp;e, double tol=getDefaultTolerance()) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>aa71ef634c8bcf182405248a215acb789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a907c5d98e3f7b29f858c5f56c6e38738</anchor>
      <arglist>(int i, const E &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const E &amp;</type>
      <name>get</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a8bc57b3dd6983c252b3654a4d6548f05</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>adc9ccbb5060fdbbf1e4446337217b699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nrow</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a99f8825fc5c6297c9e0d804f3471d1f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>ncol</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a51574e7c675a4662b23b24ba6e430492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Vec &amp;</type>
      <name>getSubVec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a250ac248ba601828531ca324917dc3ef</anchor>
      <arglist>(const Vec&lt; MM, ELT, STRIDE &gt; &amp;v, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec &amp;</type>
      <name>updSubVec</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a6c3d2b34d4c58321ddd8ebbc997877dc</anchor>
      <arglist>(Vec&lt; MM, ELT, STRIDE &gt; &amp;v, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Vec &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>abf8283cc8bb6cccd44287e439811198d</anchor>
      <arglist>(const ELT *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>affb89a98c7696e0a5fa04a17924e19f7</anchor>
      <arglist>(ELT *p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; M, ELT, 1 &gt;</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>ade1b06280e2190f1d4317a04355f12ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDefaultTolerance</name>
      <anchorfile>classSimTK_1_1Vec.html</anchorfile>
      <anchor>a781827a50ebc3d83a0736738bc2e2784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeUnformatted</name>
      <anchorfile>group__writeUnformatted.html</anchorfile>
      <anchor>gaea19f36902b9e41b3774e3103718dab5</anchor>
      <arglist>(std::ostream &amp;o, const Vec&lt; M, E, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUnformatted</name>
      <anchorfile>group__readFromStream.html</anchorfile>
      <anchor>ga75b4dd0ea98de6059b13e98cabbefb82</anchor>
      <arglist>(std::istream &amp;in, Vec&lt; M, E, S &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Vec::EltResult</name>
    <filename>structSimTK_1_1Vec_1_1EltResult.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Mul, 1 &gt;</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1Vec_1_1EltResult.html</anchorfile>
      <anchor>a793a49206256a10096dce5ff804bccfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Dvd, 1 &gt;</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1Vec_1_1EltResult.html</anchorfile>
      <anchor>a7f8bed028540ad5f183f76fe07478a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Add, 1 &gt;</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1Vec_1_1EltResult.html</anchorfile>
      <anchor>af406433231dbc024ad850039d5a4db10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec&lt; M, typename CNT&lt; E &gt;::template Result&lt; P &gt;::Sub, 1 &gt;</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1Vec_1_1EltResult.html</anchorfile>
      <anchor>a6ece2175b33cf61b8c8a2e5b01b70a3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Vec::Result</name>
    <filename>structSimTK_1_1Vec_1_1Result.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>MulCNTs&lt; M, 1, ArgDepth, Vec, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>MulOp</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>a7b62924a599456b9b0978690a715397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulOp::Type</type>
      <name>Mul</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>a6d037fb9b2f220a8e7bd18f3c554e51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulCNTsNonConforming&lt; M, 1, ArgDepth, Vec, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>MulOpNonConforming</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>a23b7e06e3f4af5510b7f0161b4494c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MulOpNonConforming::Type</type>
      <name>MulNon</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>ae3216dd620964f3ed5a984ae366d4dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DvdCNTs&lt; M, 1, ArgDepth, Vec, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>DvdOp</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>a2582b2c0a370b430044ac5bcaed567ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DvdOp::Type</type>
      <name>Dvd</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>a20cd8ef0c7802cc828744a39adcbfec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AddCNTs&lt; M, 1, ArgDepth, Vec, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>AddOp</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>a47c8c2cc5135ba4d297cde09f002b35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AddOp::Type</type>
      <name>Add</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>ac45564a2414055f1b2438e0bea94be4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SubCNTs&lt; M, 1, ArgDepth, Vec, ColSpacing, RowSpacing, CNT&lt; P &gt;::NRows, CNT&lt; P &gt;::NCols, CNT&lt; P &gt;::ArgDepth, P, CNT&lt; P &gt;::ColSpacing, CNT&lt; P &gt;::RowSpacing &gt;</type>
      <name>SubOp</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>ad252c3eca42461b2ca3f23e13589d5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SubOp::Type</type>
      <name>Sub</name>
      <anchorfile>structSimTK_1_1Vec_1_1Result.html</anchorfile>
      <anchor>afc11f2a7884390c45fd1a85fe57dd71c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SimTK::Vec::Substitute</name>
    <filename>structSimTK_1_1Vec_1_1Substitute.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Vec&lt; M, P &gt;</type>
      <name>Type</name>
      <anchorfile>structSimTK_1_1Vec_1_1Substitute.html</anchorfile>
      <anchor>a6cc74a67ece5e6e7c311cd548ccfc77e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::BicubicSurface</name>
    <filename>classSimTK_1_1BicubicSurface.html</filename>
    <class kind="class">SimTK::BicubicSurface::PatchHint</class>
    <member kind="function">
      <type></type>
      <name>BicubicSurface</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>aa008066f4580100b06fdd8295575e1ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BicubicSurface</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>ac74dc99f9f114096cd903a509f938f65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BicubicSurface</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a5dd80198bbcc78bb0fd9b8e79b1a0e9b</anchor>
      <arglist>(const BicubicSurface &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>BicubicSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a63513b6232cbf46b9d63e06afce82135</anchor>
      <arglist>(const BicubicSurface &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BicubicSurface</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a4eb540890a06e377b19171ca0b546316</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;y, const Matrix &amp;f, Real smoothness=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BicubicSurface</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>ae9dd87906575e90279703addf61f4c80</anchor>
      <arglist>(const Vec2 &amp;XY, const Vec2 &amp;spacing, const Matrix &amp;f, Real smoothness=0)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a3c85895c61c9a54329e9782efe1c9a63</anchor>
      <arglist>(const Vec2 &amp;XY, PatchHint &amp;hint) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a555d0b83780db1ca30104e8c33799c3c</anchor>
      <arglist>(const Vec2 &amp;XY) const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec3</type>
      <name>calcUnitNormal</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a3be5d330c852f17455e01c3032af42b2</anchor>
      <arglist>(const Vec2 &amp;XY, PatchHint &amp;hint) const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec3</type>
      <name>calcUnitNormal</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>ab10acda40add5193fd5fc85f9c485774</anchor>
      <arglist>(const Vec2 &amp;XY) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>ae4ebf00891ff7c736ca2d78bb4ed7eb4</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vec2 &amp;XY, PatchHint &amp;hint) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>aedf9739d4adbd415d664b3806f582508</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vec2 &amp;XY) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurfaceDefined</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>ac60a9f46a6546d318736ee120aaca9a0</anchor>
      <arglist>(const Vec2 &amp;XY) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getMinXY</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a646fd7a7126fc2ff3bc8cd32cb52555f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getMaxXY</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a1d7c415eb760219aaa3d35a0c621846b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PolygonalMesh</type>
      <name>createPolygonalMesh</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>ac977fe3869878e3755a57a77d6aeae89</anchor>
      <arglist>(Real resolution=1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAccesses</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>ab1866dc5bad498298394448d158a82ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAccessesSamePoint</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a508dd423a378bf14cbbef8bd9fc65db9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAccessesSamePatch</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a033a8e14d013727b53f2738d23d650bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAccessesNearbyPatch</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a478468ab44e8ec34ff7dbb74a8a5bb38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStatistics</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a9e25c46d3d03cc1cb652523fd2e2b98d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BicubicSurface</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>ac57d7ec45bed3a0914ec9a4e5f053bba</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;y, const Matrix &amp;f, const Matrix &amp;fx, const Matrix &amp;fy, const Matrix &amp;fxy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BicubicSurface</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a84c681c0997ea7f57896a4444a77e9cb</anchor>
      <arglist>(const Vec2 &amp;XY, const Vec2 &amp;spacing, const Matrix &amp;f, const Matrix &amp;fx, const Matrix &amp;fy, const Matrix &amp;fxy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcParaboloid</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a1127d93ae5897e00484a349540702631</anchor>
      <arglist>(const Vec2 &amp;XY, PatchHint &amp;hint, Transform &amp;X_SP, Vec2 &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcParaboloid</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>afaa3bbd3a85c0a3c20198cc16b0a02ca</anchor>
      <arglist>(const Vec2 &amp;XY, Transform &amp;X_SP, Vec2 &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNumPatches</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>af61a2268aa4d754d75074710ac97f901</anchor>
      <arglist>(int &amp;nx, int &amp;ny) const </arglist>
    </member>
    <member kind="function">
      <type>Geo::BicubicHermitePatch</type>
      <name>calcHermitePatch</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a5a02ff972c4c1f7a0fa4eb1581fac5c4</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <type>Geo::BicubicBezierPatch</type>
      <name>calcBezierPatch</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a446d1a8d5810bb20f77941786153b2ac</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a362ecf8e475831a8a370474ab958271b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1BicubicSurface.html</anchorfile>
      <anchor>a3cda5aaffdbf64aef0da2f99da142090</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::BicubicSurface::PatchHint</name>
    <filename>classSimTK_1_1BicubicSurface_1_1PatchHint.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchHint</name>
      <anchorfile>classSimTK_1_1BicubicSurface_1_1PatchHint.html</anchorfile>
      <anchor>ad20cdfa58ce82848213c4fca2ffe0ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchHint</name>
      <anchorfile>classSimTK_1_1BicubicSurface_1_1PatchHint.html</anchorfile>
      <anchor>aefe5959e1909923b512a558038cbc747</anchor>
      <arglist>(const PatchHint &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>PatchHint &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1BicubicSurface_1_1PatchHint.html</anchorfile>
      <anchor>a5d1fc8ee6ce1056a361f63e8129bad9d</anchor>
      <arglist>(const PatchHint &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchHint</name>
      <anchorfile>classSimTK_1_1BicubicSurface_1_1PatchHint.html</anchorfile>
      <anchor>a10ed7bd2a2c687cdafb8b3cfe9b11b41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSimTK_1_1BicubicSurface_1_1PatchHint.html</anchorfile>
      <anchor>a523024cd4e0b16311c83ffe6653e45c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1BicubicSurface_1_1PatchHint.html</anchorfile>
      <anchor>a072b7f4f768694fd3084d8e484a73bf6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::BicubicFunction</name>
    <filename>classSimTK_1_1BicubicFunction.html</filename>
    <base>Function_&lt; Real &gt;</base>
    <member kind="function">
      <type></type>
      <name>BicubicFunction</name>
      <anchorfile>classSimTK_1_1BicubicFunction.html</anchorfile>
      <anchor>a20c25dee2695f023f5dc080028c2c011</anchor>
      <arglist>(const BicubicSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>const BicubicSurface &amp;</type>
      <name>getBicubicSurface</name>
      <anchorfile>classSimTK_1_1BicubicFunction.html</anchorfile>
      <anchor>a77379f9e295437a25bd4e143a3379546</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1BicubicFunction.html</anchorfile>
      <anchor>ad175567d602b7a565a971cf5764a2fad</anchor>
      <arglist>(const Vector &amp;XY) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Real</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1BicubicFunction.html</anchorfile>
      <anchor>a29259bbb9178c22bfafb887180e8e318</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vector &amp;XY) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgumentSize</name>
      <anchorfile>classSimTK_1_1BicubicFunction.html</anchorfile>
      <anchor>ae788b59cd4e45a4547520f8cb87178c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxDerivativeOrder</name>
      <anchorfile>classSimTK_1_1BicubicFunction.html</anchorfile>
      <anchor>a4eec710ab48de2953b3a669082c413eb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CollisionDetectionAlgorithm</name>
    <filename>classSimTK_1_1CollisionDetectionAlgorithm.html</filename>
    <class kind="struct">SimTK::CollisionDetectionAlgorithm::AlgorithmMap</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::ConvexConvex</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::HalfSpaceEllipsoid</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::HalfSpaceSphere</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::HalfSpaceTriangleMesh</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::SphereSphere</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::SphereTriangleMesh</class>
    <class kind="class">SimTK::CollisionDetectionAlgorithm::TriangleMeshTriangleMesh</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionDetectionAlgorithm</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm.html</anchorfile>
      <anchor>ab6a490dc4e3b03371cf6a9b4c94304e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processObjects</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm.html</anchorfile>
      <anchor>a88c9587bdca293a9ee798a1475bf0326</anchor>
      <arglist>(ContactSurfaceIndex index1, const ContactGeometry &amp;object1, const Transform &amp;transform1, ContactSurfaceIndex index2, const ContactGeometry &amp;object2, const Transform &amp;transform2, Array_&lt; Contact &gt; &amp;contacts) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerAlgorithm</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm.html</anchorfile>
      <anchor>ac9fe2e739071a5012de956e15c596334</anchor>
      <arglist>(ContactGeometryTypeId type1, ContactGeometryTypeId type2, CollisionDetectionAlgorithm *algorithm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionDetectionAlgorithm *</type>
      <name>getAlgorithm</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm.html</anchorfile>
      <anchor>a88526b0ffe098ad6cb4bb980bb0a6dff</anchor>
      <arglist>(ContactGeometryTypeId type1, ContactGeometryTypeId type2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CollisionDetectionAlgorithm::ConvexConvex</name>
    <filename>classSimTK_1_1CollisionDetectionAlgorithm_1_1ConvexConvex.html</filename>
    <base>SimTK::CollisionDetectionAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConvexConvex</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1ConvexConvex.html</anchorfile>
      <anchor>a46b6c372fcb555e6cb0056868eb7efbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processObjects</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1ConvexConvex.html</anchorfile>
      <anchor>a0bcae1705ddeb6cdef4c2dde63952aab</anchor>
      <arglist>(ContactSurfaceIndex index1, const ContactGeometry &amp;object1, const Transform &amp;transform1, ContactSurfaceIndex index2, const ContactGeometry &amp;object2, const Transform &amp;transform2, Array_&lt; Contact &gt; &amp;contacts) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CollisionDetectionAlgorithm::HalfSpaceEllipsoid</name>
    <filename>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceEllipsoid.html</filename>
    <base>SimTK::CollisionDetectionAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HalfSpaceEllipsoid</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceEllipsoid.html</anchorfile>
      <anchor>ab920cbbb673476123164d57526084b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processObjects</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceEllipsoid.html</anchorfile>
      <anchor>a845b287eed1e917cf72ec91c783fa40d</anchor>
      <arglist>(ContactSurfaceIndex index1, const ContactGeometry &amp;object1, const Transform &amp;transform1, ContactSurfaceIndex index2, const ContactGeometry &amp;object2, const Transform &amp;transform2, Array_&lt; Contact &gt; &amp;contacts) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CollisionDetectionAlgorithm::HalfSpaceSphere</name>
    <filename>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceSphere.html</filename>
    <base>SimTK::CollisionDetectionAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HalfSpaceSphere</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceSphere.html</anchorfile>
      <anchor>a7895e1492c06f987c3f1e692affd8d2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processObjects</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceSphere.html</anchorfile>
      <anchor>a8fa66a5d1e140c93613cbd0f5dd59c07</anchor>
      <arglist>(ContactSurfaceIndex index1, const ContactGeometry &amp;object1, const Transform &amp;transform1, ContactSurfaceIndex index2, const ContactGeometry &amp;object2, const Transform &amp;transform2, Array_&lt; Contact &gt; &amp;contacts) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CollisionDetectionAlgorithm::HalfSpaceTriangleMesh</name>
    <filename>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceTriangleMesh.html</filename>
    <base>SimTK::CollisionDetectionAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HalfSpaceTriangleMesh</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceTriangleMesh.html</anchorfile>
      <anchor>a3e8131e9ecc3e774c761365743e811c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processObjects</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1HalfSpaceTriangleMesh.html</anchorfile>
      <anchor>a3d8e7431b16814436a1a3bd282217b7d</anchor>
      <arglist>(ContactSurfaceIndex index1, const ContactGeometry &amp;object1, const Transform &amp;transform1, ContactSurfaceIndex index2, const ContactGeometry &amp;object2, const Transform &amp;transform2, Array_&lt; Contact &gt; &amp;contacts) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CollisionDetectionAlgorithm::SphereSphere</name>
    <filename>classSimTK_1_1CollisionDetectionAlgorithm_1_1SphereSphere.html</filename>
    <base>SimTK::CollisionDetectionAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SphereSphere</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1SphereSphere.html</anchorfile>
      <anchor>ab7d973c657b614f191a188f44f083c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processObjects</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1SphereSphere.html</anchorfile>
      <anchor>ac98ed112ee5d9c1383e3d484f1fb523f</anchor>
      <arglist>(ContactSurfaceIndex index1, const ContactGeometry &amp;object1, const Transform &amp;transform1, ContactSurfaceIndex index2, const ContactGeometry &amp;object2, const Transform &amp;transform2, Array_&lt; Contact &gt; &amp;contacts) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CollisionDetectionAlgorithm::SphereTriangleMesh</name>
    <filename>classSimTK_1_1CollisionDetectionAlgorithm_1_1SphereTriangleMesh.html</filename>
    <base>SimTK::CollisionDetectionAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SphereTriangleMesh</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1SphereTriangleMesh.html</anchorfile>
      <anchor>aefd76b7d640a6b58200c49bb29c22cb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processObjects</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1SphereTriangleMesh.html</anchorfile>
      <anchor>aa30bd8863c1105d35992d2db5eec6a3b</anchor>
      <arglist>(ContactSurfaceIndex index1, const ContactGeometry &amp;object1, const Transform &amp;transform1, ContactSurfaceIndex index2, const ContactGeometry &amp;object2, const Transform &amp;transform2, Array_&lt; Contact &gt; &amp;contacts) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CollisionDetectionAlgorithm::TriangleMeshTriangleMesh</name>
    <filename>classSimTK_1_1CollisionDetectionAlgorithm_1_1TriangleMeshTriangleMesh.html</filename>
    <base>SimTK::CollisionDetectionAlgorithm</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TriangleMeshTriangleMesh</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1TriangleMeshTriangleMesh.html</anchorfile>
      <anchor>ae3751d355fdb4ded26ef19de6163786a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processObjects</name>
      <anchorfile>classSimTK_1_1CollisionDetectionAlgorithm_1_1TriangleMeshTriangleMesh.html</anchorfile>
      <anchor>af65fcf0a79ff54d0e3d412f87c1f6f9f</anchor>
      <arglist>(ContactSurfaceIndex index1, const ContactGeometry &amp;object1, const Transform &amp;transform1, ContactSurfaceIndex index2, const ContactGeometry &amp;object2, const Transform &amp;transform2, Array_&lt; Contact &gt; &amp;contacts) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Contact</name>
    <filename>classSimTK_1_1Contact.html</filename>
    <member kind="enumeration">
      <name>Condition</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aba74a08480716a901266c43423e2614f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aba74a08480716a901266c43423e2614fa3d88aec537ddc279ae8cfaec78145602</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Untracked</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aba74a08480716a901266c43423e2614fa92810d8adf5f83c72cecca9a4616f73d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Anticipated</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aba74a08480716a901266c43423e2614fa6d1ba31131fb54462df3c9ec5ffe56e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NewContact</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aba74a08480716a901266c43423e2614fafd255c39ad34b488fd70bd08e475bb5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ongoing</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aba74a08480716a901266c43423e2614fa67cf1b42284e645f9dbfcf87e876d228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Broken</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aba74a08480716a901266c43423e2614fade6e83c0882eb87b3755a8663c5e12bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aa2b59a11c95b9cfb5af155df0ea014e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a14fac9b5f7a3077b999a0b9b2159e622</anchor>
      <arglist>(const Contact &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Contact</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a32a4bd4020575860760ef3bdb443776c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Contact &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a62fa27cbd157e22965e6a44d779401ee</anchor>
      <arglist>(const Contact &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a635aca455d2b905f377f3f321c22013b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a6d2d27d03b15c0ffc333d3672f1c37aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContactId</type>
      <name>getContactId</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a39d8a9461df2a4fb0f4e606e3c9ebab3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Condition</type>
      <name>getCondition</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a6cc39f261d74da495d4de71bc2303461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContactSurfaceIndex</type>
      <name>getSurface1</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>af94910c33e25fff1f03935176f8b6234</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContactSurfaceIndex</type>
      <name>getSurface2</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a4be258dc3ff040e776fceed0ca3dcf35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a7cd7214dab574d283d836ee542643df1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Contact &amp;</type>
      <name>setContactId</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aaef287263be3865de78ad16c31d0b7ba</anchor>
      <arglist>(ContactId id)</arglist>
    </member>
    <member kind="function">
      <type>Contact &amp;</type>
      <name>setCondition</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a5985f7faebe242367084f0ee394d2054</anchor>
      <arglist>(Condition condition)</arglist>
    </member>
    <member kind="function">
      <type>Contact &amp;</type>
      <name>setSurfaces</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>ac2617750b9459c1d167e694f29f7fc35</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2)</arglist>
    </member>
    <member kind="function">
      <type>Contact &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>aa629ae443f065c56fe257081f712518f</anchor>
      <arglist>(const Transform &amp;X_S1S2)</arglist>
    </member>
    <member kind="function">
      <type>ContactTypeId</type>
      <name>getTypeId</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a07b5eb74abdad5ab079cdbf36bdfbbe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ContactImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a0e726eb58e1cdb668cbd5c0b72c22f8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContactImpl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a58996ec7feebbeacbaf78f8dc704ae9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>nameOfCondition</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a3d3d0adad83c4fb7d53429e96d2732e1</anchor>
      <arglist>(Condition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactId</type>
      <name>createNewContactId</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>a1eacc9d74c2b2b1034ae4fbbd1ef05f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Contact</name>
      <anchorfile>classSimTK_1_1Contact.html</anchorfile>
      <anchor>ab2dfbc3ef8441b713007cb3f3c4f3807</anchor>
      <arglist>(ContactImpl *impl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::UntrackedContact</name>
    <filename>classSimTK_1_1UntrackedContact.html</filename>
    <base>SimTK::Contact</base>
    <member kind="function">
      <type></type>
      <name>UntrackedContact</name>
      <anchorfile>classSimTK_1_1UntrackedContact.html</anchorfile>
      <anchor>a459ced1c94941b324ca4dbbea6912e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UntrackedContact</name>
      <anchorfile>classSimTK_1_1UntrackedContact.html</anchorfile>
      <anchor>a697692f7d45b1a85b7dee2923203894d</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1UntrackedContact.html</anchorfile>
      <anchor>a6fd69fdd13d4d0285bbf920256ca8c73</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1UntrackedContact.html</anchorfile>
      <anchor>a92d4522694a781cc8e6471d79c568536</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::BrokenContact</name>
    <filename>classSimTK_1_1BrokenContact.html</filename>
    <base>SimTK::Contact</base>
    <member kind="function">
      <type></type>
      <name>BrokenContact</name>
      <anchorfile>classSimTK_1_1BrokenContact.html</anchorfile>
      <anchor>aafc473bfbf651d696c4dee7df8d424f4</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2, const Transform &amp;X_S1S2, Real separation)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getSeparation</name>
      <anchorfile>classSimTK_1_1BrokenContact.html</anchorfile>
      <anchor>ae1afdb7ed92193949268d1f2b88ce978</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1BrokenContact.html</anchorfile>
      <anchor>ab7fbef6fdda87a7d8cc81cecd418d3cd</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1BrokenContact.html</anchorfile>
      <anchor>ad67e5044afb8e88606ee3c44a3a0fdd4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CircularPointContact</name>
    <filename>classSimTK_1_1CircularPointContact.html</filename>
    <base>SimTK::Contact</base>
    <member kind="function">
      <type></type>
      <name>CircularPointContact</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a38fdf9bc98768c5d843eeb65b30f6bad</anchor>
      <arglist>(ContactSurfaceIndex surf1, Real radius1, ContactSurfaceIndex surf2, Real radius2, const Transform &amp;X_S1S2, Real radius, Real depth, const Vec3 &amp;origin_S1, const UnitVec3 &amp;normal_S1)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadius1</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a9c01049c25a36f4eddcea09d5ad57739</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadius2</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a1d48a0140c0c3db97a03cb0776291baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEffectiveRadius</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a121505b7617483431074bc84ee24199a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDepth</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>ae30d3be5165c4755ea880603b8202956</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a70a344f576f0be9bc9abb1bf6cd91376</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getNormal</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a9ba5d46d187fef43d9d5ee534d8fe098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a1882e307dc072bf1977a6aea604171ab</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CircularPointContact &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a26423bf8baf59bd3992db5e5ec305ab6</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CircularPointContact &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>aea599d704da73b4d72b958debcf6e748</anchor>
      <arglist>(Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1CircularPointContact.html</anchorfile>
      <anchor>a2c7ef988a36749aa65a3c72896d3c9df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::EllipticalPointContact</name>
    <filename>classSimTK_1_1EllipticalPointContact.html</filename>
    <base>SimTK::Contact</base>
    <member kind="function">
      <type></type>
      <name>EllipticalPointContact</name>
      <anchorfile>classSimTK_1_1EllipticalPointContact.html</anchorfile>
      <anchor>a5fa204ce6337e9674bdd16f7e5f2e320</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2, const Transform &amp;X_S1S2, const Transform &amp;X_S1C, const Vec2 &amp;k, Real depth)</arglist>
    </member>
    <member kind="function">
      <type>const Vec2 &amp;</type>
      <name>getCurvatures</name>
      <anchorfile>classSimTK_1_1EllipticalPointContact.html</anchorfile>
      <anchor>ad4a1464cb290e29391099211218f091b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getContactFrame</name>
      <anchorfile>classSimTK_1_1EllipticalPointContact.html</anchorfile>
      <anchor>a72fc08b41b73e67d00ef666443cbe61d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDepth</name>
      <anchorfile>classSimTK_1_1EllipticalPointContact.html</anchorfile>
      <anchor>a8e9e5c7b8ead895c52df8dff12ec965e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1EllipticalPointContact.html</anchorfile>
      <anchor>a7593812a6648f7d70583ca013d7e5046</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const EllipticalPointContact &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1EllipticalPointContact.html</anchorfile>
      <anchor>a16b59437f50e04cee11c59a324d157e1</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EllipticalPointContact &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1EllipticalPointContact.html</anchorfile>
      <anchor>af5acfec33f11ab4c703198e3a7866b48</anchor>
      <arglist>(Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1EllipticalPointContact.html</anchorfile>
      <anchor>a05c8ba9dab03d6836217598483a24791</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::TriangleMeshContact</name>
    <filename>classSimTK_1_1TriangleMeshContact.html</filename>
    <base>SimTK::Contact</base>
    <member kind="function">
      <type></type>
      <name>TriangleMeshContact</name>
      <anchorfile>classSimTK_1_1TriangleMeshContact.html</anchorfile>
      <anchor>acad305050cf828260c446ef5f8a77f29</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2, const Transform &amp;X_S1S2, const std::set&lt; int &gt; &amp;faces1, const std::set&lt; int &gt; &amp;faces2)</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; int &gt; &amp;</type>
      <name>getSurface1Faces</name>
      <anchorfile>classSimTK_1_1TriangleMeshContact.html</anchorfile>
      <anchor>af4ef2e78512cd24fcae4d929ad06dd46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; int &gt; &amp;</type>
      <name>getSurface2Faces</name>
      <anchorfile>classSimTK_1_1TriangleMeshContact.html</anchorfile>
      <anchor>a50ceb04ea9fdcf899fdbd20c255e0ead</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1TriangleMeshContact.html</anchorfile>
      <anchor>a4bc5ed6fece765657462a410f5c29c5e</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TriangleMeshContact &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1TriangleMeshContact.html</anchorfile>
      <anchor>a98ea8487c6b4be03239303d9206e753d</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TriangleMeshContact &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1TriangleMeshContact.html</anchorfile>
      <anchor>a94cc12e2391c960f20fff0c47effa0ad</anchor>
      <arglist>(Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1TriangleMeshContact.html</anchorfile>
      <anchor>ac6ed46f56a5f3d72182f782a46727131</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PointContact</name>
    <filename>classSimTK_1_1PointContact.html</filename>
    <base>SimTK::Contact</base>
    <member kind="function">
      <type></type>
      <name>PointContact</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>a00c33f14fbc21152c7296a57702c3e5c</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2, Vec3 &amp;location, Vec3 &amp;normal, Real radius1, Real radius2, Real depth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointContact</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>a55890369d972d06303cdfd1e1f0e0587</anchor>
      <arglist>(ContactSurfaceIndex surf1, ContactSurfaceIndex surf2, Vec3 &amp;location, Vec3 &amp;normal, Real radius, Real depth)</arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getLocation</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>a2c0a884e4c7a3035b13e620570becb14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getNormal</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>ae43f020d39ecd65a0e43bb03c6096df5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadiusOfCurvature1</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>af3116c5332513976eea6b319095bfd8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadiusOfCurvature2</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>ab3035c87ad134450516ec86ea18681f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEffectiveRadiusOfCurvature</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>acb2a1348626f4a8a21f0318a3026c09e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDepth</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>a77ac9c6036fdafc62cf01d17960f44d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>ae1840cb4936d016e6185654c934e362d</anchor>
      <arglist>(const Contact &amp;contact)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1PointContact.html</anchorfile>
      <anchor>a648292b81b62f364cf4969bf71a09e2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry</name>
    <filename>classSimTK_1_1ContactGeometry.html</filename>
    <class kind="class">SimTK::ContactGeometry::Cylinder</class>
    <class kind="class">SimTK::ContactGeometry::Ellipsoid</class>
    <class kind="class">SimTK::ContactGeometry::HalfSpace</class>
    <class kind="class">SimTK::ContactGeometry::SmoothHeightMap</class>
    <class kind="class">SimTK::ContactGeometry::Sphere</class>
    <class kind="class">SimTK::ContactGeometry::Torus</class>
    <class kind="class">SimTK::ContactGeometry::TriangleMesh</class>
    <member kind="function">
      <type></type>
      <name>ContactGeometry</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a8fb7742035ba957d61c9e1b96379eb2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactGeometry</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a8aa642e845dd9f30b956af41f9531dbf</anchor>
      <arglist>(const ContactGeometry &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ContactGeometry &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>afc513cdb28da4f1964c2edae11e36ab5</anchor>
      <arglist>(const ContactGeometry &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ContactGeometry</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a4b2f8d53493d9b837bc4663bb96bb25f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecorativeGeometry</type>
      <name>createDecorativeGeometry</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ae7e0f741896db280221acbaf88e53af2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findNearestPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>afb0c5420f65c5e9651da236b123abd6c</anchor>
      <arglist>(const Vec3 &amp;position, bool &amp;inside, UnitVec3 &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>projectDownhillToNearestPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a10f3c96f671256f47868b1ed1e2a8c0e</anchor>
      <arglist>(const Vec3 &amp;pointQ) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trackSeparationFromLine</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>af38a5486366bc76f682e030557ef9d2d</anchor>
      <arglist>(const Vec3 &amp;pointOnLine, const UnitVec3 &amp;directionOfLine, const Vec3 &amp;startingGuessForClosestPoint, Vec3 &amp;newClosestPointOnSurface, Vec3 &amp;closestPointOnLine, Real &amp;height) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsRay</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a7f7d1ab99c553c4181401f0544096219</anchor>
      <arglist>(const Vec3 &amp;origin, const UnitVec3 &amp;direction, Real &amp;distance, UnitVec3 &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBoundingSphere</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ab54d1f8d2185432686c0120d7827a1d3</anchor>
      <arglist>(Vec3 &amp;center, Real &amp;radius) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSmooth</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a1702e03e17f48dd192c5e03ae832bf11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcCurvature</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a72359a3ff543e2738ca993a94f820c62</anchor>
      <arglist>(const Vec3 &amp;point, Vec2 &amp;curvature, Rotation &amp;orientation) const </arglist>
    </member>
    <member kind="function">
      <type>const Function &amp;</type>
      <name>getImplicitFunction</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>aa5bc98d74d0b2ef710ac0c7a37c2eb1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcSurfaceValue</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>afdc1876dec0fe2d7477f7a0d7963984f</anchor>
      <arglist>(const Vec3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec3</type>
      <name>calcSurfaceUnitNormal</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a98128aebf65e218bf30cb95902fff370</anchor>
      <arglist>(const Vec3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>calcSurfaceGradient</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a75f55a4b4ffaca795b67ebe9c4361391</anchor>
      <arglist>(const Vec3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>Mat33</type>
      <name>calcSurfaceHessian</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ae90f9622fbc0f4a33c8c7a48ddffbf80</anchor>
      <arglist>(const Vec3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcGaussianCurvature</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a5eee84ba820a0a5ddcee45b9c34e5872</anchor>
      <arglist>(const Vec3 &amp;gradient, const Mat33 &amp;Hessian) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcGaussianCurvature</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a6d8b2fdc5f43e40bb55a58f3e715901d</anchor>
      <arglist>(const Vec3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcSurfaceCurvatureInDirection</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ae4075c608d174b340de090ced3ebd8b4</anchor>
      <arglist>(const Vec3 &amp;point, const UnitVec3 &amp;direction) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConvex</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a124b7a9d9e4b149c687b9c018f94960e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>calcSupportPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a254e64ae7e6e38394a8c4992dff16265</anchor>
      <arglist>(UnitVec3 direction) const </arglist>
    </member>
    <member kind="function">
      <type>ContactGeometryTypeId</type>
      <name>getTypeId</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a41d004245f73135dd381b2e444076523</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactGeometry</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ac648a4888974dc91db4c67ee3c21ef72</anchor>
      <arglist>(ContactGeometryImpl *impl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwnerHandle</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a5b3b8f5e538b4d9694ed00cdbafb890f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyHandle</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a60b391744050def3990cbdff07e4a587</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a1ac6161c9563beae988704586ea4a503</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ContactGeometryImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>af090db21c433c8ca4d5451d0480d7332</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ContactGeometryImpl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>af1bbdd8a3d084c2030b29d9618b64a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGeodesic</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ac877f1ff8269b3e1fc51e583bd2fe688</anchor>
      <arglist>(const Vec3 &amp;xP, const Vec3 &amp;xQ, const Vec3 &amp;xSP, const GeodesicOptions &amp;options, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>continueGeodesic</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ab313b6f286974b9fc95519fdf1446c8c</anchor>
      <arglist>(const Vec3 &amp;xP, const Vec3 &amp;xQ, const Geodesic &amp;prevGeod, const GeodesicOptions &amp;options, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeStraightLineGeodesic</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a48d4faaeb7eeff2913d6e11bb49e19cc</anchor>
      <arglist>(const Vec3 &amp;xP, const Vec3 &amp;xQ, const UnitVec3 &amp;defaultDirectionIfNeeded, const GeodesicOptions &amp;options, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shootGeodesicInDirectionUntilLengthReached</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a0e5223f17e99313c9f4b68a0b93f4e51</anchor>
      <arglist>(const Vec3 &amp;xP, const UnitVec3 &amp;tP, const Real &amp;terminatingLength, const GeodesicOptions &amp;options, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGeodesicReverseSensitivity</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>aacc14c2fdd351fb3c20dde0d061010b9</anchor>
      <arglist>(Geodesic &amp;geodesic, const Vec2 &amp;initSensitivity=Vec2(0, 1)) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shootGeodesicInDirectionUntilPlaneHit</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a8854ba132527140fde6e81a9cba3efad</anchor>
      <arglist>(const Vec3 &amp;xP, const UnitVec3 &amp;tP, const Plane &amp;terminatingPlane, const GeodesicOptions &amp;options, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGeodesic</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a8bc7ed34b48119339b007f0bd2ad2971</anchor>
      <arglist>(const Vec3 &amp;xP, const Vec3 &amp;xQ, const Vec3 &amp;tPhint, const Vec3 &amp;tQhint, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGeodesicUsingOrthogonalMethod</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a2b20f84a3b887f94e886671a3a50690e</anchor>
      <arglist>(const Vec3 &amp;xP, const Vec3 &amp;xQ, const Vec3 &amp;tPhint, Real lengthHint, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGeodesicUsingOrthogonalMethod</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>aa523b26131ba612d8f05a9252daf9455</anchor>
      <arglist>(const Vec3 &amp;xP, const Vec3 &amp;xQ, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>calcSplitGeodError</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ab3f0fce0e2367e16e8cd9add07ae9629</anchor>
      <arglist>(const Vec3 &amp;P, const Vec3 &amp;Q, const UnitVec3 &amp;tP, const UnitVec3 &amp;tQ, Geodesic *geod=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shootGeodesicInDirectionUntilLengthReachedAnalytical</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>aca086606fa88279c76639a094b2dcdbf</anchor>
      <arglist>(const Vec3 &amp;xP, const UnitVec3 &amp;tP, const Real &amp;terminatingLength, const GeodesicOptions &amp;options, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shootGeodesicInDirectionUntilPlaneHitAnalytical</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a570abf10b0f44148ec6b2539487060b0</anchor>
      <arglist>(const Vec3 &amp;xP, const UnitVec3 &amp;tP, const Plane &amp;terminatingPlane, const GeodesicOptions &amp;options, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGeodesicAnalytical</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>aa7bd424b4371ce84f98006e5e2d56b96</anchor>
      <arglist>(const Vec3 &amp;xP, const Vec3 &amp;xQ, const Vec3 &amp;tPhint, const Vec3 &amp;tQhint, Geodesic &amp;geod) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>calcSplitGeodErrorAnalytical</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>abf87c2f0f132d43011ae0e0774febd16</anchor>
      <arglist>(const Vec3 &amp;P, const Vec3 &amp;Q, const UnitVec3 &amp;tP, const UnitVec3 &amp;tQ, Geodesic *geod=0) const </arglist>
    </member>
    <member kind="function">
      <type>const Plane &amp;</type>
      <name>getPlane</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>aea5aec5f1f5abad2f11786283b4207d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlane</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ae2db23f49f06ceb052c03c258a6435b1</anchor>
      <arglist>(const Plane &amp;plane) const </arglist>
    </member>
    <member kind="function">
      <type>const Geodesic &amp;</type>
      <name>getGeodP</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>ae461cb3f689fb80f87d57a0598429fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Geodesic &amp;</type>
      <name>getGeodQ</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a485010a168d0ee4403ec49ff910f18ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int</type>
      <name>getNumGeodesicsShot</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>adae17a66dcc9684d84d5c3404d06108c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVizReporter</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a448713b9c3f1f6dae4e3bc8d61def8fe</anchor>
      <arglist>(ScheduledEventReporter *reporter) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2</type>
      <name>evalParametricCurvature</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a990797bf74d949e5eb6fe6ccc02d56db</anchor>
      <arglist>(const Vec3 &amp;P, const UnitVec3 &amp;nn, const Vec3 &amp;dPdu, const Vec3 &amp;dPdv, const Vec3 &amp;d2Pdu2, const Vec3 &amp;d2Pdv2, const Vec3 &amp;d2Pdudv, Transform &amp;X_EP)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>combineParaboloids</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a7d96a97f8100e4a46194654f0bdf22d4</anchor>
      <arglist>(const Rotation &amp;R_SP1, const Vec2 &amp;k1, const UnitVec3 &amp;x2, const Vec2 &amp;k2, Rotation &amp;R_SP, Vec2 &amp;k)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>combineParaboloids</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a15a0968761d422b1f0bf0045416fef16</anchor>
      <arglist>(const Rotation &amp;R_SP1, const Vec2 &amp;k1, const UnitVec3 &amp;x2, const Vec2 &amp;k2, Vec2 &amp;k)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ContactGeometryImpl *</type>
      <name>impl</name>
      <anchorfile>classSimTK_1_1ContactGeometry.html</anchorfile>
      <anchor>a03ff2fddea5008e383fa7588bb813837</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry::Cylinder</name>
    <filename>classSimTK_1_1ContactGeometry_1_1Cylinder.html</filename>
    <base>SimTK::ContactGeometry</base>
    <member kind="function">
      <type></type>
      <name>Cylinder</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>aa181ce6f22c8ecabe759c4853e6e7240</anchor>
      <arglist>(Real radius)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadius</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>a06b35bade4ad5c9df20a9d11361d4442</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>ae9cfe3443e7cb3fa75e1cee7573351ce</anchor>
      <arglist>(Real radius)</arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>a05d017b106e1ca67bcc6701bbbc6d603</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>a866b27c4db3338943690e2451b462389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>a2147f8fd223b41f2d48b41b909ee5fe8</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Cylinder &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>a46b1643f1d81e9f6e0e7d00e028c33a7</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cylinder &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>a37fba5b8d5105cf986f28bf48a3c85fc</anchor>
      <arglist>(ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactGeometryTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Cylinder.html</anchorfile>
      <anchor>a6e6063f54474310afbc58bdc3f134ef0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry::Ellipsoid</name>
    <filename>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</filename>
    <base>SimTK::ContactGeometry</base>
    <member kind="function">
      <type></type>
      <name>Ellipsoid</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a1b5e9cd2dff29adbcca6fbf155ce8996</anchor>
      <arglist>(const Vec3 &amp;radii)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getRadii</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>ada50943a0218037e6cb2d130713bb03e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadii</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>ac06e0e7c5b429b2c1b79326897110c73</anchor>
      <arglist>(const Vec3 &amp;radii)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getCurvatures</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a223a8a5c7b9e47b99f2ae112c855faf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec3</type>
      <name>findUnitNormalAtPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>af11ec6f5a41cdee7a142df6bf1cb7e33</anchor>
      <arglist>(const Vec3 &amp;P) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findPointWithThisUnitNormal</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a4d91ced3dfb4a85b9c641f24d4ef2b2c</anchor>
      <arglist>(const UnitVec3 &amp;n) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findPointInSameDirection</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a8cbdf549cf2a7bf42e344c9e3a8353a4</anchor>
      <arglist>(const Vec3 &amp;Q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findParaboloidAtPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a5d53be5b14e0ceee353965a6750af7e5</anchor>
      <arglist>(const Vec3 &amp;Q, Transform &amp;X_EP, Vec2 &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findParaboloidAtPointWithNormal</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a57e3209d74dceebf42fbcb00a714d790</anchor>
      <arglist>(const Vec3 &amp;Q, const UnitVec3 &amp;n, Transform &amp;X_EP, Vec2 &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a37dc2518939f000468711a052ff38cdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a7518abebbd2d851c03847c95d5739a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a3aca371ea58c41218e7a4d0a715e7547</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Ellipsoid &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a324c71b47a2361e80d50ab20ccbd317f</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ellipsoid &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>ac6448616fd79da06200b2545dd9a099d</anchor>
      <arglist>(ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactGeometryTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Ellipsoid.html</anchorfile>
      <anchor>a769a26279fce49c9f955535d4a42df22</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry::HalfSpace</name>
    <filename>classSimTK_1_1ContactGeometry_1_1HalfSpace.html</filename>
    <base>SimTK::ContactGeometry</base>
    <member kind="function">
      <type></type>
      <name>HalfSpace</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1HalfSpace.html</anchorfile>
      <anchor>a00820313b16f786281f08b9ae4e1b76d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1HalfSpace.html</anchorfile>
      <anchor>a90c0e82400acc423d1799c76170c27fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1HalfSpace.html</anchorfile>
      <anchor>a02950761b987c0bcda7ae9002097ea64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1HalfSpace.html</anchorfile>
      <anchor>ab0677d61eb02f76dc64b9da16c9a8cb7</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const HalfSpace &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1HalfSpace.html</anchorfile>
      <anchor>a8c3615d1bc4fff0498acf641d48ed39e</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HalfSpace &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1HalfSpace.html</anchorfile>
      <anchor>af0fd719f5d4053c6f8e3442e6bacac39</anchor>
      <arglist>(ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactGeometryTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1HalfSpace.html</anchorfile>
      <anchor>a0f92d57dffba5ff789440ec4251f5867</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry::SmoothHeightMap</name>
    <filename>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</filename>
    <base>SimTK::ContactGeometry</base>
    <member kind="function">
      <type></type>
      <name>SmoothHeightMap</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>afb856e483a2bcbf3b1275884f3063089</anchor>
      <arglist>(const BicubicSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>const BicubicSurface &amp;</type>
      <name>getBicubicSurface</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>a056f834513075289086abc839251f687</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OBBTree &amp;</type>
      <name>getOBBTree</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>a3b4f37938deba0635154774435191fc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>a3c42700662bd04b87ee8df5224ccad10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>a7af192abb4eae591785a7cb0ae20afdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>aa9b26aeaa17e2a76f9970c3e55561ef8</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SmoothHeightMap &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>ae890f5cada9e01c9496d4667ef9581bd</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SmoothHeightMap &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>ae29392f49cbe97617b4a6b47a007fe51</anchor>
      <arglist>(ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactGeometryTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1SmoothHeightMap.html</anchorfile>
      <anchor>a438647374dd9f1fc86b1ad5cc43879b3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry::Sphere</name>
    <filename>classSimTK_1_1ContactGeometry_1_1Sphere.html</filename>
    <base>SimTK::ContactGeometry</base>
    <member kind="function">
      <type></type>
      <name>Sphere</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>a79c1101cc53e62c02e4edc0f9547b90d</anchor>
      <arglist>(Real radius)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRadius</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>a2a47eda06992982d1753fcfb90fd21e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>ab362befbca568f146891769cebcffee0</anchor>
      <arglist>(Real radius)</arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>a2eef0222b3931d3f2dd80d9bb8b63498</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>a2dd9d0560803e2578dcb0992ac82eae7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>a526e965876c3eacb0421a75b72eac7a6</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Sphere &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>a8d237f666e7e4ceea12f340399495ba8</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>a466eaab0ea7bdbeeb7342855d420b15a</anchor>
      <arglist>(ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactGeometryTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Sphere.html</anchorfile>
      <anchor>ab5c7235d48c13cfaac877c9b9cec82d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry::Torus</name>
    <filename>classSimTK_1_1ContactGeometry_1_1Torus.html</filename>
    <base>SimTK::ContactGeometry</base>
    <member kind="function">
      <type></type>
      <name>Torus</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>a425dab8fa72610c7dde7ad1d36376edd</anchor>
      <arglist>(Real torusRadius, Real tubeRadius)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTorusRadius</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>acb0d5909ec4ffb65718eea8debe28947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorusRadius</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>ae24a7d8df8e78944c618bc014631db5e</anchor>
      <arglist>(Real radius)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTubeRadius</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>ab6ecdd93642bd7dc7f5bc57c1bf2724d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTubeRadius</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>a03879eae1667bab59520457ecc8429a2</anchor>
      <arglist>(Real radius)</arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>ad9e0fdfcbe1249dd6e89863c0b3b990e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>a43c0c5a1deb3e4729b8b1ccdf4e22088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>a510f86238d58f010c6158daf1d4ef25c</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Torus &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>a61283b1f59ae788458520eb7d3f84032</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Torus &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>ae6d97b65dc8e4dd025ccd6bb40add106</anchor>
      <arglist>(ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactGeometryTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1Torus.html</anchorfile>
      <anchor>a8df2a41bf2cd219553e4c99d762adfbf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry::TriangleMesh</name>
    <filename>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</filename>
    <base>SimTK::ContactGeometry</base>
    <class kind="class">SimTK::ContactGeometry::TriangleMesh::OBBTreeNode</class>
    <member kind="function">
      <type></type>
      <name>TriangleMesh</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a8d7b4bfd6175acb944d54e92b96118b1</anchor>
      <arglist>(const ArrayViewConst_&lt; Vec3 &gt; &amp;vertices, const ArrayViewConst_&lt; int &gt; &amp;faceIndices, bool smooth=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriangleMesh</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a9bc2151edb6813ada2712b7bc245829c</anchor>
      <arglist>(const PolygonalMesh &amp;mesh, bool smooth=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEdges</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>af9637f8801005275a7e798de7a386abc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFaces</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a5ac9e598445f414797507259d094690f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVertices</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>ae06bcfa0aa3ea83a2266b4e40365d7a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getVertexPosition</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>abda25b8372c49dd73f01f925dc7998d3</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFaceEdge</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>add88b1ac62dea1171cd7b60bf03f0874</anchor>
      <arglist>(int face, int edge) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFaceVertex</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>ae8dcb6f8d872592fdb68dcd472e44910</anchor>
      <arglist>(int face, int vertex) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEdgeFace</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a4b4b2d52dcf02fd2839c335319d01f67</anchor>
      <arglist>(int edge, int face) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEdgeVertex</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>ad6cb903a4198f1a84a78c50767188f7d</anchor>
      <arglist>(int edge, int vertex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findVertexEdges</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a0745eb96b18ed6435e0c67497496149b</anchor>
      <arglist>(int vertex, Array_&lt; int &gt; &amp;edges) const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getFaceNormal</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a32845535c20f78d16f709d157b31f1a8</anchor>
      <arglist>(int face) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getFaceArea</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a70a26f83cdaee80393c033d02b9f8c2b</anchor>
      <arglist>(int face) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>acc7c7f1223eeb5e01eccddcda078f861</anchor>
      <arglist>(int face, const Vec2 &amp;uv) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findCentroid</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a6f954e71acfac33cb875729ec8511f03</anchor>
      <arglist>(int face) const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec3</type>
      <name>findNormalAtPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>aaa451a088b8fcb838760aa97fdfcb12e</anchor>
      <arglist>(int face, const Vec2 &amp;uv) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findNearestPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>af6a84c990bc390f438de72db5ed828ce</anchor>
      <arglist>(const Vec3 &amp;position, bool &amp;inside, UnitVec3 &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findNearestPoint</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a2a98e94549aff4bad8a4bdffacf67a0f</anchor>
      <arglist>(const Vec3 &amp;position, bool &amp;inside, int &amp;face, Vec2 &amp;uv) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findNearestPointToFace</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>aa97122f4c85fb10fc50492f3018e42e1</anchor>
      <arglist>(const Vec3 &amp;position, int face, Vec2 &amp;uv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsRay</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a92996b9874343f1556dada0246d1e05f</anchor>
      <arglist>(const Vec3 &amp;origin, const UnitVec3 &amp;direction, Real &amp;distance, UnitVec3 &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsRay</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>aa3e225a455dba54ebd724976579fee17</anchor>
      <arglist>(const Vec3 &amp;origin, const UnitVec3 &amp;direction, Real &amp;distance, int &amp;face, Vec2 &amp;uv) const </arglist>
    </member>
    <member kind="function">
      <type>OBBTreeNode</type>
      <name>getOBBTreeNode</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a120d72f7beb78a4b8191f196fe5c1a5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PolygonalMesh</type>
      <name>createPolygonalMesh</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a16c8397c957279578d6c70438cd29f1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Impl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a71f70d2e2017843ed525882a369efddf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Impl &amp;</type>
      <name>updImpl</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a159fcbac31b7c7a1a390c807d177df62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInstance</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a7331b438b6efd2ade5b37fb5784e6701</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const TriangleMesh &amp;</type>
      <name>getAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>ae7b203b2f7ac058d75beb25c5dbaae64</anchor>
      <arglist>(const ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TriangleMesh &amp;</type>
      <name>updAs</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a48b07be58136154ab7f6dd78ebd5f6c8</anchor>
      <arglist>(ContactGeometry &amp;geo)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ContactGeometryTypeId</type>
      <name>classTypeId</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh.html</anchorfile>
      <anchor>a29b64f4d0382abe2dc35ddff32aa53a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometry::TriangleMesh::OBBTreeNode</name>
    <filename>classSimTK_1_1ContactGeometry_1_1TriangleMesh_1_1OBBTreeNode.html</filename>
    <member kind="function">
      <type></type>
      <name>OBBTreeNode</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh_1_1OBBTreeNode.html</anchorfile>
      <anchor>a3a79d298f4b7ad09d53f0c1c30c12ee9</anchor>
      <arglist>(const OBBTreeNodeImpl &amp;impl)</arglist>
    </member>
    <member kind="function">
      <type>const OrientedBoundingBox &amp;</type>
      <name>getBounds</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh_1_1OBBTreeNode.html</anchorfile>
      <anchor>a9218babbef85ab7d553167da6243b112</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeafNode</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh_1_1OBBTreeNode.html</anchorfile>
      <anchor>a25c9615642c41ff27728ee5bee2886bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OBBTreeNode</type>
      <name>getFirstChildNode</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh_1_1OBBTreeNode.html</anchorfile>
      <anchor>a2d58beb2954505b85ce1eb4b0d16e5f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OBBTreeNode</type>
      <name>getSecondChildNode</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh_1_1OBBTreeNode.html</anchorfile>
      <anchor>ac42e413aa71be563b83850149d24750d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; int &gt; &amp;</type>
      <name>getTriangles</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh_1_1OBBTreeNode.html</anchorfile>
      <anchor>a1b87dcd423629b65f952eae2cccda02d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTriangles</name>
      <anchorfile>classSimTK_1_1ContactGeometry_1_1TriangleMesh_1_1OBBTreeNode.html</anchorfile>
      <anchor>a0322e632ae8cad14a61173146dae6507</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Plane</name>
    <filename>classSimTK_1_1Plane.html</filename>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classSimTK_1_1Plane.html</anchorfile>
      <anchor>acc731e335eb2a23bc53cb84509a979af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classSimTK_1_1Plane.html</anchorfile>
      <anchor>ab9cbfc073810493b4388fec2a367de14</anchor>
      <arglist>(const Vec3 &amp;normal, const Real &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDistance</name>
      <anchorfile>classSimTK_1_1Plane.html</anchorfile>
      <anchor>aa4452c76099bb407b104bb70e998c42e</anchor>
      <arglist>(const Vec3 &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>getNormal</name>
      <anchorfile>classSimTK_1_1Plane.html</anchorfile>
      <anchor>a0b31de7fa0fd810b52b74c9aecd11cd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getOffset</name>
      <anchorfile>classSimTK_1_1Plane.html</anchorfile>
      <anchor>afb1e108bf3a600a8a6925e95c3a47e3e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::GeodHitPlaneEvent</name>
    <filename>classSimTK_1_1GeodHitPlaneEvent.html</filename>
    <base>SimTK::TriggeredEventHandler</base>
    <member kind="function">
      <type></type>
      <name>GeodHitPlaneEvent</name>
      <anchorfile>classSimTK_1_1GeodHitPlaneEvent.html</anchorfile>
      <anchor>a1601e20f19c60aecd87addbcc9f0f2b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeodHitPlaneEvent</name>
      <anchorfile>classSimTK_1_1GeodHitPlaneEvent.html</anchorfile>
      <anchor>a3e9008d74f27ad18063f322bd68712c4</anchor>
      <arglist>(const Plane &amp;aplane)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1GeodHitPlaneEvent.html</anchorfile>
      <anchor>acba414cc60017278818905d149c7ecd7</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleEvent</name>
      <anchorfile>classSimTK_1_1GeodHitPlaneEvent.html</anchorfile>
      <anchor>a2b68ff308bca4efa3d4d0a7334ff1907</anchor>
      <arglist>(State &amp;state, Real accuracy, bool &amp;shouldTerminate) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlane</name>
      <anchorfile>classSimTK_1_1GeodHitPlaneEvent.html</anchorfile>
      <anchor>a0b49b2db6c67f7d206e71058f784e264</anchor>
      <arglist>(const Plane &amp;aplane) const </arglist>
    </member>
    <member kind="function">
      <type>const Plane &amp;</type>
      <name>getPlane</name>
      <anchorfile>classSimTK_1_1GeodHitPlaneEvent.html</anchorfile>
      <anchor>a065b7a7de8b3c4f1d9d52662cf50ed0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const void</type>
      <name>setEnabled</name>
      <anchorfile>classSimTK_1_1GeodHitPlaneEvent.html</anchorfile>
      <anchor>a5638eb22b09ade2bfb63a3a928addc48</anchor>
      <arglist>(bool enabledFlag)</arglist>
    </member>
    <member kind="function">
      <type>const bool</type>
      <name>isEnabled</name>
      <anchorfile>classSimTK_1_1GeodHitPlaneEvent.html</anchorfile>
      <anchor>a1a14a756214d62db0cf2a983e5ed790a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PathDecorator</name>
    <filename>classSimTK_1_1PathDecorator.html</filename>
    <base>SimTK::DecorationGenerator</base>
    <member kind="function">
      <type></type>
      <name>PathDecorator</name>
      <anchorfile>classSimTK_1_1PathDecorator.html</anchorfile>
      <anchor>a392fb651a44aad86b929c4c23b107275</anchor>
      <arglist>(const Vector &amp;x, const Vec3 &amp;O, const Vec3 &amp;I, const Vec3 &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generateDecorations</name>
      <anchorfile>classSimTK_1_1PathDecorator.html</anchorfile>
      <anchor>a3341904d02d336f5a25ce1c058b411a3</anchor>
      <arglist>(const State &amp;state, Array_&lt; DecorativeGeometry &gt; &amp;geometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::PlaneDecorator</name>
    <filename>classSimTK_1_1PlaneDecorator.html</filename>
    <base>SimTK::DecorationGenerator</base>
    <member kind="function">
      <type></type>
      <name>PlaneDecorator</name>
      <anchorfile>classSimTK_1_1PlaneDecorator.html</anchorfile>
      <anchor>a9f5e837aa1a8781f3403158b56f59f4e</anchor>
      <arglist>(const Plane &amp;plane, const Vec3 &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generateDecorations</name>
      <anchorfile>classSimTK_1_1PlaneDecorator.html</anchorfile>
      <anchor>aafbdf7c1c43b1586bf67dc11ac6de01a</anchor>
      <arglist>(const State &amp;state, Array_&lt; DecorativeGeometry &gt; &amp;geometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker</name>
    <filename>classSimTK_1_1ContactTracker.html</filename>
    <class kind="class">SimTK::ContactTracker::ConvexImplicitPair</class>
    <class kind="class">SimTK::ContactTracker::GeneralImplicitPair</class>
    <class kind="class">SimTK::ContactTracker::HalfSpaceEllipsoid</class>
    <class kind="class">SimTK::ContactTracker::HalfSpaceSphere</class>
    <class kind="class">SimTK::ContactTracker::HalfSpaceTriangleMesh</class>
    <class kind="class">SimTK::ContactTracker::SphereSphere</class>
    <class kind="class">SimTK::ContactTracker::SphereTriangleMesh</class>
    <class kind="class">SimTK::ContactTracker::TriangleMeshTriangleMesh</class>
    <member kind="function">
      <type></type>
      <name>ContactTracker</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>aaf6f1eae3a07c7df2750e38d490ce739</anchor>
      <arglist>(ContactGeometryTypeId typeOfSurface1, ContactGeometryTypeId typeOfSurface2)</arglist>
    </member>
    <member kind="function">
      <type>const std::pair&lt; ContactGeometryTypeId, ContactGeometryTypeId &gt; &amp;</type>
      <name>getContactGeometryTypeIds</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>af9eeb125fe42dbbfd019610e00a3d5b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ContactTracker</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>a0dbb3d699ab5f4089ba7c7027984d2eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>af59b8f1dd4bcb0f9848dc8185c80c3ce</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>a44b578ff1f54da7cd939ea996b902995</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>a176fc881665426fb4eb31ee2dfa4a578</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>refineImplicitPair</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>a4e8b5f29b305d4235fc524d0f1e36434</anchor>
      <arglist>(const ContactGeometry &amp;shapeA, Vec3 &amp;pointP_A, const ContactGeometry &amp;shapeB, Vec3 &amp;pointQ_B, const Transform &amp;X_AB, Real accuracyRequested, Real &amp;accuracyAchieved, int &amp;numIterations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec6</type>
      <name>findImplicitPairError</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>a85f74216f5b077b93329782067228490</anchor>
      <arglist>(const ContactGeometry &amp;shapeA, const Vec3 &amp;pointP, const ContactGeometry &amp;shapeB, const Vec3 &amp;pointQ, const Transform &amp;X_AB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat66</type>
      <name>calcImplicitPairJacobian</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>a5000ea17ef890ba5aec8718b2edd551b</anchor>
      <arglist>(const ContactGeometry &amp;shapeA, const Vec3 &amp;pointP, const ContactGeometry &amp;shapeB, const Vec3 &amp;pointQ, const Transform &amp;X_AB, const Vec6 &amp;err0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>estimateConvexImplicitPairContactUsingMPR</name>
      <anchorfile>classSimTK_1_1ContactTracker.html</anchorfile>
      <anchor>a39ec083da5a767f36589d0c43999bff6</anchor>
      <arglist>(const ContactGeometry &amp;shapeA, const ContactGeometry &amp;shapeB, const Transform &amp;X_AB, Vec3 &amp;pointP_A, Vec3 &amp;pointQ_B, UnitVec3 &amp;dirInA, int &amp;numIterations)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker::ConvexImplicitPair</name>
    <filename>classSimTK_1_1ContactTracker_1_1ConvexImplicitPair.html</filename>
    <base>SimTK::ContactTracker</base>
    <member kind="function">
      <type></type>
      <name>ConvexImplicitPair</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1ConvexImplicitPair.html</anchorfile>
      <anchor>a17239b970e35f38c06e555932a9f389e</anchor>
      <arglist>(ContactGeometryTypeId type1, ContactGeometryTypeId type2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConvexImplicitPair</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1ConvexImplicitPair.html</anchorfile>
      <anchor>a9da5e08bdf36dd00b81d8c4c3aa46b36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1ConvexImplicitPair.html</anchorfile>
      <anchor>abbddc748525780e54977960580030e6a</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1ConvexImplicitPair.html</anchorfile>
      <anchor>a4751a96e4a0c21ca8df3b14992803454</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1ConvexImplicitPair.html</anchorfile>
      <anchor>a410f4dfde327941c9d66d5de8dc77889</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker::GeneralImplicitPair</name>
    <filename>classSimTK_1_1ContactTracker_1_1GeneralImplicitPair.html</filename>
    <base>SimTK::ContactTracker</base>
    <member kind="function">
      <type></type>
      <name>GeneralImplicitPair</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1GeneralImplicitPair.html</anchorfile>
      <anchor>a6f84273973099f7ca657994c33b1a942</anchor>
      <arglist>(ContactGeometryTypeId type1, ContactGeometryTypeId type2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GeneralImplicitPair</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1GeneralImplicitPair.html</anchorfile>
      <anchor>a3857ebf988b8d6c806f462a38e7df4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1GeneralImplicitPair.html</anchorfile>
      <anchor>a3f37237e0cb4ba9d0a53dd19607e1212</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1GeneralImplicitPair.html</anchorfile>
      <anchor>a99a9418a40c55cb674c01b6f64663d9f</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1GeneralImplicitPair.html</anchorfile>
      <anchor>ab92c578984ba25cc4715fcacc7aad284</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker::HalfSpaceEllipsoid</name>
    <filename>classSimTK_1_1ContactTracker_1_1HalfSpaceEllipsoid.html</filename>
    <base>SimTK::ContactTracker</base>
    <member kind="function">
      <type></type>
      <name>HalfSpaceEllipsoid</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceEllipsoid.html</anchorfile>
      <anchor>af3387f120a72b2a4360aa84db7218650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HalfSpaceEllipsoid</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceEllipsoid.html</anchorfile>
      <anchor>aafc006381788c2bd3ca153f1399c9f76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceEllipsoid.html</anchorfile>
      <anchor>a0566e2672ff5150e0cb6cdfdb080a0c7</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceEllipsoid.html</anchorfile>
      <anchor>a8f83cb23449aa341ae08380078a04a7c</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceEllipsoid.html</anchorfile>
      <anchor>af325e21b1946d29a80eb5afca98d012d</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker::HalfSpaceSphere</name>
    <filename>classSimTK_1_1ContactTracker_1_1HalfSpaceSphere.html</filename>
    <base>SimTK::ContactTracker</base>
    <member kind="function">
      <type></type>
      <name>HalfSpaceSphere</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceSphere.html</anchorfile>
      <anchor>acfcbd4b613dc4a0b402ff8ff3ffe2d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HalfSpaceSphere</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceSphere.html</anchorfile>
      <anchor>a06a783741dc57b1a6be4960c16579350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceSphere.html</anchorfile>
      <anchor>ac96f9c7222fc986766a17ec6479d894a</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceSphere.html</anchorfile>
      <anchor>abf2ffacfe3697eead40fb269893267bd</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceSphere.html</anchorfile>
      <anchor>a1599573e52b5de19958739b765813f06</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker::HalfSpaceTriangleMesh</name>
    <filename>classSimTK_1_1ContactTracker_1_1HalfSpaceTriangleMesh.html</filename>
    <base>SimTK::ContactTracker</base>
    <member kind="function">
      <type></type>
      <name>HalfSpaceTriangleMesh</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceTriangleMesh.html</anchorfile>
      <anchor>a7948c8176c7d027766bd2c56b833fcfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HalfSpaceTriangleMesh</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceTriangleMesh.html</anchorfile>
      <anchor>a46cf20d3544962316ff9da1c41820ecf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceTriangleMesh.html</anchorfile>
      <anchor>abea11ab3d04747d8daca0828294bbb02</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceTriangleMesh.html</anchorfile>
      <anchor>a1257bbd43c28b6e91a3f47498d534e66</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1HalfSpaceTriangleMesh.html</anchorfile>
      <anchor>a0e445aa058c1ae3cd09e6a00c6e95d29</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker::SphereSphere</name>
    <filename>classSimTK_1_1ContactTracker_1_1SphereSphere.html</filename>
    <base>SimTK::ContactTracker</base>
    <member kind="function">
      <type></type>
      <name>SphereSphere</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereSphere.html</anchorfile>
      <anchor>a8b28b05fbdfc5d6259dddfc78fee7b4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SphereSphere</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereSphere.html</anchorfile>
      <anchor>a879fbae06d1b35c5ad306a2a84ed5af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereSphere.html</anchorfile>
      <anchor>a2ee0d4471ff659dd611730309a278383</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereSphere.html</anchorfile>
      <anchor>a264de6f63ed92b4dda897fc79e3097eb</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereSphere.html</anchorfile>
      <anchor>a29459a385e8dd351c232a7edde212c8c</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker::SphereTriangleMesh</name>
    <filename>classSimTK_1_1ContactTracker_1_1SphereTriangleMesh.html</filename>
    <base>SimTK::ContactTracker</base>
    <member kind="function">
      <type></type>
      <name>SphereTriangleMesh</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereTriangleMesh.html</anchorfile>
      <anchor>a4457d960e466a310f4504111b51214a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SphereTriangleMesh</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereTriangleMesh.html</anchorfile>
      <anchor>a467f9c5c419ae459fb3ed40852be75b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereTriangleMesh.html</anchorfile>
      <anchor>a712ace1982b36fcd19d1e165af5dd18a</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereTriangleMesh.html</anchorfile>
      <anchor>abe9046c40da316315befbb66a8a1b59c</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1SphereTriangleMesh.html</anchorfile>
      <anchor>a1cd68f685260a6a2661c6999ca52f458</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTracker::TriangleMeshTriangleMesh</name>
    <filename>classSimTK_1_1ContactTracker_1_1TriangleMeshTriangleMesh.html</filename>
    <base>SimTK::ContactTracker</base>
    <member kind="function">
      <type></type>
      <name>TriangleMeshTriangleMesh</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1TriangleMeshTriangleMesh.html</anchorfile>
      <anchor>ac1693f16d9b8778dbbaea9f2404e4cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TriangleMeshTriangleMesh</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1TriangleMeshTriangleMesh.html</anchorfile>
      <anchor>ad894388a0b88cc39ccb39b1d5713bd5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>trackContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1TriangleMeshTriangleMesh.html</anchorfile>
      <anchor>a753d4c9e02cb5a410dde311b5abaca05</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const ContactGeometry &amp;surface2, Real cutoff, Contact &amp;currentStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>predictContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1TriangleMeshTriangleMesh.html</anchorfile>
      <anchor>a57813f579370dabf842b976f47455705</anchor>
      <arglist>(const Contact &amp;priorStatus, const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const SpatialVec &amp;A_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const SpatialVec &amp;A_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;predictedStatus) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initializeContact</name>
      <anchorfile>classSimTK_1_1ContactTracker_1_1TriangleMeshTriangleMesh.html</anchorfile>
      <anchor>a20237e9b1d7669aec17b0efa3fb7567d</anchor>
      <arglist>(const Transform &amp;X_GS1, const SpatialVec &amp;V_GS1, const ContactGeometry &amp;surface1, const Transform &amp;X_GS2, const SpatialVec &amp;V_GS2, const ContactGeometry &amp;surface2, Real cutoff, Real intervalOfInterest, Contact &amp;contactStatus) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::GCVSPLUtil</name>
    <filename>classSimTK_1_1GCVSPLUtil.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gcvspl</name>
      <anchorfile>classSimTK_1_1GCVSPLUtil.html</anchorfile>
      <anchor>a0743e454b0f56c886679765e97ebdf0f</anchor>
      <arglist>(const Vector &amp;x, const Vector &amp;y, const Vector &amp;wx, Real wy, int m, int md, Real val, Vector &amp;c, Vector &amp;wk, int &amp;ier)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gcvspl</name>
      <anchorfile>classSimTK_1_1GCVSPLUtil.html</anchorfile>
      <anchor>a7701ec5f18ed1db73969eda5c9a2d227</anchor>
      <arglist>(const Vector &amp;x, const Vector_&lt; Vec&lt; K &gt; &gt; &amp;y, const Vector &amp;wx, Vec&lt; K &gt; wy, int m, int md, Real val, Vector_&lt; Vec&lt; K &gt; &gt; &amp;c, Vector &amp;wk, int &amp;ier)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>splder</name>
      <anchorfile>classSimTK_1_1GCVSPLUtil.html</anchorfile>
      <anchor>a74306208d3b186b32027eb4d16f03d0c</anchor>
      <arglist>(int derivOrder, int degree, Real t, const Vector &amp;x, const Vector &amp;coeff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; K &gt;</type>
      <name>splder</name>
      <anchorfile>classSimTK_1_1GCVSPLUtil.html</anchorfile>
      <anchor>a03f9b466d5d3e95e49d5d85e12aae207</anchor>
      <arglist>(int derivOrder, int degree, Real t, const Vector &amp;x, const Vector_&lt; Vec&lt; K &gt; &gt; &amp;coeff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo</name>
    <filename>classSimTK_1_1Geo.html</filename>
    <class kind="class">SimTK::Geo::AlignedBox_</class>
    <class kind="class">SimTK::Geo::BicubicBezierPatch_</class>
    <class kind="class">SimTK::Geo::BicubicHermitePatch_</class>
    <class kind="class">SimTK::Geo::Box_</class>
    <class kind="class">SimTK::Geo::CubicBezierCurve_</class>
    <class kind="class">SimTK::Geo::CubicHermiteCurve_</class>
    <class kind="class">SimTK::Geo::LineSeg_</class>
    <class kind="class">SimTK::Geo::OrientedBox_</class>
    <class kind="class">SimTK::Geo::Point_</class>
    <class kind="class">SimTK::Geo::Sphere_</class>
    <class kind="class">SimTK::Geo::Triangle_</class>
    <member kind="typedef">
      <type>Point_&lt; Real &gt;</type>
      <name>Point</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>ab97c535710a7081de18ebc4257765022</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sphere_&lt; Real &gt;</type>
      <name>Sphere</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a099f600ddc5f23a4abd3e2c1b485a9be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LineSeg_&lt; Real &gt;</type>
      <name>LineSeg</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a166c147f08f611293713999254cd5b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Line_&lt; Real &gt;</type>
      <name>Line</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a67b1362912666fdde3db6515f225671b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Plane_&lt; Real &gt;</type>
      <name>Plane</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a30b9d1294684535d71f6d1fbc441abf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Circle_&lt; Real &gt;</type>
      <name>Circle</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>af7647fade9679a5810ec7e38d00a30dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Box_&lt; Real &gt;</type>
      <name>Box</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a0e81c3a9b9891a184da06144e6072d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox_&lt; Real &gt;</type>
      <name>AlignedBox</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a17b6b4b86608621c35355ae4c50c0cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrientedBox_&lt; Real &gt;</type>
      <name>OrientedBox</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a48fc5b40db16bf46c904f72dcf682949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Triangle_&lt; Real &gt;</type>
      <name>Triangle</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>acfe881507d423829c209ae4bbb8ee5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicHermiteCurve_&lt; Real &gt;</type>
      <name>CubicHermiteCurve</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a221d1da14347f9f63c825760f53c9f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BicubicHermitePatch_&lt; Real &gt;</type>
      <name>BicubicHermitePatch</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>ae66df3a039489bdc4b9a350a111bcf85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CubicBezierCurve_&lt; Real &gt;</type>
      <name>CubicBezierCurve</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a5e6852b400457b33038942a8232a305b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BicubicBezierPatch_&lt; Real &gt;</type>
      <name>BicubicBezierPatch</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>aa6ac161f679ff70829ff07ef7d632ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isCusp</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a1d4b26dd214be2ce221fd2658dcbd715</anchor>
      <arglist>(const Vec&lt; 3, RealP, S &gt; &amp;Pu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInflectionPoint</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>acfdf5d12c423028351bb9d22a5c11391</anchor>
      <arglist>(const Vec&lt; 3, RealP, S &gt; &amp;Pu, const Vec&lt; 3, RealP, S &gt; &amp;Puu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitVec&lt; RealP, 1 &gt;</type>
      <name>calcUnitTangent</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>adf1c55e619734a5ccb71e118d69b942c</anchor>
      <arglist>(const Vec&lt; 3, RealP, S &gt; &amp;Pu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 3, RealP &gt;</type>
      <name>calcCurvatureVector</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a0cc3486aecf214573b6273bcbbc13135</anchor>
      <arglist>(const Vec&lt; 3, RealP, S &gt; &amp;Pu, const Vec&lt; 3, RealP, S &gt; &amp;Puu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static UnitVec&lt; RealP, 1 &gt;</type>
      <name>calcUnitNormal</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a91f2d03400710d64e9102acb4713dc59</anchor>
      <arglist>(const Vec&lt; 3, RealP, S &gt; &amp;Pu, const Vec&lt; 3, RealP, S &gt; &amp;Puu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>calcCurveFrame</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a9b61d69fd82244346c7635e3f9c76db4</anchor>
      <arglist>(const Vec&lt; 3, RealP, S &gt; &amp;P, const Vec&lt; 3, RealP, S &gt; &amp;Pu, const Vec&lt; 3, RealP, S &gt; &amp;Puu, Transform_&lt; RealP &gt; &amp;X_FP)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>calcCurvatureSqr</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a81a6e6a58f0b5a6db434a316754bb7a8</anchor>
      <arglist>(const Vec&lt; 3, RealP, S &gt; &amp;Pu, const Vec&lt; 3, RealP, S &gt; &amp;Puu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>calcTorsion</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>abebb31a8e7e26b191ce5eb347e6c4084</anchor>
      <arglist>(const Vec&lt; 3, RealP, S &gt; &amp;Pu, const Vec&lt; 3, RealP, S &gt; &amp;Puu, const Vec&lt; 3, RealP, S &gt; &amp;Puuu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findClosestPointsOfTwoLines</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>ac66bd601e9192205f63c017b24db894e</anchor>
      <arglist>(const Vec&lt; 3, RealP &gt; &amp;p0, const UnitVec&lt; RealP, 1 &gt; &amp;d0, const Vec&lt; 3, RealP &gt; &amp;p1, const UnitVec&lt; RealP, 1 &gt; &amp;d1, Vec&lt; 3, RealP &gt; &amp;x0, Vec&lt; 3, RealP &gt; &amp;x1, bool &amp;linesAreParallel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>getDefaultTol</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a022a5f4a5fc4359d76d67256298a480b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>getDefaultTolSqr</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a507354aa72aa55e0291dd1e5e4f9ecd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>getEps</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>aabfd3feb89c1e154c24d13fa107bc555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>getNaN</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a70ae991b9c9f96c2a3b9079fb47c6cf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>getInfinity</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>ab0bfe21f900995cceff6c34df9d2a69a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>stretchBy</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>abfc604542773ad90bbbb49c2143a98b7</anchor>
      <arglist>(RealP length, RealP tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>stretch</name>
      <anchorfile>classSimTK_1_1Geo.html</anchorfile>
      <anchor>a01ba9676fd826d03453f7f0253a1b6f9</anchor>
      <arglist>(RealP length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::AlignedBox_</name>
    <filename>classSimTK_1_1Geo_1_1AlignedBox__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>AlignedBox_</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>a2e4c6461ff164e5bd7ea85248a003340</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox_</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>a0937a6682fe54c8582638730df887961</anchor>
      <arglist>(const Vec3P &amp;center, const Geo::Box_&lt; P &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox_</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>a0a01abdf7c94e821aa24a92de6b0f46b</anchor>
      <arglist>(const Vec3P &amp;center, const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox_ &amp;</type>
      <name>setCenter</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>aa89e7177e2252b816031b5d31e179c8e</anchor>
      <arglist>(const Vec3P &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox_ &amp;</type>
      <name>setHalfLengths</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>a43903b81e56e000667725315eebecfa6</anchor>
      <arglist>(const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getCenter</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>adbd48ac026d80c40ac180c4f6d81efe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P &amp;</type>
      <name>updCenter</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>a1ab0c95fc8bc5fa9a84c88edb5822eba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getHalfLengths</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>aff44c88771c12e274434ac2f58385587</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box_&lt; P &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>ae46bec6d49c9478cafcfc73b3b01a730</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box_&lt; P &gt; &amp;</type>
      <name>updBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>ab942fc486b24ed15efd4771741b10f37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>a185f45ef977d2f4cc3239bfaf1511f5e</anchor>
      <arglist>(const Vec3P &amp;pt_F) const </arglist>
    </member>
    <member kind="function">
      <type>AlignedBox_ &amp;</type>
      <name>stretchBoundary</name>
      <anchorfile>classSimTK_1_1Geo_1_1AlignedBox__.html</anchorfile>
      <anchor>ae2eba1fed5e5501304e2641fb5e46faa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::BicubicBezierPatch_</name>
    <filename>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>BicubicBezierPatch_</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ace2294f1190b89f70a463ff4dd3e9f19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BicubicBezierPatch_</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a4fc6cc7b4d138c537b3e396f87895763</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;controlPoints)</arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalP</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a6be71f41cbf5d2ec618df747c1a5ce6d</anchor>
      <arglist>(RealP u, RealP w) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalP1</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a9dcdbc1d1bf36c4efa5f2c72dc9ba70c</anchor>
      <arglist>(RealP u, RealP w, Vec3P &amp;Pu, Vec3P &amp;Pw) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalP2</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>abf9a062f337c0000ab08c265012313cc</anchor>
      <arglist>(RealP u, RealP w, Vec3P &amp;Puu, Vec3P &amp;Puw, Vec3P &amp;Pww) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalP3</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a8b4fccaa571b51b3221a17446bf77340</anchor>
      <arglist>(RealP u, RealP w, Vec3P &amp;Puuu, Vec3P &amp;Puuw, Vec3P &amp;Puww, Vec3P &amp;Pwww) const </arglist>
    </member>
    <member kind="function">
      <type>const Mat&lt; 4, 4, Vec3P &gt; &amp;</type>
      <name>getControlPoints</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ab9b8e6c29801ce5279532837574ec294</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 4, 4, Vec3P &gt; &amp;</type>
      <name>updControlPoints</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a58a32a4499d1f5b0bc3f51dd837e03cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcAlgebraicCoefficients</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a29e92ada1c775354c86b8236de217aa7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcHermiteCoefficients</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ad8a0c4c6fff5f6fe5a73ff4c49647b15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CubicBezierCurve_&lt; P &gt;</type>
      <name>getBoundaryCurveU0</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>aef462811364acf81fb1dc472dda95db2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CubicBezierCurve_&lt; P &gt;</type>
      <name>getBoundaryCurveU1</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a0e0faa454815c7825c4d81a580e749cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CubicBezierCurve_&lt; P &gt;</type>
      <name>getBoundaryCurveW0</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a894ce3ff9d41456a7b94c9094b69bbbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CubicBezierCurve_&lt; P &gt;</type>
      <name>getBoundaryCurveW1</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ae0cdbd75098b1c5b2ef14a0aa66d427e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CubicBezierCurve_&lt; P &gt;</type>
      <name>calcIsoCurveU</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a5712ceee630ada5eb4c548a6cca18e4c</anchor>
      <arglist>(RealP u0) const </arglist>
    </member>
    <member kind="function">
      <type>CubicBezierCurve_&lt; P &gt;</type>
      <name>calcIsoCurveW</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a3944ac99fa1618353bfb1a2b7dae70a6</anchor>
      <arglist>(RealP w0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitU</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>afd768d584098dca52fd6b3a4f666ed3a</anchor>
      <arglist>(RealP u, BicubicBezierPatch_&lt; P &gt; &amp;patch0, BicubicBezierPatch_&lt; P &gt; &amp;patch1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splitW</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a390a963fac70b68e5b61da6e1ac0c9e2</anchor>
      <arglist>(RealP w, BicubicBezierPatch_&lt; P &gt; &amp;patch0, BicubicBezierPatch_&lt; P &gt; &amp;patch1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ac5b2d36fcdce219eba68f753d8158f34</anchor>
      <arglist>(RealP u, RealP w, BicubicBezierPatch_&lt; P &gt; &amp;patch00, BicubicBezierPatch_&lt; P &gt; &amp;patch01, BicubicBezierPatch_&lt; P &gt; &amp;patch10, BicubicBezierPatch_&lt; P &gt; &amp;patch11) const </arglist>
    </member>
    <member kind="function">
      <type>Geo::Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ad3357ae426fbfbe7a023ee63be2b432a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Geo::AlignedBox_&lt; P &gt;</type>
      <name>calcAxisAlignedBoundingBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>afa0437892fe8889ee9e664656fbe1b86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Geo::OrientedBox_&lt; P &gt;</type>
      <name>calcOrientedBoundingBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a6348fb4073ca833e1d11ce17b2566d42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPUsingB</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a2a1988ebd2e5967aca7f60b3d71ddde8</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;B, RealP u, RealP w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evalP1UsingB</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ae7b2f8c0bb9fa289571cdaa23639f0dd</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;B, RealP u, RealP w, Vec3P &amp;Pu, Vec3P &amp;Pw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evalP2UsingB</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ab6e2ee49dc5b437dc9b0e388d3c78fae</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;B, RealP u, RealP w, Vec3P &amp;Puu, Vec3P &amp;Puw, Vec3P &amp;Pww)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evalP3UsingB</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a3226ab4adc8cc797c3ece56a65f77fb7</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;B, RealP u, RealP w, Vec3P &amp;Puuu, Vec3P &amp;Puuw, Vec3P &amp;Puww, Vec3P &amp;Pwww)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CubicBezierCurve_&lt; P &gt;</type>
      <name>calcIsoCurveU</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>af7e8f50d003f7282d09a203737db6105</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;B, RealP u0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CubicBezierCurve_&lt; P &gt;</type>
      <name>calcIsoCurveW</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ac725b3fed13d90b8575f4c5e99491299</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;B, RealP w0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcAFromB</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>aa0ace21fdf4c99e3bf5f74b5ae893524</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcBFromA</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ae8f5d0fcfd8fa564a7990d036e924c6c</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcHFromB</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>ae8ddc97035940c8db83bb4a92da17bac</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcBFromH</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicBezierPatch__.html</anchorfile>
      <anchor>a01aaf5533863ef2f12f46912d2c18c23</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;H)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::BicubicHermitePatch_</name>
    <filename>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BicubicHermitePatch_</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a33027dcfece744101f544d121c75e78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BicubicHermitePatch_</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>aef8344e10ab3bd3aaab6ddb1b23ab10d</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>const Mat&lt; 4, 4, Vec3P &gt; &amp;</type>
      <name>getAlgebraicCoefficients</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a0eb92db762c50dba3ab8092bc048285a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcHermiteCoefficients</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a702a25830baee66aa3180190dacb3d57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalP</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a96ccefc505572d6e50cd17235c102a69</anchor>
      <arglist>(RealP u, RealP w) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalP1</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a01e5b09f46671bf51b368c83bd804975</anchor>
      <arglist>(RealP u, RealP w, Vec3P &amp;Pu, Vec3P &amp;Pw) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalP2</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a346f515aafed963baf172e7bf04fd27e</anchor>
      <arglist>(RealP u, RealP w, Vec3P &amp;Puu, Vec3P &amp;Puw, Vec3P &amp;Pww) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalP3</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>aa90a443067100310db0311a607b8a64e</anchor>
      <arglist>(RealP u, RealP w, Vec3P &amp;Puuu, Vec3P &amp;Puuw, Vec3P &amp;Puww, Vec3P &amp;Pwww) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcAFromH</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a8fac174c40bc1167dea6583d666a5aed</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, Vec3P &gt;</type>
      <name>calcHFromA</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a2364667cd3073942a90b521144224589</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPUsingA</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>ab48bf57dcd399f6ef60f28288b37526a</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;A, RealP u, RealP w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evalP1UsingA</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a23a0a465a25baa357545c0d15cb952e1</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;A, RealP u, RealP w, Vec3P &amp;Pu, Vec3P &amp;Pw)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evalP2UsingA</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>a0c0dc85f3c8b5f8f81327fab97811663</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;A, RealP u, RealP w, Vec3P &amp;Puu, Vec3P &amp;Puw, Vec3P &amp;Pww)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>evalP3UsingA</name>
      <anchorfile>classSimTK_1_1Geo_1_1BicubicHermitePatch__.html</anchorfile>
      <anchor>af4d9db1dbf10c46e3824e9e7b1a8be7c</anchor>
      <arglist>(const Mat&lt; 4, 4, Vec3P &gt; &amp;A, RealP u, RealP w, Vec3P &amp;Puuu, Vec3P &amp;Puuw, Vec3P &amp;Puww, Vec3P &amp;Pwww)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::Box_</name>
    <filename>classSimTK_1_1Geo_1_1Box__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>Box_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a44db3efe102f5f0fbf2d2ce6e8fd40d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a86e900e18b2090062ecc5f410a524cb0</anchor>
      <arglist>(const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function">
      <type>Box_ &amp;</type>
      <name>setHalfLengths</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a7e9923ff1ea4f5c0e2bdcaa1f57d4900</anchor>
      <arglist>(const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function">
      <type>Box_ &amp;</type>
      <name>addToHalfLengths</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>af8a27732ef2d83dc3c6cd730ed5f073b</anchor>
      <arglist>(const Vec3P &amp;incr)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getHalfLengths</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a2e857fb609122d49462c1724ff06b2ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>getOrderedHalfLength</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a8bd5d71b7d6a122b2afd727bbcc49742</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>CoordinateAxis</type>
      <name>getOrderedAxis</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>afc4ffb37fb0ebf2e48460d898e455143</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findVolume</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a8ab1f4633d8bca0191f6a5ad547c51ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findArea</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a3c10856888ec88cda3c5c1c205fe0121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a24e4213edc0aa7b0ad65bf32bc855b77</anchor>
      <arglist>(const Vec3P &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findDistanceSqrToPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a48d929d6ca719f97044e58f18e72e9a4</anchor>
      <arglist>(const Vec3P &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findDistanceSqrToSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a97013eb81d8876a136254af44cbd3e57</anchor>
      <arglist>(const Geo::Sphere_&lt; P &gt; &amp;sphere) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findDistanceSqrToAlignedBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a135743b60e4d2cfd5e7b5ae9f0d457c9</anchor>
      <arglist>(const Geo::AlignedBox_&lt; P &gt; &amp;aab) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a7e13096fb8e6091950fd67a3e6b9bae7</anchor>
      <arglist>(const Geo::Sphere_&lt; P &gt; &amp;sphere) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsAlignedBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>aa73088e847420c68b355c88ceeed37de</anchor>
      <arglist>(const Geo::AlignedBox_&lt; P &gt; &amp;aab) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsOrientedBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>a3da81043ed1cfc3a4615f802e713a6a5</anchor>
      <arglist>(const Geo::OrientedBox_&lt; P &gt; &amp;ob) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayIntersectOrientedBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1Box__.html</anchorfile>
      <anchor>ad7d99b3406bf0c6ba64cb12898904b64</anchor>
      <arglist>(const Geo::OrientedBox_&lt; P &gt; &amp;ob) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::CubicBezierCurve_</name>
    <filename>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>CubicBezierCurve_</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a36ce498f865ed44de40873147f81a28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBezierCurve_</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a08404d6fa1d73a3675611dc4a234bdb7</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;controlPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicBezierCurve_</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>af7a6db7c799b247175be025cefacd742</anchor>
      <arglist>(const Row&lt; 4, Vec3P, S &gt; &amp;controlPoints)</arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; 4, Vec3P &gt; &amp;</type>
      <name>getControlPoints</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>aa3b6a6db263373ce49ebe85734b9fede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, Vec3P &gt;</type>
      <name>calcAlgebraicCoefficients</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>ac1d1e9154951994c03974ad9bba413c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, Vec3P &gt;</type>
      <name>calcHermiteCoefficients</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a237940a1e0a1dafac24997d5c8518b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalP</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a4071407185cdc4fc64d22f046fc344ee</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalPu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a44e7cc3d38f1e84006cc8aff65c48ec4</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalPuu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>ab484dbe857482d7cffde20caaa745da1</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalPuuu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a98ec92f7e3c7281df04744ca700378a1</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcDsdu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a05cbc43383316b762d1d91ae0fa6b6dd</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec3P</type>
      <name>calcUnitTangent</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a8ad91e8ce3787f01b099b1478b073888</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>calcCurvatureVector</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>ac7c00b824c39edc2f85f110db3962ecf</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcCurvatureSqr</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>ad72427ee5222d35894261592e6efb5dc</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcTorsion</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>afe7e9e9b9264d7ac01b009b6009b40ba</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function">
      <type>UnitVec3P</type>
      <name>calcUnitNormal</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>adec146262aedfae4c9c39461921469fa</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcCurveFrame</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a2ad1467b379d414ef0a3e0ea4afd891c</anchor>
      <arglist>(RealP u, TransformP &amp;X_FP) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a75511b4c0d3f64ad7a0503c10657fe94</anchor>
      <arglist>(RealP u, CubicBezierCurve_&lt; P &gt; &amp;left, CubicBezierCurve_&lt; P &gt; &amp;right) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bisect</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a37d5c771ade9d296569a67a1fe9563d7</anchor>
      <arglist>(CubicBezierCurve_&lt; P &gt; &amp;left, CubicBezierCurve_&lt; P &gt; &amp;right) const </arglist>
    </member>
    <member kind="function">
      <type>Geo::Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a64d50499c65cc62290ea2a1a8e98e60f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Geo::AlignedBox_&lt; P &gt;</type>
      <name>calcAxisAlignedBoundingBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a22bfc1619db9ae3252964d99a6aabc56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Geo::OrientedBox_&lt; P &gt;</type>
      <name>calcOrientedBoundingBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a6af22a5f96a1b472644a627069cfd63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcFb</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a9ded8e01657d7ab207f6b0fcd80cb476</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcDFb</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a10a0477259920ab874dd46ee073ab89a</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcD2Fb</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a8d2918f759160d6829ff399118b02226</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcD3Fb</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>ac379a49f6d6c4c0b509d9179f0854a62</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, Vec3P &gt;</type>
      <name>calcAFromB</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a2e5b595a06b7b973dcb411cbbb897d4f</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, Vec3P &gt;</type>
      <name>calcBFromA</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a045449904ff74280c84ced2ba984f942</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, Vec3P &gt;</type>
      <name>calcHFromB</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a45d1a2751bc83b0ff63edb3f257bb61a</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, Vec3P &gt;</type>
      <name>calcBFromH</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>aba251795f7f5d027db6f89fad2c66a8b</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPUsingB</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a2fc87ec42c2908aedf587a77e36f7e4a</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;B, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuUsingB</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a383b29c7421610073a56a99dac0995b7</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;B, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuuUsingB</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>aad2820528a29afcc5d3240d271c22d21</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;B, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuuuUsingB</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a730f7feadc4e5bfb59a4db19b9f1c8bf</anchor>
      <arglist>(const Vec&lt; 4, Vec3P, S &gt; &amp;B, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, P &gt;</type>
      <name>getMb</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>ac0310ef1601b6572d69f7cae32dac615</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, P &gt;</type>
      <name>multiplyByMb</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a3118ba3d6fb9de63ee8b53e2678fde42</anchor>
      <arglist>(const Vec&lt; 4, P, S &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, P &gt;</type>
      <name>getMbInv</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>aef83520507f2f8adf5af9eadc3a94121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, P &gt;</type>
      <name>multiplyByMbInv</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a6dd34bb0e33cae22df7e68fbb879d75b</anchor>
      <arglist>(const Vec&lt; 4, P, S &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, P &gt;</type>
      <name>getMhInvMb</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a3e00928895ef8362cc96bcfbf501611f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, P &gt;</type>
      <name>multiplyByMhInvMb</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a27846947b6f7ff002ca29eb3515a626c</anchor>
      <arglist>(const Vec&lt; 4, P, S &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, P &gt;</type>
      <name>getMbInvMh</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>ac9ea21fc21858a28609518401dee9f9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, P &gt;</type>
      <name>multiplyByMbInvMh</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicBezierCurve__.html</anchorfile>
      <anchor>a69d9085d56aa501a9c9c677734e42e28</anchor>
      <arglist>(const Vec&lt; 4, P, S &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::CubicHermiteCurve_</name>
    <filename>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CubicHermiteCurve_</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>ac77c6753fbf4c15a8a1e986c81d20922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CubicHermiteCurve_</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a2f5232f047038c3b90472723ac3effae</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; 4, Vec3P &gt; &amp;</type>
      <name>getAlgebraicCoefficients</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a00266fb580fc4e899364482eca2780a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec&lt; 4, Vec3P &gt;</type>
      <name>calcGeometricCoefficients</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>aa601cc1597c7ebb2c8236d7c77a54f36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalP</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a790e091a366ca6cb4b974a067dd67505</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalPu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>aeeeacc097aa64995a2e5c1f13fb3b88c</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalPuu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a4736b873e46b594e01e958e412809072</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>evalPuuu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a0bbd566b4a792aacb9ec84b05d6fa802</anchor>
      <arglist>(RealP u) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcU</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>adacf274e88a7b85355c4b61382551b28</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcFh</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a520c2fe5f41c76117dcb9729d724481e</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcFhu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a223c5c3adfe077625a66a35e192c85bd</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcFhuu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a9c2148446af8a09e53e72e5ee63eb744</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Row&lt; 4, P &gt;</type>
      <name>calcFhuuu</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>abbbadab35b63d17d0fc8ca70bed227c3</anchor>
      <arglist>(RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, Vec3P &gt;</type>
      <name>calcAFromH</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a729368c1468aa86196aa6fe69aedae92</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, Vec3P &gt;</type>
      <name>calcHFromA</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>af415d2317d6761f9b0a45c26bcb32326</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPUsingA</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a88f29b1f0407a856b41d12a41a3a9c02</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;A, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuUsingA</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a571bea612770bb16f7eb913b144e963a</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;A, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuuUsingA</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>ad760e8193c4a6ad0114c69d44ac88dcf</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;A, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuuuUsingA</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a99acb67e60a472247fa761e9fe86ed98</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;A, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPUsingH</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a08acfdd8e13cf5c64d8bd7b7a144f178</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;H, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuUsingH</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a99c68fcd1120132cf495353eb66ab572</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;H, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuuUsingH</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a2977d7996562db71e16628f88a2099e8</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;H, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>evalPuuuUsingH</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>acdba63931858c0bc50c736cbec30f73d</anchor>
      <arglist>(const Vec&lt; 4, Vec3P &gt; &amp;H, RealP u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, P &gt;</type>
      <name>getMh</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a065f9c716d11938b2602419ba49bd9b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, P &gt;</type>
      <name>multiplyByMh</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a8c00e047d843f9da8d3e5ade076d640e</anchor>
      <arglist>(const Vec&lt; 4, P &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mat&lt; 4, 4, P &gt;</type>
      <name>getMhInv</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>ab9cc02670e230ba2f882a03efb6043ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec&lt; 4, P &gt;</type>
      <name>multiplyByMhInv</name>
      <anchorfile>classSimTK_1_1Geo_1_1CubicHermiteCurve__.html</anchorfile>
      <anchor>a75e1068421dc78e5ed9d88aaff3988ad</anchor>
      <arglist>(const Vec&lt; 4, P &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::LineSeg_</name>
    <filename>classSimTK_1_1Geo_1_1LineSeg__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>LineSeg_</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a8b3df33ec6d6ebddbb37b1ab2824e048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LineSeg_</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a9fab4e9cc2be134642c102ace01ed7c7</anchor>
      <arglist>(const Vec3P &amp;e0, const Vec3P &amp;e1)</arglist>
    </member>
    <member kind="function">
      <type>LineSeg_ &amp;</type>
      <name>setEndpoints</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>aff7f58862bad26caf5e5c04e1ebc55a9</anchor>
      <arglist>(const Vec3P &amp;e0, const Vec3P &amp;e1)</arglist>
    </member>
    <member kind="function">
      <type>LineSeg_ &amp;</type>
      <name>setEndpoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a913f3e78a0327d74032d0dd0a9ffc087</anchor>
      <arglist>(int which, const Vec3P &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a2f41036f9b7d38c9bc6de5eaf5f48af1</anchor>
      <arglist>(RealP tol=Geo::getDefaultTol&lt; P &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getEndpoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>ac7fc0c99f044ad5ce7476d2bcf488f9f</anchor>
      <arglist>(int which) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P &amp;</type>
      <name>updEndpoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a4bb27c95410fc76e8bcd2b607a465842</anchor>
      <arglist>(int which)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a2a9d22a2c51f4701f225818f179f82b4</anchor>
      <arglist>(int which) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>acab1ca98a26f2eb275ad7bb0bc6b4e8f</anchor>
      <arglist>(int which)</arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcLength</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>addc65147205b165cf5864d72dfc15e63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcLengthSqr</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a8d1af6b84b12044ca7434312a5b92d0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>findPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a5fd709128f183f57a36e2f237e7345d2</anchor>
      <arglist>(RealP t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>findMidpoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>adbab91a98f760f9ac942a7ead77b95c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>aa8b3eec90fb7e1e1f39a04cf3585947a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findDistanceToPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a65c421f929e8b70a7143a545409d5290</anchor>
      <arglist>(const Vec3P &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findDistanceToPointSqr</name>
      <anchorfile>classSimTK_1_1Geo_1_1LineSeg__.html</anchorfile>
      <anchor>a617ecb3453eccde401886768bd41935b</anchor>
      <arglist>(const Vec3P &amp;p2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::OrientedBox_</name>
    <filename>classSimTK_1_1Geo_1_1OrientedBox__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>OrientedBox_</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>afa22411c4686c7560603aab26e2caf44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedBox_</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>aa45b1ffc67240b3f1a386ca3e2ceb52d</anchor>
      <arglist>(const TransformP &amp;X_FB, const Geo::Box_&lt; P &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedBox_</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a936272cd035916317053c61358793909</anchor>
      <arglist>(const TransformP &amp;X_FB, const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function">
      <type>OrientedBox_ &amp;</type>
      <name>setTransform</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a6a6920d4ae1c0d6cee747b5a482f4a6a</anchor>
      <arglist>(const TransformP &amp;newX_FB)</arglist>
    </member>
    <member kind="function">
      <type>OrientedBox_ &amp;</type>
      <name>setHalfLengths</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>afdf80ef0545938b23d1c04fc690092a1</anchor>
      <arglist>(const Vec3P &amp;halfLengths)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getCenter</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>ac5a64e80ac7f6cf527b5e211f6ae1b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P &amp;</type>
      <name>updCenter</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a58c0b78ed1d8b5d134f8c4d17d00be70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RotationP &amp;</type>
      <name>getOrientation</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a8a837f4a9e4f2731e7e74ac0fa4a1820</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RotationP &amp;</type>
      <name>updOrientation</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a36903ec79e88c0df75d3fce2964de17c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TransformP &amp;</type>
      <name>getTransform</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>aab1edfe7215cac76ad95766acbf23f2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TransformP &amp;</type>
      <name>updTransform</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>ab85caa3fae4ab210ba0cc3a8fab89e4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getHalfLengths</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a3d6121dc9b9869f9337244f18dfe27fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box_&lt; P &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a6f105e463d0ab60d08ca5313dee633a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box_&lt; P &gt; &amp;</type>
      <name>updBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a5ada70e508617732c69d0a4fb8bf6845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a0b9afd6091284f7e0d9742d13dbe42f5</anchor>
      <arglist>(const Vec3P &amp;pt_F) const </arglist>
    </member>
    <member kind="function">
      <type>OrientedBox_ &amp;</type>
      <name>stretchBoundary</name>
      <anchorfile>classSimTK_1_1Geo_1_1OrientedBox__.html</anchorfile>
      <anchor>a5a2c19811bfe43fc119ee7954ba35a31</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::Point_</name>
    <filename>classSimTK_1_1Geo_1_1Point__.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Point_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a2a2ceb87665ce7b5bb1deaceef04ab29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a0ecd1e5c04e396cf8426f912bbd45cb7</anchor>
      <arglist>(const Vec3P &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>Point_ &amp;</type>
      <name>setLocation</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a342017a965f8f0d00171343f2299ed65</anchor>
      <arglist>(const Vec3P &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getLocation</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a3f117f8213cbadc1cc1fc410d51956c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcDistance</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a0830cd38f173881bf162c93c8699244b</anchor>
      <arglist>(const Vec3P &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findDistanceSqr</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>af5b1fc5890183910e2c17f03a0b92300</anchor>
      <arglist>(const Vec3P &amp;p2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>calcDistance</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a398f9d5b3d838a38e36825e51e519ac9</anchor>
      <arglist>(const Vec3P &amp;p1, const Vec3P &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RealP</type>
      <name>findDistanceSqr</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a728dbcfc2fd830afbee8ecc0edc512b5</anchor>
      <arglist>(const Vec3P &amp;p1, const Vec3P &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>findMidpoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>aee36d794410d937b32171ac93705a3cb</anchor>
      <arglist>(const Vec3P &amp;p1, const Vec3P &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>pointsAreNumericallyCoincident</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>abdcd93886ac3fb0203916f5e2da270d2</anchor>
      <arglist>(const Vec3P &amp;p1, const Vec3P &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>pointsAreNumericallyCoincident</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a3c5d2c97d06c2c9c15385278ee4255e2</anchor>
      <arglist>(const Vec3P &amp;p1, const Vec3P &amp;p2, RealP tol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findSupportPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a7f2a2c300a8cbfa0b848b80fbc144242</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points, const UnitVec3P &amp;direction, int &amp;most, RealP &amp;mostCoord)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findSupportPointIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a731bb2637a8184660f5dbf61436db593</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points, const UnitVec3P &amp;direction, int &amp;most, RealP &amp;mostCoord)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findExtremePoints</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a1ae12783fe37fc35b21f842874c8c5ea</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points, const UnitVec3P &amp;direction, int &amp;least, int &amp;most, RealP &amp;leastCoord, RealP &amp;mostCoord)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findExtremePointsIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a6d8874d5eeea64737a7ea9f5e7a9a5a2</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points, const UnitVec3P &amp;direction, int &amp;least, int &amp;most, RealP &amp;leastCoord, RealP &amp;mostCoord)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>calcCentroid</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a2ae91f41cffde8982f9aa9df4772d090</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points_F)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3P</type>
      <name>calcCentroidIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a766f2ad6b99c6e1be933e5be2431ee8d</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points_F)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calcCovariance</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>aa90b727e7aaaa6bba0be0f45cf14f8a3</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points_F, Vec3P &amp;centroid, SymMat33P &amp;covariance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calcCovarianceIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a21fa0f91a4149e4caae35ea101be77af</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points_F, Vec3P &amp;centroid, SymMat33P &amp;covariance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calcPrincipalComponents</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a76682893e79f6893b143f3f98b056b3d</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points_F, TransformP &amp;X_FP)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calcPrincipalComponentsIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a167e51d9bb244c7b043550aadf05def0</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points_F, TransformP &amp;X_FP)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findAxisAlignedExtremePoints</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>acd97445a94f77bdb8dd9cf8646415a70</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points, int least[3], int most[3], Vec3P &amp;low, Vec3P &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findAxisAlignedExtremePointsIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a2b150e0c37f95bead85402e8ff596a54</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points, int least[3], int most[3], Vec3P &amp;low, Vec3P &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geo::AlignedBox_&lt; P &gt;</type>
      <name>calcAxisAlignedBoundingBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>acc5885ee6f88429656b6c8c6c4d32e96</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points, Array_&lt; int &gt; &amp;support)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geo::AlignedBox_&lt; P &gt;</type>
      <name>calcAxisAlignedBoundingBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a33faed8ffeac8046a450cef049b6d5bf</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geo::AlignedBox_&lt; P &gt;</type>
      <name>calcAxisAlignedBoundingBoxIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a99018ecf44484328f6526c7d9f5d2eab</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points, Array_&lt; int &gt; &amp;support)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geo::AlignedBox_&lt; P &gt;</type>
      <name>calcAxisAlignedBoundingBoxIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a712ecc9721323e3b51e75de69dc73438</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findOrientedExtremePoints</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a95cb29dc68b233fd81817cabeb78f2e7</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points_F, const RotationP &amp;R_FB, int least[3], int most[3], Vec3P &amp;low_B, Vec3P &amp;high_B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findOrientedExtremePointsIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a4c59a3588f0e0906b03ef83ab324f5f4</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points_F, const RotationP &amp;R_FB, int least[3], int most[3], Vec3P &amp;low_B, Vec3P &amp;high_B)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geo::OrientedBox_&lt; P &gt;</type>
      <name>calcOrientedBoundingBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a5465798feac95e1534e0232f95756855</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points, Array_&lt; int &gt; &amp;support, bool optimize=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geo::OrientedBox_&lt; P &gt;</type>
      <name>calcOrientedBoundingBox</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>afff738a3fa51ae4e379ab100d658bfbd</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geo::OrientedBox_&lt; P &gt;</type>
      <name>calcOrientedBoundingBoxIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>ae5b91e495b48b802fc4ee4e92c8dbb16</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points, Array_&lt; int &gt; &amp;support, bool optimize=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geo::OrientedBox_&lt; P &gt;</type>
      <name>calcOrientedBoundingBoxIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a9d6e77c1b7f860870789fed793f44c95</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points, bool optimize=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a49341e63fdcb5290af1acfc9156b9663</anchor>
      <arglist>(const Vec3P &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a082d91291219035f2fcb971c40b3684c</anchor>
      <arglist>(const Vec3P &amp;p0, const Vec3P &amp;p1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>ace9d11627d1f525081ec32efe57fd7aa</anchor>
      <arglist>(const Vec3P &amp;p0, const Vec3P &amp;p1, const Vec3P &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a3ebd70986aa7f0a0466aeae6c291843a</anchor>
      <arglist>(const Vec3P &amp;p0, const Vec3P &amp;p1, const Vec3P &amp;p2, const Vec3P &amp;p3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>ad7592467141069172a35f136058ff592</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>ad22c3e29308b06e70e7dfc7df3e0d5cb</anchor>
      <arglist>(const std::vector&lt; Vec3P &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphereIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>ab71d8029d017c9c675e5c2e8f4965718</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a6ed44ac9098a19e1d82edada119f4d0d</anchor>
      <arglist>(const std::vector&lt; const Vec3P * &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a51456770f377afd90500e3dfea6ab5f1</anchor>
      <arglist>(const Vec3P &amp;p0, Array_&lt; int &gt; &amp;which)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>af91f337fb9b4e42ee956907bfcb0db74</anchor>
      <arglist>(const Vec3P &amp;p0, const Vec3P &amp;p1, Array_&lt; int &gt; &amp;which)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>aca1628caca0314c0e4617b3dd4319bef</anchor>
      <arglist>(const Vec3P &amp;p0, const Vec3P &amp;p1, const Vec3P &amp;p2, bool forceCircumsphere, Array_&lt; int &gt; &amp;which)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>ab9273f6d6bc41e2de233f5478f3f077e</anchor>
      <arglist>(const Vec3P &amp;p0, const Vec3P &amp;p1, const Vec3P &amp;p2, const Vec3P &amp;p3, bool forceCircumsphere, Array_&lt; int &gt; &amp;which)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a6438abc63c5c2b93b8313c9528fe270e</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points, Array_&lt; int &gt; &amp;which)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphereIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a498aae5ff58b788fb5d756aacb64408f</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points, Array_&lt; int &gt; &amp;which)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcApproxBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a56514b3f1cd2835190b47e62724224af</anchor>
      <arglist>(const Array_&lt; Vec3P &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcApproxBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a4e66321dfcda41a4d431b11bac7dbbb2</anchor>
      <arglist>(const std::vector&lt; Vec3P &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcApproxBoundingSphereIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>a0abf7d090bac57683f044d8ff274f2a1</anchor>
      <arglist>(const Array_&lt; const Vec3P * &gt; &amp;points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere_&lt; P &gt;</type>
      <name>calcApproxBoundingSphereIndirect</name>
      <anchorfile>classSimTK_1_1Geo_1_1Point__.html</anchorfile>
      <anchor>adada1ef22931ae38d1f21a89eb42dbf2</anchor>
      <arglist>(const std::vector&lt; const Vec3P * &gt; &amp;points)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::Sphere_</name>
    <filename>classSimTK_1_1Geo_1_1Sphere__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>Sphere_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a4889b8263ad7155d90c1b448d876c355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sphere_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>abc0f440c3f2c6348bf16670a074e6b98</anchor>
      <arglist>(const Vec3P &amp;center, RealP radius)</arglist>
    </member>
    <member kind="function">
      <type>Sphere_ &amp;</type>
      <name>setRadius</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>aefce96bdc64da49b3f9ef8062e1f37fa</anchor>
      <arglist>(RealP radius)</arglist>
    </member>
    <member kind="function">
      <type>Sphere_ &amp;</type>
      <name>setCenter</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>abf066e7c9a920b14a5e262e23e388e8e</anchor>
      <arglist>(const Vec3P &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>Sphere_ &amp;</type>
      <name>scaleBy</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a27576a1fac6e81f52614a4815e0ffd30</anchor>
      <arglist>(RealP f)</arglist>
    </member>
    <member kind="function">
      <type>Sphere_ &amp;</type>
      <name>stretchBoundary</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a0d296dbaec81922966f4c6d2cad6b54a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findVolume</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a2b79e23b4125404c93b4d58f6455c6fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>findArea</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a99629d74a5ed2c391583d633cabdbcf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointOutside</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a06d434c8e413ea598096ae72e21c9950</anchor>
      <arglist>(const Vec3P &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointOutside</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>ad9053a2749f6cb168384191f8635451d</anchor>
      <arglist>(const Vec3P &amp;p, RealP tol) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getCenter</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a90d73dbbcd42c372f1aae785d2b62ec6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P &amp;</type>
      <name>updCenter</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>abe81cf78cbea3b1e35d3a69491c7d747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>getRadius</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a80e355b4b995d4ff58dec219e06b6899</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP &amp;</type>
      <name>updRadius</name>
      <anchorfile>classSimTK_1_1Geo_1_1Sphere__.html</anchorfile>
      <anchor>a0ee6eb43c87757a03bca531cf22a93e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geo::Triangle_</name>
    <filename>classSimTK_1_1Geo_1_1Triangle__.html</filename>
    <templarg>P</templarg>
    <member kind="function">
      <type></type>
      <name>Triangle_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>ab5d79d367935b590c8cb6159a900377a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangle_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>adee01bb647a8dd1bb6c418bc7f696d2c</anchor>
      <arglist>(const Vec3P &amp;v0, const Vec3P &amp;v1, const Vec3P &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangle_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a1fa6532ea6cf5aa8f4728c39ad1d30b4</anchor>
      <arglist>(const Vec3P *vertices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangle_</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a5a6e31005128241b4304950520110525</anchor>
      <arglist>(const Vec3P **vertexPointers)</arglist>
    </member>
    <member kind="function">
      <type>Triangle_ &amp;</type>
      <name>setVertex</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>aecf8a2e8893c7a3f30dee0efe4cf15af</anchor>
      <arglist>(int i, const Vec3P &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Triangle_ &amp;</type>
      <name>setVertices</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>ad6c4298d741183be5328e5c957c1558f</anchor>
      <arglist>(const Vec3P &amp;v0, const Vec3P &amp;v1, const Vec3P &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>Triangle_ &amp;</type>
      <name>setVertices</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a47d4272e28cc43216b5b110703c7ae16</anchor>
      <arglist>(const Vec3P *vertices)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>getVertex</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>af316d7363bdc06a7411e8c098513214d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P &amp;</type>
      <name>updVertex</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a4b2fe2077c04bab276214b95255f698f</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3P &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>ad12cc1493b5c1024a55ec888877bb5ce</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a069df509bc7a1d8eac027479c0459c5e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>LineSeg_&lt; P &gt;</type>
      <name>getEdge</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a677ac49b1aadb6293e7d1b38a8d84edc</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>findPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>aa8450bfc3e36f40868941e5fede2e157</anchor>
      <arglist>(const Vec2P &amp;uv) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>findCentroid</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a5de3ea3e09aee74a589419f29d2fc257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnitVec3P</type>
      <name>calcUnitNormal</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a480eac8bde965b3b7d6159e7c7b638e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Sphere_&lt; P &gt;</type>
      <name>calcBoundingSphere</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>ac77da6336d0be691ffdc1aa088457483</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcArea</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>af81cd49c223426e66f6a2d14cc07665b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealP</type>
      <name>calcAreaSqr</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a7da7e1e6104438fbc69170cde387129a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3P</type>
      <name>findNearestPoint</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a45310d6d3cc040720e7c65e2e6dc1f21</anchor>
      <arglist>(const Vec3P &amp;position, Vec2P &amp;uv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsRay</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>acb876cc4edaa44ee3dd9e4195e2f02bc</anchor>
      <arglist>(const Vec3P &amp;origin, const UnitVec3P &amp;direction, RealP &amp;distance, Vec2P &amp;uv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlapsTriangle</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a09d30054c18e30016aa786f2f86de67d</anchor>
      <arglist>(const Triangle_&lt; P &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsTriangle</name>
      <anchorfile>classSimTK_1_1Geo_1_1Triangle__.html</anchorfile>
      <anchor>a165125ea1b547d6be36d5427ce292c96</anchor>
      <arglist>(const Triangle_&lt; P &gt; &amp;other, LineSeg_&lt; P &gt; &amp;seg, bool &amp;isCoplanar) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Geodesic</name>
    <filename>classSimTK_1_1Geodesic.html</filename>
    <member kind="function">
      <type></type>
      <name>Geodesic</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a15a8005bc4a3623075290d4ede06204e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPoints</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a310671bce88179deb217eb2617a65c47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Transform &gt; &amp;</type>
      <name>getFrenetFrames</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>abd4eb90278ef701cd754b0014ae82577</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Transform &gt; &amp;</type>
      <name>updFrenetFrames</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a652365a719fdecc6d480a5be4e1ec48c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrenetFrame</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a7bb857325ce13da16d4ea292b146ed61</anchor>
      <arglist>(const Transform &amp;Kf)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Real &gt; &amp;</type>
      <name>updArcLengths</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a59fe171036e60b75473833d709f958fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Real &gt; &amp;</type>
      <name>getArcLengths</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a007feee507374b99a6c4f0c9389461ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArcLength</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a46385be136be4230d202d166b4e7084c</anchor>
      <arglist>(Real s)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Real &gt; &amp;</type>
      <name>updCurvatures</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ad301e70cc9b23f0f094db4794a11c15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Real &gt; &amp;</type>
      <name>getCurvatures</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a7cdd692279907a7ef1b5d66773083fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCurvature</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a5a96095de19aa2259f7ee1740666de93</anchor>
      <arglist>(Real kappa)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Vec2 &gt; &amp;</type>
      <name>updDirectionalSensitivityPtoQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a6353967c4721b0fc5bb3a376a6441be0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Vec2 &gt; &amp;</type>
      <name>getDirectionalSensitivityPtoQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>aa54b5e162e1edd0a43f153417d664571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDirectionalSensitivityPtoQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ab0a594ffbc372bfebc4445e716c89b17</anchor>
      <arglist>(const Vec2 &amp;jP)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Vec2 &gt; &amp;</type>
      <name>updDirectionalSensitivityQtoP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>af901062188fdbd34d3a817022a74fea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Vec2 &gt; &amp;</type>
      <name>getDirectionalSensitivityQtoP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>add1f13db700f4d0b9e50f74cb8a1425c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDirectionalSensitivityQtoP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ab85628a4f370b35b2271e4bd4364a0c0</anchor>
      <arglist>(const Vec2 &amp;jQ)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Vec2 &gt; &amp;</type>
      <name>updPositionalSensitivityPtoQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a8c23e2257554188cacd1fcf76e1dd6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Vec2 &gt; &amp;</type>
      <name>getPositionalSensitivityPtoQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a46df5edfe8fc94d16775cb5ef168d17d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPositionalSensitivityPtoQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>abf2947479344d4f7b1aac5f9b24eed5b</anchor>
      <arglist>(const Vec2 &amp;jtP)</arglist>
    </member>
    <member kind="function">
      <type>Array_&lt; Vec2 &gt; &amp;</type>
      <name>updPositionalSensitivityQtoP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>af3a37aa0c9983c8cf79744d1d20fe1dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Vec2 &gt; &amp;</type>
      <name>getPositionalSensitivityQtoP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a10d2488c01ae064dc2f37b563fbd08e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPositionalSensitivityQtoP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>afded5bb63547d74b49e971fcc6360635</anchor>
      <arglist>(const Vec2 &amp;jtQ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionAtP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>aab7b434a5ec566b76ca947ad8cd3aecb</anchor>
      <arglist>(Real tauP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionAtQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a158a2ef3f24ee788ce2ab894bd8678a0</anchor>
      <arglist>(Real tauQ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBinormalCurvatureAtP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ab0eec15366f54dc17702c39dd3ae2ddc</anchor>
      <arglist>(Real muP)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBinormalCurvatureAtQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ac9e56faf46a4b0e2a3921bec035902b1</anchor>
      <arglist>(Real muQ)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getLength</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ab8ef6c4945d6b96373879a0389e96524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcLengthDot</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>aed2a2ce8bee6eb2760896eb439fb6682</anchor>
      <arglist>(const Vec3 &amp;xdotP, const Vec3 &amp;xdotQ) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPointP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a745f49e1af89cf54ada8cf3f4e71283e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getPointQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>af4ee19a92dc8bedfc14fc7921bc55f04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getNormalP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ae851aa35212bb7c1d265ab2357e8cded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getNormalQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>af8c961a4e7519a1dd0fa10855e7bc720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getTangentP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a48ace02ac64f827bf2a3c0b37a8f7c88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getTangentQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a47d9c6e7d7ee5c2e84d8efb3bf3df2d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getBinormalP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>aabf2a8aecc9a1f2dc83e8a365357c464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnitVec3 &amp;</type>
      <name>getBinormalQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a15e4ff3a51dbfa0f4b484f20ca228f34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getCurvatureP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a5c01f83e8984fd0e067ea769b816d56f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getCurvatureQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a953e41d62017bb7fa9772bf333447993</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTorsionP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a19c333b62125dd9c1593c8bc568651c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTorsionQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a5728b27bd0a6c4d08d51d89b7973d43e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getBinormalCurvatureP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a009f985220595cb747cb65282ee64590</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getBinormalCurvatureQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>af075fa221f3edf989e1b7e4e39319ffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getJacobiP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>aa7386ad87cafb0b86f897dc931ba22b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getJacobiQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ae996f223cec70e7f923e3e1812c910ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getJacobiPDot</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a12017806e4f773dfc2a292267796eec1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getJacobiQDot</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a1c904e2523253d2193045e7b405efc04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getJacobiTransP</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a82618fad299a7345b7f96ddae3e6b975</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getJacobiTransQ</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a82b038794b5fc8c42b9b230c238d9c31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getJacobiTransPDot</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a0a68f6a0b280eac0e4b11e95787acca0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getJacobiTransQDot</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a1f10ddad363fe4954b54f5217e4cf32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>aa484c61204f2997b5300b3749b2aeacc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsConvex</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a1da7e6a12d768f4e72f6971dd0028ac8</anchor>
      <arglist>(bool isConvex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsShortest</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>ae7c4e90c95d447db91672d4799ac519a</anchor>
      <arglist>(bool isShortest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialStepSizeHint</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a9638cecfa877c7cd00eeb108a223d452</anchor>
      <arglist>(Real sz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAchievedAccuracy</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a8c9b36786f9ce721ff6bbaed0472922d</anchor>
      <arglist>(Real acc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConvex</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a7234d122a332e83ad20cf941c17ca5d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShortest</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a88abedbd0c14ca818015a35dfe96c8e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getInitialStepSizeHint</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a682af10759da91e89d79b341193392b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAchievedAccuracy</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a0b468b4dc42734304d0f48813b00502a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classSimTK_1_1Geodesic.html</anchorfile>
      <anchor>a4f102a5de28df061a26fba392fe4ffe6</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::GeodesicDecorator</name>
    <filename>classSimTK_1_1GeodesicDecorator.html</filename>
    <base>SimTK::DecorationGenerator</base>
    <member kind="function">
      <type></type>
      <name>GeodesicDecorator</name>
      <anchorfile>classSimTK_1_1GeodesicDecorator.html</anchorfile>
      <anchor>ac0efbfd6cead4728042fe607965a22e1</anchor>
      <arglist>(const Geodesic &amp;geod, const Vec3 &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>generateDecorations</name>
      <anchorfile>classSimTK_1_1GeodesicDecorator.html</anchorfile>
      <anchor>a1bd233a394a1ce3b204834646fa033f6</anchor>
      <arglist>(const State &amp;state, Array_&lt; DecorativeGeometry &gt; &amp;geometry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::GeodesicOptions</name>
    <filename>classSimTK_1_1GeodesicOptions.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::GeodesicIntegrator</name>
    <filename>classSimTK_1_1GeodesicIntegrator.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>NQ</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>ad0d54e84102f41c4bf4a210b0979ad24add4c6954ec7cd4ace6fe397d32093019</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NC</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>ad0d54e84102f41c4bf4a210b0979ad24ad6344bdb9916294ef567f3d0967dac7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>N</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>ad0d54e84102f41c4bf4a210b0979ad24a0ecfd5a19c4f32938ee243b06587082b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeodesicIntegrator</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a3e1e4ec00253be6aec4970acc2ef0a5a</anchor>
      <arglist>(const Eqn &amp;eqn, Real accuracy, Real constraintTol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a7e1974211b7ad3bf34c45e844865d192</anchor>
      <arglist>(Real t, const Vec&lt; N &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeAndState</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>abdf8c5658825ffe08ea8702906cd4869</anchor>
      <arglist>(Real t, const Vec&lt; N &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextStepSizeToTry</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a94964375845de3941ceae37cf36bbd4b</anchor>
      <arglist>(Real h)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getNextStepSizeToTry</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a7a4452a0d43cb2dc62d57cf2b1a508c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getRequiredAccuracy</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a0695732fd66c8406801f181247534503</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getConstraintTolerance</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a12718d01d2aee73076679ebb3c4280f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getActualInitialStepSizeTaken</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a38c6a84f18039c6b40cc2bc9f532e4e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumStepsTaken</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>aa7259450021df609f932c344fb8647b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumStepsAttempted</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a115d108e3955a0265de7416af6b49b65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumErrorTestFailures</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>ae6ca6f27afe890a48f17f3115f7deebd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumProjectionFailures</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a8ea1f5c47c237dae953a44b404003629</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInitializations</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>ad0a115c90e8489334abb0801d24930b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeOneStep</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>aa2bb56c509327344fa1ec822d41b71df</anchor>
      <arglist>(Real tStop)</arglist>
    </member>
    <member kind="function">
      <type>const Real &amp;</type>
      <name>getTime</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>ab73d53e8dd8d64cbe67b333dc036c718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; N &gt; &amp;</type>
      <name>getY</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a741d8576114e379cdcad8d1b91c8805e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; NQ &gt; &amp;</type>
      <name>getQ</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a28179144c9848fdf562cb10d59a5a235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; NQ &gt; &amp;</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>adce1d4b52d4a31cfe79f494b22a6dfff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; N &gt; &amp;</type>
      <name>getYDot</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>adfdce42f9c6b358801f9d4ea6b574ae1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; NQ &gt; &amp;</type>
      <name>getQDot</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>ae9ec9665efc46e171d4563c6ab77f65f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec&lt; NQ &gt; &amp;</type>
      <name>getUDot</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>a55c87df9de9f8f3ad4ed7bbf540cebcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>calcNormInf</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>aa027d2af1c9a5c94a23c81b3ef747136</anchor>
      <arglist>(const Vec&lt; Z &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Real</type>
      <name>calcNormRMS</name>
      <anchorfile>classSimTK_1_1GeodesicIntegrator.html</anchorfile>
      <anchor>aa041762c63be53e39ea5f9a79a0d823d</anchor>
      <arglist>(const Vec&lt; Z &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::OBBLeaf</name>
    <filename>classSimTK_1_1OBBLeaf.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OBBLeaf</name>
      <anchorfile>classSimTK_1_1OBBLeaf.html</anchorfile>
      <anchor>ac6e0cc508341eaabd3da856939db6ed8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::OBBNode</name>
    <filename>classSimTK_1_1OBBNode.html</filename>
    <member kind="function">
      <type></type>
      <name>OBBNode</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a246b88bf889dd3d8af072c7772b7c1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OBBNode</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a0785fad48e161810398ff2409db40184</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a153bc7eafde0e5819a4cf93506c9d300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a6744c971239dcf7967b316945f2eac81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumChildren</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a6e23c1c71ae153c622d601059e78ac39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const OBBNode &amp;</type>
      <name>getChild</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a4fd7f1e2a3f7f0ee22e96f27cd3968b2</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>OBBNode &amp;</type>
      <name>updChild</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a31827bcbbb51f98b81f73a939822f262</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="variable">
      <type>Geo::OrientedBox</type>
      <name>box</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a776b652768c2d277c53a06aeb2d2a1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>depth</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>ab428f219ec476d97b65ff46ffdd601f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>height</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a92449431871fccc785df150f4d7b9217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UnitVec3</type>
      <name>normal</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a008d08208bf5ef537f3b201b45f0db49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>coneHalfAngle</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a8e77a27857e2411bb9fe2d05bd5c8d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3</type>
      <name>pointOnSurface</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>af425cacbc6b41e8909e2b5b780d927dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x0</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>aa8472ecb5dc4a81814882df192c8d9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y0</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>aaa79e363d1fc68d9ce1c59083e72bebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nx</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a9da31ea239b93f3e99cad675c8c9069c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>ny</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a0715e2760a9b51a472e04f11677f9968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Array_&lt; OBBNode &gt;</type>
      <name>children</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>a7ad81f63c62267939d5f79d2013bddb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBLeaf *</type>
      <name>contents</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>abfd881fb1ffa9628db0611f49837dc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2</type>
      <name>centerUW</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>aa700792642cbba97d752621b22ac5c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2</type>
      <name>dims</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>aacf3f25bdab7441b7c447d689836c9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Geo::BicubicBezierPatch</type>
      <name>patch</name>
      <anchorfile>classSimTK_1_1OBBNode.html</anchorfile>
      <anchor>adde6d98ad7b859ef83d667385db85315</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::OBBTree</name>
    <filename>classSimTK_1_1OBBTree.html</filename>
    <member kind="function">
      <type>const OBBNode &amp;</type>
      <name>getRoot</name>
      <anchorfile>classSimTK_1_1OBBTree.html</anchorfile>
      <anchor>acf1b553a344388e1b42fb0d4d7c4572c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBBNode &amp;</type>
      <name>updRoot</name>
      <anchorfile>classSimTK_1_1OBBTree.html</anchorfile>
      <anchor>a681774a9895922aaa567bd05f15d0378</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::OrientedBoundingBox</name>
    <filename>classSimTK_1_1OrientedBoundingBox.html</filename>
    <member kind="function">
      <type></type>
      <name>OrientedBoundingBox</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>a01be2a58a396fc49bf4c785876d711c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedBoundingBox</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>a0488beee2507f43bb6af9a3d60636764</anchor>
      <arglist>(const Transform &amp;transform, const Vec3 &amp;size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedBoundingBox</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>a2cd1c06f0082f4aa08fd28da13d57282</anchor>
      <arglist>(const Vector_&lt; Vec3 &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>a734090f60197649c3b136a61b156fae9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getSize</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>ad5534946d98780a894e951cd76fa53af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>ad91625f9ce5228a537aea9f92706af0e</anchor>
      <arglist>(const Vec3 &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsBox</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>a32cb5941f59bb746bce6e156baa11d2d</anchor>
      <arglist>(const OrientedBoundingBox &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsRay</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>a68854827f9f00531dfa33c43857b5bd4</anchor>
      <arglist>(const Vec3 &amp;origin, const UnitVec3 &amp;direction, Real &amp;distance) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>findNearestPoint</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>a2135923dd53bd76dfdc4f625ac8bb86c</anchor>
      <arglist>(const Vec3 &amp;position) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCorners</name>
      <anchorfile>classSimTK_1_1OrientedBoundingBox.html</anchorfile>
      <anchor>a52e9bc028c1b4bbca6001166303ef995</anchor>
      <arglist>(Vec3 corners[8]) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ParticleConSurfaceSystemGuts</name>
    <filename>classSimTK_1_1ParticleConSurfaceSystemGuts.html</filename>
    <base>SimTK::System::Guts</base>
    <member kind="function">
      <type></type>
      <name>ParticleConSurfaceSystemGuts</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a82f36b195233bf4545c4441b9ef669cd</anchor>
      <arglist>(const ContactGeometryImpl &amp;geom)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleConSurfaceSystem &amp;</type>
      <name>getParticleConSurfaceSystem</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a180f4c7937a860590b267f05270d6ef9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SubsystemIndex</type>
      <name>getSubsysIndex</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a2dd02d21701bcb6cba7f7d65795b3f76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleConSurfaceSystemGuts *</type>
      <name>cloneImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a77823eb2e337ad0d4d7a15d46f3bff7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>realizeTopologyImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>ae2be69748eaeb6a7321e908a19b12676</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>realizeModelImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a24bbb0b361f1dafad8582a6fc2654340</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>realizeInstanceImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a3fb9cfa933411dae2f6221cc3dbe5e6c</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>realizePositionImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>ae03d42e817cdc7df9e7f8adc1dbfd23d</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>realizeVelocityImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a9cbbb5528450c2ee3bba00a3bb2efb66</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>realizeDynamicsImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a2453949155b6abe10cf6109aa7c549bb</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>realizeAccelerationImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>aba3a4da7343b4d0b81328ac037a9e564</anchor>
      <arglist>(const State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a16bf01fe91951f5244c8b1ab7f6d47dc</anchor>
      <arglist>(const State &amp;state, const Vector &amp;u, Vector &amp;dq) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNTransposeImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a6a088974e613da6703bc35de5abcc91a</anchor>
      <arglist>(const State &amp;state, const Vector &amp;fq, Vector &amp;fu) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNPInvImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a344a9b36d7659d66a6eb4ba2974d1a26</anchor>
      <arglist>(const State &amp;state, const Vector &amp;dq, Vector &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyByNPInvTransposeImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a43577d4de717e46eac7797907f693f36</anchor>
      <arglist>(const State &amp;state, const Vector &amp;fu, Vector &amp;fq) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prescribeQImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a9f2e4447680def6d14da659ccf27004c</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prescribeUImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>ae2826e80d19dc8bdead8fd6eb11669f0</anchor>
      <arglist>(State &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectQImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a4138dbc19ba169d718cbe7b3ddecc56b</anchor>
      <arglist>(State &amp;, Vector &amp;qErrEst, const ProjectOptions &amp;options, ProjectResults &amp;results) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectUImpl</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>a0215bb9cc8eeb1220478c7bee22a179e</anchor>
      <arglist>(State &amp;, Vector &amp;uErrEst, const ProjectOptions &amp;options, ProjectResults &amp;results) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ParticleConSurfaceSystem</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystemGuts.html</anchorfile>
      <anchor>af6cd99d2c4d1a7ae979ba699f3179085</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ParticleConSurfaceSystem</name>
    <filename>classSimTK_1_1ParticleConSurfaceSystem.html</filename>
    <base>SimTK::System</base>
    <member kind="function">
      <type></type>
      <name>ParticleConSurfaceSystem</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystem.html</anchorfile>
      <anchor>a274559bad260a7e108216c795cb8c28a</anchor>
      <arglist>(const ContactGeometryImpl &amp;geom)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleConSurfaceSystemGuts &amp;</type>
      <name>getGuts</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystem.html</anchorfile>
      <anchor>a1b6a3fa6b6d691024bb36aa93d492d08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ParticleConSurfaceSystemGuts &amp;</type>
      <name>updGuts</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystem.html</anchorfile>
      <anchor>a8d085186d859886a038d884ab629e74b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTimeAndState</name>
      <anchorfile>classSimTK_1_1ParticleConSurfaceSystem.html</anchorfile>
      <anchor>a322fd00c2611246f5c3b469b0af0c6f2</anchor>
      <arglist>(Real t, const Vector &amp;q, const Vector &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Spline_</name>
    <filename>classSimTK_1_1Spline__.html</filename>
    <templarg>T</templarg>
    <base>SimTK::Function_</base>
    <class kind="class">SimTK::Spline_::SplineImpl</class>
    <member kind="function">
      <type></type>
      <name>Spline_</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a657ded3ef15598b3f7cbb13f82fef65b</anchor>
      <arglist>(int degree, const Vector &amp;x, const Vector_&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spline_</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>aab8b84e743141f4b0f3baca368c7e6fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spline_</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>ae3cf443ca7e90f114c6d69cbe76d6f1b</anchor>
      <arglist>(const Spline_ &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Spline_ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>aab7aa31b31c75059ec1000a7bbd9e5b0</anchor>
      <arglist>(const Spline_ &amp;source)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Spline_</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a62263cb6b784a98a33a947cdc9c59287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a8b20554109a1fafeedf45174be6146bb</anchor>
      <arglist>(Real x) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>ad34f0888953de306292554a353207f27</anchor>
      <arglist>(int order, Real x) const </arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getControlPointLocations</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>ace86210078af333f06f0ad8d51f1e8a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vector_&lt; T &gt; &amp;</type>
      <name>getControlPointValues</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a1929e533accdbc6e039eaf32a9294ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSplineDegree</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>adf2275d3006fd30984dc74851ef86467</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcValue</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a41ee6be155dbc4e7bcae71b1aeb30979</anchor>
      <arglist>(const Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a9e3bd0ef85d3fcd175acd158b119fdd1</anchor>
      <arglist>(const Array_&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a10ea5c3ead889aacb6a4acb97a377caa</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;derivComponents, const Vector &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArgumentSize</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a1f2ba81476bfda79d37947a1af89add0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxDerivativeOrder</name>
      <anchorfile>classSimTK_1_1Spline__.html</anchorfile>
      <anchor>a53756fb9b711aca037da9aaa17fb9385</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Spline_::SplineImpl</name>
    <filename>classSimTK_1_1Spline___1_1SplineImpl.html</filename>
    <member kind="function">
      <type></type>
      <name>SplineImpl</name>
      <anchorfile>classSimTK_1_1Spline___1_1SplineImpl.html</anchorfile>
      <anchor>a6bed028afa417fc838c2edc1b30f29ae</anchor>
      <arglist>(int degree, const Vector &amp;x, const Vector_&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SplineImpl</name>
      <anchorfile>classSimTK_1_1Spline___1_1SplineImpl.html</anchorfile>
      <anchor>a2342cb449f4ef3d88dda0681c2e5dc9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classSimTK_1_1Spline___1_1SplineImpl.html</anchorfile>
      <anchor>ac026640dbba44a803dbdfdea81440da1</anchor>
      <arglist>(Real t) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDerivative</name>
      <anchorfile>classSimTK_1_1Spline___1_1SplineImpl.html</anchorfile>
      <anchor>a99e8b144a475888b7925325bd0160a64</anchor>
      <arglist>(int derivOrder, Real t) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>referenceCount</name>
      <anchorfile>classSimTK_1_1Spline___1_1SplineImpl.html</anchorfile>
      <anchor>ac599b50817227624092f4f04ca6d9406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSimTK_1_1Spline___1_1SplineImpl.html</anchorfile>
      <anchor>a9bd568a313bcc14e506fe8bfc2c25417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>x</name>
      <anchorfile>classSimTK_1_1Spline___1_1SplineImpl.html</anchorfile>
      <anchor>a3293ba27813a58abbaeb7cadaf46e296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector_&lt; T &gt;</type>
      <name>y</name>
      <anchorfile>classSimTK_1_1Spline___1_1SplineImpl.html</anchorfile>
      <anchor>acf0fc676131fc282eef23a5a622b65bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SplineFitter</name>
    <filename>classSimTK_1_1SplineFitter.html</filename>
    <templarg></templarg>
    <class kind="class">SimTK::SplineFitter::SplineFitterImpl</class>
    <member kind="function">
      <type></type>
      <name>SplineFitter</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>af12c3d7dbe1b179053cf3dc941f8340b</anchor>
      <arglist>(const SplineFitter &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>SplineFitter</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>ab5b7593f4791a5c749e9449cfcee95e1</anchor>
      <arglist>(const SplineFitter &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SplineFitter</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>acae6e70ead5b6927a881e4e968b70639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Spline_&lt; T &gt; &amp;</type>
      <name>getSpline</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>a6f76fa735839d141c3d64c038bebac71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getSmoothingParameter</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>af2efff5af009b09b5081afa68f67cbeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getMeanSquaredError</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>a3e382f95a4f1f650ef2b8a9dea042287</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getDegreesOfFreedom</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>a92e1df1799edbf758b13220775ad5211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SplineFitter</type>
      <name>fitFromGCV</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>a14c0f8b54a264ababcf21ca3015fee9d</anchor>
      <arglist>(int degree, const Vector &amp;x, const Vector_&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SplineFitter</type>
      <name>fitFromErrorVariance</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>adac4738f9d896310766b5291a4e94328</anchor>
      <arglist>(int degree, const Vector &amp;x, const Vector_&lt; T &gt; &amp;y, Real error)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SplineFitter</type>
      <name>fitFromDOF</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>a00a753f947c7df61dd25ec1988563b7d</anchor>
      <arglist>(int degree, const Vector &amp;x, const Vector_&lt; T &gt; &amp;y, Real dof)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SplineFitter</type>
      <name>fitForSmoothingParameter</name>
      <anchorfile>classSimTK_1_1SplineFitter.html</anchorfile>
      <anchor>ab24a85edd03f3359c0138ae9fb27455a</anchor>
      <arglist>(int degree, const Vector &amp;x, const Vector_&lt; T &gt; &amp;y, Real p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SplineFitter::SplineFitterImpl</name>
    <filename>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</filename>
    <member kind="function">
      <type></type>
      <name>SplineFitterImpl</name>
      <anchorfile>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</anchorfile>
      <anchor>aecc378e0da61e67b20e0c16952423cf7</anchor>
      <arglist>(int degree, const Spline_&lt; T &gt; &amp;spline, Real p, Real error, Real dof)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SplineFitterImpl</name>
      <anchorfile>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</anchorfile>
      <anchor>aacd2ebb44aa572be684e3a31ef8c3532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>referenceCount</name>
      <anchorfile>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</anchorfile>
      <anchor>ae38f11516a6b805115abbb66543a18e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</anchorfile>
      <anchor>a5ea4ee2bde6588348cf0022e3626a449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Spline_&lt; T &gt;</type>
      <name>spline</name>
      <anchorfile>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</anchorfile>
      <anchor>a05515690512f79d393bac60c7ebaaae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>p</name>
      <anchorfile>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</anchorfile>
      <anchor>acce202a22c95c83c1a81e858d66ae945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>error</name>
      <anchorfile>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</anchorfile>
      <anchor>a6a0f79ba838bcdebdbca06a2c5c6cf90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Real</type>
      <name>dof</name>
      <anchorfile>classSimTK_1_1SplineFitter_1_1SplineFitterImpl.html</anchorfile>
      <anchor>a556f970be9dc4aaaad090435d84b79cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Differentiator</name>
    <filename>classSimTK_1_1Differentiator.html</filename>
    <class kind="class">SimTK::Differentiator::Function</class>
    <class kind="class">SimTK::Differentiator::GradientFunction</class>
    <class kind="class">SimTK::Differentiator::JacobianFunction</class>
    <class kind="class">SimTK::Differentiator::ScalarFunction</class>
    <member kind="enumeration">
      <name>Method</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a52b9ec9a8d24d9288754db2fb8073ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedMethod</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a52b9ec9a8d24d9288754db2fb8073ae3af443a7b4cd27b1c72b6a0dded9278b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ForwardDifference</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a52b9ec9a8d24d9288754db2fb8073ae3af823fcb064577222225e08f55c56a725</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CentralDifference</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a52b9ec9a8d24d9288754db2fb8073ae3af91fe9615ca5a20b1f022937cc6fe2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Differentiator</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a907afa74553addcc0e838564202b20db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Differentiator</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>aaac69fe5901e511c888aa2d2fff34cb5</anchor>
      <arglist>(const Function &amp;f, Method defaultMethod=UnspecifiedMethod)</arglist>
    </member>
    <member kind="function">
      <type>Differentiator &amp;</type>
      <name>setDefaultMethod</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>aa7cc39bf6bcb7835e4145b2d47909dcb</anchor>
      <arglist>(Method)</arglist>
    </member>
    <member kind="function">
      <type>Method</type>
      <name>getDefaultMethod</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a707f02d3d35d5655fd9592d8dfbabb31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a4f2e414b5d1aa979196523b4efdba5a4</anchor>
      <arglist>(Real y0, Real fy0, Real &amp;dfdy, Method=UnspecifiedMethod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcGradient</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a0c7ce503ea6404d5c2342a17d99a00e7</anchor>
      <arglist>(const Vector &amp;y0, Real fy0, Vector &amp;gf, Method=UnspecifiedMethod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcJacobian</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>ae7ccb5690dbe468fc8b9758bac0097f3</anchor>
      <arglist>(const Vector &amp;y0, const Vector &amp;fy0, Matrix &amp;dfdy, Method=UnspecifiedMethod) const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>calcDerivative</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a9c946291c373e8cce5231fdda27e2797</anchor>
      <arglist>(Real y0, Method=UnspecifiedMethod) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>calcGradient</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>ab2418b0df37f958f54670c3324e0ff88</anchor>
      <arglist>(const Vector &amp;y0, Method=UnspecifiedMethod) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>calcJacobian</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>abf8f125d19c74ac6aa521069615c672f</anchor>
      <arglist>(const Vector &amp;y0, Method=UnspecifiedMethod) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAllStatistics</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a50ae255d0188b13aaf27cc3b16222703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDifferentiations</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a31d9cfc519fc4bcbcfc2688bde0dd472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDifferentiationFailures</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a86cba62f3eef8b4c02b5a3bd7704c1d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCallsToUserFunction</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>abe19027aa89d30e730053506bebe47b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValidMethod</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>a17eef8a4f7c55959c3f13487bd096d7e</anchor>
      <arglist>(Method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getMethodName</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>af68119906f46a61e23baca53d10fd878</anchor>
      <arglist>(Method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMethodOrder</name>
      <anchorfile>classSimTK_1_1Differentiator.html</anchorfile>
      <anchor>af6644ae146ed3ea95e47133e6707f45c</anchor>
      <arglist>(Method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Differentiator::Function</name>
    <filename>classSimTK_1_1Differentiator_1_1Function.html</filename>
    <member kind="function">
      <type>Function &amp;</type>
      <name>setNumFunctions</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>aa9bb88c10be7683e23a35f04ae7724e3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Function &amp;</type>
      <name>setNumParameters</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>a303afa5b7c702c9508ca01220e4a928a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Function &amp;</type>
      <name>setEstimatedAccuracy</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>a07e7f42fb7255c2d9deed0568e27514f</anchor>
      <arglist>(Real)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFunctions</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>a5e81e9932ec77efa66916375525378bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParameters</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>ade4be11f485cea95813aa4200580e097</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEstimatedAccuracy</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>ad70e031b296b92eee5feed81f52ac188</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAllStatistics</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>a73dc889212001bab678e269609bcfcc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCalls</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>a51fd3322ddab40cc930e80bf35158164</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFailures</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>a4c97c512510620e94b246776c0b4f86a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Function</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>ac6c2c3797aa1fa48110b03c7451374fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Function</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>a21319475c6119e37e2939602142b330b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FunctionRep *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>a48063631564734440d4a666d9301e481</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Differentiator</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1Function.html</anchorfile>
      <anchor>af62fb00a23e1cae1b2550779056a0d80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Differentiator::GradientFunction</name>
    <filename>classSimTK_1_1Differentiator_1_1GradientFunction.html</filename>
    <base>SimTK::Differentiator::Function</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>f</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1GradientFunction.html</anchorfile>
      <anchor>af680b071906a3ea9cc196acb26dcdefe</anchor>
      <arglist>(const Vector &amp;y, Real &amp;fy) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientFunction</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1GradientFunction.html</anchorfile>
      <anchor>a043abd55868369ffd72b1818b1f6dcc8</anchor>
      <arglist>(int ny=-1, Real acc=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~GradientFunction</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1GradientFunction.html</anchorfile>
      <anchor>a1c50bfc45930b8acce7f42b52edf1faf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Differentiator::JacobianFunction</name>
    <filename>classSimTK_1_1Differentiator_1_1JacobianFunction.html</filename>
    <base>SimTK::Differentiator::Function</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>f</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1JacobianFunction.html</anchorfile>
      <anchor>a21d333c951f3e98a2b4d41d356371c74</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;fy) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JacobianFunction</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1JacobianFunction.html</anchorfile>
      <anchor>aca3edf3cde78d6f403409bfb58fc90c4</anchor>
      <arglist>(int nf=-1, int ny=-1, Real acc=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~JacobianFunction</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1JacobianFunction.html</anchorfile>
      <anchor>a244aa2c97cd2e3f675ab28fe1fa7dac4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Differentiator::ScalarFunction</name>
    <filename>classSimTK_1_1Differentiator_1_1ScalarFunction.html</filename>
    <base>SimTK::Differentiator::Function</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>f</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1ScalarFunction.html</anchorfile>
      <anchor>a2d26b44580b7524ee23fdf6bd6ecc652</anchor>
      <arglist>(Real x, Real &amp;fx) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ScalarFunction</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1ScalarFunction.html</anchorfile>
      <anchor>afd361605a11e8ebc9cc771593794f6ee</anchor>
      <arglist>(Real acc=-1)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarFunction</name>
      <anchorfile>classSimTK_1_1Differentiator_1_1ScalarFunction.html</anchorfile>
      <anchor>a9a070dae8f3334c51a7a6beabaaf10fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SysObjectiveFunc</name>
    <filename>classSimTK_1_1SysObjectiveFunc.html</filename>
    <base>SimTK::Differentiator::GradientFunction</base>
    <member kind="function">
      <type></type>
      <name>SysObjectiveFunc</name>
      <anchorfile>classSimTK_1_1SysObjectiveFunc.html</anchorfile>
      <anchor>a04c36c89d1429d1332ad04b2dcdb9174</anchor>
      <arglist>(int ny, const OptimizerSystem *sysPtr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>f</name>
      <anchorfile>classSimTK_1_1SysObjectiveFunc.html</anchorfile>
      <anchor>a64e9ceded7d3a74a1575ed173d59c3c3</anchor>
      <arglist>(const Vector &amp;y, Real &amp;fy) const </arglist>
    </member>
    <member kind="variable">
      <type>const OptimizerSystem *</type>
      <name>sysp</name>
      <anchorfile>classSimTK_1_1SysObjectiveFunc.html</anchorfile>
      <anchor>a91124cecdce696c84ee19562be3c850d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SysConstraintFunc</name>
    <filename>classSimTK_1_1SysConstraintFunc.html</filename>
    <base>SimTK::Differentiator::JacobianFunction</base>
    <member kind="function">
      <type></type>
      <name>SysConstraintFunc</name>
      <anchorfile>classSimTK_1_1SysConstraintFunc.html</anchorfile>
      <anchor>a391abcb1d67170ae7b0092f20a9e0619</anchor>
      <arglist>(int nf, int ny, const OptimizerSystem *sysPtr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>f</name>
      <anchorfile>classSimTK_1_1SysConstraintFunc.html</anchorfile>
      <anchor>a0b43881b81b35a7810466943709defb9</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;fy) const </arglist>
    </member>
    <member kind="variable">
      <type>const OptimizerSystem *</type>
      <name>sysp</name>
      <anchorfile>classSimTK_1_1SysConstraintFunc.html</anchorfile>
      <anchor>ab586b47c22f1135d3da74c4635eb99a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::DefaultOptimizer</name>
    <filename>classSimTK_1_1DefaultOptimizer.html</filename>
    <base>SimTK::Optimizer::OptimizerRep</base>
  </compound>
  <compound kind="class">
    <name>SimTK::Factor</name>
    <filename>classSimTK_1_1Factor.html</filename>
    <member kind="function">
      <type></type>
      <name>Factor</name>
      <anchorfile>classSimTK_1_1Factor.html</anchorfile>
      <anchor>a76464b257f8af963bf76b646fafff2c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Factor</name>
      <anchorfile>classSimTK_1_1Factor.html</anchorfile>
      <anchor>ab6ad6c4dba60eed66df52fe64a7415f2</anchor>
      <arglist>(Matrix_&lt; ELT &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSimTK_1_1Factor.html</anchorfile>
      <anchor>aaf2ec1d5ba9bd2da9e1bcbce6f26b91a</anchor>
      <arglist>(const Vector_&lt; ELT &gt; &amp;b, Vector_&lt; ELT &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSimTK_1_1Factor.html</anchorfile>
      <anchor>ab3333adb3ed3227b7cfa70adb49dbf51</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;b, Matrix_&lt; ELT &gt; &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::FactorLU</name>
    <filename>classSimTK_1_1FactorLU.html</filename>
    <base>SimTK::Factor</base>
    <member kind="function">
      <type></type>
      <name>~FactorLU</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a07589aba0d13923537748092d4ccf886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorLU</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a14708aceb503f5fd3f88ebd4f359d9bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorLU</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a8634127a8ab1635c3c2b79f2e04b3209</anchor>
      <arglist>(const FactorLU &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>FactorLU &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a5c4f90c6546d5ba5176c7c4552f84f55</anchor>
      <arglist>(const FactorLU &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorLU</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a3b56557ea398260e0520e204281fc6c2</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>aa397379988c39addb10e20eee72a99d7</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>afa257199ffd8ab0683a7bad7ac8ecdb5</anchor>
      <arglist>(const Vector_&lt; ELT &gt; &amp;b, Vector_&lt; ELT &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>ab30476a316dbe8dd4702791aea0f5b52</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;b, Matrix_&lt; ELT &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getL</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a5c44ecc4ac73cbfffe5588a7169f1c35</anchor>
      <arglist>(Matrix_&lt; ELT &gt; &amp;l) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getU</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a5580a21ceb72ca872acfa42bef00fe8c</anchor>
      <arglist>(Matrix_&lt; ELT &gt; &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a7877edb1a9551229f1e00c313e3cc0f2</anchor>
      <arglist>(Matrix_&lt; ELT &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingular</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>aebe5ed9378413687b31cef32ad6a946e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSingularIndex</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a430c842e98c0757e81b64c6b3e116cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class FactorLURepBase *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1FactorLU.html</anchorfile>
      <anchor>a0510ff30074dd0611318241b141eeed6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::FactorQTZ</name>
    <filename>classSimTK_1_1FactorQTZ.html</filename>
    <base>SimTK::Factor</base>
    <member kind="function">
      <type></type>
      <name>~FactorQTZ</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>a1194d30ec5e51032f8f0c5b8f87cc827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorQTZ</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>add1d06cf629b1a1218305e8d147d53a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorQTZ</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>ac520cb1a8a28388df82694d5a337c77a</anchor>
      <arglist>(const FactorQTZ &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>FactorQTZ &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>a55a354e3e2f693d7061a634d5fcc83d1</anchor>
      <arglist>(const FactorQTZ &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorQTZ</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>a1f4c11237d4f63c93c39b3786ea08bb0</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorQTZ</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>a9a88cdfdc519af3f2fe8dc01d267c039</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m, double rcond)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorQTZ</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>abb5f7378084941cd8266f30b5e6bc525</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m, float rcond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>aad45f65b64d2de2a13adf7dc06baacf3</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>a934f6cdf62e88711796d0adb6b97d3b6</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m, float rcond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>a1472feee910ac1fafb5bfeb2d0420998</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m, double rcond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>abb5eb789c588bb79747a2ea2d5e40a2e</anchor>
      <arglist>(const Vector_&lt; ELT &gt; &amp;b, Vector_&lt; ELT &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>acec3ec4c1390a2653bded309b2f6da68</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;b, Matrix_&lt; ELT &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>af0e9ed7d82c6cd3a88f3b64c3bb36e85</anchor>
      <arglist>(Matrix_&lt; ELT &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRank</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>af1d15cce5709e622ffda77b5553a709a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRCondEstimate</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>aa62f0183d38cd68f8b5a5e9fd7e1692f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class FactorQTZRepBase *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1FactorQTZ.html</anchorfile>
      <anchor>a31b4f8d008f16551d4a3eca92353d01b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Eigen</name>
    <filename>classSimTK_1_1Eigen.html</filename>
    <member kind="function">
      <type></type>
      <name>~Eigen</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>ad61626344f5d9087a80d239e45e2169a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Eigen</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>aae4f6d0d230dc65d1805ee1dc501e66c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Eigen</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>a5033b7e97ffcb881698153048609c622</anchor>
      <arglist>(const Eigen &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Eigen &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>a300eadc36fc8e219e8e181a4b47b8c08</anchor>
      <arglist>(const Eigen &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Eigen</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>ac9f7e7ade626bb1770b7c4f4c65ac14c</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>a94472f8da44f5dff58e063b9af0f02b1</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllEigenValuesAndVectors</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>af4d9d570dd5a15d9e56492349aebbdc2</anchor>
      <arglist>(Vector_&lt; VAL &gt; &amp;values, Matrix_&lt; VEC &gt; &amp;vectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllEigenValues</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>a40b3b59f48d6824830345119d77c3e35</anchor>
      <arglist>(Vector_&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFewEigenValuesAndVectors</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>a99874a8651db78c11efec7ab5057ba26</anchor>
      <arglist>(Vector_&lt; VAL &gt; &amp;values, Matrix_&lt; VEC &gt; &amp;vectors, int ilow, int ihi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFewEigenVectors</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>a47ec42611dd46eb22260660a44c8df46</anchor>
      <arglist>(Matrix_&lt; T &gt; &amp;vectors, int ilow, int ihi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFewEigenValues</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>adc11b4aba1c25fd2aa0e0878b521fb0f</anchor>
      <arglist>(Vector_&lt; T &gt; &amp;values, int ilow, int ihi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFewEigenValuesAndVectors</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>acb5608d3a04429c7207a2e08577ed591</anchor>
      <arglist>(Vector_&lt; VAL &gt; &amp;values, Matrix_&lt; VEC &gt; &amp;vectors, typename CNT&lt; VAL &gt;::TReal rlow, typename CNT&lt; VAL &gt;::TReal rhi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFewEigenVectors</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>acf66375d84d2196b10cbc9fc9fb39fa9</anchor>
      <arglist>(Matrix_&lt; T &gt; &amp;vectors, typename CNT&lt; T &gt;::TReal rlow, typename CNT&lt; T &gt;::TReal rhi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFewEigenValues</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>a7b98bb409b9d447c0727c32175a27871</anchor>
      <arglist>(Vector_&lt; T &gt; &amp;values, typename CNT&lt; T &gt;::TReal rlow, typename CNT&lt; T &gt;::TReal rhi)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class EigenRepBase *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1Eigen.html</anchorfile>
      <anchor>a65d578bc4434ecc9ece2c8053020a674</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::FactorSVD</name>
    <filename>classSimTK_1_1FactorSVD.html</filename>
    <base>SimTK::Factor</base>
    <member kind="function">
      <type></type>
      <name>~FactorSVD</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a319398d05271d30da18b9530708e19d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorSVD</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>aaa91ff4c78eb61a7b219a98fc651422c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorSVD</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a6a97c1d473c745b28bd76381c5175d20</anchor>
      <arglist>(const FactorSVD &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>FactorSVD &amp;</type>
      <name>operator=</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a8f49267472dc5044b8db46da237ac87a</anchor>
      <arglist>(const FactorSVD &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorSVD</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a5baa170bfd5f013d207d2f85e649d7ed</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorSVD</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a4935fd176e6c395d47225c947132f64e</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m, float rcond)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FactorSVD</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a5ef6a88314e4857ec8707edbb0303d2d</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m, double rcond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a77daaf62039d2babeee24db93f3fc371</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>acf53443998509370918b1690f4f874c9</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m, float rcond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factor</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>ab4f84388aa163dc2bf781469440ea1d3</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;m, double rcond)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSingularValuesAndVectors</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>aa603e2fcd0e75850c3a2d6783c32de73</anchor>
      <arglist>(Vector_&lt; typename CNT&lt; T &gt;::TReal &gt; &amp;values, Matrix_&lt; T &gt; &amp;leftVectors, Matrix_&lt; T &gt; &amp;rightVectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSingularValues</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a06eedb5e7621b59fae5d36d94db8b552</anchor>
      <arglist>(Vector_&lt; T &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRank</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a5acc0b06bf2d3be139b49b52f4be0f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>aa6fd208df5cea7a62df019ebe78d5e82</anchor>
      <arglist>(Matrix_&lt; ELT &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>ad9d0c1e32dc299b9c0bf6f142ad1a8fa</anchor>
      <arglist>(const Vector_&lt; ELT &gt; &amp;b, Vector_&lt; ELT &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a20524ebc12164e1fe57e1b2df735898d</anchor>
      <arglist>(const Matrix_&lt; ELT &gt; &amp;b, Matrix_&lt; ELT &gt; &amp;x)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class FactorSVDRepBase *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1FactorSVD.html</anchorfile>
      <anchor>a0b8ed07481c85548547276d64a151d49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MultibodyGraphMaker</name>
    <filename>classSimTK_1_1MultibodyGraphMaker.html</filename>
    <class kind="class">SimTK::MultibodyGraphMaker::Body</class>
    <class kind="class">SimTK::MultibodyGraphMaker::Joint</class>
    <class kind="class">SimTK::MultibodyGraphMaker::JointType</class>
    <class kind="class">SimTK::MultibodyGraphMaker::LoopConstraint</class>
    <class kind="class">SimTK::MultibodyGraphMaker::Mobilizer</class>
    <member kind="function">
      <type></type>
      <name>MultibodyGraphMaker</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>aa4e61cf3c7a23f7420b0047fe14959ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addJointType</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a1c46f94cb5b8e87671c884a7059f620f</anchor>
      <arglist>(const std::string &amp;name, int numMobilities, bool haveGoodLoopJointAvailable=false, void *userRef=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBody</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>ab31d4729312bbce20a3e66e86d231ea7</anchor>
      <arglist>(const std::string &amp;name, double mass, bool mustBeBaseBody, void *userRef=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteBody</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>ab1ec43b8811227be3a2f1f706d7ce6a4</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJoint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>ad541830163c056a472deca3144b3b7bd</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;type, const std::string &amp;parentBodyName, const std::string &amp;childBodyName, bool mustBeLoopJoint, void *userRef=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteJoint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>aeea50efafa85306fb1ae983a0be3696f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateGraph</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>aeeb9a8c02a7ecd75a300be3b947756cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearGraph</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a3f9ca8683a6ddef42ef33964319dce12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dumpGraph</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a733d20a7d5130ab67f7971235d33120e</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMobilizers</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>aea8bc26fde49a024b325bcf96bcd6754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Mobilizer &amp;</type>
      <name>getMobilizer</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>aeaab647ad012e55bde5240e127ea4b72</anchor>
      <arglist>(int mobilizerNum) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLoopConstraints</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>aa91aafda6f41f2c90e5fb41d9269518d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LoopConstraint &amp;</type>
      <name>getLoopConstraint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>ab32e3ad79a712e3bf0faea55a790b9c4</anchor>
      <arglist>(int loopConstraintNum) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBodies</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a1646be88b88ed4b57496756e59103b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Body &amp;</type>
      <name>getBody</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a425643124933e546049e5b774d2db418</anchor>
      <arglist>(int bodyNum) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBodyNum</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a41396a2e52d538a69f3e91919b16983a</anchor>
      <arglist>(const std::string &amp;bodyName) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumJoints</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a2ea957439e77b6d685d61cc0c15a403b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Joint &amp;</type>
      <name>getJoint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a171260c045378ae55a77c01fa3b2aab5</anchor>
      <arglist>(int jointNum) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getJointNum</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a7dfd7052ca17cb59f74275c9e00dd9f0</anchor>
      <arglist>(const std::string &amp;jointName) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumJointTypes</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>ae23544616ccfd20fde53070ebcc5e0ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointType &amp;</type>
      <name>getJointType</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>aed3c5122d6df6361f50661f47657897c</anchor>
      <arglist>(int jointTypeNum) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getJointTypeNum</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a1f2252afdb8978fec47a7bdfe8225249</anchor>
      <arglist>(const std::string &amp;jointTypeName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeldJointTypeName</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a2e91be9cd8681321649ac272e8ac7e8d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getWeldJointTypeName</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a90e41bac14a08fc043d0a867ff020f45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFreeJointTypeName</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a378de4657aa6f778410394b6bd0e1c69</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFreeJointTypeName</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a562eec7fd249f3799f6b374c60f2532a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGroundBodyName</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker.html</anchorfile>
      <anchor>a363212d52e757b9decad7b9de4e5f805</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MultibodyGraphMaker::Body</name>
    <filename>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</filename>
    <member kind="function">
      <type></type>
      <name>Body</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a16e4dca4e9e83e94107a979b32dfd212</anchor>
      <arglist>(const std::string &amp;name, double mass, bool mustBeBaseBody, void *userRef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forgetGraph</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a47fb3cf4027f2e04230ddb14dbdbd194</anchor>
      <arglist>(MultibodyGraphMaker &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFragments</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a7d692bc3b78a78c32fef10b618dfe2aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSlaves</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>ad1ba1c110cc60158bc70da64b21b0b76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumJoints</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a733315972bec1b10369650a6bc0acfcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSlave</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a937408bfb801ae2ad93324bc24e43f37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMaster</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a8e37385d8018fdef172ebb8d9b2a11cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInTree</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a7030c2b6c8a8ff6c9143ebb8066f01ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>ad306ac3642ce0196ab1199cee08a4ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mass</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>aaca59c5b9012e4a13a3a3b8a7157116e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mustBeBaseBody</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>afb8d17823f3a517043a363a3ccf8bc62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>userRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>ae6538afb5829ab2c61949616eb2ea3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>jointsAsChild</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a61c34114a924880b2e9d47da3ab5e1ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>jointsAsParent</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a9fc82ae63b83c313b4075a09706268b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>level</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a4a0f7c27acada0005a95fc7beac70401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mobilizer</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a8be208e5d4374c73a0abe0612144c416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>master</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>a19d65051d3054583d567a0246ce6894a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>slaves</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Body.html</anchorfile>
      <anchor>ad5fe130395553dfe8b9f153a2f9553e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MultibodyGraphMaker::Joint</name>
    <filename>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</filename>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>a5b5a1a927ea1a0b3dc698987423e6b8f</anchor>
      <arglist>(const std::string &amp;name, int jointTypeNum, int parentBodyNum, int childBodyNum, bool mustBeLoopJoint, void *userRef)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>forgetGraph</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>aeaf21b0666de87a6af1fc0019f85058e</anchor>
      <arglist>(MultibodyGraphMaker &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMobilizer</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>a17b9b617357669ccb88102f1424092b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLoopConstraint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>a3f2d8cd81aee58b67b3a5715cbc21544</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>a0558daf0e9f8ca7f04ded011023d80b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mustBeLoopJoint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>a7a74b788cb741b05d7877eaff79eae9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>userRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>aa26f3b32f98faf2917864bf682b08464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>parentBodyNum</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>a922ff9633bde886aa474e35b2feb5db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>childBodyNum</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>af4041180a7c8684dd9c7350d69791428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>jointTypeNum</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>ac919024fc9a00f411f8fb1a700815a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isAddedBaseJoint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>a085c24c75b6fa7ad5b40eafc16fac646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mobilizer</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>a0cc8098f4318500b1f99c8a514a7d4b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>loopConstraint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Joint.html</anchorfile>
      <anchor>af760e501adb15006159536667d6a2531</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MultibodyGraphMaker::JointType</name>
    <filename>classSimTK_1_1MultibodyGraphMaker_1_1JointType.html</filename>
    <member kind="function">
      <type></type>
      <name>JointType</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1JointType.html</anchorfile>
      <anchor>a545039aa371c87160aa53d709a19eed3</anchor>
      <arglist>(const std::string &amp;name, int numMobilities, bool haveGoodLoopJointAvailable, void *userRef)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1JointType.html</anchorfile>
      <anchor>a90cd4e46947d3d7ed457452a868f7b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>numMobilities</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1JointType.html</anchorfile>
      <anchor>aa736788088a2a7984e7c55f868f788e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>haveGoodLoopJointAvailable</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1JointType.html</anchorfile>
      <anchor>a8d8d2c63df9bfec938b7fdd48625318b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>userRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1JointType.html</anchorfile>
      <anchor>aa9046bae82285856d3f713b3a27423eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MultibodyGraphMaker::LoopConstraint</name>
    <filename>classSimTK_1_1MultibodyGraphMaker_1_1LoopConstraint.html</filename>
    <member kind="function">
      <type></type>
      <name>LoopConstraint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1LoopConstraint.html</anchorfile>
      <anchor>ae85fe5b79892b4adbb7c450fee82cc8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LoopConstraint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1LoopConstraint.html</anchorfile>
      <anchor>a31f199febc48f554869f935504863893</anchor>
      <arglist>(const std::string &amp;type, int jointNum, int parentBodyNum, int childBodyNum, MultibodyGraphMaker *graphMaker)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getJointRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1LoopConstraint.html</anchorfile>
      <anchor>ab17eab0c23b467ebb0318b778aa0833d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getJointTypeName</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1LoopConstraint.html</anchorfile>
      <anchor>a98df2d2f60888ce04619b00fd943d55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getParentBodyRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1LoopConstraint.html</anchorfile>
      <anchor>a5c37d30c08aea8c9b3cd3e2aa1ccb99c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getChildBodyRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1LoopConstraint.html</anchorfile>
      <anchor>a0740b9411e4782c1c5e068233fdf000c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MultibodyGraphMaker</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1LoopConstraint.html</anchorfile>
      <anchor>a528e9c4adfb65ff36059dc823db0d618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::MultibodyGraphMaker::Mobilizer</name>
    <filename>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</filename>
    <member kind="function">
      <type></type>
      <name>Mobilizer</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>aa9e3bfcfb0b52d7a758644b5dd733962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mobilizer</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a8a4c33b08309143510440af0a91dcb63</anchor>
      <arglist>(int jointNum, int level, int inboardBodyNum, int outboardBodyNum, bool isReversed, MultibodyGraphMaker *graphMaker)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAddedBaseMobilizer</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>ac3ff6eec01f2588cf73b041922cf13e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getJointRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a9b9f8133f5f92ff43a9189c85637633f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getInboardBodyRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a7c21b98131903064faf2e6d34a5beb78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getOutboardBodyRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a98dcd14905ca245da5d49acbed157ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getOutboardMasterBodyRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a564adb9fbffb218d1b0e80251ed6a5a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getJointTypeName</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a00752254e7682d0a3a5694764e041542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getJointTypeRef</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a37b193262de75339f640c11fe0d2de7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSlaveMobilizer</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a94a616e3ce3e73423f58b36fca955f6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFragments</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>aec50b5d8325ce92e147f74dbd1850843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReversedFromJoint</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a63400e8ae89e0c7ac0e8117225fbd372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MultibodyGraphMaker</name>
      <anchorfile>classSimTK_1_1MultibodyGraphMaker_1_1Mobilizer.html</anchorfile>
      <anchor>a528e9c4adfb65ff36059dc823db0d618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::OptimizerSystem</name>
    <filename>classSimTK_1_1OptimizerSystem.html</filename>
    <member kind="function">
      <type></type>
      <name>OptimizerSystem</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a95ea4ae68fab4a89e85b299496f232dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizerSystem</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>ad6137410a6c73feeb1c8406ffcef3fd6</anchor>
      <arglist>(int nParameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptimizerSystem</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>ac11a68513f7a1d3fca5181dceff97470</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>objectiveFunc</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a20cbae2019f361f2589b4ea16410a4ec</anchor>
      <arglist>(const Vector &amp;parameters, bool new_parameters, Real &amp;f) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gradientFunc</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a4343ee624ae26bce1aa3ff9abdc6137b</anchor>
      <arglist>(const Vector &amp;parameters, bool new_parameters, Vector &amp;gradient) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>constraintFunc</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a488b366786a22d88e3d976c0be91ccfd</anchor>
      <arglist>(const Vector &amp;parameters, bool new_parameters, Vector &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>constraintJacobian</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a66c6cdaf1ec3af091b3621cc91b0e391</anchor>
      <arglist>(const Vector &amp;parameters, bool new_parameters, Matrix &amp;jac) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>hessian</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a1fb1548b4ea300be03d12568423227ec</anchor>
      <arglist>(const Vector &amp;parameters, bool new_parameters, Vector &amp;gradient) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumParameters</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a3b441f1bde24b1798ea30fd3ea912f73</anchor>
      <arglist>(const int nParameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumEqualityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a0a133a6cbfd68a0d109aa0d0e7ed69c9</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumInequalityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a5b258b50471c9666a78a30a04efe4f58</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumLinearEqualityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a5c0817d236582fd06fc72873681f2de3</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumLinearInequalityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a5f3e8099e4d263439fa78efa3c19e34f</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameterLimits</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>abbe89fec5773ccc2e08ac51cd4ad6efd</anchor>
      <arglist>(const Vector &amp;lower, const Vector &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParameters</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>aeaff2f4d6ba0daa4085837f1ea627846</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>ad7f832db473c3d246c73d8b9ad0474f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEqualityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a22d5dee6c23b8ae86d8d0b09c21675de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInequalityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>ac87b39e36df1ecd0f31c1771ff138a7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLinearEqualityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>aee717ab7b22f3b9d36de07923e23f5b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNonlinearEqualityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>aa6f4de561e9ad1ba4b1501d51d80d0b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLinearInequalityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>ab852ef9f24dbccf24b472024c2a844c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNonlinearInequalityConstraints</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>a72730acf5551caf6d89039c63844c4ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHasLimits</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>aa535321d93a02b9df380e537113fe6b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameterLimits</name>
      <anchorfile>classSimTK_1_1OptimizerSystem.html</anchorfile>
      <anchor>af37f3b51b0a8149d36f41822c9ad4d4d</anchor>
      <arglist>(Real **lower, Real **upper) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Optimizer</name>
    <filename>classSimTK_1_1Optimizer.html</filename>
    <class kind="class">SimTK::Optimizer::OptimizerRep</class>
    <member kind="function">
      <type></type>
      <name>Optimizer</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>af1689ad5c3b7963ca9dd2d0185116037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Optimizer</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a41b904d41a54b0eba532fe2571d88e9a</anchor>
      <arglist>(const OptimizerSystem &amp;sys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Optimizer</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>ad499ede690bba7b983e392bfa2da3d76</anchor>
      <arglist>(const OptimizerSystem &amp;sys, OptimizerAlgorithm algorithm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Optimizer</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a500826018a2d86043db02f8255766253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConvergenceTolerance</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a4da8a112716c452feea21ce191620027</anchor>
      <arglist>(Real accuracy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintTolerance</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a2ed9261c7c4aa9d77e39fee2381030a4</anchor>
      <arglist>(Real tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a959b0ccc395c7b15dfc301b267494854</anchor>
      <arglist>(int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimitedMemoryHistory</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>acba2bbfb9ca15b6a177e63b81f414f6a</anchor>
      <arglist>(int history)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagnosticsLevel</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>adc7879d34cd645e8f40a9e422747d9d5</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizerSystem</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a195c7a1a9cd77c56d103acb507749c1e</anchor>
      <arglist>(const OptimizerSystem &amp;sys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptimizerSystem</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a52b4d6660f9ec4ab00e64899124d6a62</anchor>
      <arglist>(const OptimizerSystem &amp;sys, OptimizerAlgorithm algorithm)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdvancedStrOption</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>abd3d424c33f93bdc440d9acec74c4f18</anchor>
      <arglist>(const char *option, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdvancedRealOption</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>ab4a1e7cc8276474554f61a77730bb51b</anchor>
      <arglist>(const char *option, const Real value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdvancedIntOption</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a8bfe8489c0f712a61639d998c83926ed</anchor>
      <arglist>(const char *option, const int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdvancedBoolOption</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a3243af7cf0bd10861fe534adf83a94a6</anchor>
      <arglist>(const char *option, const bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDifferentiatorMethod</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>afce9e43262d3490c351a1a2746b1a652</anchor>
      <arglist>(Differentiator::Method method)</arglist>
    </member>
    <member kind="function">
      <type>Differentiator::Method</type>
      <name>getDifferentiatorMethod</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a4e6d438da163b1ecfcc89fee3032cd95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useNumericalGradient</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a823c42a953c9baf256cd133de5eea8ff</anchor>
      <arglist>(bool flag, Real estimatedAccuracyOfObjective=SignificantReal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useNumericalJacobian</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>afd2a9dba94028777d530b9161dcf1489</anchor>
      <arglist>(bool flag, Real estimatedAccuracyOfConstraints=SignificantReal)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>optimize</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a3d7df1f1881dfffe89444b292fafc12e</anchor>
      <arglist>(Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const OptimizerSystem &amp;</type>
      <name>getOptimizerSystem</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a4d34ba9a016d487c7558a6be5e05dad6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNumericalGradient</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a7ea3a3a31ce61cd2d98295f50a7c8257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNumericalJacobian</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a74ffd9a826c4c6cb2847a7faf570068d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEstimatedAccuracyOfObjective</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>ad79304ff7a88276dca4529a19b41001c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEstimatedAccuracyOfConstraints</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a6e5acd068df3736fdbd4a8534553f002</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAlgorithmAvailable</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a2cc124cf97af9f28de00634fd9ffa417</anchor>
      <arglist>(OptimizerAlgorithm algorithm)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OptimizerRep</name>
      <anchorfile>classSimTK_1_1Optimizer.html</anchorfile>
      <anchor>a6a149e6838c988ff68bd644c58ea7d3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Optimizer::OptimizerRep</name>
    <filename>classSimTK_1_1Optimizer_1_1OptimizerRep.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptimizerRep</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a79108d45d0dafa35138e8dae91b77607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizerRep</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ac042a8b2d8b61eacd9e583bdd74a9224</anchor>
      <arglist>(const OptimizerSystem &amp;sys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptimizerRep</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a6686a4cfa0aef58b32dc6a0c974af28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OptimizerRep *</type>
      <name>clone</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a8266d1f0ffe98769f0dd6c88dd264f24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Real</type>
      <name>optimize</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a67ac821006394ae14e137abb567ab9de</anchor>
      <arglist>(Vector &amp;results)=0</arglist>
    </member>
    <member kind="function">
      <type>const OptimizerSystem &amp;</type>
      <name>getOptimizerSystem</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a247ceea02f3ce48179eea03ea6fad664</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagnosticsLevel</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a57ba434e02625235a624ab10c17624e7</anchor>
      <arglist>(const int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConvergenceTolerance</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a6dc925bf893498a37f7a7556b192e688</anchor>
      <arglist>(Real accuracy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintTolerance</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a6bd4a9cbde73aefaa36165d08ff66cd7</anchor>
      <arglist>(Real tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a015bd22522435a996aa9b70da53b7771</anchor>
      <arglist>(const int iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimitedMemoryHistory</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a61f1eb5883f048fbb1657528e4aa2307</anchor>
      <arglist>(const int history)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdvancedStrOption</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a102053698a2c594fe521f821f69e3d9c</anchor>
      <arglist>(const std::string &amp;option, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdvancedRealOption</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a597325bc71ff1f401197823275a02bb5</anchor>
      <arglist>(const std::string &amp;option, const Real value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdvancedIntOption</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ab125c5983d8c429602323c1cf3206cc3</anchor>
      <arglist>(const std::string &amp;option, const int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAdvancedBoolOption</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a81c76035b5cf94a9482fa8d46bc607e6</anchor>
      <arglist>(const std::string &amp;option, const bool value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdvancedStrOption</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ad30433fa75e5ba0161862bd569e449bb</anchor>
      <arglist>(const std::string &amp;option, std::string &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdvancedRealOption</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ade6a9ff383a7cd2f528854eefad6455e</anchor>
      <arglist>(const std::string &amp;option, Real &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdvancedIntOption</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ac35f78777ab59600eae0786525b72843</anchor>
      <arglist>(const std::string &amp;option, int &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdvancedBoolOption</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>aa789b8efc588be5a9d9fd75675f08552</anchor>
      <arglist>(const std::string &amp;option, bool &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMyHandle</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>adedd4b0f2375013fe81d7941f776f6f6</anchor>
      <arglist>(Optimizer &amp;cp)</arglist>
    </member>
    <member kind="function">
      <type>const Optimizer &amp;</type>
      <name>getMyHandle</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a073a3c6907f56e21bc85e96575b4a8ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearMyHandle</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a26f1554aef8844ea3968a5f16b22c13a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useNumericalGradient</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>aeeb486e09d45fcbc8614c6005c883b1e</anchor>
      <arglist>(bool flag, Real objEstAccuracy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useNumericalJacobian</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a336aab58f4332344385d99889b520457</anchor>
      <arglist>(bool flag, Real consEstAccuracy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDifferentiatorMethod</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a2dcc0c3fc4efd43ba7eef6d52e25b9cd</anchor>
      <arglist>(Differentiator::Method method)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNumericalGradient</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ab006c9fa4f7fa7b40218b7aec6b18235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingNumericalJacobian</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ac64c02807a74c5e1753d40e50c5206c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Differentiator::Method</type>
      <name>getDifferentiatorMethod</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>aea4b55515d3b5059412ed41325f352d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEstimatedAccuracyOfObjective</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a5ad849debf02a8b99b8cbafd647123e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getEstimatedAccuracyOfConstraints</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>abbf9837ad6281ffe507a371cdf988af7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Differentiator &amp;</type>
      <name>getGradientDifferentiator</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a31880480617fbdd85999843b563bc120</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Differentiator &amp;</type>
      <name>getJacobianDifferentiator</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a72e04de0cd7dbc45c8b65a044a303d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAvailable</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a399642af54ce4e1d60e69d6ff5273331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numericalGradient_static</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a1790681266bb92e1e2e42ee260ed75af</anchor>
      <arglist>(const OptimizerSystem &amp;, const Vector &amp;parameters, const bool new_parameters, Vector &amp;gradient)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numericalJacobian_static</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ab9fd914f3dff67d0ecb0c1e9bd21013f</anchor>
      <arglist>(const OptimizerSystem &amp;, const Vector &amp;parameters, const bool new_parameters, Matrix &amp;jacobian)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>objectiveFuncWrapper</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ae8e8dcd975c129f913eff6e3e1a6dcb7</anchor>
      <arglist>(int n, const Real *x, int new_x, Real *f, void *rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>gradientFuncWrapper</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a89398be05179038320eaf686de2f2d54</anchor>
      <arglist>(int n, const Real *x, int new_x, Real *gradient, void *rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>constraintFuncWrapper</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a0680d2fc2e8ddfeadebd23aaa11caaca</anchor>
      <arglist>(int n, const Real *x, int new_x, int m, Real *g, void *rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>constraintJacobianWrapper</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a5c70c95196d35633d6451cf10a7ad62b</anchor>
      <arglist>(int n, const Real *x, int new_x, int m, int nele_jac, int *iRow, int *jCol, Real *values, void *rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>hessianWrapper</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a7bc4214f38c33e7123fbd49e23960927</anchor>
      <arglist>(int n, const Real *x, int new_x, Real obj_factor, int m, Real *lambda, int new_lambda, int nele_hess, int *iRow, int *jCol, Real *values, void *rep)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>diagnosticsLevel</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>af14f59022378f58693344a21e7e0edae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Real</type>
      <name>convergenceTolerance</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a292c9381ee52acf464123fdfe84d04c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Real</type>
      <name>constraintTolerance</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a4ffd0315bb64c768027fdea983698b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxIterations</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a899ed9253c24bbabd53e076ff20f9dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>limitedMemoryHistory</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a10ec1f00c6df70c180e3e3fb0082a221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Differentiator::Method</type>
      <name>diffMethod</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>abd947fbc84026cd735443dd912f9d349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Real</type>
      <name>objectiveEstimatedAccuracy</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>ac760e8ac5fd703972c7625ab39a3f531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Real</type>
      <name>constraintsEstimatedAccuracy</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>abf1a5037db7d58d326c0d7e171d956e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Optimizer</name>
      <anchorfile>classSimTK_1_1Optimizer_1_1OptimizerRep.html</anchorfile>
      <anchor>a8da03811ef0d7255511857cfa56494cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CPodesIntegrator</name>
    <filename>classSimTK_1_1CPodesIntegrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>CPodesIntegrator</name>
      <anchorfile>classSimTK_1_1CPodesIntegrator.html</anchorfile>
      <anchor>a08a954f526dd2831c8b20b42d3cc3856</anchor>
      <arglist>(const System &amp;sys, CPodes::LinearMultistepMethod method=CPodes::BDF)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPodesIntegrator</name>
      <anchorfile>classSimTK_1_1CPodesIntegrator.html</anchorfile>
      <anchor>a15e70d9dc4a106d9f7b1ed932e323ad7</anchor>
      <arglist>(const System &amp;sys, CPodes::LinearMultistepMethod method, CPodes::NonlinearSystemIterationType iterationType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseCPodesProjection</name>
      <anchorfile>classSimTK_1_1CPodesIntegrator.html</anchorfile>
      <anchor>aa46a97aa699460afa3d8c32a55434f1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrderLimit</name>
      <anchorfile>classSimTK_1_1CPodesIntegrator.html</anchorfile>
      <anchor>ad5bdfbcd591e452efad2489d6dfc815c</anchor>
      <arglist>(int order)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::ExplicitEulerIntegrator</name>
    <filename>classSimTK_1_1ExplicitEulerIntegrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>ExplicitEulerIntegrator</name>
      <anchorfile>classSimTK_1_1ExplicitEulerIntegrator.html</anchorfile>
      <anchor>abbde6899500f00241c39d982158bd8c5</anchor>
      <arglist>(const System &amp;sys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExplicitEulerIntegrator</name>
      <anchorfile>classSimTK_1_1ExplicitEulerIntegrator.html</anchorfile>
      <anchor>a2aaf0c32fe40510570fc873973bec820</anchor>
      <arglist>(const System &amp;sys, Real stepSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Integrator</name>
    <filename>classSimTK_1_1Integrator.html</filename>
    <member kind="enumeration">
      <name>SuccessfulStepStatus</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedReportTime</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3cab62580cbaf06397be270e0d6ed2f4888</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedEventTrigger</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3cae9eada18a89de7c5d034d0f153705a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedScheduledEvent</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3ca6951bd5731dd1fed378460d27ad54755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TimeHasAdvanced</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3cab6be08c3b8128ce672391bc6d4d99086</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedStepLimit</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3ca05b24e74f569345a255a372f08635344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EndOfSimulation</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3ca6a1894d4b5b9435df534f0d71d7ff7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StartOfContinuousInterval</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3cac819a6afd1997f19accc37951a20a169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidSuccessfulStepStatus</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5ae0cdb5fa055e2ed729e284e8ad2f3caa0ed51aa420274123335d7edb7867fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>TerminationReason</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a2147c87443a87123831e83078dc13d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReachedFinalTime</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a2147c87443a87123831e83078dc13d20a3e55a9e4c4a3e235d7c98de8cfbefc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AnUnrecoverableErrorOccurred</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a2147c87443a87123831e83078dc13d20a01ceca4fedb8ed47f2eed7e717202449</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EventHandlerRequestedTermination</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a2147c87443a87123831e83078dc13d20a81223ba358b397f1a4c17daae948641e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidTerminationReason</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a2147c87443a87123831e83078dc13d20a36edc38ea298f43a90da957de3c2512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Integrator</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>aabb86b476dcf859c63b0f7081dc9662f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Integrator</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>accc7690f27af1ad14974ee02cc975093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getMethodName</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a4c7b57ac9a6eec8f02f64b1e8635727e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMethodMinOrder</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>aae4e4a7a98f9201e5aa232ff31e07390</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMethodMaxOrder</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a6a8654d2eea49025184b7679b2564baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>methodHasErrorControl</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5001de07d73abe09352cf6eee7a7341c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5cddd3f6803de6e8948f59f05e38071d</anchor>
      <arglist>(const State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinitialize</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>aa0ae74fbceec586e94f2b1a7de3a0528</anchor>
      <arglist>(Stage stage, bool shouldTerminate)</arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>getState</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ad3f9ef71e36b5e0c3671742023fb9048</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTime</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ab2c6f8e0c8b19232c2a12c6a82385700</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStateInterpolated</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a748e306667f6fadece46e45a83660961</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>getAdvancedState</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ad825a4d3ebdc1cef0c92f5ae866aa127</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAdvancedTime</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a2ac654bfe9b7ec3e46574e0f1cc33a5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>State &amp;</type>
      <name>updAdvancedState</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>acb1d9ff5669c42e3ae16960b98573a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getAccuracyInUse</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ab3d9cf54514d8fdf704447b312b6264b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getConstraintToleranceInUse</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>afbec52ae3ac0a98af73f9bd158737707</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SuccessfulStepStatus</type>
      <name>stepTo</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ae5e041a25fadd56e8fb3aca8ed4ad1c4</anchor>
      <arglist>(Real reportTime, Real scheduledEventTime=Infinity)</arglist>
    </member>
    <member kind="function">
      <type>SuccessfulStepStatus</type>
      <name>stepBy</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a8fe19b6b288aa59db7a2ee7f5756be46</anchor>
      <arglist>(Real interval, Real scheduledEventTime=Infinity)</arglist>
    </member>
    <member kind="function">
      <type>Vec2</type>
      <name>getEventWindow</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>aab848e17bf15ee304e086b62b40ad067</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; EventId &gt; &amp;</type>
      <name>getTriggeredEvents</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a167b892058f08ca1c5f58c3461720874</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Real &gt; &amp;</type>
      <name>getEstimatedEventTimes</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ae090f4f001a47825a003307acc354c44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Array_&lt; Event::Trigger &gt; &amp;</type>
      <name>getEventTransitionsSeen</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a7d3bc8c089a856d4a0b61ee3702cf69f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSimulationOver</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a4e872e5969f02517f646b75ee843695b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TerminationReason</type>
      <name>getTerminationReason</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ae5ca4679032ea08261f3c3b27c19c58a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAllStatistics</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a89d078eec35c58b3ab45a23c95fb7b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getActualInitialStepSizeTaken</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>adedd6c3115e25962ac3ca09483ec6679</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPreviousStepSizeTaken</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ae72f305e1deb314036844bd8200710b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getPredictedNextStepSize</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a805a4f5549163a0fb36a4aa5d78ba9b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumStepsAttempted</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a70cd9066816f1fffff26bf5bdc04b9cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumStepsTaken</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5c6ede41f3a5f4fe400580bc8763c992</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRealizations</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a92e5a9366527e5c96c76620989c118d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumQProjections</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a4390d15f85a75398a9b265f5b12f8bd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumUProjections</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>aabbbe53c7e9b3a3ee21fb3467e6d9476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumProjections</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a1a6818a4091c7c32086c28d0400ce550</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumErrorTestFailures</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>aa63c87b34fd43c69ef5f2c01e1087dc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConvergenceTestFailures</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a5d20b4563197d7323b678940c1bf9aac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRealizationFailures</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a94deb4fd3f23ddf382fe4038445cf83a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumQProjectionFailures</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>af66533f118a98cf42fbcf9a5dd580892</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumUProjectionFailures</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ae61082b9e7864ae1be7a71654b56ff27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumProjectionFailures</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a595495fc7a6688af2f7126468ea6c3f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConvergentIterations</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ac2dc1e1fbf7ee1f6b804f53eb45f3eac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDivergentIterations</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a40d1f856f0cf4dbbf70fa07a686684c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumIterations</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a2fa617d6eb8903e35bd8f1bc9faed438</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinalTime</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ab1840b665f3ad620af3b0a5ce032b2c4</anchor>
      <arglist>(Real tFinal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialStepSize</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a50361df5ed40cd64cddc754c6eb73ba4</anchor>
      <arglist>(Real hinit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumStepSize</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a4390d1685ca2bb7ea5b75ed009b4bb94</anchor>
      <arglist>(Real hmin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumStepSize</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>af0ff5d20ba25e7555b6ae1688e6430ba</anchor>
      <arglist>(Real hmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFixedStepSize</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a38f6dfcf8925a7d313d97c15ae34a65e</anchor>
      <arglist>(Real stepSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccuracy</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a788255e5bff85345cc09d5d7d2e4e06d</anchor>
      <arglist>(Real accuracy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintTolerance</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ac57203fb9065ed2d5e01a9b0a511fd51</anchor>
      <arglist>(Real consTol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseInfinityNorm</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>aa3087bb279a33aa5c09facb008f73c3d</anchor>
      <arglist>(bool useInfinityNorm)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInfinityNormInUse</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ac4fd5a4da3744063ef5f854a3a568178</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInternalStepLimit</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a7ba59d2ad5def334eb9a3d791bcb7f2c</anchor>
      <arglist>(int nSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReturnEveryInternalStep</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a4d279d865964b3f314af488ad0a428f1</anchor>
      <arglist>(bool shouldReturn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectEveryStep</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a986b31f9fe46527bdecb8edaefd10379</anchor>
      <arglist>(bool forceProject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllowInterpolation</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ae7066d8360b1ab87f082aac1082792d0</anchor>
      <arglist>(bool shouldInterpolate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjectInterpolatedStates</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>ac27f5c18374af65401a27caa39058fcb</anchor>
      <arglist>(bool shouldProject)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceFullNewton</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a31744303fe1278dfde7907ef1eeb21e8</anchor>
      <arglist>(bool forceFullNewton)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getSuccessfulStepStatusString</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>af1efbd0183d1da9a98d7a8fbc8949ae6</anchor>
      <arglist>(SuccessfulStepStatus)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>getTerminationReasonString</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a984b48225548f75b9294f69e8bf48d8f</anchor>
      <arglist>(TerminationReason)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static String</type>
      <name>successfulStepStatusString</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a606c6cb1c979e9448b95a7725b537104</anchor>
      <arglist>(SuccessfulStepStatus stat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IntegratorRep &amp;</type>
      <name>getRep</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>abfbf96b22a7bfe9c9e595f549b14076b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntegratorRep &amp;</type>
      <name>updRep</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>a43c1f236d37bc1ac7d2ec7ddd2849645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntegratorRep *</type>
      <name>rep</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>af4a0ca5207388eddb501ad3ec4035e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>IntegratorRep</name>
      <anchorfile>classSimTK_1_1Integrator.html</anchorfile>
      <anchor>acf208bfd04dd7bde85ef345845560d97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CPodesSystem</name>
    <filename>classSimTK_1_1CPodesSystem.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CPodesSystem</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>a76ffd59e8ba3a3ae756d83bf5cbbdcfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>explicitODE</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>a4f9db0d782738dc5751c5af0310ed747</anchor>
      <arglist>(Real t, const Vector &amp;y, Vector &amp;fout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>implicitODE</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>a8dbe09b4f82b4ecade522a4d66dbf374</anchor>
      <arglist>(Real t, const Vector &amp;y, const Vector &amp;yp, Vector &amp;fout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>constraint</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>a5e66c807f1ba3d5b23ffa3cc5ced475b</anchor>
      <arglist>(Real t, const Vector &amp;y, Vector &amp;cout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>project</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>ab9c4d24066ce635132635803f977a864</anchor>
      <arglist>(Real t, const Vector &amp;ycur, Vector &amp;corr, Real epsProj, Vector &amp;err) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>quadrature</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>aedba519faf73dd89e9b933528ec53f0a</anchor>
      <arglist>(Real t, const Vector &amp;y, Vector &amp;qout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>root</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>a72f4db9b63d063a3d4809b286f3f12a1</anchor>
      <arglist>(Real t, const Vector &amp;y, const Vector &amp;yp, Vector &amp;gout) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>weight</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>a2a05d8656c591edb90f34c4d5b504de5</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;weights) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>errorHandler</name>
      <anchorfile>classSimTK_1_1CPodesSystem.html</anchorfile>
      <anchor>aab8ea829d0862034761109e8263eb30c</anchor>
      <arglist>(int error_code, const char *module, const char *function, char *msg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CPodes</name>
    <filename>classSimTK_1_1CPodes.html</filename>
    <member kind="enumeration">
      <name>ODEType</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a593f425e72e5b92a20adbfc05faf5ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedODEType</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a593f425e72e5b92a20adbfc05faf5ea5a483b6fc98aad69ed588f8a6699826d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ExplicitODE</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a593f425e72e5b92a20adbfc05faf5ea5ac335661ae00d83740d5fef20d0d0f5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ImplicitODE</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a593f425e72e5b92a20adbfc05faf5ea5af110493f08936ee18afa5b64d7f593e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>LinearMultistepMethod</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a28280488153b6ca92edea890151af5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedLinearMultistepMethod</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a28280488153b6ca92edea890151af5a6a22d3591b25b058a8ba09864957bdc33e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BDF</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a28280488153b6ca92edea890151af5a6a84f9d971049e38af7d7b7386dd6d4a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Adams</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a28280488153b6ca92edea890151af5a6ae150c05b30608863f7b818b116d96087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NonlinearSystemIterationType</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a165faf89506ff81fb77e62a5009ce577</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedNonlinearSystemIterationType</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a165faf89506ff81fb77e62a5009ce577a0b1a5ed1cdc2778502f32cc95944019d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Newton</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a165faf89506ff81fb77e62a5009ce577ad8814af9ad8567f02d41bb19334549b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Functional</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a165faf89506ff81fb77e62a5009ce577a2c3c22b8103cdc6a0c019962707c86f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ToleranceType</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a5199cbf26274895ac49e6f04cc9d7edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedToleranceType</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a5199cbf26274895ac49e6f04cc9d7edcae7eaaf2623e6904d71f33c8ec02bcdc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ScalarScalar</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a5199cbf26274895ac49e6f04cc9d7edca4d6cf8691881250c8104292a02ab7632</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ScalarVector</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a5199cbf26274895ac49e6f04cc9d7edcae9ff9d438408bac328227af42d4e78a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WeightFunction</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a5199cbf26274895ac49e6f04cc9d7edcac7cdcaba45eb82b451fc456d900c1309</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ProjectionNorm</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a8bbc26dc7fb81e5ab6720262f6dcb715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedProjectionNorm</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a8bbc26dc7fb81e5ab6720262f6dcb715a286496b076b5efbb4cec4a7cece6e644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>L2Norm</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a8bbc26dc7fb81e5ab6720262f6dcb715a94ad31469e3a857cb189782cf9c597ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ErrorNorm</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a8bbc26dc7fb81e5ab6720262f6dcb715a1f5779f419eaabaa92724dcadaf6be0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ConstraintLinearity</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a34a1a10e8f0997e48f35a8ac0762a446</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedConstraintLinearity</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a34a1a10e8f0997e48f35a8ac0762a446a49c9238f876392d402c01feb08245fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Linear</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a34a1a10e8f0997e48f35a8ac0762a446a98dd2c914e7b95fa445d87a86092ab3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Nonlinear</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a34a1a10e8f0997e48f35a8ac0762a446a48a3dedff5649772259435a628f58361</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ProjectionFactorizationType</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a25f8d02a2c23f883c47b0194b6972d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedProjectionFactorizationType</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a25f8d02a2c23f883c47b0194b6972d6ea8378c492f188776f4b3a02fb6b137084</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProjectWithLU</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a25f8d02a2c23f883c47b0194b6972d6eaa8badaa3552c292db7204bbdd885247f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProjectWithQR</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a25f8d02a2c23f883c47b0194b6972d6ea1c698263c8d06277f572f5effcd27e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProjectWithSchurComplement</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a25f8d02a2c23f883c47b0194b6972d6ea39922bc24169790231f580a2933a60ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ProjectWithQRPivot</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a25f8d02a2c23f883c47b0194b6972d6ea971dfcd38e5b4079877325e0b4472d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StepMode</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6d2289c0d68928f172f787f41d8530ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnspecifiedStepMode</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6d2289c0d68928f172f787f41d8530ffa089b06f1dbe6a7ca829757de1c094c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Normal</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6d2289c0d68928f172f787f41d8530ffa99b3d779847a89b25acdaeaecd34cef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneStep</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6d2289c0d68928f172f787f41d8530ffacc085cd939ca7eddb772a10ae27b88f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NormalTstop</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6d2289c0d68928f172f787f41d8530ffa440c83665f3ec749e31697004d17e212</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OneStepTstop</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6d2289c0d68928f172f787f41d8530ffa64b0b5a4651b2095bd9816cbf3cb9892</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CPodes</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a9306e9497071c349a64d3478d5985f3f</anchor>
      <arglist>(ODEType ode=UnspecifiedODEType, LinearMultistepMethod lmm=UnspecifiedLinearMultistepMethod, NonlinearSystemIterationType nls=UnspecifiedNonlinearSystemIterationType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CPodes</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a424e33c2eb027c76ea7f0b75a183e90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>init</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a82170c4f6f178c4da92fd9d63fc225f3</anchor>
      <arglist>(CPodesSystem &amp;sys, Real t0, const Vector &amp;y0, const Vector &amp;yp0, ToleranceType tt, Real reltol, void *abstol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reInit</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a19458f03ebe3193488383ac610265b98</anchor>
      <arglist>(CPodesSystem &amp;sys, Real t0, const Vector &amp;y0, const Vector &amp;yp0, ToleranceType tt, Real reltol, void *abstol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>projInit</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a7af8bab2b83398bb889014aeabb66cb8</anchor>
      <arglist>(ProjectionNorm, ConstraintLinearity, const Vector &amp;ctol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>projDefine</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>aa2f6b98d900c26659ed8239531dece46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>quadInit</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a1273d2d349520c93d70b03e10bb8302e</anchor>
      <arglist>(const Vector &amp;q0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>quadReInit</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ab8f22b4e25dad352318fbc8cf7458480</anchor>
      <arglist>(const Vector &amp;q0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rootInit</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ad2b4fcff97c04468159e18e52a03c6ec</anchor>
      <arglist>(int nrtfn)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setErrHandlerFn</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ab5c890f1446033be73f5b40df3323976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setEwtFn</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a7c2129aa77b83ab59e3fff83a6d94813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlsSetJacFn</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a390244ce6d07d5f715c8c6d843af515a</anchor>
      <arglist>(void *jac, void *jac_data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlsProjSetJacFn</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a311177594b7d728fd93bbcc1779095d6</anchor>
      <arglist>(void *jacP, void *jacP_data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>step</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a4cc638b8d644504f2f58db07f424dc01</anchor>
      <arglist>(Real tout, Real *tret, Vector &amp;y_inout, Vector &amp;yp_inout, StepMode=Normal)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setErrFile</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a97be09b3010d197dd6c746978cccc47e</anchor>
      <arglist>(FILE *errfp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMaxOrd</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ab3ff671b5ecb9c37102576df863f1a46</anchor>
      <arglist>(int maxord)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMaxNumSteps</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a94eb42b9a9a3677c0b0ea3bba5173239</anchor>
      <arglist>(int mxsteps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMaxHnilWarns</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a8c6c0101025f91bfd2c9ad81e118de44</anchor>
      <arglist>(int mxhnil)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setStabLimDet</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>abfedea612304d0e8285cd40cc51dc838</anchor>
      <arglist>(bool stldet)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setInitStep</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a9e6b6a62515a717ca6709f8a26648829</anchor>
      <arglist>(Real hin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMinStep</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a2caf896bdea1c675039e6e95c8b714f3</anchor>
      <arglist>(Real hmin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMaxStep</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a525438624bd29f77511e49692732966f</anchor>
      <arglist>(Real hmax)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setStopTime</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a3eb524be987c1b88ccf21eab8a130473</anchor>
      <arglist>(Real tstop)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMaxErrTestFails</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>aa3f5080445a8bb10c5d9302209c34b7a</anchor>
      <arglist>(int maxnef)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMaxNonlinIters</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a9584f2839a3985c1ef9c8c22fcd81db5</anchor>
      <arglist>(int maxcor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setMaxConvFails</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>aa9a44f67aa8c73685a5a398c7fedde01</anchor>
      <arglist>(int maxncf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setNonlinConvCoef</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a50b629974a358b47eda00f66bf45d679</anchor>
      <arglist>(Real nlscoef)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setProjUpdateErrEst</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a5b6d61d7fb2d255925b14a84f11e8ae6</anchor>
      <arglist>(bool proj_err)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setProjFrequency</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a68a3bee10eb644be4bfa380fdcd75ffa</anchor>
      <arglist>(int proj_freq)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setProjTestCnstr</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a935bd6b0bbc93bf27d6a148ca8a15193</anchor>
      <arglist>(bool test_cnstr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setProjLsetupFreq</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6f9a24f2940f24edbedf5af9aa335e7e</anchor>
      <arglist>(int proj_lset_freq)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setProjNonlinConvCoef</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6e525b4d5fbbdd1251a9c173a303d235</anchor>
      <arglist>(Real prjcoef)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setQuadErrCon</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>aa0364efa8f58f38d92333578093c4b71</anchor>
      <arglist>(bool errconQ, int tol_typeQ, Real reltolQ, void *abstolQ)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setTolerances</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a214726e3f34904b617a31dd4f0b9f578</anchor>
      <arglist>(int tol_type, Real reltol, void *abstol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setRootDirection</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a340086ed8b6e4427f1a2d8f25ed66ae9</anchor>
      <arglist>(Array_&lt; int &gt; &amp;rootdir)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDky</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a5ddf12040bfbe8b43777f81a8311643f</anchor>
      <arglist>(Real t, int k, Vector &amp;dky)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuad</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a4d399b56005c984d7037b58179820cc4</anchor>
      <arglist>(Real t, Vector &amp;yQout)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuadDky</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ae137d3a9d2c226a08b8e180f52494d62</anchor>
      <arglist>(Real t, int k, Vector &amp;dky)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWorkSpace</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a509a9f7651448aabb4d9482c1817df28</anchor>
      <arglist>(int *lenrw, int *leniw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSteps</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a66a59c9aca15860b755fcf633f503311</anchor>
      <arglist>(int *nsteps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFctEvals</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a01c373577a8ced3821b3bb917e58dc5e</anchor>
      <arglist>(int *nfevals)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLinSolvSetups</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a3b8e366d3a60fc845f9974f470fe3994</anchor>
      <arglist>(int *nlinsetups)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumErrTestFails</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6a8f4a9154de071d5d76d314339038e8</anchor>
      <arglist>(int *netfails)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastOrder</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a96fc8339a75460a1869379918b15a1ef</anchor>
      <arglist>(int *qlast)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentOrder</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a41cef7e940ca3e22e4a119eaa83c5fb1</anchor>
      <arglist>(int *qcur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumStabLimOrderReds</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a6d440a3645ee91106eac47fe2989d9c2</anchor>
      <arglist>(int *nslred)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getActualInitStep</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ae756613b9926864ba096130bc680680d</anchor>
      <arglist>(Real *hinused)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastStep</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ae72e04419c2908200a3e731ef1e7e7db</anchor>
      <arglist>(Real *hlast)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentStep</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>aa589d5b53c1f261f8a46d9490fdca1f4</anchor>
      <arglist>(Real *hcur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentTime</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a261cc24ddc796f8ba07bae12ead96583</anchor>
      <arglist>(Real *tcur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTolScaleFactor</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ae1edaaf917c71f9af1c6fe4473fd6013</anchor>
      <arglist>(Real *tolsfac)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getErrWeights</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ac9ca67644380ef6f9d3524d4498eab59</anchor>
      <arglist>(Vector &amp;eweight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEstLocalErrors</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a7e3c6a66dc5293a1729c21429767657e</anchor>
      <arglist>(Vector &amp;ele)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGEvals</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a241ac2a210ca8effae371fb81ebd5214</anchor>
      <arglist>(int *ngevals)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRootInfo</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a1944502c78db5750b30880e111bc8e92</anchor>
      <arglist>(int *rootsfound)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRootWindow</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>aa8b2391e494cc5009080a8ef7b436734</anchor>
      <arglist>(Real *tLo, Real *tHi)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntegratorStats</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a0f8353c1a29ca93dff908d952abac09e</anchor>
      <arglist>(int *nsteps, int *nfevals, int *nlinsetups, int *netfails, int *qlast, int *qcur, Real *hinused, Real *hlast, Real *hcur, Real *tcur)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNonlinSolvIters</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a514d13b878d7f6e82492d7d6815226cc</anchor>
      <arglist>(int *nniters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumNonlinSolvConvFails</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a24fe6e0603218ac06f36f78308f00a92</anchor>
      <arglist>(int *nncfails)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNonlinSolvStats</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a2c556580167cc8e67f070da47d1a6382</anchor>
      <arglist>(int *nniters, int *nncfails)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProjNumProj</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a9ed6ffb1b6beb6e2c455bf4ffbed7956</anchor>
      <arglist>(int *nproj)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProjNumCnstrEvals</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a52d5f473ea9f0abd4f052151f18057f4</anchor>
      <arglist>(int *nce)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProjNumLinSolvSetups</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ab6dd4cffbf94ab76a6230dab516d6fcb</anchor>
      <arglist>(int *nsetupsP)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProjNumFailures</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a005ba85e7fd378b878c9aae2bdafb5a2</anchor>
      <arglist>(int *nprf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProjStats</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a77e2bbcdfd1a369b5f1237c9076e434d</anchor>
      <arglist>(int *nproj, int *nce, int *nsetupsP, int *nprf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuadNumFunEvals</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a46bde03c9c16171a3e7064f27de1c730</anchor>
      <arglist>(int *nqevals)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getQuadErrWeights</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>aa2db220a2aca5ffe1710176c8c9287a5</anchor>
      <arglist>(Vector &amp;eQweight)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>getReturnFlagName</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a76a4adcee83efca5704b493415443a5a</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlsGetWorkSpace</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a51b9503faa35c7fea3267f5af64d0532</anchor>
      <arglist>(int *lenrwLS, int *leniwLS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlsGetNumJacEvals</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a8c1a94251819f2ab800f6c2ad6622189</anchor>
      <arglist>(int *njevals)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlsGetNumFctEvals</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ab90878005ebb0ff9e4023a5450cf9973</anchor>
      <arglist>(int *nfevalsLS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlsGetLastFlag</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a87dd528148e7abd077bf544df4096d3b</anchor>
      <arglist>(int *flag)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>dlsGetReturnFlagName</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>ad10aff728dd7fe8ac104f4b97b0c014c</anchor>
      <arglist>(int flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlsProjGetNumJacEvals</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a31b650e8a68b703c3643b2a4973f4c38</anchor>
      <arglist>(int *njPevals)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dlsProjGetNumFctEvals</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a3c731108b027eaf4d2c90d80da3cf8be</anchor>
      <arglist>(int *ncevalsLS)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lapackDense</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a104a06c3647b06f640cc0a31baf0b188</anchor>
      <arglist>(int N)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lapackBand</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a084018390b92de46d1a360f0310a49f1</anchor>
      <arglist>(int N, int mupper, int mlower)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lapackDenseProj</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a92b205259bae3aebed9af2bdea275844</anchor>
      <arglist>(int Nc, int Ny, ProjectionFactorizationType)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Success</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a463d3a1d22d6730a3186d9199e445896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TstopReturn</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a75086d26299ad18882773b37882caa1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>RootReturn</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a599c357d46f45345474893434eea2b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Warning</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>acf668e53f95f64168342c66862e8632e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TooMuchWork</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a765ae78c07173a362f941f729e52d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>TooClose</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a165232111a15e45c6dc01dac4c82e9d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>RecoverableError</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a8c10fe6ac335bb317ef6b6d1a2015881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>UnrecoverableError</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>a7690224424b1972a119d7d0c3485d62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CPodesRep</name>
      <anchorfile>classSimTK_1_1CPodes.html</anchorfile>
      <anchor>aa23eeefe101c677ebeeae6c4ac482f5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RungeKutta2Integrator</name>
    <filename>classSimTK_1_1RungeKutta2Integrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>RungeKutta2Integrator</name>
      <anchorfile>classSimTK_1_1RungeKutta2Integrator.html</anchorfile>
      <anchor>ad067af0599840b8bb6f07c0c60d4b8f5</anchor>
      <arglist>(const System &amp;sys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RungeKutta3Integrator</name>
    <filename>classSimTK_1_1RungeKutta3Integrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>RungeKutta3Integrator</name>
      <anchorfile>classSimTK_1_1RungeKutta3Integrator.html</anchorfile>
      <anchor>ab07beca105c8e21d938eee4bfa4f7984</anchor>
      <arglist>(const System &amp;sys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RungeKuttaFeldbergIntegrator</name>
    <filename>classSimTK_1_1RungeKuttaFeldbergIntegrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>RungeKuttaFeldbergIntegrator</name>
      <anchorfile>classSimTK_1_1RungeKuttaFeldbergIntegrator.html</anchorfile>
      <anchor>a53edd0fdcf692731cc17ca6911169ddf</anchor>
      <arglist>(const System &amp;sys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::RungeKuttaMersonIntegrator</name>
    <filename>classSimTK_1_1RungeKuttaMersonIntegrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>RungeKuttaMersonIntegrator</name>
      <anchorfile>classSimTK_1_1RungeKuttaMersonIntegrator.html</anchorfile>
      <anchor>a58807f61b76eaca2e15fe130f54726ba</anchor>
      <arglist>(const System &amp;sys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SemiExplicitEuler2Integrator</name>
    <filename>classSimTK_1_1SemiExplicitEuler2Integrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>SemiExplicitEuler2Integrator</name>
      <anchorfile>classSimTK_1_1SemiExplicitEuler2Integrator.html</anchorfile>
      <anchor>a3176f7dbe277dd9a51c72a3e0503f4e1</anchor>
      <arglist>(const System &amp;sys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::SemiExplicitEulerIntegrator</name>
    <filename>classSimTK_1_1SemiExplicitEulerIntegrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>SemiExplicitEulerIntegrator</name>
      <anchorfile>classSimTK_1_1SemiExplicitEulerIntegrator.html</anchorfile>
      <anchor>ac7d19dc9bb01f48f195248603440f09e</anchor>
      <arglist>(const System &amp;sys, Real stepSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::TimeStepper</name>
    <filename>classSimTK_1_1TimeStepper.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeStepper</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>ada4ed631ac2d9091ddbf93a0e44fdebb</anchor>
      <arglist>(const System &amp;system)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeStepper</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a79c1cdfc26769c8f9574aacd81021492</anchor>
      <arglist>(const System &amp;system, Integrator &amp;integrator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeStepper</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>ae7e9d2e6030458304d54c3a5b53c9032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntegrator</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a0ee3f13fb117adee759cd829e0a228a6</anchor>
      <arglist>(Integrator &amp;integrator)</arglist>
    </member>
    <member kind="function">
      <type>const Integrator &amp;</type>
      <name>getIntegrator</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a60b97697411d21677cc94e226fef171b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integrator &amp;</type>
      <name>updIntegrator</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a691c6ef0218dffa0c5299cda56b4dfa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getReportAllSignificantStates</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a996bb0f6a10c95dbe39c67aaf5794c6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReportAllSignificantStates</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a1319e22317aca673bd59a67d04a883f1</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a9787400aa4be3d767eaa749720b04e68</anchor>
      <arglist>(const State &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>getState</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a8d399e4870bb2254931f4c5f5a2b5916</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>getTime</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>acb444561eff987b0085d76b733209bc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integrator::SuccessfulStepStatus</type>
      <name>stepTo</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a98bfb66f1d7ef218f3e31385609f99cb</anchor>
      <arglist>(Real time)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TimeStepperRep</name>
      <anchorfile>classSimTK_1_1TimeStepper.html</anchorfile>
      <anchor>a2f3a559f8685f8ba8ffcd31844dc46d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::VerletIntegrator</name>
    <filename>classSimTK_1_1VerletIntegrator.html</filename>
    <base>SimTK::Integrator</base>
    <member kind="function">
      <type></type>
      <name>VerletIntegrator</name>
      <anchorfile>classSimTK_1_1VerletIntegrator.html</anchorfile>
      <anchor>a2295adcf7c4dcc5c89136d384e3904dd</anchor>
      <arglist>(const System &amp;sys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerletIntegrator</name>
      <anchorfile>classSimTK_1_1VerletIntegrator.html</anchorfile>
      <anchor>a35d854b7b642447a0f244a255c176206</anchor>
      <arglist>(const System &amp;sys, Real stepSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::CableObstacleIndex</name>
    <filename>classSimTK_1_1CableObstacleIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::CablePathIndex</name>
    <filename>classSimTK_1_1CablePathIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizedBodyIndex</name>
    <filename>classSimTK_1_1MobilizedBodyIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::ConstraintIndex</name>
    <filename>classSimTK_1_1ConstraintIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizerQIndex</name>
    <filename>classSimTK_1_1MobilizerQIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::MobilizerUIndex</name>
    <filename>classSimTK_1_1MobilizerUIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::ForceIndex</name>
    <filename>classSimTK_1_1ForceIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::EventId</name>
    <filename>classSimTK_1_1EventId.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemEventTriggerIndex</name>
    <filename>classSimTK_1_1SystemEventTriggerIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemEventTriggerByStageIndex</name>
    <filename>classSimTK_1_1SystemEventTriggerByStageIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::EventTriggerByStageIndex</name>
    <filename>classSimTK_1_1EventTriggerByStageIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SubsystemIndex</name>
    <filename>classSimTK_1_1SubsystemIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemYIndex</name>
    <filename>classSimTK_1_1SystemYIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemQIndex</name>
    <filename>classSimTK_1_1SystemQIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::QIndex</name>
    <filename>classSimTK_1_1QIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemUIndex</name>
    <filename>classSimTK_1_1SystemUIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::UIndex</name>
    <filename>classSimTK_1_1UIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemZIndex</name>
    <filename>classSimTK_1_1SystemZIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::ZIndex</name>
    <filename>classSimTK_1_1ZIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::DiscreteVariableIndex</name>
    <filename>classSimTK_1_1DiscreteVariableIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::CacheEntryIndex</name>
    <filename>classSimTK_1_1CacheEntryIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemYErrIndex</name>
    <filename>classSimTK_1_1SystemYErrIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemQErrIndex</name>
    <filename>classSimTK_1_1SystemQErrIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::QErrIndex</name>
    <filename>classSimTK_1_1QErrIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemUErrIndex</name>
    <filename>classSimTK_1_1SystemUErrIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::UErrIndex</name>
    <filename>classSimTK_1_1UErrIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemUDotErrIndex</name>
    <filename>classSimTK_1_1SystemUDotErrIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::UDotErrIndex</name>
    <filename>classSimTK_1_1UDotErrIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::SystemMultiplierIndex</name>
    <filename>classSimTK_1_1SystemMultiplierIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::MultiplierIndex</name>
    <filename>classSimTK_1_1MultiplierIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactSurfaceIndex</name>
    <filename>classSimTK_1_1ContactSurfaceIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactId</name>
    <filename>classSimTK_1_1ContactId.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactTypeId</name>
    <filename>classSimTK_1_1ContactTypeId.html</filename>
  </compound>
  <compound kind="class">
    <name>SimTK::ContactGeometryTypeId</name>
    <filename>classSimTK_1_1ContactGeometryTypeId.html</filename>
  </compound>
  <compound kind="namespace">
    <name>SimTK::Exception</name>
    <filename>namespaceSimTK_1_1Exception.html</filename>
    <class kind="class">SimTK::Exception::APIMethodFailed</class>
    <class kind="class">SimTK::Exception::RepLevelException</class>
    <class kind="class">SimTK::Exception::MobilizerCantExactlyRepresentRequestedQuantity</class>
    <class kind="class">SimTK::Exception::NewtonRaphsonFailure</class>
    <class kind="class">SimTK::Exception::LoopConstraintConstructionFailure</class>
    <class kind="class">SimTK::Exception::Base</class>
    <class kind="class">SimTK::Exception::Assert</class>
    <class kind="class">SimTK::Exception::ErrorCheck</class>
    <class kind="class">SimTK::Exception::APIArgcheckFailed</class>
    <class kind="class">SimTK::Exception::IndexOutOfRange</class>
    <class kind="class">SimTK::Exception::SizeOutOfRange</class>
    <class kind="class">SimTK::Exception::SizeWasNegative</class>
    <class kind="class">SimTK::Exception::ValueOutOfRange</class>
    <class kind="class">SimTK::Exception::ValueWasNegative</class>
    <class kind="class">SimTK::Exception::UnimplementedMethod</class>
    <class kind="class">SimTK::Exception::UnimplementedVirtualMethod</class>
    <class kind="class">SimTK::Exception::IncompatibleValues</class>
    <class kind="class">SimTK::Exception::OperationNotAllowedOnView</class>
    <class kind="class">SimTK::Exception::OperationNotAllowedOnOwner</class>
    <class kind="class">SimTK::Exception::OperationNotAllowedOnNonconstReadOnlyView</class>
    <class kind="class">SimTK::Exception::Cant</class>
    <class kind="class">SimTK::Exception::RealizeTopologyMustBeCalledFirst</class>
    <class kind="class">SimTK::Exception::StateAndSystemTopologyVersionsMustMatch</class>
    <class kind="class">SimTK::Exception::StageTooLow</class>
    <class kind="class">SimTK::Exception::StageIsWrong</class>
    <class kind="class">SimTK::Exception::StageTooHigh</class>
    <class kind="class">SimTK::Exception::StageOutOfRange</class>
    <class kind="class">SimTK::Exception::CacheEntryOutOfDate</class>
    <class kind="class">SimTK::Exception::RealizeCheckFailed</class>
    <class kind="class">SimTK::Exception::OptimizerFailed</class>
    <class kind="class">SimTK::Exception::UnrecognizedParameter</class>
    <class kind="class">SimTK::Exception::IllegalLapackArg</class>
    <class kind="class">SimTK::Exception::IncorrectArrayLength</class>
    <class kind="class">SimTK::Exception::SingularMatrix</class>
    <class kind="class">SimTK::Exception::ConvergedFailed</class>
    <class kind="class">SimTK::Exception::NotPositiveDefinite</class>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::APIMethodFailed</name>
    <filename>classSimTK_1_1Exception_1_1APIMethodFailed.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>APIMethodFailed</name>
      <anchorfile>classSimTK_1_1Exception_1_1APIMethodFailed.html</anchorfile>
      <anchor>aba095108a66ad562a4a776c57e1ec5be</anchor>
      <arglist>(const char *fn, int ln, String method, String cause)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::RepLevelException</name>
    <filename>classSimTK_1_1Exception_1_1RepLevelException.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>RepLevelException</name>
      <anchorfile>classSimTK_1_1Exception_1_1RepLevelException.html</anchorfile>
      <anchor>a6312cf5f6073e4dfece33cbfef5100db</anchor>
      <arglist>(const char *fn, int ln, String message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::MobilizerCantExactlyRepresentRequestedQuantity</name>
    <filename>classSimTK_1_1Exception_1_1MobilizerCantExactlyRepresentRequestedQuantity.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>MobilizerCantExactlyRepresentRequestedQuantity</name>
      <anchorfile>classSimTK_1_1Exception_1_1MobilizerCantExactlyRepresentRequestedQuantity.html</anchorfile>
      <anchor>aac48d9fafdef262a9614dcdc4fae0470</anchor>
      <arglist>(const char *fn, int ln, String method, MobilizedBodyIndex body, String quantity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::NewtonRaphsonFailure</name>
    <filename>classSimTK_1_1Exception_1_1NewtonRaphsonFailure.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>NewtonRaphsonFailure</name>
      <anchorfile>classSimTK_1_1Exception_1_1NewtonRaphsonFailure.html</anchorfile>
      <anchor>af3f701e9a780c8884e5e2ea975f35dc3</anchor>
      <arglist>(const char *fn, int ln, String msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::LoopConstraintConstructionFailure</name>
    <filename>classSimTK_1_1Exception_1_1LoopConstraintConstructionFailure.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>LoopConstraintConstructionFailure</name>
      <anchorfile>classSimTK_1_1Exception_1_1LoopConstraintConstructionFailure.html</anchorfile>
      <anchor>a15453b2b95d666997df45857314bdd1e</anchor>
      <arglist>(const char *fn, int ln, String msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::Base</name>
    <filename>classSimTK_1_1Exception_1_1Base.html</filename>
    <member kind="function">
      <type></type>
      <name>Base</name>
      <anchorfile>classSimTK_1_1Exception_1_1Base.html</anchorfile>
      <anchor>a689b1a4534a6870aac5056da43a7390b</anchor>
      <arglist>(const char *fn=&quot;&lt;UNKNOWN&gt;&quot;, int ln=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Base</name>
      <anchorfile>classSimTK_1_1Exception_1_1Base.html</anchorfile>
      <anchor>a3d477d8c5468721c9c099d7a86ccaa94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getMessage</name>
      <anchorfile>classSimTK_1_1Exception_1_1Base.html</anchorfile>
      <anchor>aac62881d11db5902030a51be7c96c802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getMessageText</name>
      <anchorfile>classSimTK_1_1Exception_1_1Base.html</anchorfile>
      <anchor>a5d6b3228237b4cbb72f4ae68baa9745f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classSimTK_1_1Exception_1_1Base.html</anchorfile>
      <anchor>a0fe7f45a795322d1a81432b448ac216e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setMessage</name>
      <anchorfile>classSimTK_1_1Exception_1_1Base.html</anchorfile>
      <anchor>aa153e869c1d908b77cc3310bcf5059d7</anchor>
      <arglist>(const std::string &amp;msgin)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::Assert</name>
    <filename>classSimTK_1_1Exception_1_1Assert.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>Assert</name>
      <anchorfile>classSimTK_1_1Exception_1_1Assert.html</anchorfile>
      <anchor>a798d301e1ef46278f92f98636c4b6b65</anchor>
      <arglist>(const char *fn, int ln, const char *assertion, const char *fmt...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Assert</name>
      <anchorfile>classSimTK_1_1Exception_1_1Assert.html</anchorfile>
      <anchor>ac7cdcb5db79f2887abee52d47e864116</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::ErrorCheck</name>
    <filename>classSimTK_1_1Exception_1_1ErrorCheck.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>ErrorCheck</name>
      <anchorfile>classSimTK_1_1Exception_1_1ErrorCheck.html</anchorfile>
      <anchor>a908e0a70afec59fc0e1f655469819876</anchor>
      <arglist>(const char *fn, int ln, const char *assertion, const char *whereChecked, const char *fmt...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ErrorCheck</name>
      <anchorfile>classSimTK_1_1Exception_1_1ErrorCheck.html</anchorfile>
      <anchor>a9586ed81ef007d50d29377cfedb5c8c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::APIArgcheckFailed</name>
    <filename>classSimTK_1_1Exception_1_1APIArgcheckFailed.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>APIArgcheckFailed</name>
      <anchorfile>classSimTK_1_1Exception_1_1APIArgcheckFailed.html</anchorfile>
      <anchor>a9cab83a5109a651549a6e6b4a5a83599</anchor>
      <arglist>(const char *fn, int ln, const char *assertion, const char *className, const char *methodName, const char *fmt...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~APIArgcheckFailed</name>
      <anchorfile>classSimTK_1_1Exception_1_1APIArgcheckFailed.html</anchorfile>
      <anchor>a9d9d37d3827745b7124e23c39c886109</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::IndexOutOfRange</name>
    <filename>classSimTK_1_1Exception_1_1IndexOutOfRange.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>IndexOutOfRange</name>
      <anchorfile>classSimTK_1_1Exception_1_1IndexOutOfRange.html</anchorfile>
      <anchor>a6cae303a31b27d84c0907195cbe0c98b</anchor>
      <arglist>(const char *fn, int ln, const char *indexName, long long lb, long long index, long long ub, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexOutOfRange</name>
      <anchorfile>classSimTK_1_1Exception_1_1IndexOutOfRange.html</anchorfile>
      <anchor>a6468cd4368145c2ba5c52a1169011963</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::SizeOutOfRange</name>
    <filename>classSimTK_1_1Exception_1_1SizeOutOfRange.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>SizeOutOfRange</name>
      <anchorfile>classSimTK_1_1Exception_1_1SizeOutOfRange.html</anchorfile>
      <anchor>a35403dbc36397043b37e2ae57edb32ee</anchor>
      <arglist>(const char *fn, int ln, const char *szName, unsigned long long sz, unsigned long long maxsz, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SizeOutOfRange</name>
      <anchorfile>classSimTK_1_1Exception_1_1SizeOutOfRange.html</anchorfile>
      <anchor>a7e71b190a47dcbe78887c725e3ca51b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::SizeWasNegative</name>
    <filename>classSimTK_1_1Exception_1_1SizeWasNegative.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>SizeWasNegative</name>
      <anchorfile>classSimTK_1_1Exception_1_1SizeWasNegative.html</anchorfile>
      <anchor>a8fd8a3138f3aa4649e7c10b9eb280eb9</anchor>
      <arglist>(const char *fn, int ln, const char *szName, unsigned long long sz, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SizeWasNegative</name>
      <anchorfile>classSimTK_1_1Exception_1_1SizeWasNegative.html</anchorfile>
      <anchor>a43e6c4d34dcf9f115feb020e982fd07a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::ValueOutOfRange</name>
    <filename>classSimTK_1_1Exception_1_1ValueOutOfRange.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>ValueOutOfRange</name>
      <anchorfile>classSimTK_1_1Exception_1_1ValueOutOfRange.html</anchorfile>
      <anchor>ab5fe8da1b01b33016f9c391cb5f95492</anchor>
      <arglist>(const char *fn, int ln, const char *valueName, double lowerBound, double value, double upperBound, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValueOutOfRange</name>
      <anchorfile>classSimTK_1_1Exception_1_1ValueOutOfRange.html</anchorfile>
      <anchor>a368177d32e15f0b92a49147998a77d25</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::ValueWasNegative</name>
    <filename>classSimTK_1_1Exception_1_1ValueWasNegative.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>ValueWasNegative</name>
      <anchorfile>classSimTK_1_1Exception_1_1ValueWasNegative.html</anchorfile>
      <anchor>a890d377be6bea9ccd0c6bbda1512d9b6</anchor>
      <arglist>(const char *fn, int ln, const char *valueName, double value, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValueWasNegative</name>
      <anchorfile>classSimTK_1_1Exception_1_1ValueWasNegative.html</anchorfile>
      <anchor>a8aafbbb7a943eb68bd649fb8b0f7ab42</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::UnimplementedMethod</name>
    <filename>classSimTK_1_1Exception_1_1UnimplementedMethod.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>UnimplementedMethod</name>
      <anchorfile>classSimTK_1_1Exception_1_1UnimplementedMethod.html</anchorfile>
      <anchor>a5567948830d578cd7509e2b091b7e128</anchor>
      <arglist>(const char *fn, int ln, std::string methodName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnimplementedMethod</name>
      <anchorfile>classSimTK_1_1Exception_1_1UnimplementedMethod.html</anchorfile>
      <anchor>a892647763164ed4c026bc6b06450c9d6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::UnimplementedVirtualMethod</name>
    <filename>classSimTK_1_1Exception_1_1UnimplementedVirtualMethod.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>UnimplementedVirtualMethod</name>
      <anchorfile>classSimTK_1_1Exception_1_1UnimplementedVirtualMethod.html</anchorfile>
      <anchor>a62d336134af10a9ad6e471d5b4f7a5ae</anchor>
      <arglist>(const char *fn, int ln, std::string baseClass, std::string methodName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnimplementedVirtualMethod</name>
      <anchorfile>classSimTK_1_1Exception_1_1UnimplementedVirtualMethod.html</anchorfile>
      <anchor>a663746ec1120440d3222530dc0dd9570</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::IncompatibleValues</name>
    <filename>classSimTK_1_1Exception_1_1IncompatibleValues.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>IncompatibleValues</name>
      <anchorfile>classSimTK_1_1Exception_1_1IncompatibleValues.html</anchorfile>
      <anchor>a348d51dd42291113bf39215bc53d108c</anchor>
      <arglist>(const char *fn, int ln, std::string src, std::string dest)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IncompatibleValues</name>
      <anchorfile>classSimTK_1_1Exception_1_1IncompatibleValues.html</anchorfile>
      <anchor>a6c9b41dad64327c267ffe59755087caa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::OperationNotAllowedOnView</name>
    <filename>classSimTK_1_1Exception_1_1OperationNotAllowedOnView.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>OperationNotAllowedOnView</name>
      <anchorfile>classSimTK_1_1Exception_1_1OperationNotAllowedOnView.html</anchorfile>
      <anchor>a14dd25ea463dd6bebc5d899850defbe6</anchor>
      <arglist>(const char *fn, int ln, const std::string &amp;op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OperationNotAllowedOnView</name>
      <anchorfile>classSimTK_1_1Exception_1_1OperationNotAllowedOnView.html</anchorfile>
      <anchor>a73acef75d694315512fa1bc169d7054b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::OperationNotAllowedOnOwner</name>
    <filename>classSimTK_1_1Exception_1_1OperationNotAllowedOnOwner.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>OperationNotAllowedOnOwner</name>
      <anchorfile>classSimTK_1_1Exception_1_1OperationNotAllowedOnOwner.html</anchorfile>
      <anchor>aa89144978156319f1d55155626393c95</anchor>
      <arglist>(const char *fn, int ln, const std::string &amp;op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OperationNotAllowedOnOwner</name>
      <anchorfile>classSimTK_1_1Exception_1_1OperationNotAllowedOnOwner.html</anchorfile>
      <anchor>a38bd67c8a183e0565897b6ff155fd5ef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::OperationNotAllowedOnNonconstReadOnlyView</name>
    <filename>classSimTK_1_1Exception_1_1OperationNotAllowedOnNonconstReadOnlyView.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>OperationNotAllowedOnNonconstReadOnlyView</name>
      <anchorfile>classSimTK_1_1Exception_1_1OperationNotAllowedOnNonconstReadOnlyView.html</anchorfile>
      <anchor>a3901ceb68d972dc0f4a8919b8b81b5f3</anchor>
      <arglist>(const char *fn, int ln, const std::string &amp;op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OperationNotAllowedOnNonconstReadOnlyView</name>
      <anchorfile>classSimTK_1_1Exception_1_1OperationNotAllowedOnNonconstReadOnlyView.html</anchorfile>
      <anchor>a31d6b360dfdaac7d4b9a31651448c385</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::Cant</name>
    <filename>classSimTK_1_1Exception_1_1Cant.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>Cant</name>
      <anchorfile>classSimTK_1_1Exception_1_1Cant.html</anchorfile>
      <anchor>a06b1aaefc3102b3cc2448e2dd3e24c00</anchor>
      <arglist>(const char *fn, int ln, const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cant</name>
      <anchorfile>classSimTK_1_1Exception_1_1Cant.html</anchorfile>
      <anchor>a53f1d361e2d3951af2ae0c8603bc33d0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::RealizeTopologyMustBeCalledFirst</name>
    <filename>classSimTK_1_1Exception_1_1RealizeTopologyMustBeCalledFirst.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>RealizeTopologyMustBeCalledFirst</name>
      <anchorfile>classSimTK_1_1Exception_1_1RealizeTopologyMustBeCalledFirst.html</anchorfile>
      <anchor>a6ea4c719b75eb9367fe492b16260fa9f</anchor>
      <arglist>(const char *fn, int ln, const char *objectType, const char *objectName, const char *methodName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RealizeTopologyMustBeCalledFirst</name>
      <anchorfile>classSimTK_1_1Exception_1_1RealizeTopologyMustBeCalledFirst.html</anchorfile>
      <anchor>a9aacfbffc2b9b5a5fff72cfa788e931c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::StateAndSystemTopologyVersionsMustMatch</name>
    <filename>classSimTK_1_1Exception_1_1StateAndSystemTopologyVersionsMustMatch.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>StateAndSystemTopologyVersionsMustMatch</name>
      <anchorfile>classSimTK_1_1Exception_1_1StateAndSystemTopologyVersionsMustMatch.html</anchorfile>
      <anchor>a0269bd06459eb207e870a60ce1214a7a</anchor>
      <arglist>(const char *fn, int ln, const char *objectType, const char *objectName, const char *methodName, int sysTopoVersion, int stateTopoVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StateAndSystemTopologyVersionsMustMatch</name>
      <anchorfile>classSimTK_1_1Exception_1_1StateAndSystemTopologyVersionsMustMatch.html</anchorfile>
      <anchor>a6abaee0b72cced835c9c44b979b31b87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::StageTooLow</name>
    <filename>classSimTK_1_1Exception_1_1StageTooLow.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>StageTooLow</name>
      <anchorfile>classSimTK_1_1Exception_1_1StageTooLow.html</anchorfile>
      <anchor>a88e644d0b6b8bd922d29a616e82c516b</anchor>
      <arglist>(const char *fn, int ln, Stage currentStage, Stage targetStage, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StageTooLow</name>
      <anchorfile>classSimTK_1_1Exception_1_1StageTooLow.html</anchorfile>
      <anchor>ae840c80798ba1a6f90fcbcfe9cd597c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::StageIsWrong</name>
    <filename>classSimTK_1_1Exception_1_1StageIsWrong.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>StageIsWrong</name>
      <anchorfile>classSimTK_1_1Exception_1_1StageIsWrong.html</anchorfile>
      <anchor>a2ae902e6b6da01a463c3f5ae7e44e485</anchor>
      <arglist>(const char *fn, int ln, Stage currentStage, Stage targetStage, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StageIsWrong</name>
      <anchorfile>classSimTK_1_1Exception_1_1StageIsWrong.html</anchorfile>
      <anchor>ad7ad20dbe2317d670de301afbdd3f929</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::StageTooHigh</name>
    <filename>classSimTK_1_1Exception_1_1StageTooHigh.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>StageTooHigh</name>
      <anchorfile>classSimTK_1_1Exception_1_1StageTooHigh.html</anchorfile>
      <anchor>a1aa9eaa4d8f2f04a492cfac8e93ce98c</anchor>
      <arglist>(const char *fn, int ln, Stage currentStage, Stage targetStage, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StageTooHigh</name>
      <anchorfile>classSimTK_1_1Exception_1_1StageTooHigh.html</anchorfile>
      <anchor>a9101462b1ab1f4552faf3d0556667638</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::StageOutOfRange</name>
    <filename>classSimTK_1_1Exception_1_1StageOutOfRange.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>StageOutOfRange</name>
      <anchorfile>classSimTK_1_1Exception_1_1StageOutOfRange.html</anchorfile>
      <anchor>a379b9941bb1afdd49c3144fb28d74f5c</anchor>
      <arglist>(const char *fn, int ln, Stage lower, Stage currentStage, Stage upper, const char *where)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StageOutOfRange</name>
      <anchorfile>classSimTK_1_1Exception_1_1StageOutOfRange.html</anchorfile>
      <anchor>af9dbcf2af4a53711047ecbeb42347d16</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::CacheEntryOutOfDate</name>
    <filename>classSimTK_1_1Exception_1_1CacheEntryOutOfDate.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>CacheEntryOutOfDate</name>
      <anchorfile>classSimTK_1_1Exception_1_1CacheEntryOutOfDate.html</anchorfile>
      <anchor>a378c8e812203f34be6a144b0be6e7828</anchor>
      <arglist>(const char *fn, int ln, Stage currentStage, Stage dependsOn, int dependsOnVersion, int lastCalculatedVersion)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CacheEntryOutOfDate</name>
      <anchorfile>classSimTK_1_1Exception_1_1CacheEntryOutOfDate.html</anchorfile>
      <anchor>a77b001b74f8c4aa934264b65d19e0c36</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::RealizeCheckFailed</name>
    <filename>classSimTK_1_1Exception_1_1RealizeCheckFailed.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>RealizeCheckFailed</name>
      <anchorfile>classSimTK_1_1Exception_1_1RealizeCheckFailed.html</anchorfile>
      <anchor>aca44467c55e8dc0420488bc9ad144a9f</anchor>
      <arglist>(const char *fn, int ln, Stage g, int subsystemId, const char *subsystemName, const char *fmt...)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RealizeCheckFailed</name>
      <anchorfile>classSimTK_1_1Exception_1_1RealizeCheckFailed.html</anchorfile>
      <anchor>a45e08233e7f335f59971d2fb5b67ecd4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::OptimizerFailed</name>
    <filename>classSimTK_1_1Exception_1_1OptimizerFailed.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>OptimizerFailed</name>
      <anchorfile>classSimTK_1_1Exception_1_1OptimizerFailed.html</anchorfile>
      <anchor>a3d6e5f9f44b6a384d32544f09f06c579</anchor>
      <arglist>(const char *fn, int ln, String msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::UnrecognizedParameter</name>
    <filename>classSimTK_1_1Exception_1_1UnrecognizedParameter.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>UnrecognizedParameter</name>
      <anchorfile>classSimTK_1_1Exception_1_1UnrecognizedParameter.html</anchorfile>
      <anchor>a713b9a4cb8e7da53746903e7712ce079</anchor>
      <arglist>(const char *fn, int ln, String msg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::IllegalLapackArg</name>
    <filename>classSimTK_1_1Exception_1_1IllegalLapackArg.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>IllegalLapackArg</name>
      <anchorfile>classSimTK_1_1Exception_1_1IllegalLapackArg.html</anchorfile>
      <anchor>ae0b10426ee108903a64530e7ac982268</anchor>
      <arglist>(const char *fn, int ln, const char *lapackRoutine, int info)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::IncorrectArrayLength</name>
    <filename>classSimTK_1_1Exception_1_1IncorrectArrayLength.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>IncorrectArrayLength</name>
      <anchorfile>classSimTK_1_1Exception_1_1IncorrectArrayLength.html</anchorfile>
      <anchor>ad3132256aa32632f5967e442bbb1a6f1</anchor>
      <arglist>(const char *fn, int ln, const char *valueName, int length, const char *paramName, int paramValue, const char *where)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::SingularMatrix</name>
    <filename>classSimTK_1_1Exception_1_1SingularMatrix.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>SingularMatrix</name>
      <anchorfile>classSimTK_1_1Exception_1_1SingularMatrix.html</anchorfile>
      <anchor>a93fb76d360f14ebdaca39101aabe8953</anchor>
      <arglist>(const char *fn, int ln, int index, const char *where)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::ConvergedFailed</name>
    <filename>classSimTK_1_1Exception_1_1ConvergedFailed.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>ConvergedFailed</name>
      <anchorfile>classSimTK_1_1Exception_1_1ConvergedFailed.html</anchorfile>
      <anchor>a7fcad9b29052f8b2b1f4f47d73c138b0</anchor>
      <arglist>(const char *fn, int ln, const char *algorithm, const char *where)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimTK::Exception::NotPositiveDefinite</name>
    <filename>classSimTK_1_1Exception_1_1NotPositiveDefinite.html</filename>
    <base>SimTK::Exception::Base</base>
    <member kind="function">
      <type></type>
      <name>NotPositiveDefinite</name>
      <anchorfile>classSimTK_1_1Exception_1_1NotPositiveDefinite.html</anchorfile>
      <anchor>a8c238be80a4453d914cb15dd293601fc</anchor>
      <arglist>(const char *fn, int ln, int index, const char *where)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SimTK::Impl</name>
    <filename>namespaceSimTK_1_1Impl.html</filename>
    <member kind="function">
      <type>void</type>
      <name>conformingAdd</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a863cb805509416e0e564c532faf1cf03</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2, Row&lt; 1, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conformingAdd</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a43b36c44295959c17fa58b0758df6cf5</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2, Row&lt; N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Add &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conformingSubtract</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a4e8ea3dbdc2198b2f9f9c508077edd91</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2, Row&lt; 1, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conformingSubtract</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a38c70de1e254c0d608cf446c76b63dc6</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2, Row&lt; N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Sub &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiply</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>ac4d35b8308f45851e1100c600ab94344</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2, Row&lt; 1, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseMultiply</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a32cd95c189f6b8a7494cdb95bf44758c</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2, Row&lt; N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Mul &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivide</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a2b8ba3dbd4c81b2d69e2ee9e640d3dc2</anchor>
      <arglist>(const Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2, Row&lt; 1, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Dvd &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>elementwiseDivide</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>ad5438b135982e740122bbbb79caee553</anchor>
      <arglist>(const Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2, Row&lt; N, typename CNT&lt; E1 &gt;::template Result&lt; E2 &gt;::Dvd &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a0395ac7c179ad303ca72fc7626ff7a3e</anchor>
      <arglist>(Row&lt; 1, E1, S1 &gt; &amp;r1, const Row&lt; 1, E2, S2 &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>namespaceSimTK_1_1Impl.html</anchorfile>
      <anchor>a7898463bb3cc74612fa7d29e64413995</anchor>
      <arglist>(Row&lt; N, E1, S1 &gt; &amp;r1, const Row&lt; N, E2, S2 &gt; &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Simbody&amp;tm; API Reference Documentation</title>
    <filename>index</filename>
  </compound>
</tagfile>
