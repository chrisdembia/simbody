# This script is used by the Travis-CI (continuous integration) testing
# framework to run Simbody's tests with every GitHub push or pull-request.
language: cpp

env:
  # Each line is a separate build in the build matrix. A build in the build
  # matrix is defined by the environment variables defined on the line, which
  # should be space-delimited. For example,
  # - ABC=ON DEF=OFF GHI=ON
  - CPP11=OFF BTYPE=Release
  - CPP11=ON BTYPE=Release
  - CPP11=OFF BTYPE=Debug
  - CPP11=ON BTYPE=Debug

compiler:
  - gcc
  - clang

before_install:
  ## Dependencies for Simbody.
  - sudo apt-get update
  - sudo apt-get install liblapack-dev

  ## C++11 and gcc. Update to gcc 4.8, which provides full C++11 support.
  ## We use this script because if building Simbody with C++11, we need
  ## gcc-4.8, and the Travis Ubuntu 12.04 machines have an older version of gcc.
  ## See https://github.com/travis-ci/travis-ci/issues/979.
  - if [[ "$CPP11" = "ON" && "$CXX" = "g++" ]]; then GCC48=1; else GCC48=0; fi
  - if [ $GCC48 = 1 ]; then sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y; fi
  - if [ $GCC48 = 1 ]; then sudo apt-get update -qq; fi
  - if [ $GCC48 = 1 ]; then sudo apt-get install -qq g++-4.8; fi
  - if [ $GCC48 = 1 ]; then export CXX="g++-4.8" CC="gcc-4.8"; fi

  ## C++11 and Clang. We need libc++, which we build from source.
  - if [[ "$CPP11" = "ON" && "$CXX" = "clang++" ]]; then LIBCXX=1; else LIBCXX=0; fi
  # Download the release of libc++.
  - if [ $LIBCXX = 1 ]; then wget http://llvm.org/releases/3.4/libcxx-3.4.src.tar.gz; fi
  # Unzip.
  - if [ $LIBCXX = 1 ]; then tar -xzf libcxx-3.4.src.tar.gz; fi
  # Build. pushd saves the pwd and cd's into the provided directory.
  - if [ $LIBCXX = 1 ]; then pushd libcxx-3.4/lib && bash buildit; fi
  # Install.
  - if [ $LIBCXX = 1 ]; then sudo cp ./libc++.so.1.0 /usr/lib; fi
  - if [ $LIBCXX = 1 ]; then sudo mkdir /usr/include/c++/v1; fi
  - if [ $LIBCXX = 1 ]; then cd .. && sudo cp -r include/* /usr/include/c++/v1/; fi
  - if [ $LIBCXX = 1 ]; then cd /usr/lib && sudo ln -sf libc++.so.1.0 libc++.so; fi
  - if [ $LIBCXX = 1 ]; then sudo ln -sf libc++.so.1.0 libc++.so.1; fi
  # Change directory back to the simbody source. popd cd's into the directory
  # saved by the preceding pushd.
  - if [ $LIBCXX = 1 ]; then popd; fi

install:
  - cmake . -DBUILD_VISUALIZER=OFF -DSIMBODY_STANDARD_11=$CPP11 -DCMAKE_BUILD_TYPE=$BTYPE -DCMAKE_CXX_FLAGS=-Werror
  - make -j8

script:
  - ctest -j8
